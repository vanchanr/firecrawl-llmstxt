# http://Openfga.dev llms-full.txt

## OpenFGA Authorization Tool
[Skip to main content](https://openfga.dev/#__docusaurus_skipToContent_fallback)

## Quick Start

Trying OpenFGA is as easy as...

Run the following snippet in a terminal in an environment with Docker installed:

```
docker pull openfga/openfga && \
docker run -p 8080:8080 -p 8081:8081 \
-p 3000:3000 openfga/openfga run
```

Copy quick start command to clipboard

OpenFGA will be running at localhost:8080 on your machine. Learn about other options and next steps in the project [README.md](https://github.com/openfga/openfga) or [Getting Started](https://openfga.dev/docs/getting-started) guides.

Learn how to use sample authorization models and create your own with the project’s extensive [documentation](https://openfga.dev/docs/modeling).

## Features

### Model any authorization system

OpenFGA takes the best ideas from Google's Zanzibar paper for Relationship-Based Access Control, and also solves problems for Role-based Access Control and Attribute-Based Access Control use cases. The modeling language is powerful enough for engineers, but friendly enough for other stakeholders on your team as well.

### Works with your code

SDKs for the most popular languages have already been written, making it easy to integrate and grow alongside your applications. OpenFGA also makes it trivial to contribute new SDKs to support your project's language.

### Blazing fast

OpenFGA is designed to answer authorization check calls in milliseconds, which lets it scale with projects of any size. It works just as well for small startups and hobby programmers building single applications as it does for enterprise companies building platforms on a global scale.

### Built in the open

Transparency and peer review are important for building secure, stable, and sustainable software. OpenFGA's [RFC process](https://github.com/openfga/rfcs/blob/main/README.md) and [governance model](https://github.com/openfga/.github/blob/main/CONTRIBUTING.md) invite anyone to become a contributor, and collaboratively develop the [public roadmap](https://github.com/orgs/openfga/projects/1). Come create the next standard for authorization with us!

### CNCF Sandbox Project

We are a [Cloud Native Computing Foundation](https://www.cncf.io/) sandbox project.

### Get Involved

Join OpenFGA's active [Slack and GitHub community](https://openfga.dev/community), check out existing [RFCs](https://github.com/openfga/rfcs) to understand where the project is headed, and learn more about how to take part by reading our [CONTRIBUTING.md](https://github.com/openfga/.github/blob/main/CONTRIBUTING.md).

[Learn how to get involved →](https://github.com/openfga/.github/blob/main/CONTRIBUTING.md#contribution-process)

## Since you're here, you might be interested in some ReBAC resources:

- [Zanzibar Academy →](https://zanzibar.academy/)
- [Okta FGA Playground →](https://play.fga.dev/)
- [Podcast - Authorization in Software →](https://authorizationinsoftware.auth0.com/)

## Authorization Modeling Guide
[Skip to main content](https://openfga.dev/docs/modeling#__docusaurus_skipToContent_fallback)

This section has guides, concepts and examples that help you define an authorization model.

When to use

The content in this section is useful:

- If you are starting with OpenFGA and want to learn how to represent your organization's/system's authorization needs.
- If you are working on iterating on an authorization model you previously defined.

Getting Started

How to create an authorization model for your system starting from the requirements.

- [Click to navigate](https://openfga.dev/docs/modeling/getting-started)

Direct Access

Learn the basics of modeling authorization and granting access to users.

- [Click to navigate](https://openfga.dev/docs/modeling/direct-access)

User Groups

Learn to model user group membership, and to grant access to all members of a group.

- [Click to navigate](https://openfga.dev/docs/modeling/user-groups)

Roles and Permissions

Learn to model roles for users at the object level and model permissions for those roles.

- [Click to navigate](https://openfga.dev/docs/modeling/roles-and-permissions)

Parent-Child objects

Learn to model access based on parent-child relationships, e.g.: folders and documents.

- [Click to navigate](https://openfga.dev/docs/modeling/parent-child)

Block Lists

Learn to model denying access if users are part of list of blocked users.

- [Click to navigate](https://openfga.dev/docs/modeling/blocklists)

Public Access

Learn to model giving everyone specific access to an object, e.g.: everyone can read.

- [Click to navigate](https://openfga.dev/docs/modeling/public-access)

Multiple Restrictions

Learn to model requiring multiple privileges before granting access.

- [Click to navigate](https://openfga.dev/docs/modeling/multiple-restrictions)

Custom Roles

Learn to model custom roles that are created by users.

- [Click to navigate](https://openfga.dev/docs/modeling/custom-roles)

Conditions

Learn to model requiring dynamic attributes.

- [Click to navigate](https://openfga.dev/docs/modeling/conditions)

Contextual and Time-Based Authorization

Learn to model and authorize when IP Address, time, and other dynamic and contextual restrictions are involved.

- [Click to navigate](https://openfga.dev/docs/modeling/contextual-time-based-authorization)

Authorization Through Organization Context

Learn to model and authorize when a user belongs to multiple organizations.

- [Click to navigate](https://openfga.dev/docs/modeling/organization-context-authorization)

Building Blocks

Learn the underlying concepts/building blocks that can be used to build any model.

- [Click to navigate](https://openfga.dev/docs/modeling/building-blocks)

Advanced Use-Cases

Explore advanced use cases and patterns for authorization modeling with OpenFGA.

- [Click to navigate](https://openfga.dev/docs/modeling/advanced)

Migrating

Learn to migrate relations and models in a production environment.

- [Click to navigate](https://openfga.dev/docs/modeling/migrating)

## OpenFGA Community Engagement
[Skip to main content](https://openfga.dev/docs/community#__docusaurus_skipToContent_fallback)

On this page

## Slack (CNCF Community) [​](https://openfga.dev/docs/community\#slack-cncf-community "Direct link to Slack (CNCF Community)")

The OpenFGA community has a channel in the [CNCF](https://cncf.io/) Slack.

If you don't have access to the CNCF Slack you can request an invitation [here](https://slack.cncf.io/). You can join the community in the [#openfga](https://cloud-native.slack.com/archives/C06G1NNH47N) channel.

## GitHub Discussions [​](https://openfga.dev/docs/community\#github-discussions "Direct link to GitHub Discussions")

You can also use [GitHub discussions](https://github.com/orgs/openfga/discussions) to ask questions and submit product ideas.

## X (formerly Twitter) [​](https://openfga.dev/docs/community\#x-formerly-twitter "Direct link to X (formerly Twitter)")

Follow us on X to get the latest updates on all things OpenFGA. [@OpenFGA](https://twitter.com/OpenFGA).

## YouTube [​](https://openfga.dev/docs/community\#youtube "Direct link to YouTube")

Subscribe to [the OpenFGA YouTube Channel](https://www.youtube.com/@OpenFGA) to see our latest videos and recordings.

## LinkedIn [​](https://openfga.dev/docs/community\#linkedin "Direct link to LinkedIn")

Follow us on [LinkedIn](https://www.linkedin.com/company/openfga/) for the latest updates, community highlights, and insights into fine-grained authorization.

## Mastodon [​](https://openfga.dev/docs/community\#mastodon "Direct link to Mastodon")

For the Fediverse fans among you, follow us on Mastodon at [@openfga@mastodon.social](https://mastodon.social/@openfga)!

## Monthly Community Meetings [​](https://openfga.dev/docs/community\#monthly-community-meetings "Direct link to Monthly Community Meetings")

We hold a monthly community meeting on the second Thursday of every month @ [11am Eastern Time (US)](https://www.worldtimebuddy.com/?qm=1&lid=12,100,5,6,8&h=5&sln=11-12&hf=1).

- [Agenda](https://docs.google.com/document/d/1Y6rbD0xpGLVl-7CmeMgxi56_a0ibIQ_RojvWBbT9MZk/edit#)
- [Zoom Link](https://okta.zoom.us/j/92836372678?pwd=aTE0M3JNK0tDQWxHOWdvNnlmWCtYZz09)
- [Recordings of Previous Meetings](https://www.youtube.com/playlist?list=PLUR5l-oTFZqUneyHz-h4WzaJssgxBXdxB)
- [Web Link](https://calendar.google.com/calendar/embed?src=daf2d94b4d60979d468faf274e98d098b03bc08adfaf25d8c27ff0ad8d344f2a%40group.calendar.google.com) \| [ics file](https://calendar.google.com/calendar/ical/38a445a2801a268987d9e566b2b8f60d90bb615c4a9678c7c2c992020a166bf2%40group.calendar.google.com/public/basic.ics)

Read more details [here](https://github.com/openfga/community/blob/main/community-meetings.md)

- [Slack (CNCF Community)](https://openfga.dev/docs/community#slack-cncf-community)
- [GitHub Discussions](https://openfga.dev/docs/community#github-discussions)
- [X (formerly Twitter)](https://openfga.dev/docs/community#x-formerly-twitter)
- [YouTube](https://openfga.dev/docs/community#youtube)
- [LinkedIn](https://openfga.dev/docs/community#linkedin)
- [Mastodon](https://openfga.dev/docs/community#mastodon)
- [Monthly Community Meetings](https://openfga.dev/docs/community#monthly-community-meetings)

## OpenFGA Integration Guide
[Skip to main content](https://openfga.dev/docs/interacting#__docusaurus_skipToContent_fallback)

This section helps you integrate OpenFGA with your system. To do this, you will learn how to programmatically write authorization related data to OpenFGA.

When to use

This section is useful if you have defined an authorization model and want to understand how to write authorization data to OpenFGA to represent the state of your system.

Manage User Access

Write relationship tuples to manage a user's access to an object.

- [Click to navigate](https://openfga.dev/docs/interacting/managing-user-access)

Manage Group Access

Write relationship tuples to manage access to an object for all members of a group.

- [Click to navigate](https://openfga.dev/docs/interacting/managing-group-access)

Manage Group Membership

Write relationship tuples to manage the users that are members of a group.

- [Click to navigate](https://openfga.dev/docs/interacting/managing-group-membership)

Manage Relationships Between Object

Write relationship tuples to manage how two objects are related. E.g. parent folder and child document.

- [Click to navigate](https://openfga.dev/docs/interacting/managing-relationships-between-objects)

Transactional Writes

Write multiple relationship tuples in a single request, so all writes either succeed or fail.

- [Click to navigate](https://openfga.dev/docs/interacting/transactional-writes)

Relationship Queries

An overview of how to use the Check, Read, Expand, and ListObject APIs.

- [Click to navigate](https://openfga.dev/docs/interacting/relationship-queries)

Search with Permissions

Implementing search with OpenFGA.

- [Click to navigate](https://openfga.dev/docs/interacting/search-with-permissions)

## OpenFGA Monthly News
[Skip to main content](https://openfga.dev/blog#__docusaurus_skipToContent_fallback)

Welcome to the second Fine Grained News edition of 2025!

## Just Shipped! [​](https://openfga.dev/blog\#just-shipped "Direct link to Just Shipped!")

- We shipped 3 minor versions of OpenFGA which include:
  - Fixes for [CVE-2025-25196](https://github.com/openfga/openfga/security/advisories/GHSA-g4v5-6f5p-m38j) and [CVE-2024-56323](https://github.com/openfga/openfga/security/advisories/GHSA-32q6-rr98-cjqv)

  - Several performance improvements that are enabled with the `enable-check-optimizations` experimental flag.

  - Dynamic TLS certificate reloading for HTTP and gRPC servers. Thanks [Rokibul Hasan](https://github.com/RokibulHasan7) for your contribution!

  - A `name` filter to ListStores. The name parameter instructs the API to only include results that match that name. Thanks [Karl Persson](https://github.com/kalleep) for your contribution!

  - Optimized database dialect handling by setting it during initialization instead of per-call, fixing SQL syntax errors in MySQL. Thanks [Siddhant Khare](https://github.com/Siddhant-K-code) for your contribution!

  - Support for Go 1.24. We follow Go's version support policy and will only support the latest two major versions of Go. Now that Go 1.24 is out, we have dropped support for Go < 1.23.
- Two minor versions of the [Java SDK](https://github.com/openfga/java-sdk), with support for server-side [BatchCheck](https://github.com/openfga/js-sdk?tab=readme-ov-file#batch-check). Thanks [Piotr Olaszewski](https://github.com/piotrooo) for your contribution!

- A minor release of the [Go SDK](https://github.com/openfga/go-sdk), with support for the `StartTime` parameter in the [ReadChanges method](https://github.com/openfga/go-sdk?tab=readme-ov-file#read-relationship-tuple-changes-watch) and support for specifying contextual tuples and context parameters in assertions.

- A minor release of the [FGA CLI](https://github.com/openfga/cli), with support for the `start-time` parameter for the `changes` command and importing assertions during `fga store import`. Thanks [Sujitha A V](https://github.com/sujitha-av) for your contribution!


## Using OpenFGA for GenAI and Retrieval Augmented Generation (RAG) [​](https://openfga.dev/blog\#using-openfga-for-genai-and-retrieval-augmented-generation-rag "Direct link to Using OpenFGA for GenAI and Retrieval Augmented Generation (RAG)")

We are seeing a lot of interest in using OpenFGA for RAG scenarios and we wanted to share a list of interesting articles and repositories that were published lately:

- [RAG and Access Control: Where Do You Start?](https://auth0.com/blog/rag-and-access-control-where-do-you-start/)
- [Building a Secure RAG with Python, LangChain, and OpenFGA](https://auth0.com/blog/building-a-secure-rag-with-python-langchain-and-openfga/)
- [GenAI, LangChain.js, and FGA](https://auth0.com/blog/genai-langchain-js-fga/)
- [Building a Permissions System For Your RAG Application](https://www.useparagon.com/learn/ai-knowledge-chatbot-with-permissions-chapter-2/)
- [mdb-openfga: OpenFGA + MongoDB](https://github.com/ranfysvalle02/mdb-openfga)

## Learning OpenFGA [​](https://openfga.dev/blog\#learning-openfga "Direct link to Learning OpenFGA")

We've been busy creating blog posts and videos that help you adopt OpenFGA, check them out!

- [OpenFGA: Modeling Guide](https://www.youtube.com/watch?v=5Lwy9aHXXHE&list=PLUR5l-oTFZqWaDdhEOVt_IfPOIbKo1Ypt)
- [OpenFGA: The Basics](https://www.youtube.com/watch?v=v1Io8TtB4bg&list=PLUR5l-oTFZqXGikFJolWJfP7zDK4GRYJ6)
- [OpenFGA for Python Flask Applications](https://auth0.com/blog/fine-grained-access-control-with-python-flask/)
- [How to Implement Relationship-Based Access Control (ReBAC) in a Ruby On Rails API?](https://auth0.com/blog/what-is-rebac-and-how-to-implement-rails-api/)
- [Securing data in your Next.js app with Okta and OpenFGA](https://vercel.com/blog/securing-data-in-your-next-js-app-with-okta-and-openfga)
- [OpenFGA for an Express + Typescript Node.js API](https://auth0.com/blog/express-typescript-fga/)
- [OpenFGA for Spring Boot Applications](https://auth0.com/blog/add-fga-to-spring-boot-api-with-openfga/)

## OpenFGA to CNCF Incubation [​](https://openfga.dev/blog\#openfga-to-cncf-incubation "Direct link to OpenFGA to CNCF Incubation")

The [CNCF Technical Oversight Committee](https://www.cncf.io/people/technical-oversight-committee/) triaged OpenFGA's application to be accepted as an "Incubation" project, decided we had provided the appropriate information and references, and [moved the project to the next step](https://github.com/orgs/cncf/projects/27/views/9). We now need to wait for a TOC member to pick the project and do their due diligence.

Thanks to Canonical, Grafana, Docker, Read.AI, Agicap, Sourcegraph, Zuplo, and Stacklok for agreeing to be interviewed by the CNCF as reference adopters!

## OpenFGA in London [​](https://openfga.dev/blog\#openfga-in-london "Direct link to OpenFGA in London")

OpenFGA will be present in two high-profile events in London:

- [Sam Bellen](https://www.linkedin.com/in/sambellen/) will participate in the [Gartner IAM EMEA event](https://www.gartner.com/en/conferences/emea/identity-access-management-uk) demoing [OpenFGA interoperability with the AuthZen standard](https://openid.net/authzen-at-gartner-iam/).

- [Poovamraj Thanganadar Thiagarajan](https://www.linkedin.com/in/poovamraj/) from Okta will be presenting at KubeCon Europe, together with [Jo Guerreiro](https://www.linkedin.com/in/jmlguerreiro/) from Grafana Labs about [From Chaos To Control: Migrating Access Control To OpenFGA in a Multi-Tenant World](https://kccnceu2025.sched.com/event/1txIJ/from-chaos-to-control-migrating-access-control-to-openfga-in-a-multi-tenant-world-jo-guerreiro-grafana-labs-poovamraj-thanganadar-thiagarajan-okta).

- [Andres Aguiar](https://www.linkedin.com/in/aaguiar/) from Okta was invited to present on the Maintainer's Summit at KubeCon Europe about our experiences collaborating with the CNCF TAG-Security team: [A Project Maintainers Guide To TAG Security](https://maintainersummiteu2025.sched.com/event/1tj8v/a-project-maintainers-guide-to-tag-security-marina-moore-edera-andres-aguiar-okta).


## **See You Next Month:** [​](https://openfga.dev/blog\#see-you-next-month "Direct link to see-you-next-month")

Fine Grained News is published every month. If you have any feedback, want to share your OpenFGA story, or have a noteworthy update, please let us know on any of our [community channels](https://openfga.dev/community) or at [community@openfga.dev](mailto:community@openfga.dev).

Welcome to the first Fine Grained News edition of 2025! January is always a good month to look back at what the OpenFGA community accomplished over the past year.

## Major faatures [​](https://openfga.dev/blog\#major-faatures "Direct link to Major faatures")

Below is a list of the major features that were shipped in 2024:

- [Modular Models](https://openfga.dev/docs/modeling/modular-models)
- [Java Spring Boot Integration](https://github.com/openfga/spring-boot-starter)
- [JetBrains Integration](https://plugins.jetbrains.com/plugin/24394-openfga)
- [Telemetry in OpenFGA SDKs](https://openfga.dev/docs/getting-started/configure-telemetry)
- [ListUsers Endpoint](https://openfga.dev/docs/getting-started/perform-list-users)
- [Batch Check Endpoint](https://openfga.dev/docs/interacting/relationship-queries#batch-check)
- [Query Consistency Options](https://openfga.dev/docs/interacting/consistency)
- [Storage adapter for SQLite](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga#sqlite), contributed by [DanCech](https://github.com/DanCech) from Grafana Labs
- [Experimental Access Control for the OpenFGA server](https://openfga.dev/docs/getting-started/setup-openfga/access-control)

We heavily invested in OpenFGA performance, reducing latency by 90% in several cases. We'll continue improving performance in the following months.

## But that's not all! [​](https://openfga.dev/blog\#but-thats-not-all "Direct link to But that's not all!")

We are very grateful with the OpenFGA community, who helped shipping **126** releases and improvements across the board:

- [OpenFGA Server](https://github.com/openfga/openfga): [23 releases](https://github.com/openfga/openfga). Thanks [kalleep](https://github.com/kalleep), [DanCech](https://github.com/DanCech), [golanglemonade](https://github.com/golanglemonade,) [tranngoclam](https://github.com/tranngoclam), [lalalalatt](https://github.com/lalalalatt), [Code2Life](https://github.com/Code2Life), [JAORMX](https://github.com/JAORMX), [Zach-Johnson](https://github.com/Zach-Johnson), [cmmoran](https://github.com/cmmoran), [00chorch](https://github.com/00chorch), [chenrui333](https://github.com/chenrui333), [le-yams](https://github.com/le-yams), [lekaf974](https://github.com/lekaf974), [raj-saxena](https://github.com/raj-saxena)!
- [Python SDK](https://github.com/openfga/go-sdkk): [16 Releases](https://github.com/openfga/go-sdk/releases). Thanks [Oscmage](https://github.com/Oscmage) [ovindu-a](https://github.com/ovindu-a), [GMorris-professional](https://github.com/GMorris-professional), [Divan009](https://github.com/Divan009)!
- [Go SDK](https://github.com/openfga/go-sdk): [10 releases](https://github.com/openfga/go-sdk/releases). Thanks [le-yams](https://github.com/le-yams), [le-yams](https://github.com/HeroicHorizon), [gurleensethi](https://github.com/gurleensethi), [gurleensethi](https://github.com/gurleensethi), [wonyx](https://github.com/wonyx), [Code2Life](https://github.com/Code2Life), [Kryvchun](https://github.com/Kryvchun)!
- [Java SDK](https://github.com/openfga/java-sdk): [10 releases](https://github.com/openfga/java-sdk/releases). Thanks [le-yams](https://github.com/le-yams), [paulosuzart](https://github.com/paulosuzart) and [Didier-SimpleCommeDev](https://github.com/Didier-SimpleCommeDev)!
- [JS SDK](https://github.com/openfga/js-sdk): [13 releases](https://github.com/openfga/js-sdk/releases). Thanks [sccalabr](https://github.com/sccalabr), [Siddhant-K-code](https://github.com/Siddhant-K-code), [vil02](https://github.com/vil02), [Waheedsys](https://github.com/Waheedsys), [tmsagarofficial](https://github.com/tmsagarofficial)!
- [.NET SDK](https://github.com/openfga/dotnet-sdk): [5 releases](https://github.com/openfga/dotnet-sdk/releases).
- [Spring Boot](https://github.com/openfga/spring-boot-starter): [2 releases](https://github.com/openfga/spring-boot-starter/releases). Thanks [eddumelendez](https://github.com/eddumelendez) and [dheid](https://github.com/dheid)!
- [Helm Chart](https://github.com/openfga/helm-charts): [31 releases](https://github.com/openfga/helm-charts). Thanks
[jliedy](https://github.com/jliedy), [aaronschweig](https://github.com/aaronschweig), [bagnaram](https://github.com/bagnaram), [vil02](https://github.com/vil02), [jagregory](https://github.com/jagregory) [danielloader](https://github.com/danielloader), [wenzel-felix](https://github.com/wenzel-felix%5D), [aballet](https://github.com/aballet), [tamalsaha](https://github.com/tamalsaha), [Oscmage](https://github.com/Oscmage), [rorynickolls-skyral](https://github.com/rorynickolls-skyral),
[juusujanar](https://github.com/juusujanar), [cstruck](https://github.com/cstruck), [almeynman](https://github.com/almeynman), [JAORMX](https://github.com/JAORMX)!
- [openfga.dev](https://github.com/openfga/openfga.dev): Our website received contributions from [Siddhant-K-code](https://github.com/Siddhant-K-code), [tazarov](https://github.com/tazarov), [sarthak-kumar-shailendra](https://github.com/sarthak-kumar-shailendra), [nimakarimi97](https://github.com/nimakarimi97), [soura-b](https://github.com/soura-ba), [asenawritescode](https://github.com/asenawritescode), [kwiky](https://github.com/kwiky), [lupeterm](https://github.com/lupeterm), [RobertKielty](https://github.com/RobertKielty), [t3hmrman](https://github.com/t3hmrman), [mwangersjo](https://github.com/mwangersjo), [josxha](https://github.com/josxha), [tbcvl](https://github.com/tbcvl), [sujitha-av](https://github.com/sujitha-av), [jamct](https://github.com/jamct), [lhchingit](https://github.com/lhchingit), [DanCech](https://github.com/DanCech). Thanks to everyone!
- [Visual Studio Code Extension](https://github.com/openfga/vscode-ext): [11 releases](https://github.com/openfga/vscode-ext/releases). Thanks [solon](https://github.com/solon)!
- [IntelliJ Plugin](https://github.com/openfga/intellij-plugin): [5 releases](https://github.com/openfga/intellij-plugin/releases). Thanks [le-yams](https://github.com/le-yams) and [edlundin](https://github.com/edlundin)!

## More community accomplishments [​](https://openfga.dev/blog\#more-community-accomplishments "Direct link to More community accomplishments")

- [OpenFGA](https://github.com/openfga/openfga) repository’s stars increased 70%, crossing the 3k mark.
- [External contributors](https://github.com/openfga/openfga/graphs/contributors) to the OpenFGA repository doubled.
- There are [more than 140 repositories](https://github.com/search?q=openfga&type=repositories) in Github that have ‘openfga’ in its name or description and are not maintained by the OpenFGA team.
- We onboarded [Grafana Labs](https://grafana.com/) as a new maintainer for the OpenFGA project.
- We just launched a [LinkedIn Page](https://www.linkedin.com/company/openfga). We need more followers!
- There are [15 Production OpenFGA Models](https://github.com/openfga/sample-stores?tab=readme-ov-file#openfga-models-in-open-source-projects) in different projects in Github.
- We applied to CNCF Incubation in April 2024, [we are third in the line](https://github.com/orgs/cncf/projects/27/views/9) waiting for being evaluated.

## Future community presentations [​](https://openfga.dev/blog\#future-community-presentations "Direct link to Future community presentations")

[Sam Bellen](https://www.linkedin.com/in/sambellen/) will present [Can’t Touch This!](https://jfokus.se/talks/1839), a talk about access control, including OpenFGA at JFokus Stockholm.

[Poovamraj Thanganadar Thiagarajan](https://www.linkedin.com/in/poovamraj/) from Okta will be presenting at KubeCon Europe, together with [Jo Guerreiro](https://www.linkedin.com/in/jmlguerreiro/) from Grafana Labs about [From Chaos To Control: Migrating Access Control To OpenFGA in a Multi-Tenant World](https://kccnceu2025.sched.com/event/1txIJ/from-chaos-to-control-migrating-access-control-to-openfga-in-a-multi-tenant-world-jo-guerreiro-grafana-labs-poovamraj-thanganadar-thiagarajan-okta).

[Andres Aguiar](https://www.linkedin.com/in/aaguiar/) from Okta was invited to present on the Maintainer’s Summit at KubeCon Europe aaout our experiences collaborating with the CNCF TAG-Security team: [A Project Maintainers Guide To TAG Security](https://maintainersummiteu2025.sched.com/event/1tj8v/a-project-maintainers-guide-to-tag-security-marina-moore-edera-andres-aguiar-okta).

[Mark Laing](https://www.linkedin.com/in/mark-laing/) from Canonical will present at FOSDEM about [Fine-grained access control in LXD with OpenFGA](https://fosdem.org/2025/schedule/event/fosdem-2025-6194-fine-grained-access-control-in-lxd-with-openfga/).

## **See You Next Month:** [​](https://openfga.dev/blog\#see-you-next-month "Direct link to see-you-next-month")

Fine Grained News is published every month. If you have any feedback, want to share your OpenFGA story, or have a noteworthy update, please let us know on any of our [community channels](https://openfga.dev/community) or at [community@openfga.dev](mailto:community@openfga.dev).

Welcome to the November edition of Fine Grained News! As we enter the final stretch of 2024, there are exciting developments in the OpenFGA to share.

🌟 **We hit 3,000 stars on the OpenFGA repo!:** 🌟 Because of this great community, we've just this incredible milestone! Thank you so much for all the support you've shown this project. Let's keep the momentum going! If you haven't yet, we'd greatly appreciate you [starring the repo](https://github.com/openfga/openfga) to help push us toward 4,000 stars and grow our amazing community!

![Celebrating OpenFGA reaching 3,000 GitHub stars](https://openfga.dev/assets/images/fgn-2024-11-stars-d961d19917669492d95418e8f8ab7233.png)

## Just Shipped [​](https://openfga.dev/blog\#just-shipped "Direct link to Just Shipped")

**v1.8.1:** This release focuses on performance and monitoring enhancements. It introduces two new flags for better control over check operations, optimizes performance for TTU relationships with set operations, and expands metrics tracking with duration measurements. Additionally, deduplication logic has been added to the `BatchCheck` API, along with new logging fields for authz calls. Read more in the [Read more in the Changelog...](https://github.com/openfga/openfga/releases/tag/v1.8.1)

For more about the new OPENFGA\_CHECK\_ITERATOR\_TTL and OPENFGA\_CHECK\_CACHE\_LIMIT flags, run `./openfga run --help`

**Batch Check API:** Introduced in v1.8.0, the `BatchCheck` API significantly reduces network latency by batching authorization checks in a single request. With v1.8.1, deduplication logic increasing its efficiency further. v1.8.0 also added support for Contextual Tuples in the `Expand` API, time-based filtering in the `ReadChanges` API, and additional performance improvements. [Read more in the Changelog](https://github.com/openfga/openfga/releases/tag/v1.8.0) or the [`BatchCheck` API docs](https://openfga.dev/docs/interacting/relationship-queries#batch-check).

## **Coming Up** [​](https://openfga.dev/blog\#coming-up "Direct link to coming-up")

**SDK Updates:** We will be updating the SDKs next to take advantage of the new BatchCheck, starting with Python and JavaScript. If you want to see an SDK prioritized, let us know!

Check out our roadmap to see what we're working on. Feature requests and ideas can be shared in [GitHub Discussions](https://github.com/orgs/openfga/discussions).

## **Community Highlights** [​](https://openfga.dev/blog\#community-highlights "Direct link to community-highlights")

**OpenFGA at KubeCon:** In November, [Andres Aguiar](https://www.linkedin.com/in/andresaguiar/) represented OpenFGA at KubeCon/CloudNativeCon. OpenFGA had a kiosk in the Project Pavilion, where Andres delivered a lightning talk and participated in _The Policy Engines Showdown_ with other authorization solution providers. [Watch the panel discussion...](https://www.youtube.com/watch?v=AVA32aYObRE)

![Andres Aguiar at OpenFGA&#39;s KubeCon booth](https://openfga.dev/assets/images/fgn-2024-11-kubecon1-85f27733b8385fd1339ec1c2e168741c.jpg)![Andres Aguiar participating in The Policy Engines Showdown](https://openfga.dev/assets/images/fgn-2024-11-kubecon2-10ef89f7b795d8b870ad8deca04926aa.jpg)

_Andres Aguiar representing OpenFGA at KubeCon_

**OpenFGA in Italy:** [Andrea Chiarelli](https://www.linkedin.com/in/andreachiarelli/) presented _Authorize in the Cloud with OpenFGA_ at Cloud Day 2024 in Milan.

![Andrea Chiarelli presenting OpenFGA in Milan](https://openfga.dev/assets/images/fgn-2024-11-andrea-chiarelli1-8b865d5915d209e4ba425ec08706268e.png)![Andrea Chiarelli during his talk at Cloud Day 2024](https://openfga.dev/assets/images/fgn-2024-11-andrea-chiarelli2-678faee102f1bf7a25d178f91f8bbc92.png)

_Andrea Chiarelli presenting at Cloud Day 2024_

**OpenFGA Offsite:** The team that works hard to bring you OpenFGA met in Chicago this November for a fun and productive offsite, diving deep into our vision, developer needs, and the roadmap ahead.

![OpenFGA team group photo in Chicago](https://openfga.dev/assets/images/fgn-2024-11-chicago-offsite-team-photo-eb4af67e361d204336a083503595de2f.png)

_The OpenFGA team in Chicago_

**New Modeling Demos Available!:** Learn how to model fine-grained authorization in OpenFGA's domain-specific language step-by-step with our [new demo video series](https://www.youtube.com/playlist?list=PLUR5l-oTFZqWaDdhEOVt_IfPOIbKo1Ypt)! Starting with the basics and gradually adding complexity, this playlist is your guide to mastering OpenFGA modeling.

**Monthly Community Meeting:** Join our in depth monthly community discussions every second Thursday at [11 AM Eastern Time (US)](https://www.worldtimebuddy.com/?qm=1&lid=12,100,5,8&h=5&sln=11-12&hf=1). Check out our [meeting details](https://github.com/openfga/community/blob/main/community-meetings.md#:~:text=OpenFGA%20Community%20Meetings) for more information.

November's highlights included:

- [Sebastian Döll](https://www.linkedin.com/in/katallaxie/) from ZEISS showcasing their Terraform/OpenFGA integration.
- [Justin Cohen](https://www.linkedin.com/in/justincoh/) demonstrating the new Batch Check functionality.

Can't make it? Catch up on our [latest recording](https://youtu.be/4MGF4rTzhbA?si=iGcoZTw8T99E0LKs) or browse previous sessions on our [YouTube channel](https://www.youtube.com/@OpenFGA).

**Blogs and Videos for AuthZ Fans:**

- Granting TTL based permissions in OpenFGA: Implement TTL-based permissions in OpenFGA for time-limited access control. [Read more on Medium...](https://medium.com/@shruti1810/granting-ttl-based-permissions-in-openfga-2ed2073931c3)

- Overcoming Security Challenges in Protecting Shared Generative AI Environments: Explore solutions for ensuring secure, scalable, and efficient multi-tenancy in generative AI environments. [Read more on Medium...](https://towardsdatascience.com/overcoming-security-challenges-in-protecting-shared-generative-ai-environments-1ffb27da1bde)

- Fine-Grained Authorization for Backstage using OpenFGA: Learn how OpenFGA enables dynamic fine-grained authorization in Backstage through ReBAC models and seamless policy updates. [See the webinar on YouTube...](https://www.youtube.com/watch?v=wWFbLPvwOyQ)


## **New Adopters** [​](https://openfga.dev/blog\#new-adopters "Direct link to new-adopters")

- Are you using OpenFGA in production? Join our growing community of adopters! Add your company to our [ADOPTERS.md](https://github.com/openfga/community/blob/main/ADOPTERS.md#companiesprojects-using-openfga-in-production) file with a quick PR.

- Do you offer OpenFGA implementation services? Get listed in our [Implementation Services](https://github.com/openfga/community/blob/main/ADOPTERS.md#companies-offering-openfga-implementation-services) directory. Note: Listings are community-contributed and not officially endorsed by the OpenFGA project.


## **Announcements** [​](https://openfga.dev/blog\#announcements "Direct link to announcements")

**OpenFGA Ranked #5 in CNCF Project Contributions!**
Thanks to our amazing community, OpenFGA soared to become the 5th most active CNCF project during Hacktoberfest in October! Your contributions made this possible, and hope to continue the engagement!

Ready to join our community of contributors? We have opportunities for every skill level:

- Start with our [Good First Issues](https://github.com/search?q=org%3Aopenfga+is%3Aopen+label%3A%22good+first+issue%22+&type=issues&s=created&o=desc) for beginner-friendly tasks.
- Take on more complex challenges in our [Issue queue](https://github.com/openfga/openfga/issues).
- Follow our [Contribution Guide](https://github.com/openfga/.github/blob/main/CONTRIBUTING.md) to get started.

![CNCF projects ranked by commits during Hacktoberfest](https://openfga.dev/assets/images/fgn-2024-11-open-fga-ranks-5th-3bc380d0478b8988d07beaeca665cca2.jpeg)

_CNCF Projects Ranked by Commits during Hacktoberfest_

**Follow OpenFGA on LinkedIn**
Connect with a growing community of fine-grained authorization enthusiasts and expand your professional network by following our new
[OpenFGA LinkedIn](http://linkedin.com/company/openfga) page!

![OpenFGA&#39;s LinkedIn page](https://openfga.dev/assets/images/fgn-2024-11-linkedin-9463378da14cb33d27b81eb8fb461a86.png)

## **See You Next Month:** [​](https://openfga.dev/blog\#see-you-next-month "Direct link to see-you-next-month")

Fine Grained News is published every month. If you have any feedback, want to share your OpenFGA story, or have a noteworthy update, please let us know on any of our [community channels](https://openfga.dev/community) or at [community@openfga.dev](mailto:community@openfga.dev).

Welcome to the October edition of Fine Grained News! As we approach the end of the year, we're excited to bring you the latest updates, improvements, and community contributions shaping the future of OpenFGA.

As always, if you’re finding the OpenFGA project to be a valuable resource, we would greatly appreciate if you would [star our repo](https://github.com/openfga/openfga) on GitHub to show your support!⭐

## Just Shipped [​](https://openfga.dev/blog\#just-shipped "Direct link to Just Shipped")

- **OpenFGA v1.7.0:** In our latest release, we’ve introduced Access Control. This experimental feature allows you to control access to your OpenFGA server, and of course, we built it using OpenFGA! We’ve updated our Docs to show you [how to enable this feature](https://openfga.dev/docs/getting-started/setup-openfga/access-control); please share your feedback in the [GitHub Discussions](https://github.com/orgs/openfga/discussions/382)!

- This month, we’ve also added documentation of our [OpenFGA release process](https://github.com/openfga/openfga/pull/1923).

- We’ve [improved performance for checks involving nested tuple-to-userset relations](https://github.com/openfga/openfga/pull/2025). This is commonly used when implementing nested groups. Users can enable this with the experimental flag `enable-check-optimizations`.

- Following last month’s launch of OpenFGA SDK support for telemetry data using OpenTelemetry, we’ve also [updated our Docs](https://openfga.dev/docs/getting-started/configure-telemetry) to guide users through configuration to collect tracing data and metrics.


## In Progress [​](https://openfga.dev/blog\#in-progress "Direct link to In Progress")

**Batch Check API Endpoint:** We’re close to releasing a [new feature](https://github.com/orgs/openfga/projects/1/views/1?pane=issue&itemId=28481432&issue=openfga%7Croadmap%7C35) to enable sending multiple check operations in a single network request.

Check out our roadmap to see what’s in the works. Feature requests and ideas can be shared in [GitHub Discussions](https://github.com/orgs/openfga/discussions).

## Community Highlights [​](https://openfga.dev/blog\#community-highlights "Direct link to Community Highlights")

- **OpenFGA at Open Source Strategy Forum 2024:** [Kiah Imani](https://www.linkedin.com/in/kiah-tolliver/) presented “Role-Based Access Is So Yesterday: Revolutionizing Authorization with OpenFGA” at the OSSF 2024 earlier this month. The presentation is now [available in Youtube](https://www.youtube.com/watch?v=uHKeE4DAHpE)![Kiah Imani](https://openfga.dev/assets/images/fgn-2024-10-kiah-imani-eceac7fa9e3d3ea9257956280ed9007c.jpeg)

- **OpenFGA at KubeCon:** [Andres Aguiar](https://www.linkedin.com/in/aaguiar/) will participate in KubeCon/CloudNativeCon in November! OpenFGA will have a Kiosk in the Project Pavilion. He'll present a [lightning talk on OpenFGA](https://kccncna2024.sched.com/event/1iWA6/openfga-the-cloud-native-way-to-implement-fine-grained-authorization-project-lightning-talk) and participate in [The Policy Engines Showdown](https://kccncna2024.sched.com/event/1i7qp/the-policy-engines-showdown-gabriel-l-manor-permitio-andres-aguiar-okta-omri-gazitt-aserto-anders-eknert-styra-sarah-cecchetti-aws?iframe=no).

![Andres Aguiar](https://openfga.dev/assets/images/fgn-2024-10-andres-aguiar-68c2e8b22fedf6e908b5f6bb6ccbc920.jpg)

- **OpenFGA in Italy:** [Andrea Chiarelli](https://www.linkedin.com/in/andreachiarelli) will present [Authorize in the Cloud with OpenFGA](https://www.cloudday.it/e/sessione/3533/Autorizzare-nel-cloud-con-OpenFGA) at [Cloud Day 2024](https://www.cloudday.it/e/3486/Cloud-Day-2024) in Milan on November 20, 2024.

![Andrea Chiarelli](https://openfga.dev/assets/images/fgn-2024-10-andrea-chiarelli-c078f103fd5b28ef4dfff0b1245aae0e.jpeg)

- **New Demp Flask App Added:** To complement our OpenFGA examples and guides, we have published an [example app demonstrating the integration of OpenFGA](https://github.com/openfga/flask-demo). This app utilizes several FGA features to provide a multi-user system for folder and text file sharing. Thanks to @ [ryanpq](https://github.com/openfga/flask-demo/commits?author=ryanpq) for your contribution!

![Ryan Quinn](<Base64-Image-Removed>)

- **Monthly Community Meeting:** Join us for our monthly [Community Meetings](https://github.com/openfga/community/blob/main/community-meetings.md#:~:text=OpenFGA%20Community%20Meetings), held on the second Thursday of every month at [11 AM Eastern Time (US)](https://www.worldtimebuddy.com/?qm=1&lid=12,100,5,6,8&h=5&sln=11-12&hf=1). Our next meeting is on Thursday, November 14, 2024. Our community meetings are a great way to stay updated with the latest developments, ask questions, and engage with the OpenFGA community. If you can’t join the meetings live, our [latest month's video](https://youtu.be/LITUfwqpNIo?si=ze7dhGG46rhatWBN) will always be posted on our [YouTube channel](https://www.youtube.com/@OpenFGA)!

As always, we welcome community members to demo their use cases. If you want to demo your implementation of OpenFGA, please contact any of the OpenFGA team on our community channels linked below.


## New Adopters [​](https://openfga.dev/blog\#new-adopters "Direct link to New Adopters")

- This month, we welcome [Gillion](https://www.gilion.com/) and [Flex](https://flex.team/) as OpenFGA adopters! If you or your company have implemented OpenFGA, we would love to hear about it! Please add your name as an adopter by updating the [ADOPTERS.md](https://github.com/openfga/community/blob/main/ADOPTERS.md#companiesprojects-using-openfga-in-production) file and sending us a PR.

- If you or your company provides implementation services for OpenFGA, we invite you to share your information with the community in our [Implementation Services](https://github.com/openfga/community/blob/main/ADOPTERS.md#companies-offering-openfga-implementation-services) section of the ADOPTERS.md file by sending us a PR! However, please note that the OpenFGA project has not evaluated or endorsed the individuals and companies listed, and inclusion does not imply endorsement.


## Announcements [​](https://openfga.dev/blog\#announcements "Direct link to Announcements")

- **Hacktoberfest Highlights:** This Hacktoberfest, we welcomed 13 new contributors making their first commit to OpenFGA! Thanks to the incredible community participation, we saw a 28% increase in pull requests compared to September and a remarkable 260% increase in PRs on the SDK Generator. A huge thanks to this community for your continued participation and contributions!

- **OpenFGA Community Meeting Updates:** We are adding chapters to our [YouTube channel](https://www.youtube.com/@OpenFGA) videos to simplify content navigation. We’ve begun with the most recent videos and will add chapters as time goes on. We have also begun releasing [demos](https://www.youtube.com/playlist?list=PLUR5l-oTFZqXYaB3W_OEEsUhI4l8iLYNe) as individual videos for easier content consumption. You can catch this month’s demos on [Modular Authorization](https://www.youtube.com/watch?v=ws9BjricJu4) and [Client-Side Caching](https://www.youtube.com/watch?v=sst9PyvPHSk), with Materialize Integration coming soon!


## See you Next Month [​](https://openfga.dev/blog\#see-you-next-month "Direct link to See you Next Month")

Fine Grained News is published every month. If you have any feedback, want to share your OpenFGA story, or have a noteworthy update, please let us know on any of our [community channels](https://openfga.dev/community) or at [community@openfga.dev](mailto:community@openfga.dev).

Welcome to the September edition of Fine Grained News! As we transition into the fall season, we’re excited to bring you the latest updates on the progress of OpenFGA.

## **Just Shipped** [​](https://openfga.dev/blog\#just-shipped "Direct link to just-shipped")

- We shipped [OpenFGA v1.6.1](https://github.com/openfga/openfga/releases/tag/v1.6.1) with performance fixes, bug fixes, and a new SQLite storage adapter contributed by [Grafana](https://grafana.com/). Thanks [@DanCech](https://github.com/DanCech)!

- This month we released improved [OpenTelemetry metrics support](https://openfga.dev/docs/getting-started/configure-telemetry) for [.NET SDK](https://github.com/openfga/dotnet-sdk/releases), [Go SDK](https://github.com/openfga/go-sdk/releases/tag/v0.6.1), [Java SDK](https://github.com/openfga/java-sdk/releases/tag/v0.7.1), and [JavaScript SDK](https://github.com/openfga/js-sdk/releases/tag/v0.7.0).


## **In Progress** [​](https://openfga.dev/blog\#in-progress "Direct link to in-progress")

- **Authorization for OpenFGA**: OpenFGA currently supports global pre-shared keys and OIDC for API authentication, but [we’re exploring more granular authorization options](https://github.com/openfga/roadmap/issues/30), such as store-specific credentials and varying permissions for stores, modules, and types.

- **Batch Check**: OpenFGA SDKs currently implement BatchCheck by issuing multiple parallel request to the OpenFGA server. We'll be implementing a [BatchCheck server endpoint](https://github.com/openfga/roadmap/issues/35) to improve performance and reduce network overhead.


Check out our [roadmap](https://github.com/orgs/openfga/projects/1/views/1) to see what’s in the works. Feature requests and ideas can be shared in [GitHub Discussions](https://github.com/orgs/openfga/discussions/categories/ideas).

## **Community Highlights** [​](https://openfga.dev/blog\#community-highlights "Direct link to community-highlights")

- **OpenFGA at Open Source Summit Europe:** [José Carlos Chávez](https://www.linkedin.com/in/jcchavezs/) gave a talk on [RBAC with OpenFGA](https://osseu2024.sched.com/event/1ej2u/fine-grained-policies-rbac-with-openfga-jose-carlos-chavez-okta) at OSS Europe 2024 in Vienna, Austria this month. You can see the presentation deck [here](https://speakerdeck.com/jcchavezs/fine-grained-policies-rbac-with-openfga).
- **OpenFGA at Open Source Strategy Forum 2024:** [Kiah Imani](https://www.linkedin.com/in/kiah-tolliver/) will present [Role-Based Access Is So Yesterday: Revolutionizing Authorization with OpenFGA](https://sossfusion2024.sched.com/event/1hcQa?iframe=no) at OSSF on Wednesday, October 23, 2024. In this session, attendees will learn how OpenFGA addresses the limitations of RBAC, enhancing security, performance, and access management across various systems.
- **OpenFGA at KubeCon:** [Andres Aguiar](https://www.linkedin.com/in/aaguiar/) will participate in KubeCon/CloudNativeCon in November! OpenFGA will have a Kiosk in the Project Pavilion. He'll present a [lightning talk on OpenFGA](https://kccncna2024.sched.com/event/1iWA6/openfga-the-cloud-native-way-to-implement-fine-grained-authorization-project-lightning-talk) and participate in [The Policy Engines Showdown](https://kccncna2024.sched.com/event/1i7qp/the-policy-engines-showdown-gabriel-l-manor-permitio-andres-aguiar-okta-omri-gazitt-aserto-anders-eknert-styra-sarah-cecchetti-aws?iframe=no).
- We added new authorization model examples for [multi-tenant RBAC](https://github.com/openfga/sample-stores/tree/main/stores/multitenant-rbac) and how to define [ABAC policies using ReBAC](https://github.com/openfga/sample-stores/tree/main/stores/abac-with-rebac).
- **Guide to Building Auth Systems:** Level Up Coding offers a [comprehensive guide](https://levelup.gitconnected.com/complete-guide-to-building-authorization-systems-using-rbac-rebac-and-abac-0a2ce5311d25) to building authorization systems using RBAC, ReBAC, and ABAC models. The guide covers the differences between these approaches and when to use each.
- **High Marks for OpenFGA Policy Languages:** Trial Of Bits published a report comparing the security of the [Cedar, OPA, and OpenFGA policy languages](https://github.com/trailofbits/publications/blob/master/reports/Policy_Language_Security_Comparison_and_TM.pdf). OpenFGA was very well evaluated!
- **September Community Meeting:** Check out the [September Community Meeting](https://www.youtube.com/watch?v=p_ERXS8Dsu4&list=PLUR5l-oTFZqUneyHz-h4WzaJssgxBXdxB&index=18), which is posted on YouTube! In last month’s meeting, we reviewed recent updates, demos with [Envoy](https://github.com/openfga/openfga-envoy), an OpenFGA Kubernetes Operator, fine-grained access for OpenFGA, and reviewed the results of the 2024 Community Survey.

## **New Adopters** [​](https://openfga.dev/blog\#new-adopters "Direct link to new-adopters")

- If you or your company have implemented OpenFGA, we would love to hear about it! Please add your name as yourself as an adopter by updating the [Adopters.md](https://github.com/openfga/community/blob/main/ADOPTERS.md#companiesprojects-using-openfga-in-production) file and send us a PR.
- If you or your company provides implementation services for OpenFGA, we invite you to share your information with the community in our [Implementation Services](https://github.com/openfga/community/blob/main/ADOPTERS.md#companies-offering-openfga-implementation-services) section of the Adopters.md file by sending us a PR! However, please note that the listed individuals and companies have not been evaluated or endorsed by the OpenFGA project, and inclusion on the list does not imply endorsement.

## **Announcements** [​](https://openfga.dev/blog\#announcements "Direct link to announcements")

- **Hacktoberfest 2024:** [Hacktoberfest](https://hacktoberfest.com/) is a month long celebration of open source software which encourages new and experienced developers alike to contribute code to open source projects during the month of October. This makes October a great time to become an OpenFGA contributor! We have labeled a number of issues on GitHub with "Hacktoberfest" and "Good First Issue" labels making it easy to find a way to get involved and have your code included in OpenFGA.
- **Monthly Community Meeting:** Join us for our monthly Community Meetings, held on the second Thursday of every month at 11 AM Eastern Time (US). Our next meeting is on Thursday, October 10, 2024. Our community meetings are a great way to stay updated with the latest developments, ask questions, and engage with the OpenFGA community. If you would like to demo your implementation of OpenFGA, please reach out to us on any of our [community channels](https://openfga.dev/community) or at [community@openfga.dev](mailto:community@openfga.dev). You can find the link to the meeting invite [here](https://openfga.dev/docs/community#monthly-community-meetings). We look forward to seeing you there!

## **See You Next Month!** [​](https://openfga.dev/blog\#see-you-next-month "Direct link to see-you-next-month")

Fine Grained News is published every month. If you have any feedback, want to share your OpenFGA story, or have a noteworthy update, please let us know on any of our [community channels](https://openfga.dev/community) or at [community@openfga.dev](mailto:community@openfga.dev).

Welcome to the August 2024 edition of Fine Grained News! We are excited to bring you the latest updates, features, and community highlights from OpenFGA.

## Just Shipped! [​](https://openfga.dev/blog\#just-shipped "Direct link to Just Shipped!")

- **OpenFGA v1.6.0:** The [latest OpenFGA release](https://github.com/openfga/openfga/releases/tag/v1.6.0) enables support for [query consistency options](https://openfga.dev/docs/interacting/consistency) and includes additional performance enhancements.

- **Query Consistency Options in SDKs:** All OpenFGA SDKs now support specifying [a query consistency parameter](https://openfga.dev/docs/interacting/consistency) for OpenFGA query endpoints. Make sure to update to the latest versions of the SDKs and OpenFGA to take advantage of this feature.

- **Metrics Telemetry for SDKs:** We already supported OpenTelemetry metrics in the [Python](https://github.com/openfga/python-sdk/) and [Javascript](https://github.com/openfga/js-sdk/) SDKs. We’ve just added support in [the Java SDK](https://github.com/openfga/java-sdk/releases/tag/v0.6.1), and [the GO SDK](https://github.com/openfga/go-sdk/releases/v0.6.0).


## Security Advisory [​](https://openfga.dev/blog\#security-advisory "Direct link to Security Advisory")

We recently addressed a security issue, identified as GHSA-3f6g-m4hr-59h8, that was present in OpenFGA v1.5.7 and v1.5.8. This issue has been fixed starting v1.5.9, and we strongly recommend all users update to the latest version to ensure their systems remain secure. For more details, please refer to the [security advisory](https://github.com/openfga/openfga/security/advisories/GHSA-3f6g-m4hr-59h8) on our GitHub page.

## In Progress [​](https://openfga.dev/blog\#in-progress "Direct link to In Progress")

- [Support for OpenTelemetry tracing and logging](https://github.com/openfga/roadmap/issues/41)
- [Performance Improvements for OpenFGA queries](https://github.com/openfga/roadmap/issues/61)
- [Additional OpenFGA API Authorization Options](https://github.com/openfga/roadmap/issues/30)
- [SQLite Storage Adapter](https://github.com/openfga/roadmap/issues/56), thanks to [Grafana](https://grafana.com/) for the contribution!

Curious about what’s coming next for OpenFGA? Check out our [roadmap](https://github.com/orgs/openfga/projects/1/views/1) to see what’s in store. We also welcome your feature requests and ideas in [GitHub Discussions](https://github.com/orgs/openfga/discussions/categories/ideas).

## Community Highlights [​](https://openfga.dev/blog\#community-highlights "Direct link to Community Highlights")

- **CNCF Security TAG:** This month, [Andrés Aguiar](https://www.linkedin.com/in/aaguiar/) presented OpenFGA to the [CNCF Security Technical Advisory Group (TAG)](https://tag-security.cncf.io/), where he discussed the project's current [status](https://github.com/cncf/tag-security/issues/1339) and showcased various use cases. You can see the presentation deck [here](https://docs.google.com/presentation/d/1-TFfvKPi3jJ-jO-bjsHb3Soj_kKcQCf4Y_UvST7z744/edit#slide=id.p). It’s a great way to see how OpenFGA is being utilized and what’s on the horizon for the project.
- **API Security: APISIX + OpenFGA:** Check out this [blog post](https://dev.to/kaankahraman/supercharging-api-security-apisix-with-openfga-45da) by Kaan Kahraman on enhancing API security by integrating [APISIX](https://apisix.apache.org/) with OpenFGA.

### Upcoming Events [​](https://openfga.dev/blog\#upcoming-events "Direct link to Upcoming Events")

- **Join Us at Open Source Summit Europe 2024:** [José Carlos Chávez](https://www.linkedin.com/in/jcchavezs/) will present at Open Source Summit Europe 2024 in Vienna, Austria on September 16, 2024! He will discuss [Fine-Grained Policies: RBAC with OpenFGA](https://osseu2024.sched.com/event/1ej2u/fine-grained-policies-rbac-with-openfga-jose-carlos-chavez-okta). We look forward to seeing you there!
- **OpenFGA at Open Source Strategy Forum 2024:** [Kiah Imani](https://www.linkedin.com/in/kiah-tolliver/) will present [Role-Based Access Is So Yesterday: Revolutionizing Authorization with OpenFGA](https://sossfusion2024.sched.com/event/1hcQa?iframe=no) at OSSF on Wednesday, October 23, 2024. In this session, attendees will learn how OpenFGA addresses the limitations of RBAC, enhancing security, performance, and access management across various systems.
- We'll be participating of KubeCon / CloudNativeCon North America! OpenFGA will have a Kiosk in the Project Pavilion, we'll present a [lightning talk on OpenFGA](https://kccncna2024.sched.com/event/1iWA6/openfga-the-cloud-native-way-to-implement-fine-grained-authorization-project-lightning-talk) and participate in [The Policy Engines Showdown](https://kccncna2024.sched.com/event/1i7qp/the-policy-engines-showdown-gabriel-l-manor-permitio-andres-aguiar-okta-omri-gazitt-aserto-anders-eknert-styra-sarah-cecchetti-aws?iframe=no).

### New Adopters [​](https://openfga.dev/blog\#new-adopters "Direct link to New Adopters")

We want to welcome [Patika Global Technology](https://patikaglobal.com/) as an OpenFGA adopter! If you're using OpenFGA in production, we encourage you to add your company or project to our [Adopters list](https://github.com/openfga/community/blob/main/ADOPTERS.md) by opening a PR. Please include a short description of your use case in your submission. If you’ve previously added your company or project to the adopter's list, we would appreciate you updating it to include a short description. Your contributions help the community, and we greatly appreciate your support!

### OpenFGA Service Providers [​](https://openfga.dev/blog\#openfga-service-providers "Direct link to OpenFGA Service Providers")

We’ve added a new section within the Adopters list for those offering OpenFGA [implementation services](https://github.com/openfga/community/blob/main/ADOPTERS.md#companies-offering-openfga-implementation-services). If your organization wants help adopting OpenFGA, this resource can connect you with professionals specializing in our technology. If your company provides implementation services for OpenFGA, we invite you to add your details by sending us a PR! Please note that the listed companies have not been individually evaluated or endorsed by the OpenFGA project, and inclusion on the list does not imply endorsement.

### Announcements [​](https://openfga.dev/blog\#announcements "Direct link to Announcements")

- **OpenFGA Joins Docker-Sponsored Open Source Program:** We’re excited to share that OpenFGA has been accepted into the Docker-Sponsored Open Source Program! This partnership allows us to distribute [our container image](https://hub.docker.com/r/openfga/openfga) more efficiently and securely, ensuring that our community can easily access and trust the latest versions of OpenFGA on Docker Hub with higher rate limits.
- **2024 Community Survey Participation:** A huge thank you to everyone who participated in the 2024 Community Survey! Your insights are invaluable in helping us shape the future of OpenFGA. We truly appreciate the time and thought you put into sharing your experiences and suggestions. Remember, we always welcome feedback across our [community channels](https://openfga.dev/community) — your input is what drives us forward.
- **Monthly Community Meeting:** Join us for our monthly Community Meetings, held on the second Thursday of every month at 11 AM Eastern Time (US). Our next meeting is on Thursday, September 12, 2024. These meetings are a fantastic opportunity to stay updated with the latest developments, ask questions, and engage with the OpenFGA community. You can find the link to the meeting invite [here](https://openfga.dev/docs/community#monthly-community-meetings). We look forward to seeing you there!

## See You Next Month! [​](https://openfga.dev/blog\#see-you-next-month "Direct link to See You Next Month!")

Fine Grained News is published every month. Although we have transitioned from Discord to the CNCF Slack channel, we want to continue to hear from you! Whether you have questions or feedback or just want to connect with others using OpenFGA, our community channels are the best place to do so. You can reach us at:

- **CNCF Slack:** Join the conversation in the [#openfga](https://cloud-native.slack.com/archives/C06G1NNH47N) channel. Please note: If you are not currently part of the CNCF Slack channel, you will need to click [here](https://slack.cncf.io/) to join the channel first.
- **GitHub Discussions:** Share your feedback, ask questions, and engage with the community on [GitHub Discussions](https://github.com/orgs/openfga/discussions).
- **Twitter:** Follow us [@openfga](https://twitter.com/openfga) for updates and news.

Visit our [community page](https://openfga.dev/docs/community) for more details and to join these channels. We look forward to your contributions and conversations!

Welcome to the July 2024 edition of Fine Grained News! We are thrilled to bring you the latest updates, features, and community highlights from OpenFGA. This month has included releases, performance improvements, and insights shared through our community meetings and presentations.

We value your feedback and invite you to participate in our [2024 OpenFGA Community Survey](https://www.surveymonkey.com/r/OPENFGA2024). Your insights help us understand your needs better and improve our offerings. Please take a few minutes to complete the survey and let your voice be heard.

## Improvements [​](https://openfga.dev/blog\#improvements "Direct link to Improvements")

**Latest Features**

- We’ve introduced consistency options for query requests. This new, experimental, feature provides more flexibility and control over how queries are executed, enhancing the accuracy and reliability of query results. [Learn more about this update](https://openfga.dev/blog/query-consistency-options-announcement).

- We’re now publishing images to `ghcr.io/openfga/openfga` as an alternative to DockerHub, thanks to the contribution from [@JAORMX](https://github.com/JAORMX). This provides an additional option for accessing and deploying our containers. [Read more](https://github.com/openfga/openfga/pull/1775).


**Performance Improvements**

- We've improved our Check latency up to 20X in some scenarios in OpenFGA [v1.5.7](https://github.com/openfga/openfga/releases/tag/v1.5.7) and [v1.5.6](https://github.com/openfga/openfga/releases/tag/v1.5.6).

If you have any feedback, or want to try a feature early, or are interested to learn more, please reach out!

## Breaking Changes [​](https://openfga.dev/blog\#breaking-changes "Direct link to Breaking Changes")

Several breaking changes related to the storage interface [have been introduced](https://github.com/openfga/openfga/releases/tag/v1.5.7). These changes should not impact your usage of OpenFGA unless you are implementing a custom storage adapter for OpenFGA.

## In Progress [​](https://openfga.dev/blog\#in-progress "Direct link to In Progress")

- [Additional Consistency Options for OpenFGA queries](https://github.com/openfga/roadmap/issues/54): We've just shipped the first iteration of this feature, we're working on adding support for it in more SDKs. We’ll also be working on adding a consistency token in the future.

- [Telemetry for SDKs](https://github.com/openfga/roadmap/issues/41): We shipped OpenTelemetry Metrics support for Python and Javascript. We’ll be adding metrics support to the rest of the SDKs and then add support for tracing and logging. If you have feedback regarding our OpenTelemetry support, please do reach out on any of our community channels.

- We’ll keep working on [Performance Improvements](https://github.com/openfga/roadmap/issues/61) for Check, List Objects and List Users APIs.

- We’ll be adding additional [authorization options for OpenFGA](https://github.com/openfga/roadmap/issues/30) to restrict API credentials to performing specific actions in OpenFGA stores.

- We collaborated with members of the CNCF [TAG-Security team](https://github.com/cncf/tag-security) for a few weeks to get it wrapped up (thanks [Krishna Krishna](https://github.com/krishnakv) and [Eddie](https://github.com/eddie-knight) for your help).


## Community Highlights [​](https://openfga.dev/blog\#community-highlights "Direct link to Community Highlights")

- Check out [July’s Community Meeting](https://www.youtube.com/watch?v=GvgeQcQlUuU&t=212s&pp=ygUHT3BlbkZHQQ%3D%3D)! It's a great opportunity to stay updated with the latest developments, ask questions, and engage with the OpenFGA community.

- [Maria Ines Parnisari](https://www.linkedin.com/in/miparnisari/) from the OpenFGA team and [Evan Anderson](https://www.linkedin.com/in/evankanderson/) from Stacklok presented on Implementing a Multi-Tenant, Relationship-Based Authorization Model with OpenFGA at CloudNative SecurityCon North America. If you didn’t attend the conference in June, the presentation recording is now [live](https://www.youtube.com/watch?v=zIJOBLbaZOc).

- This month, [Andres Aguiar](https://www.linkedin.com/in/aaguiar/) and [Damian Schenkelman](https://www.linkedin.com/in/damianschenkelman/) appeared in the [Identerati Office Hours](https://www.youtube.com/watch?v=Ups1FFxK3VE&pp=ygUHT3BlbkZHQQ%3D%3D) livestream for an in-depth exploration of OpenFGA. This video covers advanced topics and provides valuable insights into the capabilities and implementation of OpenFGA. Whether you're a seasoned user or new to OpenFGA, this deep dive is packed with information that will enhance your understanding and usage of the platform.

- Andres Aguiar sat down with Open at Intel host Katherine Druckman during KubeCon Europe to discuss OpenFGA. You can hear that podcast
[here](https://www.intel.com/content/www/us/en/developer/articles/community/fine-grained-authorization-with-openfga.html).


## New Adopters [​](https://openfga.dev/blog\#new-adopters "Direct link to New Adopters")

We’re happy to share that [Bump](https://www.bump-charge.com/) is now an OpenFGA adopter! If you are using OpenFGA in production, please consider adding your company or project to our [list](https://github.com/openfga/community/blob/main/ADOPTERS.md). Your contribution will be greatly appreciated!

## Announcements [​](https://openfga.dev/blog\#announcements "Direct link to Announcements")

Join us for our monthly Community Meetings, held on the second Thursday of every month at 11am Eastern Time (US). Our next meeting is on Thursday, August 8, 2024. These meetings are a fantastic opportunity to stay updated with the latest developments, ask questions, and engage with the OpenFGA community. You can find the link to the meeting invite [here](https://openfga.dev/docs/community#monthly-community-meetings). We look forward to seeing you there!

## Transitioning from Discord to CNCF's Slack [​](https://openfga.dev/blog\#transitioning-from-discord-to-cncfs-slack "Direct link to Transitioning from Discord to CNCF's Slack")

As a reminder, we transitioned out from Discord for OpenFGA and are now using the CNCF [#openfga Slack channel](https://cloud-native.slack.com/archives/C06G1NNH47N). If you are not part of the CNCF Slack workspace, you need to join the [CNCF Slack](https://slack.cncf.io/) first.

## See You Next Month! [​](https://openfga.dev/blog\#see-you-next-month "Direct link to See You Next Month!")

Fine Grained News is published every month. If you have any feedback, want to share your OpenFGA story, or have a noteworthy update, please let us know on any of our [community channels](https://openfga.dev/community) or at [community@openfga.dev](mailto:community@openfga.dev).

OpenFGA query APIs now allow specifying the desired consistency of query results. By default, OpenFGA does not use a cache. However, when caching is enabled, it applies to all requests. This means that any changes in permissions won't be reflected in authorization checks during the cache TTL period.

The community expressed the need for flexibility in using the cache on a per-request basis. In response, starting with [OpenFGA v1.5.7](https://github.com/openfga/openfga/releases/tag/v1.5.7), all query APIs can accept a consistency parameter with the following values:

| Name | Description |
| --- | --- |
| MINIMIZE\_LATENCY (default) | OpenFGA will try to minimize latency (e.g. by making use of the cache) |
| HIGHER\_CONSISTENCY | OpenFGA will try to optimize for stronger consistency (e.g. by bypassing cache) |

When `HIGHER_CONSISTENCY` is specified, OpenFGA reads directly from the database, even when the cache is enabled.

## How to use it? [​](https://openfga.dev/blog\#how-to-use-it "Direct link to How to use it?")

The new consistency parameter is available in OpenFGA starting [v1.5.7](https://github.com/openfga/openfga/releases/tag/v1.5.7).

The parameter is supported by all OpenFGA SDKs.

For more information on enabling the cache and best practices for specifying consistency values, refer to the [documentation](https://openfga.dev/docs/interacting/consistency).

## Custom database adapter implementations [​](https://openfga.dev/blog\#custom-database-adapter-implementations "Direct link to Custom database adapter implementations")

For those with a custom database adapter for a multi-region database, the behavior of the HIGHER\_CONSISTENCY parameter can be defined according to your needs. With an eventually consistent database (e.g., Dynamo DB) in a multi-region setup, there will be replication lag even if the cache is bypassed. If the database supports strong reads, you can choose to perform those at an extra cost. Otherwise, you can perform an eventually consistent read without providing full consistency semantics to the caller. In some other databases where you have Read/Write replicas, you may choose to go to the Write replica when the `HIGHER_CONSISTENCY` preference is selected.

## Future work [​](https://openfga.dev/blog\#future-work "Direct link to Future work")

[Google Zanzibar](https://zanzibar.academy/) features a consistency token called `Zookies`, returned from write operations. This token can be stored in a resource table and specified in subsequent query API calls. We are considering introducing a similar feature in future releases.

## We want your feedback! [​](https://openfga.dev/blog\#we-want-your-feedback "Direct link to We want your feedback!")

We want to learn how you use this API and how we can improve it!

Please reach out through our [community channels](https://openfga.dev/community) with any questions or feedback.

Welcome to Fine Grained News, June 2024 edition!

This is where we share what has been going on in the OpenFGA community during the last 30 days :).

## What are we working on? [​](https://openfga.dev/blog\#what-are-we-working-on "Direct link to What are we working on?")

- We started adding [OpenTelemetry instrumentation](https://github.com/openfga/roadmap/issues/41) to our SDKs. We just shipped metrics support for Python and Javascript. We'll continue with tracing and logging, and we'll be adding support for Java, Go and .NET next.

- We are close to ship a first iteration to [add additional consistency options](https://github.com/orgs/openfga/projects/1?pane=issue&itemId=49635084) for OpenFGA.

- We are working with [Krishna Kumar](https://github.com/krishnakv) and [Eddie Knight](https://github.com/eddie-knight) from the CNCF Tag-Security team on a joint security assessment for OpenFGA. We are pretty close to wrapping it up! You can follow the progress in [this PR](https://github.com/cncf/tag-security/pull/1289).

- We'll be working on adding [authorization for OpenFGA APIs](https://github.com/openfga/roadmap/issues/30).

- We've identified a few areas where we can improve performance and we are actively working on them.


If you have any feedback, or want to try a feature early, or are interested to learn more, please reach out!

## New Adopters [​](https://openfga.dev/blog\#new-adopters "Direct link to New Adopters")

We are thrilled to welcome [Sourcegraph](https://sourcegraph.com/) to the list of companies in our [Adopters list](https://github.com/openfga/community/blob/main/ADOPTERS.md)! We are proud to be addressing their fine-grained authorization needs.

If you are using OpenFGA in production, please consider adding your company/project to the [list](https://github.com/openfga/community/blob/main/ADOPTERS.md), it will be greatly appreciated!

## Community [​](https://openfga.dev/blog\#community "Direct link to Community")

- [Zuplo](https://zuplo.com/) released an [OpenFGA Authorization Inbound Policy](https://zuplo.com/docs/policies/openfga-authz-inbound) that makes it super simple to add fine-grained authorization to your APIs. They are also using OpenFGA deployed globally in GCP for Zuplo itself. You can learn more about their OpenFGA integration journey [in this webinar](https://landing.zuplo.com/oktafgawebinarreg).

- [Martin Besozzi](https://github.com/embesozzi) built an [APISIX plugin for OpenFGA](https://github.com/embesozzi/apisix-authz-openfga). He also published a blog post about [Mastering Access Control: Implementing Low-Code Authorization Based on ReBAC and Decoupling Pattern](https://embesozzi.medium.com/mastering-access-control-implementing-low-code-authorization-based-on-rebac-and-decoupling-pattern-f6f54f70115e) demonstrating how to use it.

- [Andres Aguiar](https://github.com/aaguiarz) and [Damian Schenkelman](https://github.com/dschenkelman) will do an OpenFGA Deep Dive in the [July 17 episode of Identirati Office Hours](https://www.linkedin.com/feed/update/urn:li:activity:7211830083366322176/).


## OpenFGA @ CloudNative SecurityCon [​](https://openfga.dev/blog\#openfga--cloudnative-securitycon "Direct link to OpenFGA @ CloudNative SecurityCon")

OpenFGA was present in [CloudNative SecurityCon North America](https://events.linuxfoundation.org/cloudnativesecuritycon-north-america/)!

[Maria Ines Parnisari](https://github.com/miparnisari) from the OpenFGA team and [Evan Anderson](https://github.com/evankanderson) from [Stacklok](https://stacklok.com/) presented on [Implementing a Multi-Tenant, Relationship-Based Authorization Model with OpenFGA](https://cloudnativesecurityconna24.sched.com/event/1dCVn/implementing-a-multi-tenant-relationship-based-authorization-model-with-openfga-evan-anderson-stacklok-maria-ines-parnisari-okta).

![CloudNative SecurityCon Presentation](https://openfga.dev/assets/images/fgn-2024-06-securitycon-talk-57abfc6e4e3f7e573481a2fdfe30692c.jpg)

We also got a last-minute kiosk to showcase OpenFGA at the event:

![OpenFGA Kiosk](https://openfga.dev/assets/images/fgn-2024-06-securitycon-booth-b547906de2fa364259b5ba8c112ba91c.png)

Thanks to everyone that stopped by!

## Latest Features [​](https://openfga.dev/blog\#latest-features "Direct link to Latest Features")

In case you missed them, here are some of the latest major features we've added to OpenFGA:

- [List Users API](https://openfga.dev/blog/list-users-announcement) allows you to retrieve all the users that have a specific relation with a resource.

- [Modular Models](https://openfga.dev/blog/modular-models-announcement) makes it easy for multiple teams to collaborate on a single OpenFGA model.

- [JetBrain's IDEs plugin](https://plugins.jetbrains.com/plugin/24394-openfga) to allow syntax coloring and validation of OpenFGA models.

- [Conditional Tuples](https://openfga.dev/blog/conditional-tuples-announcement) allows you to define tuples that are only valid under certain conditions

- [Spring Boot Starter for OpenFGA](https://github.com/openfga/spring-boot-starter) simplifies integrating OpenFGA with Spring Security applications.


## Transitioning from Discord to CNCF's Slack [​](https://openfga.dev/blog\#transitioning-from-discord-to-cncfs-slack "Direct link to Transitioning from Discord to CNCF's Slack")

As we mentioned before, we transitioned out from Discord for OpenFGA and are now using the CNCF [#openfga Slack channel](https://cloud-native.slack.com/archives/C06G1NNH47N). If you are not part of the CNCF Slack workspace, you need to join the [CNCF Slack](https://slack.cncf.io/) first.

Checkout [https://openfga.dev/community](https://openfga.dev/community) for all the places to find us.

## See you next month! [​](https://openfga.dev/blog\#see-you-next-month "Direct link to See you next month!")

Fine Grained News are published every month. If you have any feedback, want to share your OpenFGA story, or know about something that you think is worth mentioning, please let us know!

Welcome to Fine Grained News, May edition!

## New Releases! [​](https://openfga.dev/blog\#new-releases "Direct link to New Releases!")

- We shipped the [a ListUsers API](https://openfga.dev/blog/list-users-announcement). ListUsers allows you to retrieve all the users that have a specific relation with a resource (e.g. all users that can view a document).

- In collaboration with [Yann D'Isanto](https://github.com/yann-disanto) we shipped a [plugin for JetBrain's IDEs](https://plugins.jetbrains.com/plugin/24394-openfga) to allow syntax coloring and validation of OpenFGA models. Together with the [Visual Studio Code integration](https://marketplace.visualstudio.com/items?itemName=openfga.openfga-vscode) and the [Tree sitter grammar](https://github.com/matoous/tree-sitter-fga) from [Matouš Dzivjak](https://github.com/matoous/), OpenFGA has get great coverage for major IDEs and editors.


## What's Next [​](https://openfga.dev/blog\#whats-next "Direct link to What's Next")

- We've identified a few areas where we can improve performance and we are actively working on them.
- We'll be [instrumenting our SDKs](https://github.com/openfga/roadmap/issues/41) to provide metrics / tracing and logging through OpenTelemetry APIs.
- We'll be adding [additional consistency options](https://github.com/openfga/roadmap/issues/54) for OpenFGA query APIs.
- We'll be working on adding [authorization for OpenFGA APIs](https://github.com/openfga/roadmap/issues/30).

Please check the items above and let us know if you have any feedback or idea.

## OpenFGA @ CloudNative SecurityCon [​](https://openfga.dev/blog\#openfga--cloudnative-securitycon "Direct link to OpenFGA @ CloudNative SecurityCon")

OpenFGA will be present in [CloudNative SecurityCon North America](https://events.linuxfoundation.org/cloudnativesecuritycon-north-america/)!

[Maria Ines Parnisari](https://github.com/miparnisari) from the OpenFGA team and [Evan Anderson](https://github.com/evankanderson) from [Stacklok](https://stacklok.com/) will be presenting on [Implementing a Multi-Tenant, Relationship-Based Authorization Model with OpenFGA](https://cloudnativesecurityconna24.sched.com/event/1dCVn/implementing-a-multi-tenant-relationship-based-authorization-model-with-openfga-evan-anderson-stacklok-maria-ines-parnisari-okta).

We hope to see you there!

## Latest Features [​](https://openfga.dev/blog\#latest-features "Direct link to Latest Features")

In case you missed them, here are some of the latest major features we've added to OpenFGA:

- [Conditional Tuples](https://openfga.dev/blog/conditional-tuples-announcement) allows you to define tuples that are only valid under certain conditions.
- [Modular Models](https://openfga.dev/blog/modular-models-announcement) makes it easy for multiple teams to collaborate on a single OpenFGA model.
- [List Users API](https://openfga.dev/blog/list-users-announcement) allowing you to retrieve all the users that have a specific relation with a resource.
- [Spring Boot Starter for OpenFGA](https://github.com/openfga/spring-boot-starter) simplifies integrating OpenFGA with Spring Security applications.
- [JetBrain's IDEs plugin](https://plugins.jetbrains.com/plugin/24394-openfga) to allow syntax coloring and validation of OpenFGA models.

## Transitioning from Discord to CNCF's Slack [​](https://openfga.dev/blog\#transitioning-from-discord-to-cncfs-slack "Direct link to Transitioning from Discord to CNCF's Slack")

As we mentioned before, we transitioned out from Discord for OpenFGA and are now using the CNCF [#openfga Slack channel](https://cloud-native.slack.com/archives/C06G1NNH47N). If you are not part of the CNCF Slack workspace, you need to join the [CNCF Slack](https://slack.cncf.io/) first.

Checkout [https://openfga.dev/community](https://openfga.dev/community) for all the places to find us.

## See you next month! [​](https://openfga.dev/blog\#see-you-next-month "Direct link to See you next month!")

Fine Grained News are published every month. If you have any feedback, want to share your OpenFGA story, or know about something that you think is worth mentioning, please let us know!

## Modeling Blocklists
[Skip to main content](https://openfga.dev/docs/modeling/blocklists#__docusaurus_skipToContent_fallback)

On this page

In this guide you'll see how to model preventing users from accessing objects using [OpenFGA](https://openfga.dev/docs/fga). For example, `blocking` users from accessing a `document`, even if it has been already shared with them.

When to use

Exclusion is useful while building applications. You may need to support access patterns like granting access to some users, but excluding specific people or groups, similar to how users can block others from following them on social media, or prevent them from sharing documents on Google Drive.

This is useful when:

- Implementing the "blocking" feature, such as the profile blocking commonly present on social media platforms (e.g. Instagram and Twitter).
- Reduce a user's access if they are part of a particular group (e.g. restricting access to members who are also guests, or restricting access to users in a certain locality).

## Before you start [​](https://openfga.dev/docs/modeling/blocklists\#before-you-start "Direct link to Before you start")

Before you start this guide, make sure you're familiar with some [OpenFGA Concepts](https://openfga.dev/docs/concepts) and know how to develop the things listed below.

You will start with the _[authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model)_ below, it represents a `document` _[type](https://openfga.dev/docs/concepts#what-is-a-type)_ that can have users **[related](https://openfga.dev/docs/concepts#what-is-a-relation)** as `editor`, and `team` type that can have users related as `member`.

Let us also assume that we have a `document` called "planning", shared for editing within the product `team` (comprised of becky and carl).

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define editor: [user, team#member]

type team
  relations
    define member: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "document",\
      "relations": {\
        "editor": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "editor": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "team",\
                "relation": "member"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "team",\
      "relations": {\
        "member": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "member": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

The current state of the system is represented by the following relationship tuples being in the system already:

```codeBlockLines_e6Vv
[// Members of the product team can edit the planning document\
  {\
  "_description": "Members of the product team can edit the planning document",\
  "user": "team:product#member",\
  "relation": "editor",\
  "object": "document:planning"\
}// Becky is a member of the product team\
  {\
  "_description": "Becky is a member of the product team",\
  "user": "user:becky",\
  "relation": "member",\
  "object": "team:product"\
}// Carl is a member of the product team\
  {\
  "_description": "Carl is a member of the product team",\
  "user": "user:carl",\
  "relation": "member",\
  "object": "team:product"\
}]

```

* * *

In addition, you will need to know the following:

### Modeling user groups [​](https://openfga.dev/docs/modeling/blocklists\#modeling-user-groups "Direct link to Modeling user groups")

You need to know how to add users to groups and grant groups access to resources. [Learn more →](https://openfga.dev/docs/modeling/user-groups)

### OpenFGA Concepts [​](https://openfga.dev/docs/modeling/blocklists\#-concepts "Direct link to -concepts")

- A [Type](https://openfga.dev/docs/concepts#what-is-a-type): a class of objects that have similar characteristics
- A [User](https://openfga.dev/docs/concepts#what-is-a-user): an entity in the system that can be related to an object
- A [Relation](https://openfga.dev/docs/concepts#what-is-a-relation): is a string defined in the type definition of an authorization model that defines the possibility of a relationship between an object of the same type as the type definition and a user in the system
- An [Object](https://openfga.dev/docs/concepts#what-is-an-object): represents an entity in the system. Users' relationships to it can be define through relationship tuples and the authorization model
- A [Relationship Tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple): a grouping consisting of a user, a relation and an object stored in OpenFGA
- [Exclusion Operator](https://openfga.dev/docs/configuration-language#the-exclusion-operator): the exclusion operator can be used to exclude certain usersets from being related to an object

## Step by step [​](https://openfga.dev/docs/modeling/blocklists\#step-by-step "Direct link to Step by step")

With the above authorization model and relationship tuples, OpenFGA will correctly respond with `{"allowed":true}` when [check](https://openfga.dev/docs/concepts#what-is-a-check-request) is called to see if Carl and Becky can edit this `document`.

We can verify that by issuing two check requests:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:becky',
    relation: 'editor',
    object: 'document:planning',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:becky",
    Relation: "editor",
    Object:   "document:planning",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:becky",
    Relation = "editor",
    Object = "document:planning",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:becky",
    relation="editor",
    object="document:planning",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:becky")
        .relation("editor")
        ._object("document:planning");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:becky editor document:planning

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:becky","relation":"editor","object":"document:planning"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:becky", // check if the user `user:becky`
  relation = "editor", // has an `editor` relation
  object = "document:planning", // with the object `document:planning`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:becky related to document:planning as editor?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:carl',
    relation: 'editor',
    object: 'document:planning',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:carl",
    Relation: "editor",
    Object:   "document:planning",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:carl",
    Relation = "editor",
    Object = "document:planning",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:carl",
    relation="editor",
    object="document:planning",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:carl")
        .relation("editor")
        ._object("document:planning");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:carl editor document:planning

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:carl","relation":"editor","object":"document:planning"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:carl", // check if the user `user:carl`
  relation = "editor", // has an `editor` relation
  object = "document:planning", // with the object `document:planning`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:carl related to document:planning as editor?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

We want to share a document with the product team and also have the ability to deny certain users access, even if they have the document shared with them already. We can verify this by blocking Carl (who we have seen already has edit access) from editing the document.

In order to do that, we need to:

1. [Modify our model to allow indicating that users can be blocked from accessing a document](https://openfga.dev/docs/modeling/blocklists#01-modify-our-model-so-users-can-be-blocked-from-accessing-a-document)
2. [Modify our model to indicate that users who are blocked can no longer edit the document](https://openfga.dev/docs/modeling/blocklists#02-modify-our-model-so-users-who-are-blocked-can-no-longer-edit-the-document)
3. [Verify that our solution works](https://openfga.dev/docs/modeling/blocklists#03-verify-our-solution-works):

a. [Indicate that Carl is blocked from the planning document](https://openfga.dev/docs/modeling/blocklists#a-indicate-that-carl-is-blocked-from-the-planning-document)

b. [Carl (now blocked) can no longer edit the document](https://openfga.dev/docs/modeling/blocklists#b-carl-now-blocked-can-no-longer-edit-the-document)

c. [Becky still has edit access](https://openfga.dev/docs/modeling/blocklists#c-becky-still-has-edit-access)

### 01\. Modify our model so users can be blocked from accessing a document [​](https://openfga.dev/docs/modeling/blocklists\#01-modify-our-model-so-users-can-be-blocked-from-accessing-a-document "Direct link to 01. Modify our model so users can be blocked from accessing a document")

To allow users to be "blocked" from accessing a `document`, we first need to allow this relation. We'll update our store model to add a `blocked` [relation](https://openfga.dev/docs/concepts#what-is-a-relation) to the `document` type.

The authorization model becomes this:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define blocked: [user]
    define editor: [user, team#member]

type team
  relations
    define member: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "document",\
      "relations": {\
        "blocked": {\
          "this": {}\
        },\
        "editor": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "blocked": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "editor": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "team",\
                "relation": "member"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "team",\
      "relations": {\
        "member": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "member": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

Now we can add relationship tuples indicating that a certain user is `blocked` from editing a `document`.

### 02\. Modify our model so users who are blocked can no longer edit the document [​](https://openfga.dev/docs/modeling/blocklists\#02-modify-our-model-so-users-who-are-blocked-can-no-longer-edit-the-document "Direct link to 02. Modify our model so users who are blocked can no longer edit the document")

Now that we can mark users as `blocked` from editing documents, we need to support denying the `editor` relationship when a user is `blocked`. We do that by modifying the relation definition of `editor`, and making use of the [**exclusion operator**](https://openfga.dev/docs/configuration-language#the-exclusion-operator) to exclude the set of `blocked` users, as we can see here:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define blocked: [user]
    define editor: [user, team#member] but not blocked

type team
  relations
    define member: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "document",\
      "relations": {\
        "blocked": {\
          "this": {}\
        },\
        "editor": {\
          "difference": {\
            "base": {\
              "this": {}\
            },\
            "subtract": {\
              "computedUserset": {\
                "relation": "blocked"\
              }\
            }\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "blocked": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "editor": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "team",\
                "relation": "member"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "team",\
      "relations": {\
        "member": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "member": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

### 03\. Verify our solution works [​](https://openfga.dev/docs/modeling/blocklists\#03-verify-our-solution-works "Direct link to 03. Verify our solution works")

To check if our new model works, we'll add a relationship tuple with Carl as `blocked` from `document:planning` and then verify that Carl no longer has `editor` access to that document.

#### a. Indicate that Carl is blocked from the planning document [​](https://openfga.dev/docs/modeling/blocklists\#a-indicate-that-carl-is-blocked-from-the-planning-document "Direct link to a. Indicate that Carl is blocked from the planning document")

With our modified authorization model, we can indicate that Carl is blocked by adding this _[relationship tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple)_.

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // Carl is blocked from editing the planning document\
      {"_description":"Carl is blocked from editing the planning document","user":"user:carl","relation":"blocked","object":"document:planning"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             // Carl is blocked from editing the planning document
             User: "user:carl",
             Relation: "blocked",
             Object: "document:planning",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
    // Carl is blocked from editing the planning document
       new() {
                  User = "user:carl",
                  Relation = "blocked",
                  Object = "document:planning"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    # Carl is blocked from editing the planning document\
                    user="user:carl",\
                    relation="blocked",\
                    object="document:planning",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                // Carl is blocked from editing the planning document
                new ClientTupleKey()
                        .user("user:carl")
                        .relation("blocked")
                        ._object("document:planning")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"_description":"Carl is blocked from editing the planning document","user":"user:carl","relation":"blocked","object":"document:planning"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:carl blocked document:planning

```

```codeBlockLines_e6Vv
write([\
    // Carl is blocked from editing the planning document\
    {\
      "user":"user:carl",\
      "relation":"blocked",\
      "object":"document:planning"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

#### b. Carl (now blocked) can no longer edit the document [​](https://openfga.dev/docs/modeling/blocklists\#b-carl-now-blocked-can-no-longer-edit-the-document "Direct link to b. Carl (now blocked) can no longer edit the document")

We have modified the authorization model and added relationship tuples to indicate that Carl is `blocked`. Now let's make sure our solution works as expected.

To check if Carl still has access to the document, we can issue a check request with Carl as the user.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:carl',
    relation: 'editor',
    object: 'document:planning',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:carl",
    Relation: "editor",
    Object:   "document:planning",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:carl",
    Relation = "editor",
    Object = "document:planning",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:carl",
    relation="editor",
    object="document:planning",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:carl")
        .relation("editor")
        ._object("document:planning");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:carl editor document:planning

# Response: {"allowed":false}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:carl","relation":"editor","object":"document:planning"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:carl", // check if the user `user:carl`
  relation = "editor", // has an `editor` relation
  object = "document:planning", // with the object `document:planning`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:carl related to document:planning as editor?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

The response is `false`, so our solution is working as expected.

#### c. Becky still has edit access [​](https://openfga.dev/docs/modeling/blocklists\#c-becky-still-has-edit-access "Direct link to c. Becky still has edit access")

To check if Becky still has access to the document, we'll issue another check request with Becky as the user.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:becky',
    relation: 'editor',
    object: 'document:planning',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:becky",
    Relation: "editor",
    Object:   "document:planning",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:becky",
    Relation = "editor",
    Object = "document:planning",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:becky",
    relation="editor",
    object="document:planning",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:becky")
        .relation("editor")
        ._object("document:planning");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:becky editor document:planning

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:becky","relation":"editor","object":"document:planning"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:becky", // check if the user `user:becky`
  relation = "editor", // has an `editor` relation
  object = "document:planning", // with the object `document:planning`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:becky related to document:planning as editor?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

The response is `true`, indicating our model change did not inadvertently deny access for users who have access but are not blocked.

caution

When creating tuples for OpenFGA make sure to use unique ids for each object and user within your application domain. We are using first names and human-readable identifiers to make this task easier to read.

## Related Sections [​](https://openfga.dev/docs/modeling/blocklists\#related-sections "Direct link to Related Sections")

Check the following sections for more on how to model with OpenFGA.

Modeling: Getting Started

Learn about how to get started with modeling.

- [More](https://openfga.dev/docs/modeling/getting-started)

Configuration Language

Learn about OpenFGA Configuration Language.

- [More](https://openfga.dev/docs/configuration-language)

Public Access

Learn about model public access.

- [More](https://openfga.dev/docs/modeling/public-access)

- [Before you start](https://openfga.dev/docs/modeling/blocklists#before-you-start)
  - [Modeling user groups](https://openfga.dev/docs/modeling/blocklists#modeling-user-groups)
  - [Concepts](https://openfga.dev/docs/modeling/blocklists#-concepts)
- [Step by step](https://openfga.dev/docs/modeling/blocklists#step-by-step)
  - [01\. Modify our model so users can be blocked from accessing a document](https://openfga.dev/docs/modeling/blocklists#01-modify-our-model-so-users-can-be-blocked-from-accessing-a-document)
  - [02\. Modify our model so users who are blocked can no longer edit the document](https://openfga.dev/docs/modeling/blocklists#02-modify-our-model-so-users-who-are-blocked-can-no-longer-edit-the-document)
  - [03\. Verify our solution works](https://openfga.dev/docs/modeling/blocklists#03-verify-our-solution-works)
- [Related Sections](https://openfga.dev/docs/modeling/blocklists#related-sections)

## Getting Started with OpenFGA
[Skip to main content](https://openfga.dev/docs/getting-started#__docusaurus_skipToContent_fallback)

The following will provide a step-by-step guide on how to get started with OpenFGA.

When to use

This section is useful if you understand the basic concepts of OpenFGA, and want to learn how to get started.

Setup OpenFGA

How to setup an OpenFGA server.

- [Click to navigate](https://openfga.dev/docs/getting-started/setup-openfga/overview)

Install SDK Client

Install the SDK for the language of your choice.

- [Click to navigate](https://openfga.dev/docs/getting-started/install-sdk)

Create a Store

Creating an OpenFGA entity that owns an authorization model and relationship tuples.

- [Click to navigate](https://openfga.dev/docs/getting-started/create-store)

Setup SDK Client for Store

Configure the SDK client for your store.

- [Click to navigate](https://openfga.dev/docs/getting-started/setup-sdk-client)

Configure Authorization Model

Programmatically configure authorization model for an OpenFGA store.

- [Click to navigate](https://openfga.dev/docs/getting-started/configure-model)

Update Relationship Tuples

Programmatically write authorization data to an OpenFGA store.

- [Click to navigate](https://openfga.dev/docs/getting-started/update-tuples)

Perform a Check

Programmatically perform an authorization check against an OpenFGA store.

- [Click to navigate](https://openfga.dev/docs/getting-started/perform-check)

Perform a List Objects Request

Programmatically perform a list objects request against an OpenFGA store.

- [Click to navigate](https://openfga.dev/docs/getting-started/perform-list-objects)

Integrate Within a Framework

Integrate authorization checks with a framework.

- [Click to navigate](https://openfga.dev/docs/getting-started/framework)

Immutable Authorization Models

Learn how to take advantage of the immutable properties of Authorization Models in OpenFGA.

- [Click to navigate](https://openfga.dev/docs/getting-started/immutable-models)

Production Best Practices

Best Practices of Running OpenFGA in Production Environment.

- [Click to navigate](https://openfga.dev/docs/getting-started/running-in-production)

Implementation Best Practices

Best Practices of Managing Tuples and Invoking OpenFGA APIs.

- [Click to navigate](https://openfga.dev/docs/getting-started/tuples-api-best-practices)

## OpenFGA Configuration Language
[Skip to main content](https://openfga.dev/docs/configuration-language#__docusaurus_skipToContent_fallback)

On this page

OpenFGA's Configuration Language builds a representation of a system's [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model), which informs [OpenFGA's API](https://openfga.dev/api/service) on the [object types](https://openfga.dev/docs/concepts#what-is-a-type) in the system and how they relate to each other. The Configuration Language describes the [relations](https://openfga.dev/docs/concepts#what-is-a-relation) possible for an object of a given type and lists the conditions under which one is related to that object.

The Configuration Language can be presented in **DSL** or **JSON** syntax. The JSON syntax is accepted by the API and closely tracks the language in the [Zanzibar paper](https://research.google/pubs/pub48190/). The DSL adds syntactic sugar on top of JSON for ease of use, but compiles down to JSON before being sent to OpenFGA's API. JSON syntax is used to call API directly or through the [SDKs](https://openfga.dev/docs/getting-started), while DSL is used to interact with OpenFGA in the [Playground](https://play.fga.dev/), the [CLI](https://github.com/openfga/cli), and the IDE extensions for [Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=openfga.openfga-vscode) and [IntelliJ](https://plugins.jetbrains.com/plugin/24394-openfga). They can be switched between throughout this documentation.

Please familiarize yourself with basic [OpenFGA Concepts](https://openfga.dev/docs/concepts) and [How to get started on modeling](https://openfga.dev/docs/modeling/getting-started) before starting this guide.

## What Does The Configuration Language Look Like? [​](https://openfga.dev/docs/configuration-language\#what-does-the-configuration-language-look-like "Direct link to What Does The Configuration Language Look Like?")

Below is a sample authorization model. The next sections discuss the basics of the OpenFGA configuration language.

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type domain
  relations
    define member: [user]

type folder
  relations
    define can_share: writer
    define owner: [user, domain#member] or owner from parent_folder
    define parent_folder: [folder]
    define viewer: [user, domain#member] or writer or viewer from parent_folder
    define writer: [user, domain#member] or owner or writer from parent_folder

type document
  relations
    define can_share: writer
    define owner: [user, domain#member] or owner from parent_folder
    define parent_folder: [folder]
    define viewer: [user, domain#member] or writer or viewer from parent_folder
    define writer: [user, domain#member] or owner or writer from parent_folder

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "domain",\
      "relations": {\
        "member": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "member": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "folder",\
      "relations": {\
        "can_share": {\
          "computedUserset": {\
            "object": "",\
            "relation": "writer"\
          }\
        },\
        "owner": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "tupleToUserset": {\
                  "tupleset": {\
                    "object": "",\
                    "relation": "parent_folder"\
                  },\
                  "computedUserset": {\
                    "object": "",\
                    "relation": "owner"\
                  }\
                }\
              }\
            ]\
          }\
        },\
        "parent_folder": {\
          "this": {}\
        },\
        "viewer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "object": "",\
                  "relation": "writer"\
                }\
              },\
              {\
                "tupleToUserset": {\
                  "tupleset": {\
                    "object": "",\
                    "relation": "parent_folder"\
                  },\
                  "computedUserset": {\
                    "object": "",\
                    "relation": "viewer"\
                  }\
                }\
              }\
            ]\
          }\
        },\
        "writer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "object": "",\
                  "relation": "owner"\
                }\
              },\
              {\
                "tupleToUserset": {\
                  "tupleset": {\
                    "object": "",\
                    "relation": "parent_folder"\
                  },\
                  "computedUserset": {\
                    "object": "",\
                    "relation": "writer"\
                  }\
                }\
              }\
            ]\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "owner": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "domain",\
                "relation": "member"\
              }\
            ]\
          },\
          "parent_folder": {\
            "directly_related_user_types": [\
              {\
                "type": "folder"\
              }\
            ]\
          },\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "domain",\
                "relation": "member"\
              }\
            ]\
          },\
          "writer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "domain",\
                "relation": "member"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "document",\
      "relations": {\
        "can_share": {\
          "computedUserset": {\
            "object": "",\
            "relation": "writer"\
          }\
        },\
        "owner": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "tupleToUserset": {\
                  "tupleset": {\
                    "object": "",\
                    "relation": "parent_folder"\
                  },\
                  "computedUserset": {\
                    "object": "",\
                    "relation": "owner"\
                  }\
                }\
              }\
            ]\
          }\
        },\
        "parent_folder": {\
          "this": {}\
        },\
        "viewer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "object": "",\
                  "relation": "writer"\
                }\
              },\
              {\
                "tupleToUserset": {\
                  "tupleset": {\
                    "object": "",\
                    "relation": "parent_folder"\
                  },\
                  "computedUserset": {\
                    "object": "",\
                    "relation": "viewer"\
                  }\
                }\
              }\
            ]\
          }\
        },\
        "writer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "object": "",\
                  "relation": "owner"\
                }\
              },\
              {\
                "tupleToUserset": {\
                  "tupleset": {\
                    "object": "",\
                    "relation": "parent_folder"\
                  },\
                  "computedUserset": {\
                    "object": "",\
                    "relation": "writer"\
                  }\
                }\
              }\
            ]\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "owner": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "domain",\
                "relation": "member"\
              }\
            ]\
          },\
          "parent_folder": {\
            "directly_related_user_types": [\
              {\
                "type": "folder"\
              }\
            ]\
          },\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "domain",\
                "relation": "member"\
              }\
            ]\
          },\
          "writer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "domain",\
                "relation": "member"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

info

The authorization model describes four [types](https://openfga.dev/docs/concepts#what-is-a-type) of objects: `user`, `domain`, `folder` and `document`.

The `domain` [type definition](https://openfga.dev/docs/concepts#what-is-a-type-definition) has a single [relation](https://openfga.dev/docs/concepts#what-is-a-relation) called `member` that only allows [direct relationships](https://openfga.dev/docs/concepts#what-are-direct-and-implied-relationships).

The `folder` and `document` type definitions each have five relations: `parent_folder`, `owner`, `writer`, `viewer` and `can_share`.

### Direct Relationship Type Restrictions [​](https://openfga.dev/docs/configuration-language\#direct-relationship-type-restrictions "Direct link to Direct Relationship Type Restrictions")

When used at the beginning of a [relation definition](https://openfga.dev/docs/concepts#what-is-a-relation-definition), `[<string, <string>, ...]` allows [direct relationships](https://openfga.dev/docs/concepts#what-are-direct-and-implied-relationships) by the objects of these specified types. The strings can be in one of three formats:

- `<type>`: indicates that tuples relating objects of those types as users can be written. For example, `group:marketing` can be related if `group` is in the type restrictions.
- `<type:*>`: indicates that a tuple relating all objects of that type can be written. For example, `user:*` can be added if `user:*` is in the type restrictions.
- `<type>#<relation>`: indicates tuples with sets of users related to an object of that type by that particular relation. For example, `group:marketing#member` can be added if `group#member` is in the type restrictions.

If no direct relationship type restrictions are specified, direct relationships are disallowed and tuples cannot be written relating other objects of this particular relation with objects of this type.

info

`[<type1>, <type2>, ...]` in the OpenFGA DSL translates to `this` in the OpenFGA API syntax.

For example, below is a snippet of the `team` type:

- DSL
- JSON

```codeBlockLines_e6Vv

type team
  relations
    define member: [user, user:*, team#member]

```

```codeBlockLines_e6Vv
{
  "type": "team",
  "relations": {
    "member": {
      "this": {}
    }
  },
  "metadata": {
    "relations": {
      "member": {
        "directly_related_user_types": [\
          {\
            "type": "user"\
          },\
          {\
            "type": "user:*"\
          },\
          {\
            "type": "team",\
            "relation": "member"\
          }\
        ]
      }
    }
  }
}

```

The `team` [type definition](https://openfga.dev/docs/concepts#what-is-a-type-definition) above defines all the [relations](https://openfga.dev/docs/concepts#what-is-a-relation) that [users](https://openfga.dev/docs/concepts#what-is-a-user) can have with an _[object](https://openfga.dev/docs/concepts#what-is-an-object)_ of type `team`. In this example, the relation is `member`.

Because of the `[user, team#member]` direct relationship type restrictions used, a user in the system can have a **[direct relationship](https://openfga.dev/docs/concepts#what-are-direct-and-implied-relationships)** with the `team` type as a `member` for objects of:

- type `user`
- the `user` [type bound public access](https://openfga.dev/docs/concepts#what-is-type-bound-public-access) ( `user:*`)
- [usersets](https://openfga.dev/docs/modeling/building-blocks/usersets) that have a `team` type and a `member` relation (e.g. `team:product#member`)

In the type definition snippet above, `anne` is a `member` of `team:product` if any of the following relationship tuple sets exist:

- ```codeBlockLines_e6Vv
[// Anne is directly related to the product team as a member\
    {\
    "user": "user:anne",\
    "relation": "member",\
    "object": "team:product",\
    "_description": "Anne is directly related to the product team as a member"\
}]

```

- ```codeBlockLines_e6Vv
[// Everyone (`*`) is directly related to the product team as a member\
    {\
    "user": "user:*",\
    "relation": "member",\
    "object": "team:product",\
    "_description": "Everyone (`*`) is directly related to the product team as a member"\
}]

```

- ```codeBlockLines_e6Vv
[// Members of the contoso team are members of the product team\
    {\
    "user": "team:contoso#member",\
    "relation": "member",\
    "object": "team:product",\
    "_description": "Members of the contoso team are members of the product team"\
}// Anne is a member of the contoso team\
    {\
    "user": "user:anne",\
    "relation": "member",\
    "object": "team:contoso",\
    "_description": "Anne is a member of the contoso team"\
}]

```


For more examples, see [Modeling Building Blocks: Direct Relationships](https://openfga.dev/docs/modeling/building-blocks/direct-relationships).

### Referencing Other Relations On The Same Object [​](https://openfga.dev/docs/configuration-language\#referencing-other-relations-on-the-same-object "Direct link to Referencing Other Relations On The Same Object")

The same object can also reference other relations. Below is a simplified `document` type definition:

- DSL
- JSON

```codeBlockLines_e6Vv

type document
relations
    define editor: [user]
    define viewer: [user] or editor
    define can_rename: editor

```

```codeBlockLines_e6Vv
{
"type": "document",
"relations": {
    "editor": {
      "this": {}
    },
    "viewer": {
      "union": {
        "child": [\
          {\
            "this": {}\
          },\
          {\
            "computedUserset": {\
              "relation": "editor"\
            }\
          }\
        ]
      }
    },
    "can_rename": {
      "computedUserset": {
        "relation": "editor"
      }
    }
},
"metadata": {
    "relations": {
      "editor": {
        "directly_related_user_types": [\
          {\
            "type": "user"\
          }\
        ]
      },
      "viewer": {
        "directly_related_user_types": [\
          {\
            "type": "user"\
          }\
        ]
      }
    }
}
}

```

Above, `document` [type definition](https://openfga.dev/docs/concepts#what-is-a-type-definition) defines all the [relations](https://openfga.dev/docs/concepts#what-is-a-relation) that [users](https://openfga.dev/docs/concepts#what-is-a-user) can have with an [object](https://openfga.dev/docs/concepts#what-is-an-object) of type `document`. In this case, the relations are `editor`, `viewer` and `can_rename`. The `viewer` and `can_rename` relation definitions both reference `editor`, which is another relation of the same type.

info

`can_rename` does not reference the [direct relationship type restrictions](https://openfga.dev/docs/configuration-language#direct-relationship-type-restrictions), which means a user cannot be directly assigned this relation and it must be inherited when the `editor` relation is assigned. Conversely, the `viewer` relation allows both direct and indirect relationships using the [Union Operator](https://openfga.dev/docs/configuration-language#the-union-operator).

In the type definition snippet above, `anne` is a `viewer` of `document:new-roadmap` if any one of the following relationship tuple sets exists:

- _anne_ is an _editor_ of _document:new-roadmap_





```codeBlockLines_e6Vv
[// Anne is an editor of the new-roadmap document\
    {\
    "user": "user:anne",\
    "relation": "editor",\
    "object": "document:new-roadmap",\
    "_description": "Anne is an editor of the new-roadmap document"\
}]

```

- _anne_ is a _viewer_ of _document:new-roadmap_





```codeBlockLines_e6Vv
[// Anne is a viewer of the new-roadmap document\
    {\
    "user": "user:anne",\
    "relation": "viewer",\
    "object": "document:new-roadmap",\
    "_description": "Anne is a viewer of the new-roadmap document"\
}]

```


`anne` has a `can_rename` relationship with `document:new-roadmap` only if `anne` has an `editor` relationship with the document:

- _anne_ is an _editor_ of _document:new-roadmap_




```codeBlockLines_e6Vv
[// Anne is an editor of thew new-roadmap document\
    {\
    "user": "user:anne",\
    "relation": "editor",\
    "object": "document:new-roadmap",\
    "_description": "Anne is an editor of thew new-roadmap document"\
}]

```


For more examples, see [Modeling Building Blocks: Concentric Relationships](https://openfga.dev/docs/modeling/building-blocks/concentric-relationships), [Modeling: Roles and Permissions](https://openfga.dev/docs/modeling/roles-and-permissions) and [Advanced Modeling: Google Drive](https://openfga.dev/docs/modeling/advanced/gdrive).

### Referencing Relations On Related Objects [​](https://openfga.dev/docs/configuration-language\#referencing-relations-on-related-objects "Direct link to Referencing Relations On Related Objects")

Another set of [indirect relationships](https://openfga.dev/docs/concepts#what-are-direct-and-implied-relationships) are made possible by referencing relations to other objects.

The syntax is `X from Y` and requires that:

- the other object is related to the current object as `Y`
- the _user_ is related to another object as `X`

See the _authorization model_ below.

- DSL
- JSON

```codeBlockLines_e6Vv
model
schema 1.1

type user

type folder
relations
    define viewer: [user, folder#viewer]

type document
relations
    define parent_folder: [folder]
    define viewer: [user] or viewer from parent_folder

```

```codeBlockLines_e6Vv
{
"schema_version": "1.1",
"type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "folder",\
      "relations": {\
        "viewer": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "folder",\
                "relation": "viewer"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "document",\
      "relations": {\
        "parent_folder": {\
          "this": {}\
        },\
        "viewer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "tupleToUserset": {\
                  "tupleset": {\
                    "object": "",\
                    "relation": "parent_folder"\
                  },\
                  "computedUserset": {\
                    "object": "",\
                    "relation": "viewer"\
                  }\
                }\
              }\
            ]\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "parent_folder": {\
            "directly_related_user_types": [\
              {\
                "type": "folder"\
              }\
            ]\
          },\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
]
}

```

The snippet below (taken from the authorization model above) states that viewers of a document are both (a) all users directly assigned the viewer relation and (b) all users who can view the document's parent folder.

- DSL
- JSON

```codeBlockLines_e6Vv

type document
relations
    define viewer: [user] or viewer from parent_folder

```

```codeBlockLines_e6Vv
{
"type_definitions": [\
    {\
      "type": "document",\
      "relations": {\
        "viewer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "tupleToUserset": {\
                  "tupleset": {\
                    "object": "",\
                    "relation": "parent_folder"\
                  },\
                  "computedUserset": {\
                    "object": "",\
                    "relation": "viewer"\
                  }\
                }\
              }\
            ]\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
]
}

```

In the authorization model above, `user:anne` is a `viewer` of `document:new-roadmap` if any one of the following relationship tuples sets exists:

- Anne is a viewer of the parent folder of the new-roadmap document




```codeBlockLines_e6Vv
[// planning folder is the parent folder of the new-roadmap document\
    {\
    "user": "folder:planning",\
    "relation": "parent_folder",\
    "object": "document:new-roadmap",\
    "_description": "planning folder is the parent folder of the new-roadmap document"\
}// anne is a viewer of the planning folder\
    {\
    "user": "user:anne",\
    "relation": "viewer",\
    "object": "folder:planning",\
    "_description": "anne is a viewer of the planning folder"\
}]

```

- Anne is a viewer of the new-roadmap document (direct relationship)




```codeBlockLines_e6Vv
[// anne is a viewer of the new-roadmap document\
    {\
    "user": "user:anne",\
    "relation": "viewer",\
    "object": "document:new-roadmap",\
    "_description": "anne is a viewer of the new-roadmap document"\
}]

```


Referencing relations on related objects defines transitive implied relationship. If User A is related to Object B as a viewer, and Object B is related to Object C as parent, then User A is related to Object C as viewer. This can indicate that viewers of a folders are viewers of all documents in that folder.

caution

OpenFGA does not allow the referenced relation (the word after `from`, also called the tupleset) to reference another relation and does not allow non-concrete types (type bound public access ( `<object_type>:*`) or usersets ( `<object_type>#<relation>`)) in its type restrictions; adding them throws a validation error when calling `WriteAuthorizationModel`.

For more examples, see [Modeling: Parent-Child Objects](https://openfga.dev/docs/modeling/parent-child), [Advanced Modeling: Google Drive](https://openfga.dev/docs/modeling/advanced/gdrive), [Advanced Modeling: GitHub](https://openfga.dev/docs/modeling/advanced/github), and [Advanced Modeling: Entitlements](https://openfga.dev/docs/modeling/advanced/entitlements).

### The Union Operator [​](https://openfga.dev/docs/configuration-language\#the-union-operator "Direct link to The Union Operator")

The **union operator** ( `or` in the DSL, `union` in the JSON syntax) indicates that a [relationship](https://openfga.dev/docs/concepts#what-is-a-relationship) exists if the [user](https://openfga.dev/docs/concepts#what-is-a-user) is in any of the sets of users ( `union`).

- DSL
- JSON

```codeBlockLines_e6Vv

type document
relations
    define viewer: [user] or editor

```

```codeBlockLines_e6Vv
{
"type_definitions": [\
    {\
      "type": "document",\
      "relations": {\
        "viewer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "editor"\
                }\
              }\
            ]\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
]
}

```

In the [type definition](https://openfga.dev/docs/concepts#what-is-a-type-definition) snippet above, `user:anne` is a `viewer` of `document:new-roadmap` if any of the following conditions are satisfied:

- there exists a [direct relationship](https://openfga.dev/docs/concepts#what-are-direct-and-implied-relationships) with _anne_ as _editor_ of _document:new-roadmap_




```codeBlockLines_e6Vv
[{\
    "user": "user:anne",\
    "relation": "editor",\
    "object": "document:new-roadmap"\
}]

```

- _anne_ is a _viewer_ of _document:new-roadmap_




```codeBlockLines_e6Vv
[{\
    "user": "user:anne",\
    "relation": "viewer",\
    "object": "document:new-roadmap"\
}]

```


info

The above [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model) indicates that a user is related as a viewer if they are in any of the following:

- the userset of all users related to the object as "viewer", indicating that a user can be assigned a direct `viewer` relation
- the userset of all users related to the object as "editor", indicating that a user who is an editor is also implicitly a viewer

If `anne` is in at least one of those usersets, meaning `anne` is either an `editor` or a `viewer`, the [check](https://openfga.dev/docs/concepts#what-is-a-check-request) on `{"user": "user:anne", "relation": "viewer", "object": "document:new-roadmap"}` returns `{"allowed": true}`.

For more examples, see [Modeling Building Blocks: Concentric Relationships](https://openfga.dev/docs/modeling/building-blocks/concentric-relationships), [Modeling Roles and Permissions](https://openfga.dev/docs/modeling/roles-and-permissions) and [Advanced Modeling: Modeling for IoT](https://openfga.dev/docs/modeling/advanced/iot#03-updating-our-authorization-model-to-facilitate-future-changes).

### The Intersection Operator [​](https://openfga.dev/docs/configuration-language\#the-intersection-operator "Direct link to The Intersection Operator")

The **intersection operator** ( `and` in the DSL, `intersection` in the JSON syntax) indicates that a [relationship](https://openfga.dev/docs/concepts#what-is-a-relationship) exists if the [user](https://openfga.dev/docs/concepts#what-is-a-user) is in all the sets of users.

- DSL
- JSON

```codeBlockLines_e6Vv

type document
relations
    define viewer: authorized_user and editor

```

```codeBlockLines_e6Vv
{
"type_definitions": [\
    {\
      "type": "document",\
      "relations": {\
        "viewer": {\
          "intersection": {\
            "child": [\
              {\
                "computedUserset": {\
                  "relation": "authorized_user"\
                }\
              },\
              {\
                "computedUserset": {\
                  "relation": "editor"\
                }\
              }\
            ]\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
]
}

```

In the [type definition](https://openfga.dev/docs/concepts#what-is-a-type-definition) snippet above, `user:anne` is a `viewer` of `document:new-roadmap` if all of the following conditions are satisfied:

- _anne_ is an _editor_ of _document:new-roadmap_




```codeBlockLines_e6Vv
[{\
    "user": "user:anne",\
    "relation": "editor",\
    "object": "document:new-roadmap"\
}]

```








AND
- _anne_ is an _authorized\_user_ of _document:new-roadmap_:




```codeBlockLines_e6Vv
[{\
    "user": "user:anne",\
    "relation": "authorized_user",\
    "object": "document:new-roadmap"\
}]

```


info

The above [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model) indicates that a user is related as a viewer if they are in all of the following:

- the userset of all users related to the object as `authorized_user`
- the userset of all users related to the object as `editor`

`anne` must be in the intersection of the usersets (meaning both an `editor` AND an `authorized_user`) for the [check](https://openfga.dev/docs/concepts#what-is-a-check-request) on `{"user": "user:anne", "relation": "viewer", "object": "document:new-roadmap"}` to return `{"allowed": true}`.

`anne` is not a `viewer` for `document:new-roadmap` if either of the following is true:

- `anne` is not an `editor` to `document:new-roadmap`: no relationship tuple of `{"user": "user:anne", "relation": "editor", "object": "document:new-roadmap"}`
- `anne` is not an `authorized_user` on the `document:new-roadmap`: no relationship tuple of `{"user": "user:anne", "relation": "authorized_user", "object": "document:new-roadmap"}`

For more examples, see [Modeling with Multiple Restrictions](https://openfga.dev/docs/modeling/multiple-restrictions).

### The Exclusion Operator [​](https://openfga.dev/docs/configuration-language\#the-exclusion-operator "Direct link to The Exclusion Operator")

The **exclusion operator** ( `but not` in the DSL, `difference` in the JSON syntax) indicates that a [relationship](https://openfga.dev/docs/concepts#what-is-a-relationship) exists if the [user](https://openfga.dev/docs/concepts#what-is-a-user) is in the base userset but not in the excluded userset. This operator is particularly useful when modeling exclusion or block lists.

- DSL
- JSON

```codeBlockLines_e6Vv

type document
relations
    define viewer: [user] but not blocked

```

```codeBlockLines_e6Vv
{
"type_definitions": [\
    {\
      "type": "document",\
      "relations": {\
        "viewer": {\
          "difference": {\
            "base": {\
              "this": {}\
            },\
            "subtract": {\
              "computedUserset": {\
                "relation": "blocked"\
              }\
            }\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
]
}

```

In the type definition snippet above, `user:anne` is a `viewer` of `document:new-roadmap` if and only if:

- `anne` has a direct relationship as `viewer` to `document:new-roadmap`





```codeBlockLines_e6Vv
[{\
    "user": "user:anne",\
    "relation": "viewer",\
    "object": "document:new-roadmap"\
}]

```









AND

- `anne` is not blocked from `document:new-roadmap` (i.e., the following relationship tuple must not exist):





```codeBlockLines_e6Vv
[{\
    "user": "user:anne",\
    "relation": "blocked",\
    "object": "document:new-roadmap"\
}]

```


For more information, see [Modeling: Blocklists](https://openfga.dev/docs/modeling/blocklists).

info

The [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model) above indicates that a user is related as a viewer if they are in:

- the userset of all users related to the object as `viewer`

but not in:

- the userset of all users related to the object as `blocked`

`anne` must be both a `viewer` and not `blocked` for the [check](https://openfga.dev/docs/concepts#what-is-a-check-request) on `{"user": "user:anne", "relation": "viewer", "object": "document:new-roadmap"}` to return `{"allowed": true}`.

`anne` is not a viewer for document:new-roadmap if either of the following is true:

- `anne` is **not** assigned direct relationship as viewer to document:new-roadmap: **no relationship tuple of** `{"user": "user:anne", "relation": "viewer", "object": "document:new-roadmap"}`
- `anne` is blocked on the document:new-roadmap `{"user": "user:anne", "relation": "blocked", "object": "document:new-roadmap"}`

### Grouping and nesting operators [​](https://openfga.dev/docs/configuration-language\#grouping-and-nesting-operators "Direct link to Grouping and nesting operators")

You can define complex conditions by using parentheses to group and nest operators. Note that direct relationships can be included in an expression with parentheses.

- DSL
- JSON

```codeBlockLines_e6Vv

type user

type organization
relations
    define member: [user]

type folder
relations
    define organization: [organization]
    define parent: [folder]
    define viewer: ([user] or viewer from parent) and member from organization

```

```codeBlockLines_e6Vv
{
"type_definitions": [\
    {\
      "type": "user",\
      "relations": {},\
      "metadata": null\
    },\
    {\
      "type": "organization",\
      "relations": {\
        "member": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "member": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "folder",\
      "relations": {\
        "organization": {\
          "this": {}\
        },\
        "parent": {\
          "this": {}\
        },\
        "viewer": {\
          "intersection": {\
            "child": [\
              {\
                "union": {\
                  "child": [\
                    {\
                      "this": {}\
                    },\
                    {\
                      "tupleToUserset": {\
                        "computedUserset": {\
                          "relation": "viewer"\
                        },\
                        "tupleset": {\
                          "relation": "parent"\
                        }\
                      }\
                    }\
                  ]\
                }\
              },\
              {\
                "tupleToUserset": {\
                  "computedUserset": {\
                    "relation": "member"\
                  },\
                  "tupleset": {\
                    "relation": "organization"\
                  }\
                }\
              }\
            ]\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "organization": {\
            "directly_related_user_types": [\
              {\
                "type": "organization"\
              }\
            ]\
          },\
          "parent": {\
            "directly_related_user_types": [\
              {\
                "type": "folder"\
              }\
            ]\
          },\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
]
}

```

### Conditional relationships [​](https://openfga.dev/docs/configuration-language\#conditional-relationships "Direct link to Conditional relationships")

OpenFGA supports conditional relationships, which are only considered if a specific condition is met. You can learn more about Conditional Relationships in the [Modeling: Conditional Relationships](https://openfga.dev/docs/modeling/conditions) guide.

## Equivalent Zanzibar Concepts [​](https://openfga.dev/docs/configuration-language\#equivalent-zanzibar-concepts "Direct link to Equivalent Zanzibar Concepts")

The JSON syntax accepted by the OpenFGA API closely mirrors the syntax represented in the Zanzibar paper. The major modifications are a slight flattening and conversion of keys from `snake_case` to `camelCase`.

| Zanzibar | OpenFGA JSON | OpenFGA DSL |
| --- | --- | --- |
| `this` | `this` | [`[<type1>,<type2>]`](https://openfga.dev/docs/configuration-language#direct-relationship-type-restrictions) |
| `union` | `union` | `or` |
| `intersection` | `intersection` | `and` |
| `exclusion` | `difference` | `but not` |
| `tuple_to_userset` | `tupleToUserset` | `x from y` |

The [Zanzibar paper](https://research.google/pubs/pub48190/) presents this example:

```codeBlockLines_e6Vv
name: "doc"

relation { name: "owner" }

relation {
name: "editor"
userset_rewrite {
    union {
      child { _this {} }
      child { computed_userset { relation: "owner" } }
}}}

relation {
name: "viewer"
userset_rewrite {
union {
    child { _this {} }
    child { computed_userset { relation: "editor" } }
    child { tuple_to_userset {
      tupleset { relation: "parent" }
      computed_userset {
        object: $TUPLE_USERSET_OBJECT  # parent folder
        relation: "viewer" }}}
}}}

```

In the OpenFGA DSL, it becomes:

```codeBlockLines_e6Vv
model
schema 1.1

type doc
relations
    define owner: [user]
    define editor: [user] or owner
    define viewer: [user] or editor or viewer from parent

```

In the OpenFGA JSON, it becomes:

```codeBlockLines_e6Vv
{
"schema_version": "1.1",
"type_definitions": [\
    {\
      "type": "doc",\
      "relations": {\
        "owner": {\
          "this": {}\
        },\
        "editor": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "owner"\
                }\
              }\
            ]\
          }\
        },\
        "viewer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "editor"\
                }\
              },\
              {\
                "tupleToUserset": {\
                  "tupleset": {\
                    "relation": "parent"\
                  },\
                  "computedUserset": {\
                    "relation": "viewer"\
                  }\
                }\
              }\
            ]\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "owner": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "editor": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
]
}

```

The following snippet:

- DSL
- JSON

```codeBlockLines_e6Vv
model
schema 1.1

type doc
relations
    define viewer: [user] or editor or viewer from parent

```

```codeBlockLines_e6Vv
{
"schema_version": "1.1",
"type_definitions": [\
    {\
      "type": "doc",\
      "relations": {\
        "viewer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "editor"\
                }\
              },\
              {\
                "tupleToUserset": {\
                  "tupleset": {\
                    "relation": "parent"\
                  },\
                  "computedUserset": {\
                    "relation": "viewer"\
                  }\
                }\
              }\
            ]\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
]
}

```

Results in the following outcome:

- The users with a viewer relationship to a certain doc are any of:
  - the set of users who are [directly related](https://openfga.dev/docs/concepts#what-are-direct-and-implied-relationships) with this doc as `viewer`
  - the set of users who are related to this doc as `editor`
  - the set of users who are related to any object OBJ\_1 as `viewer`, where object OBJ\_1 is any object related to this doc as `parent` (e.g. viewers of this doc's parent folder, where the parent folder is OBJ\_1)

Learn more about Zanzibar at the [Zanzibar Academy](https://zanzibar.academy/).

## Related Sections [​](https://openfga.dev/docs/configuration-language\#related-sections "Direct link to Related Sections")

Check the following sections for more on how to use the configuration language in modeling authorization.

OpenFGA Concepts

Learn about the OpenFGA Concepts.

- [More](https://openfga.dev/docs/concepts)

Modeling: Getting Started

Learn about how to get started with modeling your permission system in OpenFGA.

- [More](https://openfga.dev/docs/modeling/getting-started)

Direct Access

Learn about modeling user access to an object.

- [More](https://openfga.dev/docs/modeling/direct-access)

- [What Does The Configuration Language Look Like?](https://openfga.dev/docs/configuration-language#what-does-the-configuration-language-look-like)
  - [Direct Relationship Type Restrictions](https://openfga.dev/docs/configuration-language#direct-relationship-type-restrictions)
  - [Referencing Other Relations On The Same Object](https://openfga.dev/docs/configuration-language#referencing-other-relations-on-the-same-object)
  - [Referencing Relations On Related Objects](https://openfga.dev/docs/configuration-language#referencing-relations-on-related-objects)
  - [The Union Operator](https://openfga.dev/docs/configuration-language#the-union-operator)
  - [The Intersection Operator](https://openfga.dev/docs/configuration-language#the-intersection-operator)
  - [The Exclusion Operator](https://openfga.dev/docs/configuration-language#the-exclusion-operator)
  - [Grouping and nesting operators](https://openfga.dev/docs/configuration-language#grouping-and-nesting-operators)
  - [Conditional relationships](https://openfga.dev/docs/configuration-language#conditional-relationships)
- [Equivalent Zanzibar Concepts](https://openfga.dev/docs/configuration-language#equivalent-zanzibar-concepts)
- [Related Sections](https://openfga.dev/docs/configuration-language#related-sections)

## Model Migration Guides
[Skip to main content](https://openfga.dev/docs/modeling/migrating#__docusaurus_skipToContent_fallback)

This section has guides that focus on migrating models and relations.

When to use

The content in this section is useful:

- If you want to introduce changes to your existing authorization model or upgrade it to a new schema version.

Migrating Relations

A end-to-end example on renaming a relation.

- [Click to navigate](https://openfga.dev/docs/modeling/migrating/migrating-relations)

Migrating Models

Learn how to safely update your model.

- [Click to navigate](https://openfga.dev/docs/modeling/migrating/migrating-models)

## Advanced Authorization Modeling
[Skip to main content](https://openfga.dev/docs/modeling/advanced#__docusaurus_skipToContent_fallback)

On this page

This section will present advanced use cases and patterns for authorization modeling with OpenFGA.

When to use

The content in this section is useful if you would like to follow an end-to-end tutorial on how to build an authorization model for a common use-case or pattern.

## Use-cases [​](https://openfga.dev/docs/modeling/advanced\#use-cases "Direct link to Use-cases")

Google Drive

How to create an authorization model for your system starting from the requirements.

- [Click to navigate](https://openfga.dev/docs/modeling/advanced/gdrive)

GitHub

How to create an authorization model for your system starting from the requirements.

- [Click to navigate](https://openfga.dev/docs/modeling/advanced/github)

IoT

How to create an authorization model for your system starting from the requirements.

- [Click to navigate](https://openfga.dev/docs/modeling/advanced/iot)

Slack

How to create an authorization model for your system starting from the requirements.

- [Click to navigate](https://openfga.dev/docs/modeling/advanced/slack)

## Patterns [​](https://openfga.dev/docs/modeling/advanced\#patterns "Direct link to Patterns")

Entitlements

How to create an authorization model for your system starting from the requirements.

- [Click to navigate](https://openfga.dev/docs/modeling/advanced/entitlements)

- [Use-cases](https://openfga.dev/docs/modeling/advanced#use-cases)
- [Patterns](https://openfga.dev/docs/modeling/advanced#patterns)

## Parent-Child Relationships
[Skip to main content](https://openfga.dev/docs/modeling/parent-child#__docusaurus_skipToContent_fallback)

On this page

In OpenFGA, a user's [relationship](https://openfga.dev/docs/concepts#what-is-a-relationship) with an [object](https://openfga.dev/docs/concepts#what-is-an-object) can affect their relationship with another object. For example, an `editor` of a `folder` can also be an `editor` of all `documents` that `folder` is a `parent` of.

When to use

Object-to-object relationships can combine with a configured authorization model to indicate that a user's relationship with one object may influence the user's relationship with another object. They can also eliminate the need to modify relationships between objects using [user groups](https://openfga.dev/docs/modeling/user-groups#03-assign-the-team-members-a-relation-to-an-object).

The follow are examples of simple object-to-object relationships:

- `managers` of an `employee` have access to `approve` requests the `employee` has made
- users who have a repository admin role ( `repo_admin`) in an organization automatically have `admin` access to all repositories in that organization
- users who are `subscribed` to a `plan` get access to all the `features` in that `plan`

## Before you start [​](https://openfga.dev/docs/modeling/parent-child\#before-you-start "Direct link to Before you start")

Familiarize yourself with basic [OpenFGA Concepts](https://openfga.dev/docs/concepts):

Assume that you have the following [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model).

You have two types:

- `folder` that users can be related to as an `editor`
- `document` that users can be related to as an `editor`

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type folder
  relations
    define editor: [user]

type document
  relations
    define editor: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "folder",\
      "relations": {\
        "editor": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "editor": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "document",\
      "relations": {\
        "editor": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "editor": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

* * *

In addition:

### Direct access [​](https://openfga.dev/docs/modeling/parent-child\#direct-access "Direct link to Direct access")

Creating an authorization model and a relationship tuple can grant a user access to an object. To learn more, [read about Direct Access](https://openfga.dev/docs/modeling/direct-access)

### OpenFGA concepts [​](https://openfga.dev/docs/modeling/parent-child\#-concepts "Direct link to -concepts")

- A [Type](https://openfga.dev/docs/concepts#what-is-a-type): a class of objects that have similar characteristics
- A [User](https://openfga.dev/docs/concepts#what-is-a-user): an entity in the system that can be related to an object
- A [Relation](https://openfga.dev/docs/concepts#what-is-a-relation): a string defined in the type definition of an authorization model that defines the possibility of a relationship between an object of the same type as the type definition and a user in the system
- An [Object](https://openfga.dev/docs/concepts#what-is-an-object): represents an entity in the system. Users' relationships to it can be define through relationship tuples and the authorization model
- A [Relationship Tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple): a group stored in OpenFGA that consists of a user, a relation, and an object
- [Union Operator](https://openfga.dev/docs/configuration-language#the-union-operator): can be used to indicate that the user has multiple ways of being related to an object

## Step by step [​](https://openfga.dev/docs/modeling/parent-child\#step-by-step "Direct link to Step by step")

The following walkthrough models (a) folders that contain documents and (b) that a user who has editor access to a given folder has editor access to all documents in that folder.

For `editors` of a `folder` to be `editors` of a containing `document`, you must:

1. Update the authorization model to allow a `parent` relationship between `folder` and `document`
2. Update the `editor` relation in the `document` type definition to support cascading from `folder`

The following three steps indicate and verify that `bob` is an `editor` of `document:meeting_notes.doc` because `bob` is an `editor` of `folder:notes`:

3. Create a new _relationship tuple_ to indicate that **bob** is a `editor` of **folder:notes**
4. Create a new _relationship tuple_ to indicate that **folder:notes** is a `parent` of **document:meeting\_notes.doc**
5. Check to see if **bob** is an `editor` of **document:meeting\_notes.doc**

### 01\. Update the Athorization Model to allow a parent relationship between folder and document [​](https://openfga.dev/docs/modeling/parent-child\#01-update-the-athorization-model-to-allow-a-parent-relationship-between-folder-and-document "Direct link to 01. Update the Athorization Model to allow a parent relationship between folder and document")

As documented in [Modeling Concepts: Object to Object Relationships](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships), the following update to the authorization model allows a `parent` relation between a `folder` and a `document`:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type folder
  relations
    define editor: [user]

type document
  relations
    define parent: [folder]
    define editor: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "folder",\
      "relations": {\
        "editor": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "editor": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "document",\
      "relations": {\
        "parent": {\
          "this": {}\
        },\
        "editor": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "parent": {\
            "directly_related_user_types": [\
              {\
                "type": "folder"\
              }\
            ]\
          },\
          "editor": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

info

The `document` type now has a `parent` relation, indicating that other objects can be `parent` s of `document` s

### 02\. Update the editor relation in the document type definition to support cascading from folder [​](https://openfga.dev/docs/modeling/parent-child\#02-update-the-editor-relation-in-the-document-type-definition-to-support-cascading-from-folder "Direct link to 02. Update the editor relation in the document type definition to support cascading from folder")

To allow cascading relations between `folder` and `document`, update the authorization model:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type folder
  relations
    define editor: [user]

type document
  relations
    define parent: [folder]
    define editor: [user] or editor from parent

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "folder",\
      "relations": {\
        "editor": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "editor": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "document",\
      "relations": {\
        "parent": {\
          "this": {}\
        },\
        "editor": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "tupleToUserset": {\
                  "tupleset": {\
                    "relation": "parent"\
                  },\
                  "computedUserset": {\
                    "relation": "editor"\
                  }\
                }\
              }\
            ]\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "parent": {\
            "directly_related_user_types": [\
              {\
                "type": "folder"\
              }\
            ]\
          },\
          "editor": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

info

`editor` of a `document` can be the following:

1. users that are directly assigned as editors
2. users that are related to any `parent` of this document as `editor` (editors of the parent)

After making these changes, anyone related to a `folder` that is a `parent` of a `document` as an `editor` is also an `editor` of that `document`.

### 03\. Create a new relationship tuple to indicate that `bob` is an `editor` of `folder:notes` [​](https://openfga.dev/docs/modeling/parent-child\#03-create-a-new-relationship-tuple-to-indicate-that-bob-is-an-editor-of-foldernotes "Direct link to 03-create-a-new-relationship-tuple-to-indicate-that-bob-is-an-editor-of-foldernotes")

To leverage the new cascading relation, create a relationship tuple stating that `bob` is an `editor` of `folder:notes`

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"user:bob","relation":"editor","object":"folder:notes"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             User: "user:bob",
             Relation: "editor",
             Object: "folder:notes",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
       new() {
                  User = "user:bob",
                  Relation = "editor",
                  Object = "folder:notes"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    user="user:bob",\
                    relation="editor",\
                    object="folder:notes",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                new ClientTupleKey()
                        .user("user:bob")
                        .relation("editor")
                        ._object("folder:notes")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"user":"user:bob","relation":"editor","object":"folder:notes"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:bob editor folder:notes

```

```codeBlockLines_e6Vv
write([\
    {\
      "user":"user:bob",\
      "relation":"editor",\
      "object":"folder:notes"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

caution

**Note:** Use unique ids for each object and user within your application domain when creating relationship tuples for OpenFGA. We use first names and simple ids below as an easy-to-follow example.

### 04\. Create a new relationship tuple to indicate that `folder:notes` is a `parent` of `document:meeting_notes.doc` [​](https://openfga.dev/docs/modeling/parent-child\#04-create-a-new-relationship-tuple-to-indicate-that-foldernotes-is-a-parent-of-documentmeeting_notesdoc "Direct link to 04-create-a-new-relationship-tuple-to-indicate-that-foldernotes-is-a-parent-of-documentmeeting_notesdoc")

Now that `bob` is an `editor` of `folder:notes`, we need to indicate that **folder:notes** is a `parent` of `document:meeting_notes.doc`

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // the notes folder is a parent of the meeting notes document\
      {"_description":"the notes folder is a parent of the meeting notes document","user":"folder:notes","relation":"parent","object":"document:meeting_notes.doc"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             // the notes folder is a parent of the meeting notes document
             User: "folder:notes",
             Relation: "parent",
             Object: "document:meeting_notes.doc",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
    // the notes folder is a parent of the meeting notes document
       new() {
                  User = "folder:notes",
                  Relation = "parent",
                  Object = "document:meeting_notes.doc"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    # the notes folder is a parent of the meeting notes document\
                    user="folder:notes",\
                    relation="parent",\
                    object="document:meeting_notes.doc",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                // the notes folder is a parent of the meeting notes document
                new ClientTupleKey()
                        .user("folder:notes")
                        .relation("parent")
                        ._object("document:meeting_notes.doc")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"_description":"the notes folder is a parent of the meeting notes document","user":"folder:notes","relation":"parent","object":"document:meeting_notes.doc"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA folder:notes parent document:meeting_notes.doc

```

```codeBlockLines_e6Vv
write([\
    // the notes folder is a parent of the meeting notes document\
    {\
      "user":"folder:notes",\
      "relation":"parent",\
      "object":"document:meeting_notes.doc"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

### 05\. Check if `bob` is an `editor` of `document:meeting_notes.doc` [​](https://openfga.dev/docs/modeling/parent-child\#05-check-if-bob-is-an-editor-of-documentmeeting_notesdoc "Direct link to 05-check-if-bob-is-an-editor-of-documentmeeting_notesdoc")

After changing the authorization model and adding two new relationship tuples, verify that your configuration is correct by running the following check: **is bob an editor of document:meeting\_notes.doc**.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:bob',
    relation: 'editor',
    object: 'document:meeting_notes.doc',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:bob",
    Relation: "editor",
    Object:   "document:meeting_notes.doc",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:bob",
    Relation = "editor",
    Object = "document:meeting_notes.doc",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:bob",
    relation="editor",
    object="document:meeting_notes.doc",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:bob")
        .relation("editor")
        ._object("document:meeting_notes.doc");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:bob editor document:meeting_notes.doc

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:bob","relation":"editor","object":"document:meeting_notes.doc"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:bob", // check if the user `user:bob`
  relation = "editor", // has an `editor` relation
  object = "document:meeting_notes.doc", // with the object `document:meeting_notes.doc`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:bob related to document:meeting_notes.doc as editor?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

> Note: There are no other relationship tuples in the store that dictate a direct relation between `bob` and `document:meeting_notes.doc`. The check succeeds because of the cascading relation.

The chain of resolution is:

- `bob` is an `editor` of `folder:notes`
- `folder:notes` is a `parent` of `document:meeting_notes.doc`
- `editors` of any `parent` `folder` of `document:meeting_notes.doc` are also `editors` of the `document`
- therefore `bob` is an `editor` of `document:meeting_notes.doc`

caution

When searching tuples that are related to the object (the word after `from`, also called the tupleset), OpenFGA will not do any evaluation and only considers concrete objects (of the form `<object_type>:<object_id>`) that were directly assigned. OpenFGA will throw an error if it encounters any rewrites, a `*`, a type bound public access ( `<object_type>:*`), or a userset ( `<object_type>:<object_id>#<relation>`).

For more information on this topic, see [Referencing Relations on Related Objects](https://openfga.dev/docs/configuration-language#referencing-relations-on-related-objects).

## Related Sections [​](https://openfga.dev/docs/modeling/parent-child\#related-sections "Direct link to Related Sections")

Check the following sections for more on how to model for parent and child objects.

Modeling Concepts: Object to Object Relationships

Learn about how to model object to object relationships in OpenFGA.

- [More](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships)

Modeling Google Drive

See how to make folders parents of documents, and to make editors on the parent folders editors on documents inside them..

- [More](https://openfga.dev/docs/modeling/advanced/gdrive#01-individual-permissions)

Modeling GitHub

See how to grant users access to all repositories owned by an organization.

- [More](https://openfga.dev/docs/modeling/advanced/github#01-permissions-for-individuals-in-an-org)

- [Before you start](https://openfga.dev/docs/modeling/parent-child#before-you-start)
  - [Direct access](https://openfga.dev/docs/modeling/parent-child#direct-access)
  - [concepts](https://openfga.dev/docs/modeling/parent-child#-concepts)
- [Step by step](https://openfga.dev/docs/modeling/parent-child#step-by-step)
  - [01\. Update the Athorization Model to allow a parent relationship between folder and document](https://openfga.dev/docs/modeling/parent-child#01-update-the-athorization-model-to-allow-a-parent-relationship-between-folder-and-document)
  - [02\. Update the editor relation in the document type definition to support cascading from folder](https://openfga.dev/docs/modeling/parent-child#02-update-the-editor-relation-in-the-document-type-definition-to-support-cascading-from-folder)
  - [03\. Create a new relationship tuple to indicate that `bob` is an `editor` of `folder:notes`](https://openfga.dev/docs/modeling/parent-child#03-create-a-new-relationship-tuple-to-indicate-that-bob-is-an-editor-of-foldernotes)
  - [04\. Create a new relationship tuple to indicate that `folder:notes` is a `parent` of `document:meeting_notes.doc`](https://openfga.dev/docs/modeling/parent-child#04-create-a-new-relationship-tuple-to-indicate-that-foldernotes-is-a-parent-of-documentmeeting_notesdoc)
  - [05\. Check if `bob` is an `editor` of `document:meeting_notes.doc`](https://openfga.dev/docs/modeling/parent-child#05-check-if-bob-is-an-editor-of-documentmeeting_notesdoc)
- [Related Sections](https://openfga.dev/docs/modeling/parent-child#related-sections)

## Direct Access in OpenFGA
[Skip to main content](https://openfga.dev/docs/modeling/direct-access#__docusaurus_skipToContent_fallback)

On this page

This article describes how to grant a [user](https://openfga.dev/docs/concepts#what-is-a-user) access to an [object](https://openfga.dev/docs/concepts#what-is-an-object) in [OpenFGA](https://openfga.dev/docs/fga).

When to use

Granting access with [relationship tuples](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple) is a core part of OpenFGA. Without relationship tuples, any [checks](https://openfga.dev/docs/concepts#what-is-a-check-request)\_ will fail. You should use:

- **authorization model** to represent what relations are possible between the users and objects in the system
- **relationship tuples** to represent the facts about the relationships between users and objects in your system.

## Before you start [​](https://openfga.dev/docs/modeling/direct-access\#before-you-start "Direct link to Before you start")

Familiarize yourself with [OpenFGA Concepts](https://openfga.dev/docs/concepts) to understand how to develop a relationship tuple and authorization model.

Assume that you have the following [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model).

You have a [type](https://openfga.dev/docs/concepts#what-is-a-type) called `document` that can have a `viewer` and/or an `editor`.

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define viewer: [user]
    define editor: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "document",\
      "relations": {\
        "viewer": {\
          "this": {}\
        },\
        "editor": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "editor": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

* * *

In addition, you will need to know the following:

### OpenFGA Concepts [​](https://openfga.dev/docs/modeling/direct-access\#-concepts "Direct link to -concepts")

- A [Type](https://openfga.dev/docs/concepts#what-is-a-type): a class of objects that have similar characteristics
- A [User](https://openfga.dev/docs/concepts#what-is-a-user): an entity in the system that can be related to an object
- A [Relation](https://openfga.dev/docs/concepts#what-is-a-relation): a string defined in the type definition of an authorization model that defines the possibility of a relationship between an object of the same type as the type definition and a user in the system
- An [Object](https://openfga.dev/docs/concepts#what-is-an-object): represents an entity in the system. Users' relationships to it can be define through relationship tuples and the authorization model
- A [Relationship Tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple): a grouping consisting of a user, a relation and an object stored in OpenFGA

## Step By Step [​](https://openfga.dev/docs/modeling/direct-access\#step-by-step "Direct link to Step By Step")

For an application to understand that **user x** has access to **document y**, it must provide OpenFGA that information with [relationship tuples](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple).
Each relationship tuple has three basic parameters: a **[user](https://openfga.dev/docs/concepts#what-is-a-user)**, a **[relation](https://openfga.dev/docs/concepts#what-is-a-relation)** and an **[object](https://openfga.dev/docs/concepts#what-is-an-object)**.

### 01\. Create A Relationship Tuple [​](https://openfga.dev/docs/modeling/direct-access\#01-create-a-relationship-tuple "Direct link to 01. Create A Relationship Tuple")

Below, you'll add a **[relationship tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple)** to indicate that `bob` is an `editor` of `document:meeting_notes.doc` by adding the following:

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"user:bob","relation":"editor","object":"document:meeting_notes.doc"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             User: "user:bob",
             Relation: "editor",
             Object: "document:meeting_notes.doc",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
       new() {
                  User = "user:bob",
                  Relation = "editor",
                  Object = "document:meeting_notes.doc"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    user="user:bob",\
                    relation="editor",\
                    object="document:meeting_notes.doc",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                new ClientTupleKey()
                        .user("user:bob")
                        .relation("editor")
                        ._object("document:meeting_notes.doc")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"user":"user:bob","relation":"editor","object":"document:meeting_notes.doc"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:bob editor document:meeting_notes.doc

```

```codeBlockLines_e6Vv
write([\
    {\
      "user":"user:bob",\
      "relation":"editor",\
      "object":"document:meeting_notes.doc"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

### 02\. Check That The Relationship Exists [​](https://openfga.dev/docs/modeling/direct-access\#02-check-that-the-relationship-exists "Direct link to 02. Check That The Relationship Exists")

Once you add that relationship tuple to OpenFGA, you can [check](https://openfga.dev/docs/concepts#what-is-a-check-request) if the relationship is valid by asking if bob is an editor of document:meeting\_notes.doc:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:bob',
    relation: 'editor',
    object: 'document:meeting_notes.doc',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:bob",
    Relation: "editor",
    Object:   "document:meeting_notes.doc",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:bob",
    Relation = "editor",
    Object = "document:meeting_notes.doc",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:bob",
    relation="editor",
    object="document:meeting_notes.doc",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:bob")
        .relation("editor")
        ._object("document:meeting_notes.doc");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:bob editor document:meeting_notes.doc

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:bob","relation":"editor","object":"document:meeting_notes.doc"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:bob", // check if the user `user:bob`
  relation = "editor", // has an `editor` relation
  object = "document:meeting_notes.doc", // with the object `document:meeting_notes.doc`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:bob related to document:meeting_notes.doc as editor?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

Checking whether `bob` is an `viewer` of `document:meeting_notes.doc` returns **false** because that relationship tuple does not exist in OpenFGA yet.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:bob',
    relation: 'viewer',
    object: 'document:meeting_notes.doc',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:bob",
    Relation: "viewer",
    Object:   "document:meeting_notes.doc",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:bob",
    Relation = "viewer",
    Object = "document:meeting_notes.doc",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:bob",
    relation="viewer",
    object="document:meeting_notes.doc",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:bob")
        .relation("viewer")
        ._object("document:meeting_notes.doc");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:bob viewer document:meeting_notes.doc

# Response: {"allowed":false}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:bob","relation":"viewer","object":"document:meeting_notes.doc"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:bob", // check if the user `user:bob`
  relation = "viewer", // has an `viewer` relation
  object = "document:meeting_notes.doc", // with the object `document:meeting_notes.doc`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:bob related to document:meeting_notes.doc as viewer?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

caution

When creating relationship tuples for OpenFGA, use unique ids for each object and user within your application domain. We're using first names and simple ids to as an easy-to-follow example.

## Related Sections [​](https://openfga.dev/docs/modeling/direct-access\#related-sections "Direct link to Related Sections")

Check the following sections for more on how to model with OpenFGA.

OpenFGA Concepts

Learn about the OpenFGA Concepts.

- [More](https://openfga.dev/docs/concepts)

Modeling: Getting Started

Learn about how to get started with modeling.

- [More](https://openfga.dev/docs/modeling/getting-started)

Configuration Language

Learn about OpenFGA Configuration Language.

- [More](https://openfga.dev/docs/configuration-language)

- [Before you start](https://openfga.dev/docs/modeling/direct-access#before-you-start)
  - [Concepts](https://openfga.dev/docs/modeling/direct-access#-concepts)
- [Step By Step](https://openfga.dev/docs/modeling/direct-access#step-by-step)
  - [01\. Create A Relationship Tuple](https://openfga.dev/docs/modeling/direct-access#01-create-a-relationship-tuple)
  - [02\. Check That The Relationship Exists](https://openfga.dev/docs/modeling/direct-access#02-check-that-the-relationship-exists)
- [Related Sections](https://openfga.dev/docs/modeling/direct-access#related-sections)

## IoT Permissions Modeling
[Skip to main content](https://openfga.dev/docs/modeling/advanced/iot#__docusaurus_skipToContent_fallback)

On this page

This tutorial explains how to model permissions for an IoT system using OpenFGA.

What you will learn

- How to model a permission system using [OpenFGA](https://openfga.dev/docs/fga)
- How to see OpenFGA Authorization in action by modeling an IoT Security Camera System

## Before you start [​](https://openfga.dev/docs/modeling/advanced/iot\#before-you-start "Direct link to Before you start")

In order to understand this guide correctly you must be familiar with some OpenFGA concepts and know how to develop the things that we will list below.

### OpenFGA concepts [​](https://openfga.dev/docs/modeling/advanced/iot\#-concepts "Direct link to -concepts")

It would be helpful to have an understanding of some concepts of OpenFGA before you start.

#### Direct access [​](https://openfga.dev/docs/modeling/advanced/iot\#direct-access "Direct link to Direct access")

You need to know how to create an authorization model and create a relationship tuple to grant a user access to an object. [Learn more →](https://openfga.dev/docs/modeling/direct-access)

#### Modeling concentric relationships [​](https://openfga.dev/docs/modeling/advanced/iot\#modeling-concentric-relationships "Direct link to Modeling concentric relationships")

You need to know how to update the authorization model to allow having nested relations such as all writers are readers. [Learn more →](https://openfga.dev/docs/modeling/building-blocks/concentric-relationships)
Used here to indicate that both IT Admins and Security Guards can view live video.

#### Direct relationships [​](https://openfga.dev/docs/modeling/advanced/iot\#direct-relationships "Direct link to Direct relationships")

You need to know how to disallow granting direct relation to an object and requiring the user to have a relation with another object that would imply a relation with the first one. [Learn more →](https://openfga.dev/docs/modeling/building-blocks/direct-relationships)
Used here to indicate that "Rename Device" is a permission that cannot be assigned directly, but can only be granted through the "IT Admin" role.

#### User groups [​](https://openfga.dev/docs/modeling/advanced/iot\#user-groups "Direct link to User groups")

You need to know how to add users to groups and create relationships between groups of users and an object. [Learn more →](https://openfga.dev/docs/modeling/building-blocks/direct-relationships)

Used here to indicate that security guards on a certain group are security guards on a device in that group.

#### Concepts & configuration language [​](https://openfga.dev/docs/modeling/advanced/iot\#concepts--configuration-language "Direct link to Concepts & configuration language")

- Some [OpenFGA Concepts](https://openfga.dev/docs/concepts)
- [Configuration Language](https://openfga.dev/docs/configuration-language)

## What You Will be modeling [​](https://openfga.dev/docs/modeling/advanced/iot\#what-you-will-be-modeling "Direct link to What You Will be modeling")

In this tutorial, you will build an authorization model for a sample IoT Security Camera System (detailed below) using OpenFGA. You will use some scenarios to validate the model.

The goal by the end of this post is to ask OpenFGA: Does person X have permission to perform action Y on device Z? In response, you want to either get a confirmation that person X can indeed do that, or a rejection that they cannot.

### Requirements [​](https://openfga.dev/docs/modeling/advanced/iot\#requirements "Direct link to Requirements")

These are the requirements:

- **Security guards** have access to **view live and recorded video** from **Devices**.
- **IT Admins** can **view live and recorded videos**, as well as **rename** **Devices**.
- To make access management easier, **Devices** can be grouped into **Device Groups**. **Security guards** with access to the **Device Group** are **Security Guards** with access to each **Device** in the group. Similarly for **IT Admins**.

### Defined Scenarios [​](https://openfga.dev/docs/modeling/advanced/iot\#defined-scenarios "Direct link to Defined Scenarios")

Use the following scenarios to be able to validate whether the model of the requirements is correct.

There will be the following users:

- Anne
- Beth
- Charles
- Dianne

These users have the following roles and permissions:

- Anne is a Security Guard with access to only Device 1
- Beth is an IT Admin with access to only Device 1
- Charles is a Security Guard with access to Device 1 and everything in Device Group 1 (which is Device 2 and Device 3)
- Dianne is an IT Admin with access to Device 1 and everything in Device Group 1

![Image showing requirements](https://openfga.dev/assets/images/iot-01-01e62d5f3e91ef20a4f763fb2079c1fa.svg)

caution

In production, it is highly recommended to use unique, immutable identifiers. Names are used in this article to make it easier to read and follow.

## Modeling device authorization [​](https://openfga.dev/docs/modeling/advanced/iot\#modeling-device-authorization "Direct link to Modeling device authorization")

The OpenFGA service is based on [Zanzibar](https://zanzibar.academy/), a Relationship Based Access Control system. This means it relies on [object](https://openfga.dev/docs/concepts#what-is-an-object) and [user](https://openfga.dev/docs/concepts#what-is-a-user) [relations](https://openfga.dev/docs/concepts#what-is-a-relation) to perform authorization [checks](https://openfga.dev/docs/concepts#what-is-a-check-request).

Starting with devices, you will learn how to express the requirements in terms of relations you can feed into OpenFGA.

### 01\. Writing the initial model for a device [​](https://openfga.dev/docs/modeling/advanced/iot\#01-writing-the-initial-model-for-a-device "Direct link to 01. Writing the initial model for a device")

The requirements stated:

- **Security guards** have access to **view live and recorded video** from **Devices**.
- **IT Admins** can **view live and recorded videos**, as well as **rename** **Devices**.

The goal is to ask OpenFGA whether person X has permission to perform action Y on device Z. To start, you will set aside the Security Guard and IT Admin designations and focus on the actions a user can take.

The actions users can take on a device are: _view live videos_, _view recorded videos_, and _rename devices_. Mapping them to relations, they become: _live\_video\_viewer_, _recorded\_video\_viewer_, _device\_renamer_.

In OpenFGA, the [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model) for the device would be:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type device
  relations
    define live_video_viewer: [user]
    define recorded_video_viewer: [user]
    define device_renamer: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "device",\
      "relations": {\
        "live_video_viewer": {\
          "this": {}\
        },\
        "recorded_video_viewer": {\
          "this": {}\
        },\
        "device_renamer": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "live_video_viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "recorded_video_viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "device_renamer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

### 02\. Inserting some relationship tuples [​](https://openfga.dev/docs/modeling/advanced/iot\#02-inserting-some-relationship-tuples "Direct link to 02. Inserting some relationship tuples")

The requirements are:

- **Anne** is a **Security Guard** with access to only **Device 1**
- **Beth** is an **IT Admin** with access to only **Device 1**
- **Security Guards** can **view live and recorded video**
- **IT Admins** can **view live and recorded video** and **rename** devices

Before we tackle the problem of users access to device based on their role, we will try to grant user access based on their view relationship directly.

We will first focus on Anne and Beth's relationship with Device 1.

To add Anne as live\_video\_viewer of device:1:

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"user:anne","relation":"live_video_viewer","object":"device:1"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             User: "user:anne",
             Relation: "live_video_viewer",
             Object: "device:1",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
       new() {
                  User = "user:anne",
                  Relation = "live_video_viewer",
                  Object = "device:1"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    user="user:anne",\
                    relation="live_video_viewer",\
                    object="device:1",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("live_video_viewer")
                        ._object("device:1")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"user":"user:anne","relation":"live_video_viewer","object":"device:1"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne live_video_viewer device:1

```

```codeBlockLines_e6Vv
write([\
    {\
      "user":"user:anne",\
      "relation":"live_video_viewer",\
      "object":"device:1"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

To add Anne as recorded\_video\_viewer of device:1

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"user:anne","relation":"recorded_video_viewer","object":"device:1"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             User: "user:anne",
             Relation: "recorded_video_viewer",
             Object: "device:1",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
       new() {
                  User = "user:anne",
                  Relation = "recorded_video_viewer",
                  Object = "device:1"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    user="user:anne",\
                    relation="recorded_video_viewer",\
                    object="device:1",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("recorded_video_viewer")
                        ._object("device:1")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"user":"user:anne","relation":"recorded_video_viewer","object":"device:1"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne recorded_video_viewer device:1

```

```codeBlockLines_e6Vv
write([\
    {\
      "user":"user:anne",\
      "relation":"recorded_video_viewer",\
      "object":"device:1"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

Likewise, we will add Beth's relationship with device:1.

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"user:beth","relation":"live_video_viewer","object":"device:1"},\
      {"user":"user:beth","relation":"recorded_video_viewer","object":"device:1"},\
      {"user":"user:beth","relation":"device_renamer","object":"device:1"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             User: "user:beth",
             Relation: "live_video_viewer",
             Object: "device:1",
        },         {
             User: "user:beth",
             Relation: "recorded_video_viewer",
             Object: "device:1",
        },         {
             User: "user:beth",
             Relation: "device_renamer",
             Object: "device:1",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
       new() {
                  User = "user:beth",
                  Relation = "live_video_viewer",
                  Object = "device:1"
              },
       new() {
                  User = "user:beth",
                  Relation = "recorded_video_viewer",
                  Object = "device:1"
              },
       new() {
                  User = "user:beth",
                  Relation = "device_renamer",
                  Object = "device:1"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    user="user:beth",\
                    relation="live_video_viewer",\
                    object="device:1",\
                ),\
                ClientTuple(\
                    user="user:beth",\
                    relation="recorded_video_viewer",\
                    object="device:1",\
                ),\
                ClientTuple(\
                    user="user:beth",\
                    relation="device_renamer",\
                    object="device:1",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                new ClientTupleKey()
                        .user("user:beth")
                        .relation("live_video_viewer")
                        ._object("device:1"),
                new ClientTupleKey()
                        .user("user:beth")
                        .relation("recorded_video_viewer")
                        ._object("device:1"),
                new ClientTupleKey()
                        .user("user:beth")
                        .relation("device_renamer")
                        ._object("device:1")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"user":"user:beth","relation":"live_video_viewer","object":"device:1"},{"user":"user:beth","relation":"recorded_video_viewer","object":"device:1"},{"user":"user:beth","relation":"device_renamer","object":"device:1"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:beth live_video_viewer device:1
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:beth recorded_video_viewer device:1
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:beth device_renamer device:1

```

```codeBlockLines_e6Vv
write([\
    {\
      "user":"user:beth",\
      "relation":"live_video_viewer",\
      "object":"device:1"\
    },\
    {\
      "user":"user:beth",\
      "relation":"recorded_video_viewer",\
      "object":"device:1"\
    },\
    {\
      "user":"user:beth",\
      "relation":"device_renamer",\
      "object":"device:1"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

#### Verification [​](https://openfga.dev/docs/modeling/advanced/iot\#verification "Direct link to Verification")

Now that you have some relationship tuples added, you can start using it to [ask](https://openfga.dev/docs/concepts#what-is-a-check-request) some questions, e.g., whether a person has access to rename a device.

First, you will find out if `anne` has permission to `view the live video` on `device:1`, then you will see if `anne` can `rename` `device:1`.

Anne has `live_video_viewer` relationship with device:1.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'live_video_viewer',
    object: 'device:1',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "live_video_viewer",
    Object:   "device:1",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "live_video_viewer",
    Object = "device:1",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="live_video_viewer",
    object="device:1",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("live_video_viewer")
        ._object("device:1");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne live_video_viewer device:1

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"live_video_viewer","object":"device:1"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "live_video_viewer", // has an `live_video_viewer` relation
  object = "device:1", // with the object `device:1`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to device:1 as live_video_viewer?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

On the other hand, Anne does not have `device_renamer` relationship with device:1.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'device_renamer',
    object: 'device:1',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "device_renamer",
    Object:   "device:1",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "device_renamer",
    Object = "device:1",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="device_renamer",
    object="device:1",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("device_renamer")
        ._object("device:1");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne device_renamer device:1

# Response: {"allowed":false}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"device_renamer","object":"device:1"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "device_renamer", // has an `device_renamer` relation
  object = "device:1", // with the object `device:1`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:anne related to device:1 as device_renamer?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

Now, check the other relationships fore Anne and Beth.

| User | Object | Relation | Query | Relation? |
| --- | --- | --- | --- | --- |
| `anne` | `device:1` | `live_video_viewer` | `is anne related to device:1 as live_video_viewer?` | Yes |
| `beth` | `device:1` | `live_video_viewer` | `is beth related to device:1 as live_video_viewer?` | Yes |
| `anne` | `device:1` | `recorded_video_viewer` | `is anne related to device:1 as recorded_video_viewer?` | Yes |
| `beth` | `device:1` | `recorded_video_viewer` | `is beth related to device:1 as recorded_video_viewer?` | Yes |
| `anne` | `device:1` | `device_renamer` | `is anne related to device:1 as device_renamer?` | No |
| `beth` | `device:1` | `device_renamer` | `is beth related to device:1 as device_renamer?` | Yes |

### 03\. Updating our authorization model to facilitate future changes [​](https://openfga.dev/docs/modeling/advanced/iot\#03-updating-our-authorization-model-to-facilitate-future-changes "Direct link to 03. Updating our authorization model to facilitate future changes")

Notice how you had to add the Anne and Beth as [direct relations](https://openfga.dev/docs/concepts#what-are-direct-and-implied-relationships) to all the actions they can take on Device 1 instead of just stating that they are related as Security Guard or IT Admin, and having the other permissions implied? In practice this might have some disadvantages: if your authorization model changes, (e.g so that Security Guards can no longer view previously recorded videos), you would need to change relationship tuples in the system instead of just changing the configuration.

We can address this by using [**concentric relation models**](https://openfga.dev/docs/modeling/building-blocks/concentric-relationships). It allows you to express that sets of users who have a relation X to the object also have relation Y. For example, anyone that is related to the device as a `security_guard` is also related as a `live_video_viewer` and `recorded_video_viewer`, and anyone who is related to the device as an `it_admin` is also related as a `live_video_viewer`, a `recorded_video_viewer`, and a `device_renamer`.

At the end you want to make sure that [checking](https://openfga.dev/docs/concepts#what-is-a-check-request) if Anne, Beth, Charles, or Dianne have permission to view the live video or rename the device, will get you the correct answers back.

The resulting authorization model is:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type device
  relations
    define it_admin: [user]
    define security_guard: [user]
    define live_video_viewer: [user] or it_admin or security_guard
    define recorded_video_viewer: [user] or it_admin or security_guard
    define device_renamer: [user] or it_admin

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "device",\
      "relations": {\
        "it_admin": {\
          "this": {}\
        },\
        "security_guard": {\
          "this": {}\
        },\
        "live_video_viewer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "it_admin"\
                }\
              },\
              {\
                "computedUserset": {\
                  "relation": "security_guard"\
                }\
              }\
            ]\
          }\
        },\
        "recorded_video_viewer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "it_admin"\
                }\
              },\
              {\
                "computedUserset": {\
                  "relation": "security_guard"\
                }\
              }\
            ]\
          }\
        },\
        "device_renamer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "it_admin"\
                }\
              }\
            ]\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "it_admin": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "security_guard": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "live_video_viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "recorded_video_viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "device_renamer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

The requirements are:

- **Anne** and **Charles** are **Security Guards** with access **Device 1**
- **Beth** and **Dianne** are **IT Admins** with access **Device 1**
- **Security Guards** can **view live and recorded video**
- **IT Admins** can **view live and recorded video** and **rename** devices

Instead of adding different relationship tuples with direct relations to the actions they can take, as you did in the previous section, you will only add the relation to their role: `it_admin` or `security_guard`.

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"user:anne","relation":"security_guard","object":"device:1"},\
      {"user":"user:beth","relation":"it_admin","object":"device:1"},\
      {"user":"user:charles","relation":"security_guard","object":"device:1"},\
      {"user":"user:dianne","relation":"it_admin","object":"device:1"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             User: "user:anne",
             Relation: "security_guard",
             Object: "device:1",
        },         {
             User: "user:beth",
             Relation: "it_admin",
             Object: "device:1",
        },         {
             User: "user:charles",
             Relation: "security_guard",
             Object: "device:1",
        },         {
             User: "user:dianne",
             Relation: "it_admin",
             Object: "device:1",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
       new() {
                  User = "user:anne",
                  Relation = "security_guard",
                  Object = "device:1"
              },
       new() {
                  User = "user:beth",
                  Relation = "it_admin",
                  Object = "device:1"
              },
       new() {
                  User = "user:charles",
                  Relation = "security_guard",
                  Object = "device:1"
              },
       new() {
                  User = "user:dianne",
                  Relation = "it_admin",
                  Object = "device:1"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    user="user:anne",\
                    relation="security_guard",\
                    object="device:1",\
                ),\
                ClientTuple(\
                    user="user:beth",\
                    relation="it_admin",\
                    object="device:1",\
                ),\
                ClientTuple(\
                    user="user:charles",\
                    relation="security_guard",\
                    object="device:1",\
                ),\
                ClientTuple(\
                    user="user:dianne",\
                    relation="it_admin",\
                    object="device:1",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("security_guard")
                        ._object("device:1"),
                new ClientTupleKey()
                        .user("user:beth")
                        .relation("it_admin")
                        ._object("device:1"),
                new ClientTupleKey()
                        .user("user:charles")
                        .relation("security_guard")
                        ._object("device:1"),
                new ClientTupleKey()
                        .user("user:dianne")
                        .relation("it_admin")
                        ._object("device:1")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"user":"user:anne","relation":"security_guard","object":"device:1"},{"user":"user:beth","relation":"it_admin","object":"device:1"},{"user":"user:charles","relation":"security_guard","object":"device:1"},{"user":"user:dianne","relation":"it_admin","object":"device:1"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne security_guard device:1
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:beth it_admin device:1
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:charles security_guard device:1
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:dianne it_admin device:1

```

```codeBlockLines_e6Vv
write([\
    {\
      "user":"user:anne",\
      "relation":"security_guard",\
      "object":"device:1"\
    },\
    {\
      "user":"user:beth",\
      "relation":"it_admin",\
      "object":"device:1"\
    },\
    {\
      "user":"user:charles",\
      "relation":"security_guard",\
      "object":"device:1"\
    },\
    {\
      "user":"user:dianne",\
      "relation":"it_admin",\
      "object":"device:1"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

#### Verification [​](https://openfga.dev/docs/modeling/advanced/iot\#verification-1 "Direct link to Verification")

We can now verify whether charles is related to device:1 as live\_video\_viewer.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:charles',
    relation: 'live_video_viewer',
    object: 'device:1',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:charles",
    Relation: "live_video_viewer",
    Object:   "device:1",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:charles",
    Relation = "live_video_viewer",
    Object = "device:1",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:charles",
    relation="live_video_viewer",
    object="device:1",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:charles")
        .relation("live_video_viewer")
        ._object("device:1");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:charles live_video_viewer device:1

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:charles","relation":"live_video_viewer","object":"device:1"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:charles", // check if the user `user:charles`
  relation = "live_video_viewer", // has an `live_video_viewer` relation
  object = "device:1", // with the object `device:1`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:charles related to device:1 as live_video_viewer?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

Check the other relationships for anne, beth, charles and dianne.

| User | Object | Relation | Query | Relation? |
| --- | --- | --- | --- | --- |
| `anne` | `device:1` | `live_video_viewer` | `is anne related to device:1 as live_video_viewer?` | Yes |
| `beth` | `device:1` | `live_video_viewer` | `is beth related to device:1 as live_video_viewer?` | Yes |
| `anne` | `device:1` | `recorded_video_viewer` | `is anne related to device:1 as recorded_video_viewer?` | Yes |
| `beth` | `device:1` | `recorded_video_viewer` | `is beth related to device:1 as recorded_video_viewer?` | Yes |
| `anne` | `device:1` | `device_renamer` | `is anne related to device:1 as device_renamer?` | No |
| `beth` | `device:1` | `device_renamer` | `is beth related to device:1 as device_renamer?` | Yes |
| `charles` | `device:1` | `live_video_viewer` | `is charles related to device:1 as live_video_viewer?` | Yes |
| `dianne` | `device:1` | `live_video_viewer` | `is dianne related to device:1 as live_video_viewer?` | Yes |
| `charles` | `device:1` | `recorded_video_viewer` | `is charles related to device:1 as recorded_video_viewer?` | Yes |
| `dianne` | `device:1` | `recorded_video_viewer` | `is dianne related to device:1 as recorded_video_viewer?` | Yes |
| `charles` | `device:1` | `device_renamer` | `is charles related to device:1 as device_renamer?` | No |
| `dianne` | `device:1` | `device_renamer` | `is dianne related to device:1 as device_renamer?` | Yes |

### 04\. Modeling device groups [​](https://openfga.dev/docs/modeling/advanced/iot\#04-modeling-device-groups "Direct link to 04. Modeling device groups")

Now that you are done with devices. Let us tackle device groups.

The requirements regarding device groups were:

- **Devices** can be grouped into **Device Groups**
- **Security guards** with access to the **Device Group** are **Security Guards** with access to the **Devices** within the **Device Group**. Similarly for **IT Admins**

The [type definition](https://openfga.dev/docs/concepts#what-is-a-type-definition) for the device group:

- DSL
- JSON

```codeBlockLines_e6Vv

type device_group
  relations
    define it_admin: [user]
    define security_guard: [user]

```

```codeBlockLines_e6Vv
{
  "type": "device_group",
  "relations": {
    "it_admin": {
      "this": {}
    },
    "security_guard": {
      "this": {}
    }
  },
  "metadata": {
    "relations": {
      "it_admin": {
        "directly_related_user_types": [\
          {\
            "type": "user"\
          }\
        ]
      },
      "security_guard": {
        "directly_related_user_types": [\
          {\
            "type": "user"\
          }\
        ]
      }
    }
  }
}

```

With this change, the full [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model) becomes:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type device
  relations
    define it_admin: [user, device_group#it_admin]
    define security_guard: [user, device_group#security_guard]
    define live_video_viewer: [user] or it_admin or security_guard
    define recorded_video_viewer: [user] or it_admin or security_guard
    define device_renamer: [user] or it_admin

type device_group
  relations
    define it_admin: [user]
    define security_guard: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "device",\
      "relations": {\
        "it_admin": {\
          "this": {}\
        },\
        "security_guard": {\
          "this": {}\
        },\
        "live_video_viewer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "it_admin"\
                }\
              },\
              {\
                "computedUserset": {\
                  "relation": "security_guard"\
                }\
              }\
            ]\
          }\
        },\
        "recorded_video_viewer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "it_admin"\
                }\
              },\
              {\
                "computedUserset": {\
                  "relation": "security_guard"\
                }\
              }\
            ]\
          }\
        },\
        "device_renamer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "it_admin"\
                }\
              }\
            ]\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "it_admin": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "device_group",\
                "relation": "it_admin"\
              }\
            ]\
          },\
          "security_guard": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "device_group",\
                "relation": "security_guard"\
              }\
            ]\
          },\
          "live_video_viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "recorded_video_viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "device_renamer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "device_group",\
      "relations": {\
        "it_admin": {\
          "this": {}\
        },\
        "security_guard": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "it_admin": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "security_guard": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

#### Updating relationship tuples on roles [​](https://openfga.dev/docs/modeling/advanced/iot\#updating-relationship-tuples-on-roles "Direct link to Updating relationship tuples on roles")

Remember that **Charles** is a **Security Guard**, and **Dianne** an **IT Admin** on **Group 1**, enter the [relationship tuples](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple) below to reflect that.

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"user:charles","relation":"security_guard","object":"device_group:group1"},\
      {"user":"user:dianne","relation":"it_admin","object":"device_group:group1"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             User: "user:charles",
             Relation: "security_guard",
             Object: "device_group:group1",
        },         {
             User: "user:dianne",
             Relation: "it_admin",
             Object: "device_group:group1",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
       new() {
                  User = "user:charles",
                  Relation = "security_guard",
                  Object = "device_group:group1"
              },
       new() {
                  User = "user:dianne",
                  Relation = "it_admin",
                  Object = "device_group:group1"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    user="user:charles",\
                    relation="security_guard",\
                    object="device_group:group1",\
                ),\
                ClientTuple(\
                    user="user:dianne",\
                    relation="it_admin",\
                    object="device_group:group1",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                new ClientTupleKey()
                        .user("user:charles")
                        .relation("security_guard")
                        ._object("device_group:group1"),
                new ClientTupleKey()
                        .user("user:dianne")
                        .relation("it_admin")
                        ._object("device_group:group1")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"user":"user:charles","relation":"security_guard","object":"device_group:group1"},{"user":"user:dianne","relation":"it_admin","object":"device_group:group1"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:charles security_guard device_group:group1
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:dianne it_admin device_group:group1

```

```codeBlockLines_e6Vv
write([\
    {\
      "user":"user:charles",\
      "relation":"security_guard",\
      "object":"device_group:group1"\
    },\
    {\
      "user":"user:dianne",\
      "relation":"it_admin",\
      "object":"device_group:group1"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

You still need to give all the security guards of group1 a `security_guard` relation to devices 2 and 3, and similarly for IT Admins. Add the following relationship tuples to do that.

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"device_group:group1#security_guard","relation":"security_guard","object":"device:2"},\
      {"user":"device_group:group1#security_guard","relation":"security_guard","object":"device:3"},\
      {"user":"device_group:group1#it_admin","relation":"it_admin","object":"device:2"},\
      {"user":"device_group:group1#it_admin","relation":"it_admin","object":"device:3"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             User: "device_group:group1#security_guard",
             Relation: "security_guard",
             Object: "device:2",
        },         {
             User: "device_group:group1#security_guard",
             Relation: "security_guard",
             Object: "device:3",
        },         {
             User: "device_group:group1#it_admin",
             Relation: "it_admin",
             Object: "device:2",
        },         {
             User: "device_group:group1#it_admin",
             Relation: "it_admin",
             Object: "device:3",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
       new() {
                  User = "device_group:group1#security_guard",
                  Relation = "security_guard",
                  Object = "device:2"
              },
       new() {
                  User = "device_group:group1#security_guard",
                  Relation = "security_guard",
                  Object = "device:3"
              },
       new() {
                  User = "device_group:group1#it_admin",
                  Relation = "it_admin",
                  Object = "device:2"
              },
       new() {
                  User = "device_group:group1#it_admin",
                  Relation = "it_admin",
                  Object = "device:3"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    user="device_group:group1#security_guard",\
                    relation="security_guard",\
                    object="device:2",\
                ),\
                ClientTuple(\
                    user="device_group:group1#security_guard",\
                    relation="security_guard",\
                    object="device:3",\
                ),\
                ClientTuple(\
                    user="device_group:group1#it_admin",\
                    relation="it_admin",\
                    object="device:2",\
                ),\
                ClientTuple(\
                    user="device_group:group1#it_admin",\
                    relation="it_admin",\
                    object="device:3",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                new ClientTupleKey()
                        .user("device_group:group1#security_guard")
                        .relation("security_guard")
                        ._object("device:2"),
                new ClientTupleKey()
                        .user("device_group:group1#security_guard")
                        .relation("security_guard")
                        ._object("device:3"),
                new ClientTupleKey()
                        .user("device_group:group1#it_admin")
                        .relation("it_admin")
                        ._object("device:2"),
                new ClientTupleKey()
                        .user("device_group:group1#it_admin")
                        .relation("it_admin")
                        ._object("device:3")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"user":"device_group:group1#security_guard","relation":"security_guard","object":"device:2"},{"user":"device_group:group1#security_guard","relation":"security_guard","object":"device:3"},{"user":"device_group:group1#it_admin","relation":"it_admin","object":"device:2"},{"user":"device_group:group1#it_admin","relation":"it_admin","object":"device:3"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA device_group:group1#security_guard security_guard device:2
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA device_group:group1#security_guard security_guard device:3
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA device_group:group1#it_admin it_admin device:2
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA device_group:group1#it_admin it_admin device:3

```

```codeBlockLines_e6Vv
write([\
    {\
      "user":"device_group:group1#security_guard",\
      "relation":"security_guard",\
      "object":"device:2"\
    },\
    {\
      "user":"device_group:group1#security_guard",\
      "relation":"security_guard",\
      "object":"device:3"\
    },\
    {\
      "user":"device_group:group1#it_admin",\
      "relation":"it_admin",\
      "object":"device:2"\
    },\
    {\
      "user":"device_group:group1#it_admin",\
      "relation":"it_admin",\
      "object":"device:3"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

#### Verification [​](https://openfga.dev/docs/modeling/advanced/iot\#verification-2 "Direct link to Verification")

Now that you have finalized the model and added the relationship tuples, you can start asking some queries. Try asking the same queries you did earlier but on device 2 instead of device 1.

We can ask `is dianne related to device:2 as live_video_viewer?`

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'dianne',
    relation: 'live_video_viewer',
    object: 'device:2',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "dianne",
    Relation: "live_video_viewer",
    Object:   "device:2",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "dianne",
    Relation = "live_video_viewer",
    Object = "device:2",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="dianne",
    relation="live_video_viewer",
    object="device:2",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("dianne")
        .relation("live_video_viewer")
        ._object("device:2");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA dianne live_video_viewer device:2

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"dianne","relation":"live_video_viewer","object":"device:2"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "dianne", // check if the user `dianne`
  relation = "live_video_viewer", // has an `live_video_viewer` relation
  object = "device:2", // with the object `device:2`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is dianne related to device:2 as live_video_viewer?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

Type any of the following queries in the **TUPLE QUERIES** section and press **ENTER** on your keyboard to see the results.

| User | Object | Relation | Query | Relation? |
| --- | --- | --- | --- | --- |
| `anne` | `device:2` | `live_video_viewer` | `is anne related to device:2 as live_video_viewer?` | No |
| `beth` | `device:2` | `live_video_viewer` | `is beth related to device:2 as live_video_viewer?` | No |
| `anne` | `device:2` | `recorded_video_viewer` | `is anne related to device:2 as recorded_video_viewer?` | No |
| `beth` | `device:2` | `recorded_video_viewer` | `is beth related to device:2 as recorded_video_viewer?` | No |
| `anne` | `device:2` | `device_renamer` | `is anne related to device:2 as device_renamer?` | No |
| `beth` | `device:2` | `device_renamer` | `is beth related to device:2 as device_renamer?` | No |
| `charles` | `device:2` | `live_video_viewer` | `is charles related to device:2 as live_video_viewer?` | Yes |
| `dianne` | `device:2` | `live_video_viewer` | `is dianne related to device:2 as live_video_viewer?` | Yes |
| `charles` | `device:2` | `recorded_video_viewer` | `is charles related to device:2 as recorded_video_viewer?` | Yes |
| `dianne` | `device:2` | `recorded_video_viewer` | `is dianne related to device:2 as recorded_video_viewer?` | Yes |
| `charles` | `device:2` | `device_renamer` | `is charles related to device:2 as device_renamer?` | No |
| `dianne` | `device:2` | `device_renamer` | `is dianne related to device:2 as device_renamer?` | Yes |

### 05\. Disallow direct relationships To users [​](https://openfga.dev/docs/modeling/advanced/iot\#05-disallow-direct-relationships-to-users "Direct link to 05. Disallow direct relationships To users")

Notice that despite following **[Step 03](https://openfga.dev/docs/modeling/advanced/iot#03-updating-our-authorization-model-to-facilitate-future-changes)**, anne and beth still have direct relations to all the actions they can take on device:1.

#### Updating the authorization model [​](https://openfga.dev/docs/modeling/advanced/iot\#updating-the-authorization-model "Direct link to Updating the authorization model")

`anne` is a `live_video_viewer` by both her position as `security_guard` as well as her _[direct relationship](https://openfga.dev/docs/concepts#what-are-direct-and-implied-relationships)_ assignment. This is undesirable. Imagine `anne` left her position of `security_guard` and she will still have `live_video_viewer` access to `device:1`.

To remedy this, remove `[user]` from `live_video_viewer`, `recorded_video_viewer` and `device_renamer`. This denies direct relations to `live_video_viewer`, `recorded_video_viewer` and `device_renamer` from having an effect. To do this:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type device
  relations
    define it_admin: [user, device_group#it_admin]
    define security_guard: [user, device_group#security_guard]
    define live_video_viewer: it_admin or security_guard
    define recorded_video_viewer: it_admin or security_guard
    define device_renamer: it_admin

type device_group
  relations
    define it_admin: [user]
    define security_guard: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "device",\
      "relations": {\
        "it_admin": {\
          "this": {}\
        },\
        "security_guard": {\
          "this": {}\
        },\
        "live_video_viewer": {\
          "union": {\
            "child": [\
              {\
                "computedUserset": {\
                  "relation": "it_admin"\
                }\
              },\
              {\
                "computedUserset": {\
                  "relation": "security_guard"\
                }\
              }\
            ]\
          }\
        },\
        "recorded_video_viewer": {\
          "union": {\
            "child": [\
              {\
                "computedUserset": {\
                  "relation": "it_admin"\
                }\
              },\
              {\
                "computedUserset": {\
                  "relation": "security_guard"\
                }\
              }\
            ]\
          }\
        },\
        "device_renamer": {\
          "union": {\
            "child": [\
              {\
                "computedUserset": {\
                  "relation": "it_admin"\
                }\
              }\
            ]\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "it_admin": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "device_group",\
                "relation": "it_admin"\
              }\
            ]\
          },\
          "security_guard": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "device_group",\
                "relation": "security_guard"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "device_group",\
      "relations": {\
        "it_admin": {\
          "this": {}\
        },\
        "security_guard": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "it_admin": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "security_guard": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

info

Notice that any reference to the [**direct relationship type restrictions**](https://openfga.dev/docs/configuration-language#direct-relationship-type-restrictions) has been removed. That indicates that a user cannot have a [direct relationship](https://openfga.dev/docs/concepts#what-are-direct-and-implied-relationships) with an object in this type.

With this change, `anne` can no longer have a `live_video_viewer` permission for `device:1` except through having a `security_guard` or `it_admin` role first, and when she loses access to that role, she will automatically lose access to the `live_video_viewer` permission.

#### Verification [​](https://openfga.dev/docs/modeling/advanced/iot\#verification-3 "Direct link to Verification")

Now that direct relationship is denied, we should see that `anne` has `live_video_viewer` relation to `device:1` solely based on her position as `security_guard` to `device:1`. Let's find out.

To test this, we can add a new user `emily`. Emily is **not** a `security_guard` nor an `it_admin`. However, we attempt to access via direct relations by adding the following [relationship tuples](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple):

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"user:emily","relation":"live_video_viewer","object":"device:1"},\
      {"user":"user:emily","relation":"recorded_video_viewer","object":"device:1"},\
      {"user":"user:emily","relation":"device_renamer","object":"device:1"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             User: "user:emily",
             Relation: "live_video_viewer",
             Object: "device:1",
        },         {
             User: "user:emily",
             Relation: "recorded_video_viewer",
             Object: "device:1",
        },         {
             User: "user:emily",
             Relation: "device_renamer",
             Object: "device:1",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
       new() {
                  User = "user:emily",
                  Relation = "live_video_viewer",
                  Object = "device:1"
              },
       new() {
                  User = "user:emily",
                  Relation = "recorded_video_viewer",
                  Object = "device:1"
              },
       new() {
                  User = "user:emily",
                  Relation = "device_renamer",
                  Object = "device:1"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    user="user:emily",\
                    relation="live_video_viewer",\
                    object="device:1",\
                ),\
                ClientTuple(\
                    user="user:emily",\
                    relation="recorded_video_viewer",\
                    object="device:1",\
                ),\
                ClientTuple(\
                    user="user:emily",\
                    relation="device_renamer",\
                    object="device:1",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                new ClientTupleKey()
                        .user("user:emily")
                        .relation("live_video_viewer")
                        ._object("device:1"),
                new ClientTupleKey()
                        .user("user:emily")
                        .relation("recorded_video_viewer")
                        ._object("device:1"),
                new ClientTupleKey()
                        .user("user:emily")
                        .relation("device_renamer")
                        ._object("device:1")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"user":"user:emily","relation":"live_video_viewer","object":"device:1"},{"user":"user:emily","relation":"recorded_video_viewer","object":"device:1"},{"user":"user:emily","relation":"device_renamer","object":"device:1"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:emily live_video_viewer device:1
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:emily recorded_video_viewer device:1
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:emily device_renamer device:1

```

```codeBlockLines_e6Vv
write([\
    {\
      "user":"user:emily",\
      "relation":"live_video_viewer",\
      "object":"device:1"\
    },\
    {\
      "user":"user:emily",\
      "relation":"recorded_video_viewer",\
      "object":"device:1"\
    },\
    {\
      "user":"user:emily",\
      "relation":"device_renamer",\
      "object":"device:1"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

Now try to query `is emily related to device:1 as live_video_viewer?`. The returned result should be `emily is not related to device:1 as live_video_viewer`. This confirms that direct relations have no effect on the `live_video_viewer` relations, and that is because the [**direct relationship type restriction**](https://openfga.dev/docs/configuration-language#direct-relationship-type-restrictions) was removed from the relation configuration.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:emily',
    relation: 'live_video_viewer',
    object: 'device:1',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:emily",
    Relation: "live_video_viewer",
    Object:   "device:1",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:emily",
    Relation = "live_video_viewer",
    Object = "device:1",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:emily",
    relation="live_video_viewer",
    object="device:1",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:emily")
        .relation("live_video_viewer")
        ._object("device:1");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:emily live_video_viewer device:1

# Response: {"allowed":false}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:emily","relation":"live_video_viewer","object":"device:1"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:emily", // check if the user `user:emily`
  relation = "live_video_viewer", // has an `live_video_viewer` relation
  object = "device:1", // with the object `device:1`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:emily related to device:1 as live_video_viewer?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

Query on the other relationships and you will see:

| User | Object | Relation | Query | Relation? |
| --- | --- | --- | --- | --- |
| `emily` | `device:1` | `recorded_video_viewer` | `is emily related to device:1 as recorded_video_viewer?` | No |
| `emily` | `device:1` | `device_renamer` | `is emily related to device:1 as device_renamer?` | No |

## Summary [​](https://openfga.dev/docs/modeling/advanced/iot\#summary "Direct link to Summary")

In this post, you were introduced to [fine grain authentication](https://openfga.dev/docs/authorization-concepts#what-is-fine-grained-authorization) and OpenFGA.

Upcoming posts will dive deeper into OpenFGA, introducing concepts that will improve on the model you built today, and tackling more complex permission systems, with more relations and requirements that need to be met.

### Exercises for you [​](https://openfga.dev/docs/modeling/advanced/iot\#exercises-for-you "Direct link to Exercises for you")

- Try adding a second group tied to devices 4 and 5. Add only Charles and Dianne to this group, then try to run queries that would validate your model.
- Management has decided that Security Guards can only access live videos, and instituted a new position called Security Officer who can view both live and recorded videos. Can you update the authorization model to reflect that?

- [Before you start](https://openfga.dev/docs/modeling/advanced/iot#before-you-start)
  - [concepts](https://openfga.dev/docs/modeling/advanced/iot#-concepts)
- [What You Will be modeling](https://openfga.dev/docs/modeling/advanced/iot#what-you-will-be-modeling)
  - [Requirements](https://openfga.dev/docs/modeling/advanced/iot#requirements)
  - [Defined Scenarios](https://openfga.dev/docs/modeling/advanced/iot#defined-scenarios)
- [Modeling device authorization](https://openfga.dev/docs/modeling/advanced/iot#modeling-device-authorization)
  - [01\. Writing the initial model for a device](https://openfga.dev/docs/modeling/advanced/iot#01-writing-the-initial-model-for-a-device)
  - [02\. Inserting some relationship tuples](https://openfga.dev/docs/modeling/advanced/iot#02-inserting-some-relationship-tuples)
  - [03\. Updating our authorization model to facilitate future changes](https://openfga.dev/docs/modeling/advanced/iot#03-updating-our-authorization-model-to-facilitate-future-changes)
  - [04\. Modeling device groups](https://openfga.dev/docs/modeling/advanced/iot#04-modeling-device-groups)
  - [05\. Disallow direct relationships To users](https://openfga.dev/docs/modeling/advanced/iot#05-disallow-direct-relationships-to-users)
- [Summary](https://openfga.dev/docs/modeling/advanced/iot#summary)
  - [Exercises for you](https://openfga.dev/docs/modeling/advanced/iot#exercises-for-you)

## Custom Roles Guide
[Skip to main content](https://openfga.dev/docs/modeling/custom-roles#__docusaurus_skipToContent_fallback)

On this page

In this guide you'll learn how to model custom roles in your system using [OpenFGA](https://openfga.dev/docs/fga).

For example, a Business-to-Business (B2B) application could allow customers to create their own custom roles on the application to grant their users.

When to use

In many cases, roles would fit in well as relations on an object type, as seen in [Modeling Roles and Permissions](https://openfga.dev/docs/modeling/roles-and-permissions). In some cases, however, they may not be enough.

Custom roles are useful when:

- Users of the application are able to create arbitrary sets of roles with different permissions that govern the users' access to objects.
- It is not known beforehand (at the time of Authorization Model creation) what the application roles are.
- The team responsible for building the authorization model is different from the teams responsible for defining roles and access to the application.

## Before you start [​](https://openfga.dev/docs/modeling/custom-roles\#before-you-start "Direct link to Before you start")

Before you start this guide, make sure you're familiar with some [OpenFGA Concepts](https://openfga.dev/docs/concepts) and know how to develop the things listed below.

### Initial Model [​](https://openfga.dev/docs/modeling/custom-roles\#initial-model "Direct link to Initial Model")

To start, let's say there is an application with a [type](https://openfga.dev/docs/concepts#what-is-a-type) called `asset-category`. Users can have view and/or edit access to assets in that category. Any user who can edit can also view.

We'll start with the following authorization model showing a system with an `asset-category` type. This type allows users to have view and edit access to it.

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type asset-category
  relations
    define viewer: [user] or editor
    define editor: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "asset-category",\
      "relations": {\
        "viewer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "editor"\
                }\
              }\
            ]\
          }\
        },\
        "editor": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "editor": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

* * *

In addition, you'll need to know the following:

### Modeling Roles and Permissions [​](https://openfga.dev/docs/modeling/custom-roles\#modeling-roles-and-permissions "Direct link to Modeling Roles and Permissions")

You need to know how to add users to groups and grant groups access to resources. [Learn more →](https://openfga.dev/docs/modeling/user-groups)

### Modeling Object-to-Object Relationships [​](https://openfga.dev/docs/modeling/custom-roles\#modeling-object-to-object-relationships "Direct link to Modeling Object-to-Object Relationships")

You need to know how to create relationships between objects and how that might affect a user's relationships to those objects. [Learn more →](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships)

### Concepts & Configuration Language [​](https://openfga.dev/docs/modeling/custom-roles\#concepts--configuration-language "Direct link to Concepts & Configuration Language")

- [OpenFGA Concepts](https://openfga.dev/docs/concepts)
- [Configuration Language](https://openfga.dev/docs/configuration-language)

## Step By Step [​](https://openfga.dev/docs/modeling/custom-roles\#step-by-step "Direct link to Step By Step")

Starting with the authorization model mentioned above, we want to enable users to create their own custom roles, and tie permissions to those roles to our two users and to the permissions on the logo asset category.

For this guide, we'll model a scenario where a certain organization using our app has created an `asset-category` called "logos", and another called "text content".

The company administrator would like to create:

- a **media-manager** role that allows users to **edit** assets in the **logos asset category**
- a **media-viewer** role that allows users to **view** all assets in the **logos asset category**
- a **blog-editor** role that allows users to **edit** all assets in the **text content asset category**
- a **blog-viewer** role that allows users to **view** all assets in the **text content asset category**

Imagine these are what the permissions the roles in one organization using our service are like:

![Image showing custom roles and permissions](https://openfga.dev/assets/images/custom-roles-roles-and-permissions-ca8254c87a37e52fea450bdeb634b39c.svg)

Finally, the administrator wants to assign **Anne** the **media-manager** role and **Beth** the **media-viewer** role.

At the end, we'll verify our model by ensuring the following access [check](https://openfga.dev/docs/concepts#what-is-a-check-request) requests return the expected result.

![Image showing expected results](https://openfga.dev/assets/images/custom-roles-expectations-f015ffb4203247a03815859fb0844f95.svg)

In order to do this, we need to:

1. Update the Authorization Model to add a Role Type
2. Use Relationship Tuples to tie the Users to the Roles
3. Use Relationship Tuples to associate Permissions with the Roles
4. Verify that the Authorization Model works

### 01\. Update The Authorization Model To Add A Role Type [​](https://openfga.dev/docs/modeling/custom-roles\#01-update-the-authorization-model-to-add-a-role-type "Direct link to 01. Update The Authorization Model To Add A Role Type")

Because our roles are going to be dynamic and might change frequently, we represent them in a new type instead of as relations on that same type. We'll create new type called `role`, where users can be related as assignee to it.

The authorization model becomes this:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type asset-category
  relations
    define viewer: [user, role#assignee] or editor
    define editor: [user, role#assignee]

type role
  relations
    define assignee: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "asset-category",\
      "relations": {\
        "viewer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "editor"\
                }\
              }\
            ]\
          }\
        },\
        "editor": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "role",\
                "relation": "assignee"\
              }\
            ]\
          },\
          "editor": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "role",\
                "relation": "assignee"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "role",\
      "relations": {\
        "assignee": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "assignee": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

With this change we can add relationship tuples indicating that a certain user is `assigned` a certain `role`.

### 02.Use Relationship Tuples To Tie The Users To The Roles [​](https://openfga.dev/docs/modeling/custom-roles\#02use-relationship-tuples-to-tie-the-users-to-the-roles "Direct link to 02.Use Relationship Tuples To Tie The Users To The Roles")

Once we've added the `role` type, we can assign roles to Anne and Beth. Anne is assigned the "media-manager" role and Beth is assigned the "media-viewer" role. We can do that by adding relationship tuples as follows:

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // Anne is assigned the media-manager role\
      {"_description":"Anne is assigned the media-manager role","user":"user:anne","relation":"assignee","object":"role:media-manager"},\
      // Beth is assigned the media-viewer role\
      {"_description":"Beth is assigned the media-viewer role","user":"user:beth","relation":"assignee","object":"role:media-viewer"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             // Anne is assigned the media-manager role
             User: "user:anne",
             Relation: "assignee",
             Object: "role:media-manager",
        },         {
             // Beth is assigned the media-viewer role
             User: "user:beth",
             Relation: "assignee",
             Object: "role:media-viewer",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
    // Anne is assigned the media-manager role
       new() {
                  User = "user:anne",
                  Relation = "assignee",
                  Object = "role:media-manager"
              },
    // Beth is assigned the media-viewer role
       new() {
                  User = "user:beth",
                  Relation = "assignee",
                  Object = "role:media-viewer"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    # Anne is assigned the media-manager role\
                    user="user:anne",\
                    relation="assignee",\
                    object="role:media-manager",\
                ),\
                ClientTuple(\
                    # Beth is assigned the media-viewer role\
                    user="user:beth",\
                    relation="assignee",\
                    object="role:media-viewer",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                // Anne is assigned the media-manager role
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("assignee")
                        ._object("role:media-manager"),
                // Beth is assigned the media-viewer role
                new ClientTupleKey()
                        .user("user:beth")
                        .relation("assignee")
                        ._object("role:media-viewer")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"_description":"Anne is assigned the media-manager role","user":"user:anne","relation":"assignee","object":"role:media-manager"},{"_description":"Beth is assigned the media-viewer role","user":"user:beth","relation":"assignee","object":"role:media-viewer"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne assignee role:media-manager
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:beth assignee role:media-viewer

```

```codeBlockLines_e6Vv
write([\
    // Anne is assigned the media-manager role\
    {\
      "user":"user:anne",\
      "relation":"assignee",\
      "object":"role:media-manager"\
    },\
    // Beth is assigned the media-viewer role\
    {\
      "user":"user:beth",\
      "relation":"assignee",\
      "object":"role:media-viewer"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

We can verify they are members of said roles by issuing the following check requests:

![Image showing expected membership checks](https://openfga.dev/assets/images/custom-roles-membership-checks-057e971c8b2def87ea3c405352a0f100.svg)

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'assignee',
    object: 'role:media-manager',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "assignee",
    Object:   "role:media-manager",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "assignee",
    Object = "role:media-manager",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="assignee",
    object="role:media-manager",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("assignee")
        ._object("role:media-manager");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne assignee role:media-manager

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"assignee","object":"role:media-manager"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "assignee", // has an `assignee` relation
  object = "role:media-manager", // with the object `role:media-manager`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to role:media-manager as assignee?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

### 03\. Use Relationship Tuples To Associate Permissions With The Roles [​](https://openfga.dev/docs/modeling/custom-roles\#03-use-relationship-tuples-to-associate-permissions-with-the-roles "Direct link to 03. Use Relationship Tuples To Associate Permissions With The Roles")

With our users and roles set up, we still need to tie members of a certain role to it's corresponding permission(s).

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // Users assigned the media-manager role can edit in the Logos assets category\
      {"_description":"Users assigned the media-manager role can edit in the Logos assets category","user":"role:media-manager#assignee","relation":"editor","object":"asset-category:logos"},\
      // Users assigned the media-viewer role can view from the Logos assets category\
      {"_description":"Users assigned the media-viewer role can view from the Logos assets category","user":"role:media-viewer#assignee","relation":"viewer","object":"asset-category:logos"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             // Users assigned the media-manager role can edit in the Logos assets category
             User: "role:media-manager#assignee",
             Relation: "editor",
             Object: "asset-category:logos",
        },         {
             // Users assigned the media-viewer role can view from the Logos assets category
             User: "role:media-viewer#assignee",
             Relation: "viewer",
             Object: "asset-category:logos",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
    // Users assigned the media-manager role can edit in the Logos assets category
       new() {
                  User = "role:media-manager#assignee",
                  Relation = "editor",
                  Object = "asset-category:logos"
              },
    // Users assigned the media-viewer role can view from the Logos assets category
       new() {
                  User = "role:media-viewer#assignee",
                  Relation = "viewer",
                  Object = "asset-category:logos"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    # Users assigned the media-manager role can edit in the Logos assets category\
                    user="role:media-manager#assignee",\
                    relation="editor",\
                    object="asset-category:logos",\
                ),\
                ClientTuple(\
                    # Users assigned the media-viewer role can view from the Logos assets category\
                    user="role:media-viewer#assignee",\
                    relation="viewer",\
                    object="asset-category:logos",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                // Users assigned the media-manager role can edit in the Logos assets category
                new ClientTupleKey()
                        .user("role:media-manager#assignee")
                        .relation("editor")
                        ._object("asset-category:logos"),
                // Users assigned the media-viewer role can view from the Logos assets category
                new ClientTupleKey()
                        .user("role:media-viewer#assignee")
                        .relation("viewer")
                        ._object("asset-category:logos")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"_description":"Users assigned the media-manager role can edit in the Logos assets category","user":"role:media-manager#assignee","relation":"editor","object":"asset-category:logos"},{"_description":"Users assigned the media-viewer role can view from the Logos assets category","user":"role:media-viewer#assignee","relation":"viewer","object":"asset-category:logos"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA role:media-manager#assignee editor asset-category:logos
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA role:media-viewer#assignee viewer asset-category:logos

```

```codeBlockLines_e6Vv
write([\
    // Users assigned the media-manager role can edit in the Logos assets category\
    {\
      "user":"role:media-manager#assignee",\
      "relation":"editor",\
      "object":"asset-category:logos"\
    },\
    // Users assigned the media-viewer role can view from the Logos assets category\
    {\
      "user":"role:media-viewer#assignee",\
      "relation":"viewer",\
      "object":"asset-category:logos"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

### 04\. Verify That The Authorization Model Works [​](https://openfga.dev/docs/modeling/custom-roles\#04-verify-that-the-authorization-model-works "Direct link to 04. Verify That The Authorization Model Works")

To ensure our model works, it needs to match our expectations:

![Image showing expected results](https://openfga.dev/assets/images/custom-roles-expectations-f015ffb4203247a03815859fb0844f95.svg)

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'editor',
    object: 'asset-category:logos',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "editor",
    Object:   "asset-category:logos",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "editor",
    Object = "asset-category:logos",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="editor",
    object="asset-category:logos",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("editor")
        ._object("asset-category:logos");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne editor asset-category:logos

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"editor","object":"asset-category:logos"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "editor", // has an `editor` relation
  object = "asset-category:logos", // with the object `asset-category:logos`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to asset-category:logos as editor?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

The checks come back as we expect, so our model is working correctly.

## Related Sections [​](https://openfga.dev/docs/modeling/custom-roles\#related-sections "Direct link to Related Sections")

Check the following sections for more on how to model with OpenFGA.

Modeling Roles and Permissions

Learn how to remove the direct relationship to indicate nonassignable permissions.

- [More](https://openfga.dev/docs/modeling/roles-and-permissions)

Modeling Concepts: Object to Object Relationships

Learn about how to model object to object relationships in OpenFGA.

- [More](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships)

- [Before you start](https://openfga.dev/docs/modeling/custom-roles#before-you-start)
  - [Initial Model](https://openfga.dev/docs/modeling/custom-roles#initial-model)
  - [Modeling Roles and Permissions](https://openfga.dev/docs/modeling/custom-roles#modeling-roles-and-permissions)
  - [Modeling Object-to-Object Relationships](https://openfga.dev/docs/modeling/custom-roles#modeling-object-to-object-relationships)
  - [Concepts & Configuration Language](https://openfga.dev/docs/modeling/custom-roles#concepts--configuration-language)
- [Step By Step](https://openfga.dev/docs/modeling/custom-roles#step-by-step)
  - [01\. Update The Authorization Model To Add A Role Type](https://openfga.dev/docs/modeling/custom-roles#01-update-the-authorization-model-to-add-a-role-type)
  - [02.Use Relationship Tuples To Tie The Users To The Roles](https://openfga.dev/docs/modeling/custom-roles#02use-relationship-tuples-to-tie-the-users-to-the-roles)
  - [03\. Use Relationship Tuples To Associate Permissions With The Roles](https://openfga.dev/docs/modeling/custom-roles#03-use-relationship-tuples-to-associate-permissions-with-the-roles)
  - [04\. Verify That The Authorization Model Works](https://openfga.dev/docs/modeling/custom-roles#04-verify-that-the-authorization-model-works)
- [Related Sections](https://openfga.dev/docs/modeling/custom-roles#related-sections)

## User Groups Management
[Skip to main content](https://openfga.dev/docs/modeling/user-groups#__docusaurus_skipToContent_fallback)

On this page

To add users to groups and grant groups access to an [object](https://openfga.dev/docs/concepts#what-is-an-object) using [OpenFGA](https://openfga.dev/docs/fga).

When to use

Relationship tuples can specify that an entire group has a relation to an object, which is helpful when you want to encompass a set of users with the same relation to an object. For example:

- Grant `viewer` access to a group of `engineers` in `roadmap.doc`
- Create a `block_list` of `members` who can't access a `document`
- Sharing a `document` with a `team`
- Granting `viewer` access to a `photo` to `followers` only
- Making a `file` viewable for all `users` within an `organization`
- Restricting access from or to `users` in a certain `locale`

## Before you start [​](https://openfga.dev/docs/modeling/user-groups\#before-you-start "Direct link to Before you start")

Familiarize yourself with the [OpenFGA Concepts](https://openfga.dev/docs/concepts).

Assume you have the following [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model).

: you have an _[object](https://openfga.dev/docs/concepts#what-is-an-object)_ called `document` that users can relate to as an `editor`.

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define editor: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "document",\
      "relations": {\
        "editor": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "editor": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

* * *

In addition, you will need to know the following:

### Direct Access [​](https://openfga.dev/docs/modeling/user-groups\#direct-access "Direct link to Direct Access")

You need to know how to create an authorization model and a relationship tuple to grant a user access to an object. To learn more, see [direct access](https://openfga.dev/docs/modeling/direct-access).

### OpenFGA Concepts [​](https://openfga.dev/docs/modeling/user-groups\#-concepts "Direct link to -concepts")

- A [Type](https://openfga.dev/docs/concepts#what-is-a-type): a class of objects that have similar characteristics.
- A [User](https://openfga.dev/docs/concepts#what-is-a-user): an entity in the system that can be related to an object.
- A [Relation](https://openfga.dev/docs/concepts#what-is-a-relation): a string defined in the type definition of an authorization model that defines the possibility of a relationship between an object of the same type as the type definition and a user in the system.
- An [Object](https://openfga.dev/docs/concepts#what-is-an-object): represents an entity in the system. Users' relationships to it can be defined with relationship tuples and the authorization model.
- A [Relationship Tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple): a grouping consisting of a user, a relation and an object stored in OpenFGA.

## Step By Step [​](https://openfga.dev/docs/modeling/user-groups\#step-by-step "Direct link to Step By Step")

There are possible use cases where a group of users have a certain role on or permission to an object. For example, `members` of a certain `team` could have an `editor` relation to a certain `document`.

To represent this in OpenFGA:

1. Introduce the concept of a `team` to the authorization model. [→](https://openfga.dev/docs/modeling/user-groups#step-1)
2. Add users as `members` to the `team`. [→](https://openfga.dev/docs/modeling/user-groups#step-2)
3. Assign the `team` members a relation to an object. [→](https://openfga.dev/docs/modeling/user-groups#step-3)
4. Check an individual member's access to the object. [→](https://openfga.dev/docs/modeling/user-groups#step-4)

### 01\. Introduce the concept of a team to the authorization model [​](https://openfga.dev/docs/modeling/user-groups\#step-1 "Direct link to 01. Introduce the concept of a team to the authorization model")

First, define the _[object](https://openfga.dev/docs/concepts#what-is-an-object)_ `team` in your authorization model. In this use case, a `team` can have `member` s, so you make the following changes to the authorization model:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define editor: [team#member]

type team
  relations
    define member: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "document",\
      "relations": {\
        "editor": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "editor": {\
            "directly_related_user_types": [\
              {\
                "type": "team",\
                "relation": "member"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "team",\
      "relations": {\
        "member": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "member": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

### 02\. Add users as members to the team [​](https://openfga.dev/docs/modeling/user-groups\#step-2 "Direct link to 02. Add users as members to the team")

You can now assign _[users](https://openfga.dev/docs/concepts#what-is-a-user)_ as `member` s of `team` s. Create a new _[relationship tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple)_ that states `user:alice` is a member of `team:writers`.

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"user:alice","relation":"member","object":"team:writers"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             User: "user:alice",
             Relation: "member",
             Object: "team:writers",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
       new() {
                  User = "user:alice",
                  Relation = "member",
                  Object = "team:writers"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    user="user:alice",\
                    relation="member",\
                    object="team:writers",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                new ClientTupleKey()
                        .user("user:alice")
                        .relation("member")
                        ._object("team:writers")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"user":"user:alice","relation":"member","object":"team:writers"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:alice member team:writers

```

```codeBlockLines_e6Vv
write([\
    {\
      "user":"user:alice",\
      "relation":"member",\
      "object":"team:writers"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

### 03\. Assign the team members a relation to an object [​](https://openfga.dev/docs/modeling/user-groups\#step-3 "Direct link to 03. Assign the team members a relation to an object")

To represent groups, use the `type:object_id#relation` format, which represents the set of users related to the `type:object_id` as a certain relation. For example, `team:writers#members` represents the set of users related to the `team:writers` object as `member` s.

In order to assign `member` s of a `team` a relation to a `document`, create the following relationship tuple stating that members of `team:writers` are editors of `document:meeting_notes.doc`.

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // Set of users related to 'team:writers' as 'member'\
      {"_description":"Set of users related to 'team:writers' as 'member'","user":"team:writers#member","relation":"editor","object":"document:meeting_notes.doc"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             // Set of users related to 'team:writers' as 'member'
             User: "team:writers#member",
             Relation: "editor",
             Object: "document:meeting_notes.doc",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
    // Set of users related to 'team:writers' as 'member'
       new() {
                  User = "team:writers#member",
                  Relation = "editor",
                  Object = "document:meeting_notes.doc"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    # Set of users related to 'team:writers' as 'member'\
                    user="team:writers#member",\
                    relation="editor",\
                    object="document:meeting_notes.doc",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                // Set of users related to 'team:writers' as 'member'
                new ClientTupleKey()
                        .user("team:writers#member")
                        .relation("editor")
                        ._object("document:meeting_notes.doc")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"_description":"Set of users related to 'team:writers' as 'member'","user":"team:writers#member","relation":"editor","object":"document:meeting_notes.doc"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA team:writers#member editor document:meeting_notes.doc

```

```codeBlockLines_e6Vv
write([\
    // Set of users related to 'team:writers' as 'member'\
    {\
      "user":"team:writers#member",\
      "relation":"editor",\
      "object":"document:meeting_notes.doc"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

### 04\. Check an individual member's access to an object [​](https://openfga.dev/docs/modeling/user-groups\#step-4 "Direct link to 04. Check an individual member's access to an object")

Now that you have:

- a relationship tuple indicating that `alice` is a `member` of `team:writers`
- a relationship tuple indicating that `members` of `team:writers` are editors of `document:meeting_notes.doc`

The \* [check](https://openfga.dev/docs/concepts#what-is-a-check-request)\ `is alice an editor of document:meeting_notes.doc` returns the following:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:alice',
    relation: 'editor',
    object: 'document:meeting_notes.doc',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:alice",
    Relation: "editor",
    Object:   "document:meeting_notes.doc",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:alice",
    Relation = "editor",
    Object = "document:meeting_notes.doc",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:alice",
    relation="editor",
    object="document:meeting_notes.doc",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:alice")
        .relation("editor")
        ._object("document:meeting_notes.doc");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:alice editor document:meeting_notes.doc

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:alice","relation":"editor","object":"document:meeting_notes.doc"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:alice", // check if the user `user:alice`
  relation = "editor", // has an `editor` relation
  object = "document:meeting_notes.doc", // with the object `document:meeting_notes.doc`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:alice related to document:meeting_notes.doc as editor?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

The chain of resolution is:

- `alice` is `member` of `team:writers`
- `member` s of `team:writers` are `editor` s of `document:meeting_notes`
- therefore, `alice` is `editor` of `document:meeting_notes`

caution

**Note:** When creating relationship tuples for OpenFGA, use unique ids for each object and user in your application domain. This example uses first names and simple ids as a suggested example.

## Related Sections [​](https://openfga.dev/docs/modeling/user-groups\#related-sections "Direct link to Related Sections")

Check the following sections for more information on user groups.

Managing Group Membership

Learn how to add and remove users from groups

- [More](https://openfga.dev/docs/interacting/managing-group-membership)

Modeling Google Drive

See how User Groups can be used to share documents within a domain in the Google Drive use-case.

- [More](https://openfga.dev/docs/modeling/advanced/gdrive#02-organization-permissions)

Modeling GitHub

Granting teams permissions to a repo in the GitHub use-case.

- [More](https://openfga.dev/docs/modeling/advanced/github#02-permissions-for-teams-in-an-org)

- [Before you start](https://openfga.dev/docs/modeling/user-groups#before-you-start)
  - [Direct Access](https://openfga.dev/docs/modeling/user-groups#direct-access)
  - [Concepts](https://openfga.dev/docs/modeling/user-groups#-concepts)
- [Step By Step](https://openfga.dev/docs/modeling/user-groups#step-by-step)
  - [01\. Introduce the concept of a team to the authorization model](https://openfga.dev/docs/modeling/user-groups#step-1)
  - [02\. Add users as members to the team](https://openfga.dev/docs/modeling/user-groups#step-2)
  - [03\. Assign the team members a relation to an object](https://openfga.dev/docs/modeling/user-groups#step-3)
  - [04\. Check an individual member's access to an object](https://openfga.dev/docs/modeling/user-groups#step-4)
- [Related Sections](https://openfga.dev/docs/modeling/user-groups#related-sections)

## OpenFGA Authorization
[Skip to main content](https://openfga.dev/api/service#__docusaurus_skipToContent_fallback)

## OpenFGA  ```  1.x  ```    ``` OAS 2.0 ```

[https://raw.githubusercontent.com/openfga/api/main/docs/openapiv2/apidocs.swagger.json](https://raw.githubusercontent.com/openfga/api/main/docs/openapiv2/apidocs.swagger.json)

A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.

[OpenFGA - Website](https://openfga.dev/)

[Send email to OpenFGA](mailto:community@openfga.dev)

[Apache-2.0](https://github.com/openfga/openfga/blob/main/LICENSE)

Schemeshttps

### [Stores](https://openfga.dev/api/service\#/Stores)

GET
[/stores](https://openfga.dev/api/service#/Stores/ListStores)

List all stores

POST
[/stores](https://openfga.dev/api/service#/Stores/CreateStore)

Create a store

GET
[/stores/{store\_id}](https://openfga.dev/api/service#/Stores/GetStore)

Get a store

DELETE
[/stores/{store\_id}](https://openfga.dev/api/service#/Stores/DeleteStore)

Delete a store

### [Authorization Models](https://openfga.dev/api/service\#/Authorization%20Models)

GET
[/stores/{store\_id}/authorization-models](https://openfga.dev/api/service#/Authorization%20Models/ReadAuthorizationModels)

Return all the authorization models for a particular store

POST
[/stores/{store\_id}/authorization-models](https://openfga.dev/api/service#/Authorization%20Models/WriteAuthorizationModel)

Create a new authorization model

GET
[/stores/{store\_id}/authorization-models/{id}](https://openfga.dev/api/service#/Authorization%20Models/ReadAuthorizationModel)

Return a particular version of an authorization model

### [Relationship Tuples](https://openfga.dev/api/service\#/Relationship%20Tuples)

GET
[/stores/{store\_id}/changes](https://openfga.dev/api/service#/Relationship%20Tuples/ReadChanges)

Return a list of all the tuple changes

POST
[/stores/{store\_id}/read](https://openfga.dev/api/service#/Relationship%20Tuples/Read)

Get tuples from the store that matches a query, without following userset rewrite rules

POST
[/stores/{store\_id}/write](https://openfga.dev/api/service#/Relationship%20Tuples/Write)

Add or delete tuples from the store

### [Relationship Queries](https://openfga.dev/api/service\#/Relationship%20Queries)

POST
[/stores/{store\_id}/batch-check](https://openfga.dev/api/service#/Relationship%20Queries/BatchCheck)

Send a list of \`check\` operations in a single request

POST
[/stores/{store\_id}/check](https://openfga.dev/api/service#/Relationship%20Queries/Check)

Check whether a user is authorized to access an object

POST
[/stores/{store\_id}/expand](https://openfga.dev/api/service#/Relationship%20Queries/Expand)

Expand all relationships in userset tree format, and following userset rewrite rules. Useful to reason about and debug a certain relationship

POST
[/stores/{store\_id}/list-objects](https://openfga.dev/api/service#/Relationship%20Queries/ListObjects)

List all objects of the given type that the user has a relation with

POST
[/stores/{store\_id}/list-users](https://openfga.dev/api/service#/Relationship%20Queries/ListUsers)

List the users matching the provided filter who have a certain relation to a particular type.

POST
[/stores/{store\_id}/streamed-list-objects](https://openfga.dev/api/service#/Relationship%20Queries/StreamedListObjects)

Stream all objects of the given type that the user has a relation with

### [Assertions](https://openfga.dev/api/service\#/Assertions)

GET
[/stores/{store\_id}/assertions/{authorization\_model\_id}](https://openfga.dev/api/service#/Assertions/ReadAssertions)

Read assertions for an authorization model ID

PUT
[/stores/{store\_id}/assertions/{authorization\_model\_id}](https://openfga.dev/api/service#/Assertions/WriteAssertions)

Upsert assertions for an authorization model ID

#### Models

AbortedMessageResponse

Any

Assertion

AssertionTupleKey

AuthErrorCode

AuthorizationModel

BatchCheckItem

BatchCheckResponse

BatchCheckSingleResult

CheckError

CheckRequestTupleKey

CheckResponse

Computed

Condition

ConditionMetadata

ConditionParamTypeRef

ConsistencyPreference

ContextualTupleKeys

CreateStoreRequest

CreateStoreResponse

DeleteStoreResponse

DirectUserset

ErrorCode

ExpandRequestTupleKey

ExpandResponse

ForbiddenResponse

GetStoreResponse

InternalErrorCode

InternalErrorMessageResponse

Leaf

ListObjectsResponse

ListStoresResponse

ListUsersResponse

Metadata

Node

Nodes

NotFoundErrorCode

NullValue

Object

ObjectRelation

PathUnknownErrorMessageResponse

ReadAssertionsResponse

ReadAuthorizationModelResponse

ReadAuthorizationModelsResponse

ReadChangesResponse

ReadRequestTupleKey

ReadResponse

RelationMetadata

RelationReference

RelationshipCondition

SourceInfo

Status

Store

StreamedListObjectsResponse

Tuple

TupleChange

TupleKey

TupleKeyWithoutCondition

buf:lint:ignore ENUM\_ZERO\_VALUE\_SUFFIX

TypeDefinition

TypeName

TypedWildcard

UnauthenticatedResponse

UnprocessableContentErrorCode

UnprocessableContentMessageResponse

User

UserTypeFilter

Users

Userset

UsersetTree

UsersetTree.Difference

UsersetTree.TupleToUserset

UsersetUser

Usersets

ValidationErrorMessageResponse

Wildcard

WriteAssertionsResponse

WriteAuthorizationModelResponse

WriteRequestDeletes

WriteRequestWrites

WriteResponse

v1.Difference

v1.TupleToUserset

## OpenFGA Integration Guide
[Skip to main content](https://openfga.dev/docs/getting-started/framework#__docusaurus_skipToContent_fallback)

On this page

This section will illustrate how to integrate OpenFGA within a framework, such as [Fastify](https://www.fastify.io/) or [Fiber](https://docs.gofiber.io/).

## Before you start [​](https://openfga.dev/docs/getting-started/framework\#before-you-start "Direct link to Before you start")

- Node.js
- Go

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the OpenFGA SDK](https://openfga.dev/docs/getting-started/install-sdk).
3. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model) and [updated the _relationship tuples_](https://openfga.dev/docs/getting-started/update-tuples).
4. You know how to [perform a Check](https://openfga.dev/docs/getting-started/perform-check).
5. You have loaded `FGA_API_URL` and `FGA_STORE_ID` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the OpenFGA SDK](https://openfga.dev/docs/getting-started/install-sdk).
3. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model) and [updated the _relationship tuples_](https://openfga.dev/docs/getting-started/update-tuples).
4. You know how to [perform a Check](https://openfga.dev/docs/getting-started/perform-check).
5. You have loaded `FGA_API_URL` and `FGA_STORE_ID` as environment variables.

## Step by step [​](https://openfga.dev/docs/getting-started/framework\#step-by-step "Direct link to Step by step")

Assume that you want to have a web service for `document` s using one of the frameworks mentioned above. The service will authenticate users via [JWT tokens](https://auth0.com/docs/secure/tokens/json-web-tokens), which contain the user ID.

Note

The reader should set up their own `login` method based on their OpenID connect provider's documentation.

Assume that you want to provide a route `GET /read/{document}` to return documents depending on whether the authenticated user has access to it.

### 01\. Install and setup framework [​](https://openfga.dev/docs/getting-started/framework\#01-install-and-setup-framework "Direct link to 01. Install and setup framework")

The first step is to install the framework.

- Node.js
- Go

For the context of this example, we will use the [Fastify framework](https://www.fastify.io/). For that we need to install the following packages:

- the [`fastify`](https://github.com/fastify/fastify) package that provides the framework itself
- the [`fastify-plugin`](https://github.com/fastify/fastify-plugin) package that allows integrating plugins with Fastify
- the [`fastify-jwt`](https://github.com/fastify/fastify-jwt) package for processing JWT tokens

Using [npm](https://www.npmjs.com/):

```codeBlockLines_e6Vv
npm install fastify fastify-plugin fastify-jwt

```

Using [yarn](https://yarnpkg.com/):

```codeBlockLines_e6Vv
yarn add fastify fastify-plugin fastify-jwt

```

Next, we setup the web service with the `GET /read/{document}` route in file `app.js`.

```codeBlockLines_e6Vv
// Require the framework and instantiate it
const fastify = require('fastify')({ logger: true });

// Declare the route
fastify.get('/read/:document', async (request, reply) => {
  return { read: request.params.document };
});

// Run the server
const start = async () => {
  try {
    await fastify.listen(3000);
  } catch (err) {
    fastify.log.error(err);
    process.exit(1);
  }
};
start();

```

For the context of this example, we will use the [Fiber framework](https://docs.gofiber.io/). For that we need to install the following Go packages:

- the [`gofiber/fiber`](https://docs.gofiber.io/) package that provides the Fiber framework itself
- the [`gofiber/jwt`](https://github.com/gofiber/jwt) middleware authentication layer for JWT
- the [`golang-jwt`](https://github.com/golang-jwt/jwt) package that provides Go support for JWT

```codeBlockLines_e6Vv
go get -u github.com/gofiber/fiber/v2 github.com/gofiber/jwt/v3 github.com/golang-jwt/jwt/v4

```

Next, we setup the web service with the `GET /read/{document}` route.

```codeBlockLines_e6Vv
package main

import "github.com/gofiber/fiber/v2"

func main() {
  app := fiber.New()

  app.Get("/read/:document", read)

  app.Listen(":3000")
}

func read(c *fiber.Ctx) error {
  return c.SendString(c.Params("document"))
}

```

### 02\. Authenticate and get user ID [​](https://openfga.dev/docs/getting-started/framework\#02-authenticate-and-get-user-id "Direct link to 02. Authenticate and get user ID")

Before we can call OpenFGA to protect the `/read/{document}` route, we need to validate the user's JWT.

- Node.js
- Go

The `fastify-jwt` package allows validation of JWT tokens, as well as providing access to the user's identity.

In `jwt-authenticate.js`:

```codeBlockLines_e6Vv
const fp = require('fastify-plugin');

module.exports = fp(async function (fastify, opts) {
  fastify.register(require('fastify-jwt'), {
    secret: {
      private: readFileSync(`${path.join(__dirname, 'certs')}/private.key`, 'utf8'),
      public: readFileSync(`${path.join(__dirname, 'certs')}/public.key`, 'utf8'),
    },
    sign: { algorithm: 'RS256' },
  });

  fastify.decorate('authenticate', async function (request, reply) {
    try {
      await request.jwtVerify();
    } catch (err) {
      reply.send(err);
    }
  });
});

```

Then, use the `preValidation` hook of a route to protect it and access the user information inside the JWT:

In `route-read.js`:

```codeBlockLines_e6Vv
module.exports = async function (fastify, opts) {
  fastify.get(
    '/read/:document',
    {
      preValidation: [fastify.authenticate],
    },
    async function (request, reply) {
      // the user's id is in request.user
      return { read: request.params.document };
    },
  );
};

```

Finally, update `app.js` to register the newly added hooks.

```codeBlockLines_e6Vv
const fastify = require('fastify')({ logger: true });
const jwtAuthenticate = require('./jwt-authenticate');
const routeread = require('./route-read');

fastify.register(jwtAuthenticate);
fastify.register(routeread);

// Run the server!
const start = async () => {
  try {
    await fastify.listen(3000);
  } catch (err) {
    fastify.log.error(err);
    process.exit(1);
  }
}
start();

```

We will now setup middleware to authenticate the incoming JWTs.

```codeBlockLines_e6Vv
package main

import (
  "crypto/rand"
  "crypto/rsa"
  "log"

  "github.com/gofiber/fiber/v2"

  jwtware "github.com/gofiber/jwt/v3"
  "github.com/golang-jwt/jwt/v4"
)

var (
  // Do not do this in production.
  // In production, you would have the private key and public key pair generated
  // in advance. NEVER add a private key to any GitHub repo.
  privateKey *rsa.PrivateKey
)

func main() {
  app := fiber.New()

  // Just as a demo, generate a new private/public key pair on each run.
  rng := rand.Reader
  var err error
  privateKey, err = rsa.GenerateKey(rng, 2048)
  if err != nil {
    log.Fatalf("rsa.GenerateKey: %v", err)
  }

  // JWT Middleware
  app.Use(jwtware.New(jwtware.Config{
    SigningMethod: "RS256",
    SigningKey:    privateKey.Public(),
  }))

  app.Get("/read/:document", read)

  app.Listen(":3000")
}

func read(c *fiber.Ctx) error {
  user := c.Locals("user").(*jwt.Token)
  claims := user.Claims.(jwt.MapClaims)
  name := claims["name"].(string)
  return c.SendString(name + " read " + c.Params("document"))
}

```

### 03\. Integrate the OpenFGA check API into the service [​](https://openfga.dev/docs/getting-started/framework\#03-integrate-the--check-api-into-the-service "Direct link to 03-integrate-the--check-api-into-the-service")

- Node.js
- Go

First, we will create a decorator `preauthorize` to parse the incoming HTTP method as well as name of the document, and set the appropriate `relation` and `object` that we will call Check on.

In `preauthorize.js`:

```codeBlockLines_e6Vv
const fp = require('fastify-plugin');

module.exports = fp(async function (fastify, opts) {
  fastify.decorate('preauthorize', async function (request, reply) {
    try {
      switch (request.method) {
        case 'GET':
          request.relation = 'reader';
          break;
        case 'POST':
          request.relation = 'writer';
          break;
        case 'DELETE':
        default:
          request.relation = 'owner';
          break;
      }
      request.object = `document:${request.params.document}`;
    } catch (err) {
      reply.send(err);
    }
  });
});

```

Next, we will create a decorator called `authorize`. This decorator will invoke the [Check API](https://openfga.dev/docs/getting-started/perform-check) to see if the user has a relationship with the specified document.

In `authorize.js`:

```codeBlockLines_e6Vv
const fp = require('fastify-plugin');
const { OpenFgaClient } = require('@openfga/sdk'); // OR import { OpenFgaClient } from '@openfga/sdk';

module.exports = fp(async function (fastify, opts) {
  fastify.decorate('authorize', async function (request, reply) {
    try {
      // configure the openfga api client
      const fgaClient = new OpenFgaClient({
        apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
        storeId: process.env.FGA_STORE_ID,
      });
      const { allowed } = await fgaClient.check({
        user: request.user,
        relation: request.relation,
        object: request.object,
      });
      if (!allowed) {
        reply.code(403).send(`forbidden`);
      }
    } catch (err) {
      reply.send(err);
    }
  });
});

```

We can now update the `GET /read/{document}` route to check for user permissions.

In `route-read.js`:

```codeBlockLines_e6Vv
module.exports = async function (fastify, opts) {
  fastify.get(
    '/read/:document',
    {
      preValidation: [fastify.authenticate, fastify.preauthorize, fastify.authorize],
    },
    async function (request, reply) {
      // the user's id is in request.user
      return { read: request.params.document };
    },
  );
};

```

Finally, we will register the new hooks in `app.js`:

```codeBlockLines_e6Vv
const fastify = require('fastify')({ logger: true });
const jwtAuthenticate = require('./jwt-authenticate');
const preauthorize = require('./preauthorize');
const authorize = require('./authorize');
const routeread = require('./route-read');

fastify.register(jwtAuthenticate);
fastify.register(preauthorize);
fastify.register(authorize);
fastify.register(routeread);

const start = async () => {
  try {
    await fastify.listen(3000);
  } catch (err) {
    fastify.log.error(err);
    process.exit(1);
  }
}
start();

```

We will create two middlewares:

- `preauthorize` will parse the user's JWT and prepare variables needed to call Check API.
- `checkAuthorization` will call the [`Check API`](https://openfga.dev/docs/getting-started/perform-check) to see if the user has a relationship with the specified document.

```codeBlockLines_e6Vv
package main

import (
  "context"
  "crypto/rand"
  "crypto/rsa"
  "log"
  "os"

  "github.com/gofiber/fiber/v2"

  jwtware "github.com/gofiber/jwt/v3"
  "github.com/golang-jwt/jwt/v4"
  . "github.com/openfga/go-sdk/client"
)

var (
  // Do not do this in production.
  // In production, you would have the private key and public key pair generated
  // in advance. NEVER add a private key to any GitHub repo.
  privateKey *rsa.PrivateKey
)

func main() {
  app := fiber.New()

  // Just as a demo, generate a new private/public key pair on each run.
  rng := rand.Reader
  var err error
  privateKey, err = rsa.GenerateKey(rng, 2048)
  if err != nil {
    log.Fatalf("rsa.GenerateKey: %v", err)
  }

  // JWT Middleware
  app.Use(jwtware.New(jwtware.Config{
    SigningMethod: "RS256",
    SigningKey:    privateKey.Public(),
  }))

  app.Use("/read/:document", preauthorize)

  app.Use(checkAuthorization)

  app.Get("/read/:document", read)

  app.Listen(":3000")
}

func read(c *fiber.Ctx) error {
  user := c.Locals("user").(*jwt.Token)
  claims := user.Claims.(jwt.MapClaims)
  name := claims["name"].(string)
  return c.SendString(name + " read " + c.Params("document"))
}

func preauthorize(c *fiber.Ctx) error {
  // get the user name from JWT
  user := c.Locals("user").(*jwt.Token)
  claims := user.Claims.(jwt.MapClaims)
  name := claims["name"].(string)
  c.Locals("username", name)

  // parse the HTTP method
  switch (c.Method()) {
    case "GET":
      c.Locals("relation", "reader")
    case "POST":
      c.Locals("relation", "writer")
    case "DELETE":
      c.Locals("relation", "owner")
    default:
      c.Locals("relation", "owner")
  }

  // get the object name and prepend with type name "document:"
  c.Locals("object", "document:" + c.Params("document"))
  return c.Next()
}

// Middleware to check whether user is authorized to access document
func checkAuthorization(c *fiber.Ctx) error {
  fgaClient, err := NewSdkClient(&ClientConfiguration{
    ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
    StoreId:        os.Getenv("FGA_STORE_ID"), // optional, not needed for \`CreateStore\` and \`ListStores\`, required before calling for all other methods
    AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // optional, can be overridden per request
  })

  if err != nil {
    return fiber.NewError(fiber.StatusServiceUnavailable, "Unable to build OpenFGA client")
  }

  body := ClientCheckRequest{
    User: c.Locals("username").(string),
    Relation: c.Locals("relation").(string),
    Object: c.Locals("object").(string),
  }
  data, err := fgaClient.Check(context.Background()).Body(body).Execute()

  if err != nil {
    return fiber.NewError(fiber.StatusServiceUnavailable, "Unable to check for authorization")
  }

  if !(*data.Allowed) {
    return fiber.NewError(fiber.StatusForbidden, "Forbidden to access document")
  }

  // Go to the next middleware
  return c.Next()
}

```

## Related Sections [​](https://openfga.dev/docs/getting-started/framework\#related-sections "Direct link to Related Sections")

Take a look at the following sections for examples that you can try when integrating with SDK.

Entitlements

Modeling Entitlements for a System in OpenFGA.

- [More](https://openfga.dev/docs/modeling/advanced/entitlements)

IoT

Modeling Fine Grained Authorization for an IoT Security Camera System with OpenFGA.

- [More](https://openfga.dev/docs/modeling/advanced/iot)

Slack

Modeling Authorization for Slack with OpenFGA.

- [More](https://openfga.dev/docs/modeling/advanced/slack)

- [Before you start](https://openfga.dev/docs/getting-started/framework#before-you-start)
- [Step by step](https://openfga.dev/docs/getting-started/framework#step-by-step)
  - [01\. Install and setup framework](https://openfga.dev/docs/getting-started/framework#01-install-and-setup-framework)
  - [02\. Authenticate and get user ID](https://openfga.dev/docs/getting-started/framework#02-authenticate-and-get-user-id)
  - [03\. Integrate the  check API into the service](https://openfga.dev/docs/getting-started/framework#03-integrate-the--check-api-into-the-service)
- [Related Sections](https://openfga.dev/docs/getting-started/framework#related-sections)

## OpenFGA Authorization Concepts
[Skip to main content](https://openfga.dev/docs/concepts#__docusaurus_skipToContent_fallback)

On this page

The [OpenFGA](https://openfga.dev/docs/fga) service answers [authorization](https://openfga.dev/docs/authorization-concepts#authentication-and-authorization) [checks](https://openfga.dev/docs/concepts#what-is-a-check-request) by determining whether a **[relationship](https://openfga.dev/docs/concepts#what-is-a-relation)** exists between an [object](https://openfga.dev/docs/concepts#what-is-an-object) and a [user](https://openfga.dev/docs/concepts#what-is-a-user). Checks reference your **[authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model)** against your **[relationship tuples](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple)** for authorization authority. Below are explanations of basic FGA concepts, like type and authorization model, and a [playground](https://play.fga.dev/) to test your knowledge.

## What Is A Type? [​](https://openfga.dev/docs/concepts\#what-is-a-type "Direct link to What Is A Type?")

A **type** is a string. It defines a class of objects with similar characteristics.

The following are examples of types:

- `workspace`
- `repository`
- `organization`
- `document`

## What Is A Type Definition? [​](https://openfga.dev/docs/concepts\#what-is-a-type-definition "Direct link to What Is A Type Definition?")

A **type definition** defines all possible relations a user or another object can have in relation to this type.

Below is an example of a type definition:

- DSL
- JSON

```codeBlockLines_e6Vv

type document
  relations
    define viewer: [user]
    define commenter: [user]
    define editor: [user]
    define owner: [user]

```

```codeBlockLines_e6Vv
{
  "type": "document",
  "relations": {
    "viewer": {
      "this": {}
    },
    "commenter": {
      "this": {}
    },
    "editor": {
      "this": {}
    },
    "owner": {
      "this": {}
    }
  },
  "metadata": {
    "relations": {
      "viewer": {
        "directly_related_user_types": [\
          {\
            "type": "user"\
          }\
        ]
      },
      "commenter": {
        "directly_related_user_types": [\
          {\
            "type": "user"\
          }\
        ]
      },
      "editor": {
        "directly_related_user_types": [\
          {\
            "type": "user"\
          }\
        ]
      },
      "owner": {
        "directly_related_user_types": [\
          {\
            "type": "user"\
          }\
        ]
      }
    }
  }
}

```

## What Is An Authorization Model? [​](https://openfga.dev/docs/concepts\#what-is-an-authorization-model "Direct link to What Is An Authorization Model?")

An **authorization model** combines one or more type definitions. This is used to define the permission model of a system.

Below is an example of an authorization model:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type document
  relations
    define viewer: [domain#member, user]
    define commenter: [domain#member, user]
    define editor: [domain#member, user]
    define owner: [domain#member, user]

type domain
  relations
    define member: [user]

type user

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "document",\
      "relations": {\
        "viewer": {\
          "this": {}\
        },\
        "commenter": {\
          "this": {}\
        },\
        "editor": {\
          "this": {}\
        },\
        "owner": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "domain",\
                "relation": "member"\
              },\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "commenter": {\
            "directly_related_user_types": [\
              {\
                "type": "domain",\
                "relation": "member"\
              },\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "editor": {\
            "directly_related_user_types": [\
              {\
                "type": "domain",\
                "relation": "member"\
              },\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "owner": {\
            "directly_related_user_types": [\
              {\
                "type": "domain",\
                "relation": "member"\
              },\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "domain",\
      "relations": {\
        "member": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "member": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "user"\
    }\
  ]
}

```

Together with [relationship tuples](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple), the authorization model determines whether a [relationship](https://openfga.dev/docs/concepts#what-is-a-relationship) exists between a [user](https://openfga.dev/docs/concepts#what-is-a-user) and an [object](https://openfga.dev/docs/concepts#what-is-an-object).

OpenFGA uses two different syntaxes to define the authorization model:

- A JSON syntax accepted by the OpenFGA API that closely follows the original syntax in the [Zanzibar Paper](https://research.google/pubs/pub48190/). For more information, see [Equivalent Zanzibar Concepts](https://openfga.dev/docs/configuration-language#equivalent-zanzibar-concepts).
- A simpler-to-use DSL that's accepted by both the [OpenFGA VS Code extension](https://marketplace.visualstudio.com/items?itemName=openfga.openfga-vscode) and [OpenFGA CLI](https://github.com/openfga/cli/) and offers syntax highlighting and validation in the VS Code extension. The DSL is used in the [Sample Stores](https://github.com/openfga/sample-stores) modeling examples and is translated to API-supported syntax using the CLI or [OpenFGA language](https://github.com/openfga/language) before being sent to the API.

Click here to learn more about the [OpenFGA Configuration Language](https://openfga.dev/docs/configuration-language).

## What Is A Store? [​](https://openfga.dev/docs/concepts\#what-is-a-store "Direct link to What Is A Store?")

A **store** is an OpenFGA entity used to organize authorization check data.

Each store contains one or more versions of an [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model) and can contain various [relationship tuples](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple). Store data cannot be shared across stores; we recommended storing all data that may be related or affect your authorization result in a single store.

Separate stores can be created for separate authorization needs or isolated environments, e.g. development/prod.

## What Is An Object? [​](https://openfga.dev/docs/concepts\#what-is-an-object "Direct link to What Is An Object?")

An **object** represents an entity in the system. Users' relationships to it are defined by relationship tuples and the authorization model.

An object is a combination of a [type](https://openfga.dev/docs/concepts#what-is-a-type) and an identifier.

For example:

- `workspace:fb83c013-3060-41f4-9590-d3233a67938f`
- `repository:auth0/express-jwt`
- `organization:org_ajUc9kJ`
- `document:new-roadmap`

[User](https://openfga.dev/docs/concepts#what-is-a-user), [relation](https://openfga.dev/docs/concepts#what-is-a-relation) and object are the building blocks for [relationship tuples](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple).

For an example, see [Direct Access](https://openfga.dev/docs/modeling/direct-access).

## What Is A User? [​](https://openfga.dev/docs/concepts\#what-is-a-user "Direct link to What Is A User?")

A **user** is an entity in the system that can be related to an object.

A user is a combination of a [type](https://openfga.dev/docs/concepts#what-is-a-type), an identifier, and an optional relation.

For example,

- any identifier: e.g. `user:anne` or `user:4179af14-f0c0-4930-88fd-5570c7bf6f59`
- any object: e.g. `workspace:fb83c013-3060-41f4-9590-d3233a67938f`, `repository:auth0/express-jwt` or `organization:org_ajUc9kJ`
- a group or a set of users (also called a **userset**): e.g. `organization:org_ajUc9kJ#members`, which represents the set of users related to the object `organization:org_ajUc9kJ` as `member`
- everyone, using the special syntax: `*`

User, [relation](https://openfga.dev/docs/concepts#what-is-a-relation) and [object](https://openfga.dev/docs/concepts#what-is-an-object) are the building blocks for [relationship tuples](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple).

For more information, see [Direct Access](https://openfga.dev/docs/modeling/direct-access).

## What Is A Relation? [​](https://openfga.dev/docs/concepts\#what-is-a-relation "Direct link to What Is A Relation?")

A **relation** is a string defined in the type definition of an authorization model. Relations define a possible relationship between an object (of the same type as the type definition) and a user in the system.

Examples of relation:

- User can be a `reader` of a document
- Team can `administer` a repo
- User can be a `member` of a team

## What Is A Relation Definition? [​](https://openfga.dev/docs/concepts\#what-is-a-relation-definition "Direct link to What Is A Relation Definition?")

A **relation definition** lists the conditions or requirements under which a relationship is possible.

For example:

- `editor` describing a possible relationship between a user and an object in the `document` type allows the following:
  - **user identifier to object relationship**: the user id `anne` of type `user` is related to the object `document:roadmap` as `editor`
  - **object to object relationship**: the object `application:ifft` is related to the object `document:roadmap` as `editor`
  - **userset to object relationship**: the userset `organization:auth0.com#member` is related to `document:roadmap` as `editor`
    - indicates that the set of users who are related to the object `organization:auth0.com` as `member` are related to the object `document:roadmap` as `editor` s
    - allows for potential solutions to use-cases like sharing a document internally with all members of a company or a team
  - **everyone to object relationship**: everyone ( `*`) is related to `document:roadmap` as `editor`
    - this is how one could model publicly editable documents

These would be defined in the [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model):

- DSL
- JSON

```codeBlockLines_e6Vv

type document
  relations
    define viewer: [user]
    define commenter: [user]
    define editor: [user]
    define owner: [user]

type user

```

```codeBlockLines_e6Vv
{
  "type_definitions": [\
    {\
      "type": "document",\
      "relations": {\
        "viewer": {\
          "this": {}\
        },\
        "commenter": {\
          "this": {}\
        },\
        "editor": {\
          "this": {}\
        },\
        "owner": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "commenter": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "editor": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "owner": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "user"\
    }\
  ]
}

```

info

There are four relations in the document type configuration: `viewer`, `commenter`, `editor` and `owner`.

[User](https://openfga.dev/docs/concepts#what-is-a-user), relation and [object](https://openfga.dev/docs/concepts#what-is-an-object) are the building blocks for [relationship tuples](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple).

For an example, see [Direct Access](https://openfga.dev/docs/modeling/direct-access).

## What Is A Directly Related User Type? [​](https://openfga.dev/docs/concepts\#what-is-a-directly-related-user-type "Direct link to What Is A Directly Related User Type?")

A **directly related user type** is an array specified in the type definition to indicate which types of users can be directly related to that relation.

For the following model, only [relationship tuples](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple) with [user](https://openfga.dev/docs/concepts#what-is-a-user) of [type](https://openfga.dev/docs/concepts#what-is-a-type) `user` may be assigned to document.

- DSL
- JSON

```codeBlockLines_e6Vv

type document
  relations
    define viewer: [user]

```

```codeBlockLines_e6Vv
{
  "type_definitions": [\
    {\
      "type": "document",\
      "relations": {\
        "viewer": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

A relationship tuple with user `user:anne` or `user:3f7768e0-4fa7-4e93-8417-4da68ce1846c` may be written for objects with type `document` and relation `viewer`, so writing `{"user": "user:anne","relation":"viewer","object":"document:roadmap"}` succeeds.
A relationship tuple with a disallowed user type for the `viewer` relation on objects of type `document` \- for example `workspace:auth0` or `folder:planning#editor` \- will be rejected, so writing `{"user": "folder:product","relation":"viewer","object":"document:roadmap"}` will fail.
This affects only relations that are [directly related](https://openfga.dev/docs/concepts#what-are-direct-and-implied-relationships) and have [direct relationship type restrictions](https://openfga.dev/docs/configuration-language#direct-relationship-type-restrictions) in their relation definition.

## What is a Condition? [​](https://openfga.dev/docs/concepts\#what-is-a-condition "Direct link to What is a Condition?")

A **condition** is a function composed of one or more parameters and an expression. Every condition evaluates to a boolean outcome, and expressions are defined using [Google's Common Expression Language (CEL)](https://github.com/google/cel-spec).

In the following snippet `less_than_hundred` defines a Condition that evaluates to a boolean outcome. The provided parameter `x`, defined as an integer type, is used in the boolean expression `x < 100`. The condition returns a truthy outcome if the expression returns a truthy outcome, but is otherwise false.

```codeBlockLines_e6Vv
condition less_than_hundred(x: int) {
  x < 100
}

```

## What Is A Relationship Tuple? [​](https://openfga.dev/docs/concepts\#what-is-a-relationship-tuple "Direct link to What Is A Relationship Tuple?")

A **relationship tuple** is a base tuple/triplet consisting of a user, relation, and object. Tuples may add an optional condition, like [Conditional Relationship Tuples](https://openfga.dev/docs/concepts#what-is-a-conditional-relationship-tuple). Relationship tuples are written and stored in OpenFGA.

A relationship tuple consists of:

- a **[user](https://openfga.dev/docs/concepts#what-is-a-user)**, e.g. `user:anne`, `user:3f7768e0-4fa7-4e93-8417-4da68ce1846c`, `workspace:auth0` or `folder:planning#editor`
- a **[relation](https://openfga.dev/docs/concepts#what-is-a-relation)**, e.g. `editor`, `member` or `parent_workspace`
- an **[object](https://openfga.dev/docs/concepts#what-is-an-object)**, e.g `repo:auth0/express_jwt`, `domain:auth0.com` or `channel:marketing`
- a **[condition](https://openfga.dev/docs/concepts#what-is-a-condition)** (optional), e.g. `{"condition": "in_allowed_ip_range", "context": {...}}`

An [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model), together with relationship tuples, determine whether a [relationship](https://openfga.dev/docs/concepts#what-is-a-relationship) exists between a [user](https://openfga.dev/docs/concepts#what-is-a-user) and an [object](https://openfga.dev/docs/concepts#what-is-an-object).

Relationship tuples are usually shown in the following format:

```codeBlockLines_e6Vv
[{\
  "user": "user:anne",\
  "relation": "editor",\
  "object": "document:new-roadmap"\
}]

```

For more information, see [Direct Access](https://openfga.dev/docs/modeling/direct-access).

## What Is A Conditional Relationship Tuple? [​](https://openfga.dev/docs/concepts\#what-is-a-conditional-relationship-tuple "Direct link to What Is A Conditional Relationship Tuple?")

A **conditional relationship tuple** is a [relationship tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple) that represents a [relationship](https://openfga.dev/docs/concepts#what-is-a-relationship) conditioned upon the evaluation of a [condition](https://openfga.dev/docs/concepts#what-is-a-condition).

If a relationship tuple is conditioned, then that condition must to a truthy outcome for the relationship tuple to be permissible.

The following relationship tuple is a conditional relationship tuple because it is conditioned on `less_than_hundred`. If the expression for `less_than_hundred` is defined as `x < 100`, then the relationship is permissible because the expression - `20 < 100` \- evaluates to a truthy outcome.

```codeBlockLines_e6Vv
[{\
  "user": "user:anne",\
  "relation": "editor",\
  "object": "document:new-roadmap",\
  "condition": {\
    "name": "less_than_hundred",\
    "context": {\
      "x": 20\
    }\
  }\
}]

```

## What Is A Relationship? [​](https://openfga.dev/docs/concepts\#what-is-a-relationship "Direct link to What Is A Relationship?")

A **relationship** is the realization of a relation between a user and an object.

An [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model), together with [relationship tuples](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple), determine whether a relationship exists between a user and an object. Relationships may be [direct](https://openfga.dev/docs/concepts#what-are-direct-and-implied-relationships) or [implied](https://openfga.dev/docs/concepts#what-are-direct-and-implied-relationships).

## What Are Direct And Implied Relationships? [​](https://openfga.dev/docs/concepts\#what-are-direct-and-implied-relationships "Direct link to What Are Direct And Implied Relationships?")

A **direct relationship** (R) between user X and object Y means the relationship tuple (user=X, relation=R, object=Y) exists, and the OpenFGA authorization model for that relation allows the direct relationship because of [direct relationship type restrictions](https://openfga.dev/docs/configuration-language#direct-relationship-type-restrictions).

An **implied (or computed) relationship** (R) exists between user X and object Y if user X is related to an object Z that is in a direct or implied relationship with object Y, and the OpenFGA authorization model allows it.

- `user:anne` has a direct relationship with `document:new-roadmap` as `viewer` if the [type definition](https://openfga.dev/docs/concepts#what-is-a-type-definition) allows it with [direct relationship type restrictions](https://openfga.dev/docs/configuration-language#direct-relationship-type-restrictions), and one of the following [relationship tuples](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple) exist:
  - ```codeBlockLines_e6Vv
    [// Anne of type user is directly related to the document\
      {\
      "_description": "Anne of type user is directly related to the document",\
      "user": "user:anne",\
      "relation": "viewer",\
      "object": "document:new-roadmap"\
    }]

    ```

  - ```codeBlockLines_e6Vv
    [// Everyone (`*`) of type user is directly related to the document\
      {\
      "_description": "Everyone (`*`) of type user is directly related to the document",\
      "user": "user:*",\
      "relation": "viewer",\
      "object": "document:new-roadmap"\
    }]

    ```

  - ```codeBlockLines_e6Vv
    [// The userset is directly related to this document\
      {\
      "_description": "The userset is directly related to this document",\
      "user": "team:product#member",\
      "relation": "viewer",\
      "object": "document:new-roadmap"\
    }// AND Anne of type user is a member of the userset team:product#member\
      {\
      "_description": "AND Anne of type user is a member of the userset team:product#member",\
      "user": "user:anne",\
      "relation": "member",\
      "object": "team:product#member"\
    }]

    ```
- `user:anne` has an **implied relationship** with `document:new-roadmap` as `viewer` if the type definition allows it, and the presence of relationship tuples satisfying the relationship exist.

For example, assume the following type definition:



- DSL
- JSON

```codeBlockLines_e6Vv

type document
  relations
    define viewer: [user] or editor
    define editor: [user]

```

```codeBlockLines_e6Vv
{
  "type_definitions": [\
    {\
      "type": "document",\
      "relations": {\
        "viewer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "editor"\
                }\
              }\
            ]\
          }\
        },\
        "editor": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "editor": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

And assume the following relationship tuple exists in the system:

```codeBlockLines_e6Vv
[{\
  "user": "user:anne",\
  "relation": "editor",\
  "object": "document:new-roadmap"\
}]

```

In this case, the [relationship](https://openfga.dev/docs/concepts#what-is-a-relationship) between `user:anne` and `document:new-roadmap` as a `viewer` is implied from the direct `editor` relationship `user:anne` has with that same document. Thus, the following request to [check](https://openfga.dev/docs/concepts#what-is-a-check-request) whether a viewer relationship exists between `user:anne` and `document:new-roadmap` will return `true`.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'viewer',
    object: 'document:new-roadmap',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "viewer",
    Object:   "document:new-roadmap",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "viewer",
    Object = "document:new-roadmap",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="viewer",
    object="document:new-roadmap",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("viewer")
        ._object("document:new-roadmap");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne viewer document:new-roadmap

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"viewer","object":"document:new-roadmap"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "viewer", // has an `viewer` relation
  object = "document:new-roadmap", // with the object `document:new-roadmap`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to document:new-roadmap as viewer?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

## What Is A Check Request? [​](https://openfga.dev/docs/concepts\#what-is-a-check-request "Direct link to What Is A Check Request?")

A **check request** is a call to the OpenFGA check endpoint, returning whether the user has a certain relationship with an object.

Check requests use the `check` methods in the OpenFGA SDKs ( [JavaScript SDK](https://www.npmjs.com/package/@openfga/sdk)/ [Go SDK](https://github.com/openfga/go-sdk)/ [.NET SDK](https://www.nuget.org/packages/OpenFga.Sdk)) by manually calling the [check endpoint](https://openfga.dev/api/service#Relationship%20Queries/Check) using curl or in your code. The check endpoint responds with `{ "allowed": true }` if a relationship exists, and with `{ "allowed": false }` if the relationship does not.

For example, the following will check whether `anne` of type user has a `viewer` relation to `document:new-roadmap`:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'viewer',
    object: 'document:new-roadmap',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "viewer",
    Object:   "document:new-roadmap",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "viewer",
    Object = "document:new-roadmap",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="viewer",
    object="document:new-roadmap",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("viewer")
        ._object("document:new-roadmap");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne viewer document:new-roadmap

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"viewer","object":"document:new-roadmap"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "viewer", // has an `viewer` relation
  object = "document:new-roadmap", // with the object `document:new-roadmap`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to document:new-roadmap as viewer?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

For more information, see the [Relationship Queries page](https://openfga.dev/docs/interacting/relationship-queries) and the official [Check API Reference](https://openfga.dev/api/service#Relationship%20Queries/Check).

## What Is A List Objects Request? [​](https://openfga.dev/docs/concepts\#what-is-a-list-objects-request "Direct link to What Is A List Objects Request?")

A **list objects request** is a call to the OpenFGA list objects endpoint that returns all objects of a given type that a user has a specified relationship with.

List objects requests are completed using the `listobjects` methods in the OpenFGA SDKs ( [JavaScript SDK](https://www.npmjs.com/package/@openfga/sdk)/ [Go SDK](https://github.com/openfga/go-sdk)/ [.NET SDK](https://www.nuget.org/packages/OpenFga.Sdk)) by manually calling the [list objects endpoint](https://openfga.dev/api/service#Relationship%20Queries/ListObjects) using curl or in your code.

The list objects endpoint responds with a list of objects for a given type that the user has the specified relationship with.

For example, the following returns all the objects with document type for which `anne` of type user has a `viewer` relation with:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv
const response = await fgaClient.listObjects({
  user: "user:anne",
  relation: "viewer",
  type: "document",
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA",
});
// response.objects = ["document:otherdoc", "document:planning"]

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv
options := ClientListObjectsOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientListObjectsRequest{
    User:     "user:anne",
    Relation: "viewer",
    Type:     "document",
}

data, err := fgaClient.ListObjects(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { "objects": ["document:otherdoc", "document:planning"] }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientListObjectsRequest {
    User = "user:anne",
    Relation = "viewer",
    Type = "document",

};

var response = await fgaClient.ListObjects(body, options);

// response.Objects = ["document:otherdoc", "document:planning"]

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv

options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientListObjectsRequest(
    user="user:anne",
    relation="viewer",
    type="document",
)

response = await fga_client.list_objects(body, options)

# response.objects = ["document:otherdoc", "document:planning"]

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientListObjectsOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientListObjectsRequest()
        .user("user:anne")
        .relation("viewer")
        .type("document");

var response = fgaClient.listObjects(body, options).get();

// response.getObjects() = ["document:otherdoc", "document:planning"]

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query list-objects --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne viewer document

# Response: {"objects": ["document:otherdoc", "document:planning"]}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/list-objects \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{
        "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA",
        "type": "document",
        "relation": "viewer",
        "user":"user:anne"
    }'

# Response: {"objects": ["document:otherdoc", "document:planning"]}

```

```codeBlockLines_e6Vv
listObjects(
  "user:anne", // list the objects that the user `user:anne`
  "viewer", // has an `viewer` relation
  "document", // and that are of type `document`
  authorization_model_id = "01HVMMBCMGZNT3SED4Z17ECXCA", // for this particular authorization model id
);

Reply: ["document:otherdoc", "document:planning"]

```

For more information, see the [Relationship Queries page](https://openfga.dev/docs/interacting/relationship-queries) and the [List Objects API Reference](https://openfga.dev/api/service#Relationship%20Queries/ListObjects).

## What Is A List Users Request? [​](https://openfga.dev/docs/concepts\#what-is-a-list-users-request "Direct link to What Is A List Users Request?")

A **list users request** is a call to the OpenFGA list users endpoint that returns all users of a given type that have a specified relationship with an object.

List users requests are completed using the relevant `ListUsers` method in SDKs, the `fga query list-users` command in the CLI, or by manually calling the [ListUsers endpoint](https://openfga.dev/api/service#Relationship%20Queries/ListUsers) using curl or in your code.

The list users endpoint responds with a list of users for a given type that have the specificed relationship with an object.

For example, the following returns all the users of type `user` that have the `viewer` relationship for `document:planning`:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv
const response = await fgaClient.listUsers({
  object: {
    type: "document",
    id: "planning"
  },
  user_filters: [{\
    type: "user"\
  }],
  relation: "viewer",
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA",
});
// response.users = [{"object":{"type":"user","id":"anne"}},{"object":{"type":"user","id":"beth"}}]

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv
options := ClientListUsersOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

userFilters := []openfga.UserTypeFilter{{ Type:"user" }}

body := ClientListUsersRequest{
    Object:       openfga.Object{
        Type:    "document",
        Id:      "planning",
    },
    Relation:     "viewer",
    UserFilters:   userFilters,
}

data, err := fgaClient.ListUsers(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data.Users = [{"object":{"type":"user","id":"anne"}}, {"object":{"type":"user","id":"beth"}}]

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientListUsersRequest {
    Object = new FgaObject {
      Type = "document",
      Id = "planning"
    },
    Relation = "viewer",
    UserFilters = new List<UserTypeFilter> {
      new() {
        Type = "user"
      }
    }

};

var response = await fgaClient.ListUsers(body, options);

// response.Users = [{"object":{"type":"user","id":"anne"}},{"object":{"type":"user","id":"beth"}}]

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv

  options = {
      "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
  }

  userFilters = [\
      UserTypeFilter(type="user")\
  ]

  body = ClientListUsersRequest(
      object=FgaObject(type="document",id="planning"),
      relation="viewer",
      user_filters=userFilters,
  )

  response = await fga_client.list_users(body, options)

  # response.users = [{"object":{"type":"user","id":"anne"}},{"object":{"type":"user","id":"beth"}}]

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientListUsersOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var userFilters = new ArrayList<UserTypeFilter>() {
  {
      add(new UserTypeFilter().type("user"));
  }
};

var body = new ClientListUsersRequest()
        ._object(new FgaObject().type("document").id("planning"))
        .relation("viewer")
        .userFilters(userFilters);

var response = fgaClient.listUsers(body, options).get();

// response.getUsers() = [{"object":{"type":"user","id":"anne"}},{"object":{"type":"user","id":"beth"}}]

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query list-users --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA --object document:planning --relation viewer --user-filter user

# Response: {"users": [{"object":{"type":"user","id":"anne"}}, {"object":{"type":"user","id":"beth"}}]}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/list-users \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{
        "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA",
        "object": {
          "type": "document",
          "id": "planning",
        },
        "relation": "viewer",
        "user_filters": [\
          {\
            "type": "user"\
          }\
        ]
    }'

# Response: {"users": [{"object":{"type":"user","id":"anne"}}, {"object":{"type":"user","id":"beth"}}]}

```

```codeBlockLines_e6Vv
listUsers(
  user_filter=[ "user" ], // list users of type `user`
  "viewer", // that have the `viewer` relation
  "document:planning", // for the object `document:planning`
  authorization_model_id = "01HVMMBCMGZNT3SED4Z17ECXCA", // for this particular authorization model id
);

Reply: {"users": [{"object":{"type":"user","id":"anne"}}, {"object":{"type":"user","id":"beth"}}]}

```

For more information, see the [ListUsers API Reference](https://openfga.dev/api/service#Relationship%20Queries/ListUsers).

## What Are Contextual Tuples? [​](https://openfga.dev/docs/concepts\#what-are-contextual-tuples "Direct link to What Are Contextual Tuples?")

Contextual tuples are tuples that can be added to a Check request, a ListObjects request, a ListUsers request, or an Expand request. They only exist within the context of that particular request and are not persisted in the datastore.

Similar to [relationship tuples](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple), contextual tuples are composed of a user, relation and object. Unlike relationship tuples, they are not written to the store. However, if contextual tuples are sent alongside a check request in the context of a particular check request, they are treated if they had been written in the store.

For more information, see [Contextual and Time-Based Authorization](https://openfga.dev/docs/modeling/contextual-time-based-authorization), [Authorization Through Organization Context](https://openfga.dev/docs/modeling/organization-context-authorization) and [Check API Request Documentation](https://openfga.dev/api/service#Relationship%20Queries/Check).

## What Is Type Bound Public Access? [​](https://openfga.dev/docs/concepts\#what-is-type-bound-public-access "Direct link to What Is Type Bound Public Access?")

In OpenFGA, type bound public access (represented by `<type>:*`) is a special OpenFGA syntax meaning "every object of \[type\]" when invoked as a user within a relationship tuple. For example, `user:*` represents every object of type `user` , including those not currently present in the system.

For example, to indicate `document:new-roadmap` is publicly writable (in other words, has everyone of type `user` as an editor, add the following [relationship tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple):

```codeBlockLines_e6Vv
[{\
  "user": "user:*",\
  "relation": "editor",\
  "object": "document:new-roadmap"\
}]

```

Note: `<type>:*` cannot be used in the `relation` or `object` properties. In addition, `<type>:*` cannot be used as part of a userset in the tuple's user field.
For more information, see [Modeling Public Access](https://openfga.dev/docs/modeling/public-access) and [Advanced Modeling: Modeling Google Drive](https://openfga.dev/docs/modeling/advanced/gdrive).

## Related Sections [​](https://openfga.dev/docs/concepts\#related-sections "Direct link to Related Sections")

Check the following sections for more on how object-to-object relationships can be used.

Authorization Concepts

Learn about Authorization.

- [More](https://openfga.dev/docs/authorization-concepts)

Configuration Language

Learning about the FGA configuration language

- [More](https://openfga.dev/docs/configuration-language)

Direct access

Get started with modeling your permission system in OpenFGA

- [More](https://openfga.dev/docs/modeling/direct-access)

- [What Is A Type?](https://openfga.dev/docs/concepts#what-is-a-type)
- [What Is A Type Definition?](https://openfga.dev/docs/concepts#what-is-a-type-definition)
- [What Is An Authorization Model?](https://openfga.dev/docs/concepts#what-is-an-authorization-model)
- [What Is A Store?](https://openfga.dev/docs/concepts#what-is-a-store)
- [What Is An Object?](https://openfga.dev/docs/concepts#what-is-an-object)
- [What Is A User?](https://openfga.dev/docs/concepts#what-is-a-user)
- [What Is A Relation?](https://openfga.dev/docs/concepts#what-is-a-relation)
- [What Is A Relation Definition?](https://openfga.dev/docs/concepts#what-is-a-relation-definition)
- [What Is A Directly Related User Type?](https://openfga.dev/docs/concepts#what-is-a-directly-related-user-type)
- [What is a Condition?](https://openfga.dev/docs/concepts#what-is-a-condition)
- [What Is A Relationship Tuple?](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple)
- [What Is A Conditional Relationship Tuple?](https://openfga.dev/docs/concepts#what-is-a-conditional-relationship-tuple)
- [What Is A Relationship?](https://openfga.dev/docs/concepts#what-is-a-relationship)
- [What Are Direct And Implied Relationships?](https://openfga.dev/docs/concepts#what-are-direct-and-implied-relationships)
- [What Is A Check Request?](https://openfga.dev/docs/concepts#what-is-a-check-request)
- [What Is A List Objects Request?](https://openfga.dev/docs/concepts#what-is-a-list-objects-request)
- [What Is A List Users Request?](https://openfga.dev/docs/concepts#what-is-a-list-users-request)
- [What Are Contextual Tuples?](https://openfga.dev/docs/concepts#what-are-contextual-tuples)
- [What Is Type Bound Public Access?](https://openfga.dev/docs/concepts#what-is-type-bound-public-access)
- [Related Sections](https://openfga.dev/docs/concepts#related-sections)

## OpenFGA Relationship Queries
[Skip to main content](https://openfga.dev/docs/interacting/relationship-queries#__docusaurus_skipToContent_fallback)

On this page

In this guide you will learn the uses of and limitations for the Check, Read, Expand, and ListObjects API endpoints.

## Before you start [​](https://openfga.dev/docs/interacting/relationship-queries\#before-you-start "Direct link to Before you start")

In order to understand this guide correctly you must be familiar with some [OpenFGA Concepts](https://openfga.dev/docs/concepts) and know how to develop the things that we will list below.

Assume that you have the following [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model).

You have a [type](https://openfga.dev/docs/concepts#what-is-a-type) called `document` that can have a `reader`
and `writer`. All writers are readers. `bob` has a `writer` relationship with `document:planning`.

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define writer: [user]
    define reader: [user] or writer

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "document",\
      "relations": {\
        "writer": {\
          "this": {}\
        },\
        "reader": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "object": "",\
                  "relation": "writer"\
                }\
              }\
            ]\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "writer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "reader": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

```codeBlockLines_e6Vv
[// Bob has writer relationship with planning document\
  {\
  "_description": "Bob has writer relationship with planning document",\
  "user": "user:bob",\
  "relation": "writer",\
  "object": "document:planning"\
}]

```

* * *

In addition, you will need to know the following:

### Direct access [​](https://openfga.dev/docs/interacting/relationship-queries\#direct-access "Direct link to Direct access")

You need to know how to create an authorization model and create a relationship tuple to grant a user access to an object. [Learn more →](https://openfga.dev/docs/modeling/direct-access)

### OpenFGA concepts [​](https://openfga.dev/docs/interacting/relationship-queries\#-concepts "Direct link to -concepts")

- A [Type](https://openfga.dev/docs/concepts#what-is-a-type): a class of objects that have similar characteristics
- A [User](https://openfga.dev/docs/concepts#what-is-a-user): an entity in the system that can be related to an object
- A [Relation](https://openfga.dev/docs/concepts#what-is-a-relation): is a string defined in the type definition of an authorization model that defines the possibility of a relationship between an object of the same type as the type definition and a user in the system
- An [Object](https://openfga.dev/docs/concepts#what-is-an-object): represents an entity in the system. Users' relationships to it can be define through relationship tuples and the authorization model
- A [Relationship Tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple): a grouping consisting of a user, a relation and an object stored in OpenFGA

## Check [​](https://openfga.dev/docs/interacting/relationship-queries\#check "Direct link to Check")

### What is it for? [​](https://openfga.dev/docs/interacting/relationship-queries\#what-is-it-for "Direct link to What is it for?")

The [Check API](https://openfga.dev/api/service#Relationship%20Queries/Check) is an API endpoint that returns whether the user has a certain relationship with an object. OpenFGA will resolve all prerequisite relationships to establish whether a relationship exists.

### When to use? [​](https://openfga.dev/docs/interacting/relationship-queries\#when-to-use "Direct link to When to use?")

Check can be called if you need to establish whether a particular user has a specific relationship with a particular object.

For example, you can call check to determine whether `bob` has a `reader` relationship with `document:planning`.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:bob',
    relation: 'reader',
    object: 'document:planning',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:bob",
    Relation: "reader",
    Object:   "document:planning",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:bob",
    Relation = "reader",
    Object = "document:planning",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:bob",
    relation="reader",
    object="document:planning",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:bob")
        .relation("reader")
        ._object("document:planning");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:bob reader document:planning

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:bob","relation":"reader","object":"document:planning"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:bob", // check if the user `user:bob`
  relation = "reader", // has an `reader` relation
  object = "document:planning", // with the object `document:planning`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:bob related to document:planning as reader?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

The OpenFGA API will return `true` because there is an implied relationship as

- every `writer` is also a `reader`
- `bob` is a `writer` for `document:planning`

### Caveats and when not to use it [​](https://openfga.dev/docs/interacting/relationship-queries\#caveats-and-when-not-to-use-it "Direct link to Caveats and when not to use it")

Check is designed to answer the question "Does user:X have relationship Y with object:Z?". It is _not_ designed to answer the following questions:

- "Who has relationship Y with object:Z?"
- "What are the objects that userX has relationship Y with?"
- "Why does user:X have relationship Y with object:Z?"

## Batch Check [​](https://openfga.dev/docs/interacting/relationship-queries\#batch-check "Direct link to Batch Check")

### What is it for? [​](https://openfga.dev/docs/interacting/relationship-queries\#what-is-it-for-1 "Direct link to What is it for?")

The [Batch Check API](https://openfga.dev/api/service#Relationship%20Queries/BatchCheck) is an API endpoint that allows you to check multiple user-object-relationship combinations in a single request.

### When to use? [​](https://openfga.dev/docs/interacting/relationship-queries\#when-to-use-1 "Direct link to When to use?")

Batching authorization checks together in a single request significantly reduces overall network latency.

Two scenarios are common to use Batch Check:

1. When determining if the user has access to a list of objects (such as [Option 1 in Search with Permissions](https://openfga.dev/docs/interacting/search-with-permissions#option-1-search-then-check)), filter and sort on your database, then call `/batch-check`. Repeat to perform pagination.
2. When determining fields on a web page the user has access to, call `/batch-check` for every relation necessary to show/hide each field.

For example, you can call Batch Check to determine whether `bob` has `can_view_name`, `can_view_dob`, and `can_view_ssn` relationships with `patient_record:1`.

- Node.js
- Go
- .NET
- Python
- Java
- curl
- Pseudocode

```codeBlockLines_e6Vv
// Requires >=v0.8.0 for the server side BatchCheck, earlier versions support a client-side BatchCheck with a slightly different interface
const body = {
  checks: [\
    {\
      user: 'user:bob',\
      relation: 'can_view_name',\
      object: 'patient_record:1',\
      correlationId: '1'\
    },{\
      user: 'user:bob',\
      relation: 'can_view_dob',\
      object: 'patient_record:1',\
      correlationId: '2'\
    },{\
      user: 'user:bob',\
      relation: 'can_view_ssn',\
      object: 'patient_record:1',\
      correlationId: '3'\
    }\
  ],
}

const options = {
  authorization_model_id: '01HVMMBCMGZNT3SED4Z17ECXCA',
  maxBatchSize: 50, // optional, default is 50, can be used to limit the number of checks in a single server request
  maxParallelRequests: 10, // optional, default is 10, can be used to limit the parallelization of the BatchCheck chunks
};
const { result } = await fgaClient.batchCheck(body, options);

/*
{
  "results": [\
    {\
      "correlationId": '1',\
      "allowed": true,\
      "request": {\
        "user": 'user:bob',\
        "relation": 'can_view_name',\
        "object": 'patient_record:1'}\
    }, {\
      "correlationId": '2',\
      "allowed": true,\
      "request": {\
        "user": 'user:bob',\
        "relation": 'can_view_dob',\
        "object": 'patient_record:1'}\
    }, {\
      "correlationId": '3',\
      "allowed": false,\
      "request": {\
        "user": 'user:bob',\
        "relation": 'can_view_ssn',\
        "object": 'patient_record:1'}\
    }\
  ],
}
*/

```

```codeBlockLines_e6Vv
// The Go SDK does not yet support server-side batch checks. This currently just calls the check endpoint in parallel.

body := ClientBatchCheckBody{
  {
    User: "user:bob",
    Relation: "can_view_name",
    Object: "patient_record:1",
  },
  {
    User: "user:bob",
    Relation: "can_view_dob",
    Object: "patient_record:1",
  },
  {
    User: "user:bob",
    Relation: "can_view_ssn",
    Object: "patient_record:1",
  },
}
options := ClientBatchCheckOptions{
  AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}
data, err := fgaClient.BatchCheck(context.Background()).Body(requestBody).Options(options).Execute()
/*
data = [{\
  Allowed: true,\
  Request: {\
    User: 'user:bob',\
    Relation: 'can_view_name',\
    Object: 'patient_record:1'\
  }\
}, {\
  Allowed: true,\
  Request: {\
    User: 'user:bob',\
    Relation: 'can_view_dob',\
    Object: 'patient_record:1'\
  }\
}, {\
  Allowed: false,\
  Request: {\
    User: 'user:bob',\
    Relation: 'can_view_ssn',\
    Object: 'patient_record:1'\
  }\
}]
*/

```

```codeBlockLines_e6Vv
// The .NET SDK does not yet support server-side batch checks. This currently just calls the check endpoint in parallel.

var body = new ClientBatchCheckRequest {
  Checks = new List<ClientCheckRequest>() {
    new() {
      User = "user:bob",
      Relation = "can_view_name",
      Object = "patient_record:1",
    },
    new() {
      User = "user:bob",
      Relation = "can_view_dob",
      Object = "patient_record:1",
    },
    new() {
      User = "user:bob",
      Relation = "can_view_ssn",
      Object = "patient_record:1",
    },
  },
}
var options = new ClientBatchCheckOptions {
  AuthorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA",
}
var response = await fgaClient.BatchCheck(body, options);
/*
response.Responses = [{\
  Allowed: true,\
  Request: {\
    User: 'user:bob',\
    Relation: 'can_view_name',\
    Object: 'patient_record:1'\
  }\
}, {\
  Allowed: true,\
  Request: {\
    User: 'user:bob',\
    Relation: 'can_view_dob',\
    Object: 'patient_record:1'\
  }\
}, {\
  Allowed: false,\
  Request: {\
    User: 'user:bob',\
    Relation: 'can_view_ssn',\
    Object: 'patient_record:1'\
  }\
}]
*/

```

```codeBlockLines_e6Vv
# Requires >=v0.9.0 for the server side BatchCheck, earlier versions support a client-side BatchCheck with a slightly different interface

checks = [\
  ClientBatchCheckItem(\
    user="user:bob",\
    relation="can_view_name",\
    object="patient_record:1",\
    correlation_id="1",\
  ClientBatchCheckItem(\
    user="user:bob",\
    relation="can_view_dob",\
    object="patient_record:1",\
    correlation_id="2",\
  ClientBatchCheckItem(\
    user="user:bob",\
    relation="can_view_ssn",\
    object="patient_record:1",\
    correlation_id="3"\
]
options = {
  authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"}
response = await fga_client.batch_check(ClientBatchCheckRequest(checks=checks), options)

# response.results = [{\
#  correlation_id: '1',\
#  allowed: true,\
#  request: {\
#    user: 'user:bob',\
#    relation: 'can_view_name',\
#    object: 'patient_record:1'}\
#}, {\
#  correlation_id: '2',\
#  allowed: true,\
#  request: {\
#    user: 'user:bob',\
#    relation: 'can_view_dob',\
#    object: 'patient_record:1'}\
#}, {\
#  correlation_id: '3',\
#  allowed: false,\
#  request: {\
#    user: 'user:bob',\
#    relation: 'can_view_ssn',\
#    object: 'patient_record:1'}\
#}]

```

```codeBlockLines_e6Vv
 // Requires >=v0.8.0 for the server side BatchCheck, earlier versions support a client-side BatchCheck with a slightly different interface
var request = new ClientBatchCheckRequest().checks(
    List.of(
      new ClientBatchCheckItem()
          .user("user:bob")
          .relation("can_view_name")
          ._object("patient_record:1")
          .correlationId("1"),
      new ClientBatchCheckItem()
          .user("user:bob")
          .relation("can_view_dob")
          ._object("patient_record:1")
          .correlationId("2"),
      new ClientBatchCheckItem()
          .user("user:bob")
          .relation("can_view_ssn")
          ._object("patient_record:1")
          .correlationId("3")
);

var options = new ClientBatchCheckOptions()
    .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA")
    .maxBatchSize(50) // optional, default is 50, can be used to limit the number of checks in a single server request
    .maxParallelRequests(10); // optional, default is 10, can be used to limit the parallelization of the BatchCheck chunks

var response = fgaClient.batchCheck(request, options).get();

/*
{
  "result": [\
    {\
      "correlationId": '1',\
      "allowed": true,\
      "request": {\
        "user": 'user:bob',\
        "relation": 'can_view_name',\
        "_object": 'patient_record:1'}\
    }, {\
      "correlationId": '2',\
      "allowed": true,\
      "request": {\
        "user": 'user:bob',\
        "relation": 'can_view_dob',\
        "_object": 'patient_record:1'}\
    }, {\
      "correlationId": '3',\
      "allowed": false,\
      "request": {\
        "user": 'user:bob',\
        "relation": 'can_view_ssn',\
        "_object": 'patient_record:1'}\
    }\
  ],
}
*/

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/batch-check \
-H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
-H "content-type: application/json" \
-d '{
  "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA",
  "checks": [\
    {\
      "tuple_key": {\
        "user":"user:bob",\
        "relation":"can_view_name",\
        "object":"patient_record:1",\
      },\
      "correlation_id": "1"\
    },\
    {\
      "tuple_key": {\
        "user":"user:bob",\
        "relation":"can_view_dob",\
        "object":"patient_record:1",\
      },\
      "correlation_id": "2"\
    },\
    {\
      "tuple_key": {\
        "user":"user:bob",\
        "relation":"can_view_ssn",\
        "object":"patient_record:1",\
      },\
      "correlation_id": "3"\
    },\
\
\
# Response:\
{\
  "results": {\
    { "1": { "allowed": true }}, # can_view_name\
    { "2": { "allowed": true }}, # can_view_dob\
    { "3": { "allowed": false }}, # can_view_ssn\
\
  }\
}\
\
```\
\
```codeBlockLines_e6Vv\
BatchCheck([\
  - user="user:bob", relation="can_view_name", object="patient_record:1", correlation_id="1"\
  - user="user:bob", relation="can_view_dob", object="patient_record:1", correlation_id="2"\
  - user="user:bob", relation="can_view_ssn", object="patient_record:1", correlation_id="3"\
])\
\
Reply:\
  - correlation_id="1": true\
  - correlation_id="2": true\
  - correlation_id="3": false\
\
```\
\
The OpenFGA API will return `true` depending on the level of access assigned to that user and the implied relationships inherited in the authorization model.\
\
### Caveats and when not to use it [​](https://openfga.dev/docs/interacting/relationship-queries\#caveats-and-when-not-to-use-it-1 "Direct link to Caveats and when not to use it")\
\
If you are making less than 10 checks, it may be faster to call the [Check API](https://openfga.dev/api/service#Relationship%20Queries/Check) in parallel instead of Batch Check.\
\
The new BatchCheck endpoint is currently supported by the JS SDK (>= [v0.8.0](https://github.com/openfga/js-sdk/releases/tag/v0.8.0) and the Python SDK (>= [v0.9.0](https://github.com/openfga/python-sdk/releases/tag/v0.9.0)). Support in the other SDKs is being worked on.\
\
## Read [​](https://openfga.dev/docs/interacting/relationship-queries\#read "Direct link to Read")\
\
### What Is It For? [​](https://openfga.dev/docs/interacting/relationship-queries\#what-is-it-for-2 "Direct link to What Is It For?")\
\
The [Read API](https://openfga.dev/api/service#Relationship%20Tuples/Read) is an API endpoint that returns the relationship tuples that are stored in the system that satisfy a query.\
\
### When to use? [​](https://openfga.dev/docs/interacting/relationship-queries\#when-to-use-2 "Direct link to When to use?")\
\
Read can be called if you need to get all the stored relationship tuples that relate:\
\
1. [a particular user to any objects of a specific type with a particular relation](https://openfga.dev/docs/interacting/relationship-queries#1-a-particular-user-to-any-objects-of-a-specific-type-with-a-particular-relation)\
2. [a particular user to any objects of a specific type with any relation](https://openfga.dev/docs/interacting/relationship-queries#2-a-particular-user-to-any-objects-of-a-specific-type-with-any-relation)\
3. [a particular object to any user with a particular relation](https://openfga.dev/docs/interacting/relationship-queries#3-a-particular-object-to-any-user-with-a-particular-relation)\
\
#### 1\. A particular user to any objects of a specific type with a particular relation [​](https://openfga.dev/docs/interacting/relationship-queries\#1-a-particular-user-to-any-objects-of-a-specific-type-with-a-particular-relation "Direct link to 1. A particular user to any objects of a specific type with a particular relation")\
\
For example, to query all the stored relationship tuples `bob` has a `writer` relationship with, one can ask\
\
- Node.js\
- Go\
- .NET\
- Python\
- Java\
- CLI\
- curl\
- Pseudocode\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
// import the SDK\
const { OpenFgaClient } = require('@openfga/sdk');\
\
// Initialize the SDK with no auth - see "How to setup SDK client" for more options\
const fgaClient = new OpenFgaClient({\
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example\
  storeId: process.env.FGA_STORE_ID,\
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request\
});\
\
```\
\
```codeBlockLines_e6Vv\
\
// Execute a read\
const { tuples } = await fgaClient.read({\
  user:'user:bob',\
relation:'writer',\
object:'document:',\
});\
\
// tuples = [{"key": {"user":"user:bob","relation":"writer","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"}]\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
import (\
    "os"\
\
    . "github.com/openfga/go-sdk"\
    . "github.com/openfga/go-sdk/client"\
)\
\
func main() {\
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options\
    fgaClient, err := NewSdkClient(&ClientConfiguration{\
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example\
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods\
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request\
    })\
\
    if err != nil {\
    // .. Handle error\
    }\
}\
\
```\
\
```codeBlockLines_e6Vv\
options := ClientReadOptions{}\
body := ClientReadRequest{\
	User: PtrString("user:bob"),\
	Relation: PtrString("writer"),\
	Object: PtrString("document:"),\
\
}\
\
data, err := fgaClient.Read(context.Background()).\
    Body(body).\
    Options(options).\
    Execute()\
\
// data = { "tuples": [{"key": {"user":"user:bob","relation":"writer","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"}] }\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
// import the SDK\
using OpenFga.Sdk.Client;\
using OpenFga.Sdk.Client.Model;\
using OpenFga.Sdk.Model;\
using Environment = System.Environment;\
\
namespace Example;\
\
class Example {\
    public static async Task Main() {\
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options\
        var configuration = new ClientConfiguration() {\
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example\
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods\
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request\
        };\
        var fgaClient = new OpenFgaClient(configuration);\
    }\
}\
\
```\
\
```codeBlockLines_e6Vv\
var options = new ClientReadOptions {}\
var body = new ClientReadRequest() {\
  User = "user:bob",\
  Relation = "writer",\
  Object = "document:",\
};\
\
var response = await fgaClient.Read(body, options);\
\
// data = { "tuples": [{"key": {"user":"user:bob","relation":"writer","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"}] }\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
\
import asyncio\
import os\
import json\
from openfga_sdk.client import ClientConfiguration, OpenFgaClient\
\
async def main():\
    configuration = ClientConfiguration(\
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example\
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods\
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request\
    )\
\
    # Enter a context with an instance of the OpenFgaClient\
    async with OpenFgaClient(configuration) as fga_client:\
        api_response = await fga_client.read_authorization_models()\
        await fga_client.close()\
\
asyncio.run(main())\
\
```\
\
```codeBlockLines_e6Vv\
\
options = {}\
body = TupleKey(\
            user="user:bob",\
            relation="writer",\
            object="document:",\
\
)\
\
response = await fga_client.read(body, options)\
\
# response = ReadResponse({"tuples":[{"key": {"user":"user:bob","relation":"writer","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"}]})\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
\
import dev.openfga.sdk.api.client.OpenFgaClient;\
import dev.openfga.sdk.api.configuration.ClientConfiguration;\
\
public class Example {\
  public static void main(String[] args) throws Exception {\
      var config = new ClientConfiguration()\
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"\
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()\
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request\
\
      var fgaClient = new OpenFgaClient(config);\
  }\
}\
\
```\
\
```codeBlockLines_e6Vv\
var body = new ClientReadRequest()\
        .user("user:bob")\
        .relation("writer")\
        ._object("document:");\
\
var response = fgaClient.read(body).get();\
\
// response = { "tuples": [{"key": {"user":"user:bob","relation":"writer","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"}] }\
\
```\
\
Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)\
\
```codeBlockLines_e6Vv\
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)\
\
```\
\
```codeBlockLines_e6Vv\
fga tuple read --store-id=${FGA_STORE_ID} --user user:bob --relation writer --object document:\
\
```\
\
Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)\
\
```codeBlockLines_e6Vv\
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)\
\
```\
\
```codeBlockLines_e6Vv\
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/read \\
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization\
  -H "content-type: application/json" \\
  -d '{"tuple_key":{"user":"user:bob","relation":"writer","object":"document:"}}'\
\
# Response: "tuples": {[{"key": {"user":"user:bob","relation":"writer","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"}]}\
\
```\
\
```codeBlockLines_e6Vv\
read(\
  // read all stored tuples\
  "user:bob", // where user `user:bob` has $(opts.relation ? '': 'any ' )relation\
  "writer", // `writer`\
  "document:", // with the type `document:`\
);\
\
Reply: tuples:[{"key": {"user":"user:bob","relation":"writer","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"}]\
\
```\
\
#### 2\. A particular user to any objects of a specific type with any relation [​](https://openfga.dev/docs/interacting/relationship-queries\#2-a-particular-user-to-any-objects-of-a-specific-type-with-any-relation "Direct link to 2. A particular user to any objects of a specific type with any relation")\
\
For example, to query all the stored relationship tuples in which `bob` is related to objects of type `document` as any relation, one can issue the following call:\
\
- Node.js\
- Go\
- .NET\
- Python\
- Java\
- CLI\
- curl\
- Pseudocode\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
// import the SDK\
const { OpenFgaClient } = require('@openfga/sdk');\
\
// Initialize the SDK with no auth - see "How to setup SDK client" for more options\
const fgaClient = new OpenFgaClient({\
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example\
  storeId: process.env.FGA_STORE_ID,\
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request\
});\
\
```\
\
```codeBlockLines_e6Vv\
\
// Execute a read\
const { tuples } = await fgaClient.read({\
  user:'user:bob',\
object:'document:',\
});\
\
// tuples = [{"key": {"user":"user:bob","relation":"writer","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"}]\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
import (\
    "os"\
\
    . "github.com/openfga/go-sdk"\
    . "github.com/openfga/go-sdk/client"\
)\
\
func main() {\
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options\
    fgaClient, err := NewSdkClient(&ClientConfiguration{\
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example\
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods\
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request\
    })\
\
    if err != nil {\
    // .. Handle error\
    }\
}\
\
```\
\
```codeBlockLines_e6Vv\
options := ClientReadOptions{}\
body := ClientReadRequest{\
	User: PtrString("user:bob"),\
	Object: PtrString("document:"),\
\
}\
\
data, err := fgaClient.Read(context.Background()).\
    Body(body).\
    Options(options).\
    Execute()\
\
// data = { "tuples": [{"key": {"user":"user:bob","relation":"writer","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"}] }\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
// import the SDK\
using OpenFga.Sdk.Client;\
using OpenFga.Sdk.Client.Model;\
using OpenFga.Sdk.Model;\
using Environment = System.Environment;\
\
namespace Example;\
\
class Example {\
    public static async Task Main() {\
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options\
        var configuration = new ClientConfiguration() {\
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example\
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods\
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request\
        };\
        var fgaClient = new OpenFgaClient(configuration);\
    }\
}\
\
```\
\
```codeBlockLines_e6Vv\
var options = new ClientReadOptions {}\
var body = new ClientReadRequest() {\
  User = "user:bob",\
  Object = "document:",\
};\
\
var response = await fgaClient.Read(body, options);\
\
// data = { "tuples": [{"key": {"user":"user:bob","relation":"writer","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"}] }\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
\
import asyncio\
import os\
import json\
from openfga_sdk.client import ClientConfiguration, OpenFgaClient\
\
async def main():\
    configuration = ClientConfiguration(\
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example\
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods\
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request\
    )\
\
    # Enter a context with an instance of the OpenFgaClient\
    async with OpenFgaClient(configuration) as fga_client:\
        api_response = await fga_client.read_authorization_models()\
        await fga_client.close()\
\
asyncio.run(main())\
\
```\
\
```codeBlockLines_e6Vv\
\
options = {}\
body = TupleKey(\
            user="user:bob",\
            object="document:",\
\
)\
\
response = await fga_client.read(body, options)\
\
# response = ReadResponse({"tuples":[{"key": {"user":"user:bob","relation":"writer","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"}]})\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
\
import dev.openfga.sdk.api.client.OpenFgaClient;\
import dev.openfga.sdk.api.configuration.ClientConfiguration;\
\
public class Example {\
  public static void main(String[] args) throws Exception {\
      var config = new ClientConfiguration()\
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"\
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()\
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request\
\
      var fgaClient = new OpenFgaClient(config);\
  }\
}\
\
```\
\
```codeBlockLines_e6Vv\
var body = new ClientReadRequest()\
        .user("user:bob")\
        ._object("document:");\
\
var response = fgaClient.read(body).get();\
\
// response = { "tuples": [{"key": {"user":"user:bob","relation":"writer","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"}] }\
\
```\
\
Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)\
\
```codeBlockLines_e6Vv\
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)\
\
```\
\
```codeBlockLines_e6Vv\
fga tuple read --store-id=${FGA_STORE_ID} --user user:bob --object document:\
\
```\
\
Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)\
\
```codeBlockLines_e6Vv\
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)\
\
```\
\
```codeBlockLines_e6Vv\
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/read \\
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization\
  -H "content-type: application/json" \\
  -d '{"tuple_key":{"user":"user:bob","object":"document:"}}'\
\
# Response: "tuples": {[{"key": {"user":"user:bob","relation":"writer","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"}]}\
\
```\
\
```codeBlockLines_e6Vv\
read(\
  // read all stored tuples\
  "user:bob", // where user `user:bob` has $(opts.relation ? '': 'any ' )relation\
  "document:", // with the type `document:`\
);\
\
Reply: tuples:[{"key": {"user":"user:bob","relation":"writer","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"}]\
\
```\
\
#### 3\. A particular object to any user with a particular relation [​](https://openfga.dev/docs/interacting/relationship-queries\#3-a-particular-object-to-any-user-with-a-particular-relation "Direct link to 3. A particular object to any user with a particular relation")\
\
For example, to query all the stored relationship tuples in which any user is related to `document:planning` as a `writer`, one can issue the following call:\
\
- Node.js\
- Go\
- .NET\
- Python\
- Java\
- CLI\
- curl\
- Pseudocode\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
// import the SDK\
const { OpenFgaClient } = require('@openfga/sdk');\
\
// Initialize the SDK with no auth - see "How to setup SDK client" for more options\
const fgaClient = new OpenFgaClient({\
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example\
  storeId: process.env.FGA_STORE_ID,\
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request\
});\
\
```\
\
```codeBlockLines_e6Vv\
\
// Execute a read\
const { tuples } = await fgaClient.read({\
  relation:'writer',\
object:'document:planning',\
});\
\
// tuples = [{"key": {"user":"user:bob","relation":"writer","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"}]\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
import (\
    "os"\
\
    . "github.com/openfga/go-sdk"\
    . "github.com/openfga/go-sdk/client"\
)\
\
func main() {\
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options\
    fgaClient, err := NewSdkClient(&ClientConfiguration{\
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example\
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods\
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request\
    })\
\
    if err != nil {\
    // .. Handle error\
    }\
}\
\
```\
\
```codeBlockLines_e6Vv\
options := ClientReadOptions{}\
body := ClientReadRequest{\
	Relation: PtrString("writer"),\
	Object: PtrString("document:planning"),\
\
}\
\
data, err := fgaClient.Read(context.Background()).\
    Body(body).\
    Options(options).\
    Execute()\
\
// data = { "tuples": [{"key": {"user":"user:bob","relation":"writer","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"}] }\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
// import the SDK\
using OpenFga.Sdk.Client;\
using OpenFga.Sdk.Client.Model;\
using OpenFga.Sdk.Model;\
using Environment = System.Environment;\
\
namespace Example;\
\
class Example {\
    public static async Task Main() {\
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options\
        var configuration = new ClientConfiguration() {\
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example\
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods\
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request\
        };\
        var fgaClient = new OpenFgaClient(configuration);\
    }\
}\
\
```\
\
```codeBlockLines_e6Vv\
var options = new ClientReadOptions {}\
var body = new ClientReadRequest() {\
  Relation = "writer",\
  Object = "document:planning",\
};\
\
var response = await fgaClient.Read(body, options);\
\
// data = { "tuples": [{"key": {"user":"user:bob","relation":"writer","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"}] }\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
\
import asyncio\
import os\
import json\
from openfga_sdk.client import ClientConfiguration, OpenFgaClient\
\
async def main():\
    configuration = ClientConfiguration(\
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example\
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods\
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request\
    )\
\
    # Enter a context with an instance of the OpenFgaClient\
    async with OpenFgaClient(configuration) as fga_client:\
        api_response = await fga_client.read_authorization_models()\
        await fga_client.close()\
\
asyncio.run(main())\
\
```\
\
```codeBlockLines_e6Vv\
\
options = {}\
body = TupleKey(\
            relation="writer",\
            object="document:planning",\
\
)\
\
response = await fga_client.read(body, options)\
\
# response = ReadResponse({"tuples":[{"key": {"user":"user:bob","relation":"writer","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"}]})\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
\
import dev.openfga.sdk.api.client.OpenFgaClient;\
import dev.openfga.sdk.api.configuration.ClientConfiguration;\
\
public class Example {\
  public static void main(String[] args) throws Exception {\
      var config = new ClientConfiguration()\
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"\
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()\
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request\
\
      var fgaClient = new OpenFgaClient(config);\
  }\
}\
\
```\
\
```codeBlockLines_e6Vv\
var body = new ClientReadRequest()\
        .relation("writer")\
        ._object("document:planning");\
\
var response = fgaClient.read(body).get();\
\
// response = { "tuples": [{"key": {"user":"user:bob","relation":"writer","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"}] }\
\
```\
\
Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)\
\
```codeBlockLines_e6Vv\
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)\
\
```\
\
```codeBlockLines_e6Vv\
fga tuple read --store-id=${FGA_STORE_ID} --relation writer --object document:planning\
\
```\
\
Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)\
\
```codeBlockLines_e6Vv\
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)\
\
```\
\
```codeBlockLines_e6Vv\
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/read \\
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization\
  -H "content-type: application/json" \\
  -d '{"tuple_key":{"relation":"writer","object":"document:planning"}}'\
\
# Response: "tuples": {[{"key": {"user":"user:bob","relation":"writer","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"}]}\
\
```\
\
```codeBlockLines_e6Vv\
read(\
  // read all stored tuples\
  // for users who have relation\
  "writer", // `writer`\
  "document:planning", // with the object `document:planning`\
);\
\
Reply: tuples:[{"key": {"user":"user:bob","relation":"writer","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"}]\
\
```\
\
### Caveats and when not to use it [​](https://openfga.dev/docs/interacting/relationship-queries\#caveats-and-when-not-to-use-it-2 "Direct link to Caveats and when not to use it")\
\
The Read API will only return all the stored relationships that match the query specification.\
It does not expand or traverse the graph by taking the authorization model into account.\
\
For example, if you specify that `writers` are `viewers` in the authorization model, the Read API will ignore that and it will return tuples where a user is a `viewer` if and only if the `(user_id, "viewer", object_type:object_id)` relationship tuple exists in the system.\
\
In the following case, although all `writers` have reader `relationships` for document objects and `bob` is a `writer` for `document:planning`, if you query for all objects that `bob` has `reader` relationships, it will not return `document:planning`.\
\
- Node.js\
- Go\
- .NET\
- Python\
- Java\
- CLI\
- curl\
- Pseudocode\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
// import the SDK\
const { OpenFgaClient } = require('@openfga/sdk');\
\
// Initialize the SDK with no auth - see "How to setup SDK client" for more options\
const fgaClient = new OpenFgaClient({\
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example\
  storeId: process.env.FGA_STORE_ID,\
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request\
});\
\
```\
\
```codeBlockLines_e6Vv\
\
// Execute a read\
const { tuples } = await fgaClient.read({\
  user:'user:bob',\
relation:'reader',\
object:'document:',\
});\
\
// tuples = []\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
import (\
    "os"\
\
    . "github.com/openfga/go-sdk"\
    . "github.com/openfga/go-sdk/client"\
)\
\
func main() {\
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options\
    fgaClient, err := NewSdkClient(&ClientConfiguration{\
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example\
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods\
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request\
    })\
\
    if err != nil {\
    // .. Handle error\
    }\
}\
\
```\
\
```codeBlockLines_e6Vv\
options := ClientReadOptions{}\
body := ClientReadRequest{\
	User: PtrString("user:bob"),\
	Relation: PtrString("reader"),\
	Object: PtrString("document:"),\
\
}\
\
data, err := fgaClient.Read(context.Background()).\
    Body(body).\
    Options(options).\
    Execute()\
\
// data = { "tuples": [] }\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
// import the SDK\
using OpenFga.Sdk.Client;\
using OpenFga.Sdk.Client.Model;\
using OpenFga.Sdk.Model;\
using Environment = System.Environment;\
\
namespace Example;\
\
class Example {\
    public static async Task Main() {\
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options\
        var configuration = new ClientConfiguration() {\
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example\
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods\
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request\
        };\
        var fgaClient = new OpenFgaClient(configuration);\
    }\
}\
\
```\
\
```codeBlockLines_e6Vv\
var options = new ClientReadOptions {}\
var body = new ClientReadRequest() {\
  User = "user:bob",\
  Relation = "reader",\
  Object = "document:",\
};\
\
var response = await fgaClient.Read(body, options);\
\
// data = { "tuples": [] }\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
\
import asyncio\
import os\
import json\
from openfga_sdk.client import ClientConfiguration, OpenFgaClient\
\
async def main():\
    configuration = ClientConfiguration(\
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example\
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods\
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request\
    )\
\
    # Enter a context with an instance of the OpenFgaClient\
    async with OpenFgaClient(configuration) as fga_client:\
        api_response = await fga_client.read_authorization_models()\
        await fga_client.close()\
\
asyncio.run(main())\
\
```\
\
```codeBlockLines_e6Vv\
\
options = {}\
body = TupleKey(\
            user="user:bob",\
            relation="reader",\
            object="document:",\
\
)\
\
response = await fga_client.read(body, options)\
\
# response = ReadResponse({"tuples":[]})\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
\
import dev.openfga.sdk.api.client.OpenFgaClient;\
import dev.openfga.sdk.api.configuration.ClientConfiguration;\
\
public class Example {\
  public static void main(String[] args) throws Exception {\
      var config = new ClientConfiguration()\
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"\
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()\
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request\
\
      var fgaClient = new OpenFgaClient(config);\
  }\
}\
\
```\
\
```codeBlockLines_e6Vv\
var body = new ClientReadRequest()\
        .user("user:bob")\
        .relation("reader")\
        ._object("document:");\
\
var response = fgaClient.read(body).get();\
\
// response = { "tuples": [] }\
\
```\
\
Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)\
\
```codeBlockLines_e6Vv\
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)\
\
```\
\
```codeBlockLines_e6Vv\
fga tuple read --store-id=${FGA_STORE_ID} --user user:bob --relation reader --object document:\
\
```\
\
Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)\
\
```codeBlockLines_e6Vv\
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)\
\
```\
\
```codeBlockLines_e6Vv\
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/read \\
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization\
  -H "content-type: application/json" \\
  -d '{"tuple_key":{"user":"user:bob","relation":"reader","object":"document:"}}'\
\
# Response: "tuples": {[]}\
\
```\
\
```codeBlockLines_e6Vv\
read(\
  // read all stored tuples\
  "user:bob", // where user `user:bob` has $(opts.relation ? '': 'any ' )relation\
  "reader", // `reader`\
  "document:", // with the type `document:`\
);\
\
Reply: tuples:[]\
\
```\
\
info\
\
Although bob is a writer to document:planning and every writer is also a reader, the Read API will return an empty list because there are no stored relationship tuples that relate bob to document:planning as reader.\
\
## Expand [​](https://openfga.dev/docs/interacting/relationship-queries\#expand "Direct link to Expand")\
\
### What is it for? [​](https://openfga.dev/docs/interacting/relationship-queries\#what-is-it-for-3 "Direct link to What is it for?")\
\
The [Expand API](https://openfga.dev/api/service#/Relationship%20Queries/Expand) returns all users (including users and usersets) that have a specific relationship with an object.\
The response is represented as a tree of users or usersets. To build the full graph of access, you would need to recursively call expand on the leaves returned from the previous expand call.\
\
### When to use? [​](https://openfga.dev/docs/interacting/relationship-queries\#when-to-use-3 "Direct link to When to use?")\
\
Expand is used for debugging and to understand why a user has a particular relationship with a specific object.\
\
For example, to understand why `bob` can have a `reader` relationship with `document:planning`, one could first call\
\
- Node.js\
- Go\
- .NET\
- Python\
- Java\
- CLI\
- curl\
- Pseudocode\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
// import the SDK\
const { OpenFgaClient } = require('@openfga/sdk');\
\
// Initialize the SDK with no auth - see "How to setup SDK client" for more options\
const fgaClient = new OpenFgaClient({\
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example\
  storeId: process.env.FGA_STORE_ID,\
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request\
});\
\
```\
\
```codeBlockLines_e6Vv\
\
const { tree } = await fgaClient.expand({\
  relation: 'reader', // expand all who has 'reader' relation\
  object: 'document:planning', // with the object 'document:planning'\
}, {\
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA'\
});\
\
// tree = ...\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
import (\
    "os"\
\
    . "github.com/openfga/go-sdk"\
    . "github.com/openfga/go-sdk/client"\
)\
\
func main() {\
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options\
    fgaClient, err := NewSdkClient(&ClientConfiguration{\
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example\
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods\
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request\
    })\
\
    if err != nil {\
    // .. Handle error\
    }\
}\
\
```\
\
```codeBlockLines_e6Vv\
\
options := ClientExpandOptions{\
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),\
}\
body := ClientExpandRequest{\
    Relation: "reader", // expand all who has "reader" relation\
    Object:   "document:planning", // with the object "document:planning"\
}\
data, err := fgaClient.Expand(context.Background()).\
    Body(body).\
    Options(options).\
    Execute()\
\
// data = { tree: ...}\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
// import the SDK\
using OpenFga.Sdk.Client;\
using OpenFga.Sdk.Client.Model;\
using OpenFga.Sdk.Model;\
using Environment = System.Environment;\
\
namespace Example;\
\
class Example {\
    public static async Task Main() {\
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options\
        var configuration = new ClientConfiguration() {\
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example\
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods\
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request\
        };\
        var fgaClient = new OpenFgaClient(configuration);\
    }\
}\
\
```\
\
```codeBlockLines_e6Vv\
\
var options = new ClientCheckOptions {\
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",\
};\
var body = new ClientExpandRequest {\
    Relation = "reader",  // expand all who has "reader" relation\
    Object = "document:planning" // with the object "document:planning"\
};\
var response = await fgaClient.Expand(body, options);\
\
// response = { tree: ... }\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
\
import asyncio\
import os\
import json\
from openfga_sdk.client import ClientConfiguration, OpenFgaClient\
\
async def main():\
    configuration = ClientConfiguration(\
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example\
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods\
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request\
    )\
\
    # Enter a context with an instance of the OpenFgaClient\
    async with OpenFgaClient(configuration) as fga_client:\
        api_response = await fga_client.read_authorization_models()\
        await fga_client.close()\
\
asyncio.run(main())\
\
```\
\
```codeBlockLines_e6Vv\
\
options = {\
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"\
}\
body = ClientExpandRequest(\
    relation: "reader",\
    object: "document:planning",\
)\
\
response = await fga_client.expand(body. options)\
\
# response = ExpandResponse({"tree":...})\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
\
import dev.openfga.sdk.api.client.OpenFgaClient;\
import dev.openfga.sdk.api.configuration.ClientConfiguration;\
\
public class Example {\
  public static void main(String[] args) throws Exception {\
      var config = new ClientConfiguration()\
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"\
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()\
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request\
\
      var fgaClient = new OpenFgaClient(config);\
  }\
}\
\
```\
\
```codeBlockLines_e6Vv\
var options = new ClientExpandOptions()\
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");\
\
var body = new ClientExpandRequest()\
        .relation("reader") // expand all who has "reader" relation\
        ._object("document:planning"); // with the object "document:planning"\
\
var response = fgaClient.expand(body, options).get()\
\
\
```\
\
Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)\
\
```codeBlockLines_e6Vv\
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)\
\
```\
\
```codeBlockLines_e6Vv\
fga query expand --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA reader document:planning\
\
# Response: {"tree": ...}\
\
```\
\
Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)\
\
```codeBlockLines_e6Vv\
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)\
\
```\
\
```codeBlockLines_e6Vv\
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/expand \\
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization\
  -H "content-type: application/json" \\
  -d '{"tuple_key":{"relation":"reader","object":"document:planning"}, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'\
\
# Response: {"tree": ...}\
\
```\
\
```codeBlockLines_e6Vv\
expand(\
  "reader", // expand all who has `reader` relation\
  "document:planning", // with the object `document:planning`\
  authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"\
);\
\
Reply: {tree:...}\
\
```\
\
The result of this call will be like\
\
```codeBlockLines_e6Vv\
{\
  "tree":{\
    "root":{\
      "type":"document:planning#reader",\
        "leaf":{\
          "computed":{\
            "userset":"document:planning#writer"\
          }\
        }\
      }\
    }\
  }\
}\
\
```\
\
The returned tree will contain `writer`, for which we will call\
\
- Node.js\
- Go\
- .NET\
- Python\
- Java\
- CLI\
- curl\
- Pseudocode\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
// import the SDK\
const { OpenFgaClient } = require('@openfga/sdk');\
\
// Initialize the SDK with no auth - see "How to setup SDK client" for more options\
const fgaClient = new OpenFgaClient({\
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example\
  storeId: process.env.FGA_STORE_ID,\
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request\
});\
\
```\
\
```codeBlockLines_e6Vv\
\
const { tree } = await fgaClient.expand({\
  relation: 'writer', // expand all who has 'writer' relation\
  object: 'document:planning', // with the object 'document:planning'\
}, {\
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA'\
});\
\
// tree = ...\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
import (\
    "os"\
\
    . "github.com/openfga/go-sdk"\
    . "github.com/openfga/go-sdk/client"\
)\
\
func main() {\
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options\
    fgaClient, err := NewSdkClient(&ClientConfiguration{\
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example\
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods\
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request\
    })\
\
    if err != nil {\
    // .. Handle error\
    }\
}\
\
```\
\
```codeBlockLines_e6Vv\
\
options := ClientExpandOptions{\
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),\
}\
body := ClientExpandRequest{\
    Relation: "writer", // expand all who has "writer" relation\
    Object:   "document:planning", // with the object "document:planning"\
}\
data, err := fgaClient.Expand(context.Background()).\
    Body(body).\
    Options(options).\
    Execute()\
\
// data = { tree: ...}\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
// import the SDK\
using OpenFga.Sdk.Client;\
using OpenFga.Sdk.Client.Model;\
using OpenFga.Sdk.Model;\
using Environment = System.Environment;\
\
namespace Example;\
\
class Example {\
    public static async Task Main() {\
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options\
        var configuration = new ClientConfiguration() {\
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example\
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods\
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request\
        };\
        var fgaClient = new OpenFgaClient(configuration);\
    }\
}\
\
```\
\
```codeBlockLines_e6Vv\
\
var options = new ClientCheckOptions {\
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",\
};\
var body = new ClientExpandRequest {\
    Relation = "writer",  // expand all who has "writer" relation\
    Object = "document:planning" // with the object "document:planning"\
};\
var response = await fgaClient.Expand(body, options);\
\
// response = { tree: ... }\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
\
import asyncio\
import os\
import json\
from openfga_sdk.client import ClientConfiguration, OpenFgaClient\
\
async def main():\
    configuration = ClientConfiguration(\
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example\
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods\
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request\
    )\
\
    # Enter a context with an instance of the OpenFgaClient\
    async with OpenFgaClient(configuration) as fga_client:\
        api_response = await fga_client.read_authorization_models()\
        await fga_client.close()\
\
asyncio.run(main())\
\
```\
\
```codeBlockLines_e6Vv\
\
options = {\
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"\
}\
body = ClientExpandRequest(\
    relation: "writer",\
    object: "document:planning",\
)\
\
response = await fga_client.expand(body. options)\
\
# response = ExpandResponse({"tree":...})\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
\
import dev.openfga.sdk.api.client.OpenFgaClient;\
import dev.openfga.sdk.api.configuration.ClientConfiguration;\
\
public class Example {\
  public static void main(String[] args) throws Exception {\
      var config = new ClientConfiguration()\
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"\
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()\
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request\
\
      var fgaClient = new OpenFgaClient(config);\
  }\
}\
\
```\
\
```codeBlockLines_e6Vv\
var options = new ClientExpandOptions()\
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");\
\
var body = new ClientExpandRequest()\
        .relation("writer") // expand all who has "writer" relation\
        ._object("document:planning"); // with the object "document:planning"\
\
var response = fgaClient.expand(body, options).get()\
\
\
```\
\
Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)\
\
```codeBlockLines_e6Vv\
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)\
\
```\
\
```codeBlockLines_e6Vv\
fga query expand --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA writer document:planning\
\
# Response: {"tree": ...}\
\
```\
\
Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)\
\
```codeBlockLines_e6Vv\
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)\
\
```\
\
```codeBlockLines_e6Vv\
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/expand \\
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization\
  -H "content-type: application/json" \\
  -d '{"tuple_key":{"relation":"writer","object":"document:planning"}, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'\
\
# Response: {"tree": ...}\
\
```\
\
```codeBlockLines_e6Vv\
expand(\
  "writer", // expand all who has `writer` relation\
  "document:planning", // with the object `document:planning`\
  authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"\
);\
\
Reply: {tree:...}\
\
```\
\
The result of this call will be like\
\
```codeBlockLines_e6Vv\
{\
  "tree":{\
    "root":{\
      "type":"document:planning#writer",\
        "leaf":{\
          "users":{\
            "users":[\
              "user:bob"\
            ]\
          }\
        }\
      }\
    }\
  }\
}\
\
```\
\
From there, we will learn that\
\
- those related to `document:planning` as `reader` are all those who are related to that document as `writer`\
- `bob` is related to `document:planning` as `writer`\
\
## ListObjects [​](https://openfga.dev/docs/interacting/relationship-queries\#listobjects "Direct link to ListObjects")\
\
### What is it for? [​](https://openfga.dev/docs/interacting/relationship-queries\#what-is-it-for-4 "Direct link to What is it for?")\
\
The [ListObjects API](https://openfga.dev/api/service#/Relationship%20Queries/ListObjects) is an API endpoint that returns the list of all the objects of a particular type that a specific user has a specific relationship with.\
\
It provides a solution to the [Search with Permissions (Option 3)](https://openfga.dev/docs/interacting/search-with-permissions#option-3-build-a-list-of-ids-then-search) use case for access-aware filtering on small object collections.\
\
### When to use? [​](https://openfga.dev/docs/interacting/relationship-queries\#when-to-use-4 "Direct link to When to use?")\
\
Use the ListObjects API to get what objects a user can see based on the relationships they have. See [Search with Permissions](https://openfga.dev/docs/interacting/search-with-permissions) for more guidance.\
\
- Node.js\
- Go\
- .NET\
- Python\
- Java\
- CLI\
- curl\
- Pseudocode\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
// import the SDK\
const { OpenFgaClient } = require('@openfga/sdk');\
\
// Initialize the SDK with no auth - see "How to setup SDK client" for more options\
const fgaClient = new OpenFgaClient({\
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example\
  storeId: process.env.FGA_STORE_ID,\
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request\
});\
\
```\
\
```codeBlockLines_e6Vv\
const response = await fgaClient.listObjects({\
  user: "user:bob",\
  relation: "reader",\
  type: "document",\
      contextualTuples: {\
    tuple_keys: [{\
      user: "user:bob",\
      relation: "reader",\
      object: "document:otherdoc"\
    }]\
  },\
}, {\
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA",\
});\
// response.objects = ["document:otherdoc", "document:planning"]\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
import (\
    "os"\
\
    . "github.com/openfga/go-sdk"\
    . "github.com/openfga/go-sdk/client"\
)\
\
func main() {\
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options\
    fgaClient, err := NewSdkClient(&ClientConfiguration{\
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example\
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods\
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request\
    })\
\
    if err != nil {\
    // .. Handle error\
    }\
}\
\
```\
\
```codeBlockLines_e6Vv\
options := ClientListObjectsOptions{\
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),\
}\
\
body := ClientListObjectsRequest{\
    User:     "user:bob",\
    Relation: "reader",\
    Type:     "document",\
    ContextualTuples: []ClientTupleKey{\
        {\
             User:     "user:bob",\
             Relation: "reader",\
             Object:   "document:otherdoc",\
        },\
    },\
}\
\
data, err := fgaClient.ListObjects(context.Background()).\
    Body(body).\
    Options(options).\
    Execute()\
\
// data = { "objects": ["document:otherdoc", "document:planning"] }\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
// import the SDK\
using OpenFga.Sdk.Client;\
using OpenFga.Sdk.Client.Model;\
using OpenFga.Sdk.Model;\
using Environment = System.Environment;\
\
namespace Example;\
\
class Example {\
    public static async Task Main() {\
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options\
        var configuration = new ClientConfiguration() {\
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example\
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods\
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request\
        };\
        var fgaClient = new OpenFgaClient(configuration);\
    }\
}\
\
```\
\
```codeBlockLines_e6Vv\
\
var options = new ClientCheckOptions {\
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",\
};\
var body = new ClientListObjectsRequest {\
    User = "user:bob",\
    Relation = "reader",\
    Type = "document",,\
    ContextualTuples = new List<ClientTupleKey>({\
    new(user: "user:bob", relation: "reader", _object: "document:otherdoc")\
})\
\
};\
\
var response = await fgaClient.ListObjects(body, options);\
\
// response.Objects = ["document:otherdoc", "document:planning"]\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
\
import asyncio\
import os\
import json\
from openfga_sdk.client import ClientConfiguration, OpenFgaClient\
\
async def main():\
    configuration = ClientConfiguration(\
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example\
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods\
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request\
    )\
\
    # Enter a context with an instance of the OpenFgaClient\
    async with OpenFgaClient(configuration) as fga_client:\
        api_response = await fga_client.read_authorization_models()\
        await fga_client.close()\
\
asyncio.run(main())\
\
```\
\
```codeBlockLines_e6Vv\
\
options = {\
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"\
}\
body = ClientListObjectsRequest(\
    user="user:bob",\
    relation="reader",\
    type="document",\
    contextual_tuples=[\
        ClientTuple(user="user:bob", relation="reader", object="document:otherdoc")\
    ],\
)\
\
response = await fga_client.list_objects(body, options)\
\
# response.objects = ["document:otherdoc", "document:planning"]\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
\
import dev.openfga.sdk.api.client.OpenFgaClient;\
import dev.openfga.sdk.api.configuration.ClientConfiguration;\
\
public class Example {\
  public static void main(String[] args) throws Exception {\
      var config = new ClientConfiguration()\
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"\
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()\
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request\
\
      var fgaClient = new OpenFgaClient(config);\
  }\
}\
\
```\
\
```codeBlockLines_e6Vv\
var options = new ClientListObjectsOptions()\
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");\
\
var body = new ClientListObjectsRequest()\
        .user("user:bob")\
        .relation("reader")\
        .type("document")\
        .contextualTupleKeys(\
                List.of(\
                        new ClientTupleKey()\
                                .user("user:bob")\
                                .relation("reader")\
                                ._object("document:otherdoc")\
                ));\
\
var response = fgaClient.listObjects(body, options).get();\
\
// response.getObjects() = ["document:otherdoc", "document:planning"]\
\
```\
\
Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)\
\
```codeBlockLines_e6Vv\
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)\
\
```\
\
```codeBlockLines_e6Vv\
fga query list-objects --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:bob reader document --contextual-tuple "user:bob reader document:otherdoc"\
\
# Response: {"objects": ["document:otherdoc", "document:planning"]}\
\
```\
\
Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)\
\
```codeBlockLines_e6Vv\
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)\
\
```\
\
```codeBlockLines_e6Vv\
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/list-objects \\
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization\
  -H "content-type: application/json" \\
  -d '{\
        "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA",\
        "type": "document",\
        "relation": "reader",\
        "user":"user:bob",\
        "contextual_tuples": {\
          "tuple_keys": [\
            {"object": "document:otherdoc", "relation": "reader", "user": "user:bob"}\
          ]\
        }\
    }'\
\
# Response: {"objects": ["document:otherdoc", "document:planning"]}\
\
```\
\
```codeBlockLines_e6Vv\
listObjects(\
  "user:bob", // list the objects that the user `user:bob`\
  "reader", // has an `reader` relation\
  "document", // and that are of type `document`\
  authorization_model_id = "01HVMMBCMGZNT3SED4Z17ECXCA", // for this particular authorization model id\
  contextual_tuples = [ // Assuming the following is true\
    {user = "user:bob", relation = "reader", object = "document:otherdoc"}\
  ]\
);\
\
Reply: ["document:otherdoc", "document:planning"]\
\
```\
\
There's two variations of the List Objects API.\
\
- The [standard version](https://openfga.dev/api/service#Relationship%20Queries/ListObjects), which waits until all results are ready and sends them in one response.\
- The [streaming version](https://openfga.dev/api/service#Relationship%20Queries/StreamedListObjects), which should be used if you want the individual results as soon as they become available.\
\
### Caveats [​](https://openfga.dev/docs/interacting/relationship-queries\#caveats "Direct link to Caveats")\
\
ListObjects will return the results found within the time allotted ( `listObjectsDeadline`, default: `3s`) up to the maximum number of results configured ( `listObjectsMaxResults`, default: `1000`). See [Configuring the Server](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga)) for more on how to change the default configuration.\
\
- If you set `listObjectsDeadline` to `1s`, the server will spend at most 1 second finding results.\
- If you set `listObjectsMaxResults` to `10`, the server will return, at most, 10 objects.\
\
If the number of objects of that type is high, you should set a high value for `listObjectsDeadline`. If the number of objects of that type the user could have access to is high, you should set a high value for `listObjectsMaxResults`.\
\
## ListUsers [​](https://openfga.dev/docs/interacting/relationship-queries\#listusers "Direct link to ListUsers")\
\
### What is it for? [​](https://openfga.dev/docs/interacting/relationship-queries\#what-is-it-for-5 "Direct link to What is it for?")\
\
The [ListUsers API](https://openfga.dev/api/service#/Relationship%20Queries/ListUsers) is an API endpoint that that returns all users of a given type that have a specified relationship with an object.\
\
### When to use? [​](https://openfga.dev/docs/interacting/relationship-queries\#when-to-use-5 "Direct link to When to use?")\
\
Use the ListUsers API to get which users have a relation to a specific object.\
\
- Node.js\
- Go\
- .NET\
- Python\
- Java\
- CLI\
- curl\
- Pseudocode\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
// import the SDK\
const { OpenFgaClient } = require('@openfga/sdk');\
\
// Initialize the SDK with no auth - see "How to setup SDK client" for more options\
const fgaClient = new OpenFgaClient({\
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example\
  storeId: process.env.FGA_STORE_ID,\
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request\
});\
\
```\
\
```codeBlockLines_e6Vv\
const response = await fgaClient.listUsers({\
  object: {\
    type: "document",\
    id: "planning"\
  },\
  user_filters: [{\
    type: "user"\
  }],\
  relation: "viewer",\
}, {\
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA",\
});\
// response.users = [{"object":{"type":"user","id":"anne"}},{"object":{"type":"user","id":"beth"}}]\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
import (\
    "os"\
\
    . "github.com/openfga/go-sdk"\
    . "github.com/openfga/go-sdk/client"\
)\
\
func main() {\
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options\
    fgaClient, err := NewSdkClient(&ClientConfiguration{\
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example\
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods\
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request\
    })\
\
    if err != nil {\
    // .. Handle error\
    }\
}\
\
```\
\
```codeBlockLines_e6Vv\
options := ClientListUsersOptions{\
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),\
}\
\
userFilters := []openfga.UserTypeFilter{{ Type:"user" }}\
\
body := ClientListUsersRequest{\
    Object:       openfga.Object{\
        Type:    "document",\
        Id:      "planning",\
    },\
    Relation:     "viewer",\
    UserFilters:   userFilters,\
}\
\
data, err := fgaClient.ListUsers(context.Background()).\
    Body(body).\
    Options(options).\
    Execute()\
\
// data.Users = [{"object":{"type":"user","id":"anne"}}, {"object":{"type":"user","id":"beth"}}]\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
// import the SDK\
using OpenFga.Sdk.Client;\
using OpenFga.Sdk.Client.Model;\
using OpenFga.Sdk.Model;\
using Environment = System.Environment;\
\
namespace Example;\
\
class Example {\
    public static async Task Main() {\
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options\
        var configuration = new ClientConfiguration() {\
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example\
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods\
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request\
        };\
        var fgaClient = new OpenFgaClient(configuration);\
    }\
}\
\
```\
\
```codeBlockLines_e6Vv\
\
var options = new ClientWriteOptions {\
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",\
};\
var body = new ClientListUsersRequest {\
    Object = new FgaObject {\
      Type = "document",\
      Id = "planning"\
    },\
    Relation = "viewer",\
    UserFilters = new List<UserTypeFilter> {\
      new() {\
        Type = "user"\
      }\
    }\
\
};\
\
var response = await fgaClient.ListUsers(body, options);\
\
// response.Users = [{"object":{"type":"user","id":"anne"}},{"object":{"type":"user","id":"beth"}}]\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
\
import asyncio\
import os\
import json\
from openfga_sdk.client import ClientConfiguration, OpenFgaClient\
\
async def main():\
    configuration = ClientConfiguration(\
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example\
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods\
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request\
    )\
\
    # Enter a context with an instance of the OpenFgaClient\
    async with OpenFgaClient(configuration) as fga_client:\
        api_response = await fga_client.read_authorization_models()\
        await fga_client.close()\
\
asyncio.run(main())\
\
```\
\
```codeBlockLines_e6Vv\
\
  options = {\
      "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"\
  }\
\
  userFilters = [\
      UserTypeFilter(type="user")\
  ]\
\
  body = ClientListUsersRequest(\
      object=FgaObject(type="document",id="planning"),\
      relation="viewer",\
      user_filters=userFilters,\
  )\
\
  response = await fga_client.list_users(body, options)\
\
  # response.users = [{"object":{"type":"user","id":"anne"}},{"object":{"type":"user","id":"beth"}}]\
\
```\
\
Initialize the SDK\
\
```codeBlockLines_e6Vv\
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.\
\
import dev.openfga.sdk.api.client.OpenFgaClient;\
import dev.openfga.sdk.api.configuration.ClientConfiguration;\
\
public class Example {\
  public static void main(String[] args) throws Exception {\
      var config = new ClientConfiguration()\
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"\
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()\
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request\
\
      var fgaClient = new OpenFgaClient(config);\
  }\
}\
\
```\
\
```codeBlockLines_e6Vv\
var options = new ClientListUsersOptions()\
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");\
\
var userFilters = new ArrayList<UserTypeFilter>() {\
  {\
      add(new UserTypeFilter().type("user"));\
  }\
};\
\
var body = new ClientListUsersRequest()\
        ._object(new FgaObject().type("document").id("planning"))\
        .relation("viewer")\
        .userFilters(userFilters);\
\
var response = fgaClient.listUsers(body, options).get();\
\
// response.getUsers() = [{"object":{"type":"user","id":"anne"}},{"object":{"type":"user","id":"beth"}}]\
\
```\
\
Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)\
\
```codeBlockLines_e6Vv\
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)\
\
```\
\
```codeBlockLines_e6Vv\
fga query list-users --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA --object document:planning --relation viewer --user-filter user\
\
# Response: {"users": [{"object":{"type":"user","id":"anne"}}, {"object":{"type":"user","id":"beth"}}]}\
\
```\
\
Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)\
\
```codeBlockLines_e6Vv\
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)\
\
```\
\
```codeBlockLines_e6Vv\
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/list-users \\
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization\
  -H "content-type: application/json" \\
  -d '{\
        "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA",\
        "object": {\
          "type": "document",\
          "id": "planning",\
        },\
        "relation": "viewer",\
        "user_filters": [\
          {\
            "type": "user"\
          }\
        ]\
    }'\
\
# Response: {"users": [{"object":{"type":"user","id":"anne"}}, {"object":{"type":"user","id":"beth"}}]}\
\
```\
\
```codeBlockLines_e6Vv\
listUsers(\
  user_filter=[ "user" ], // list users of type `user`\
  "viewer", // that have the `viewer` relation\
  "document:planning", // for the object `document:planning`\
  authorization_model_id = "01HVMMBCMGZNT3SED4Z17ECXCA", // for this particular authorization model id\
);\
\
Reply: {"users": [{"object":{"type":"user","id":"anne"}}, {"object":{"type":"user","id":"beth"}}]}\
\
```\
\
### Caveats [​](https://openfga.dev/docs/interacting/relationship-queries\#caveats-1 "Direct link to Caveats")\
\
ListUsers will return the results found within the time allotted ( `listUsersDeadline`, default: `3s`) up to the maximum number of results configured ( `listUsersMaxResults`, default: `1000`). See [Configuring the Server](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga)) for more on how to change the default configuration.\
\
- If you set `listUsersDeadline` to `1s`, the server will spend at most 1 second finding results.\
- If you set `listUsersMaxResults` to `10`, the server will return, at most, 10 objects.\
\
If the number of users matching that filter is high, you should set a high value for `listUsersDeadline`. If the number of users matching that filter that could have that relation with the object is high, you should set a high value for `listUsersMaxResults`.\
\
## Summary [​](https://openfga.dev/docs/interacting/relationship-queries\#summary "Direct link to Summary")\
\
|  | Check | Read | Expand | ListObjects | ListUsers |\
| --- | --- | --- | --- | --- | --- |\
| Purpose | Check if user has particular relationship with certain object | Return all stored relationship tuples that match query | Expand the specific relationship on a particular object | List all objects of a particular type that a user has a specific relationship with | List all users of a particular type that have a relation to a specific object |\
| When to use | Validate if user X can perform Y on object Z | List stored relationships in system | Understand why user X can perform Y on object Z | Filter the objects a user has access to | List the users that have access to an object |\
\
## Related Sections [​](https://openfga.dev/docs/interacting/relationship-queries\#related-sections "Direct link to Related Sections")\
\
Check out this additional content for more information on how to query relationships.\
\
Check API Reference\
\
Official reference guide for the Check API\
\
- [More](https://openfga.dev/api/service#Relationship%20Queries/Check)\
\
Read API Reference\
\
Official reference guide for the Read API\
\
- [More](https://openfga.dev/api/service#Relationship%20Tuples/Read)\
\
Expand API Reference\
\
Official reference guide for the Expand API\
\
- [More](https://openfga.dev/api/service#Relationship%20Queries/Expand)\
\
ListObjects API Reference\
\
Official reference guide for the ListObjects API\
\
- [More](https://openfga.dev/api/service#Relationship%20Queries/ListObjects)\
\
ListUsers API Reference\
\
Official reference guide for the ListUsers API\
\
- [More](https://openfga.dev/api/service#Relationship%20Queries/ListUsers)\
\
- [Before you start](https://openfga.dev/docs/interacting/relationship-queries#before-you-start)\
  - [Direct access](https://openfga.dev/docs/interacting/relationship-queries#direct-access)\
  - [concepts](https://openfga.dev/docs/interacting/relationship-queries#-concepts)\
- [Check](https://openfga.dev/docs/interacting/relationship-queries#check)\
  - [What is it for?](https://openfga.dev/docs/interacting/relationship-queries#what-is-it-for)\
  - [When to use?](https://openfga.dev/docs/interacting/relationship-queries#when-to-use)\
  - [Caveats and when not to use it](https://openfga.dev/docs/interacting/relationship-queries#caveats-and-when-not-to-use-it)\
- [Batch Check](https://openfga.dev/docs/interacting/relationship-queries#batch-check)\
  - [What is it for?](https://openfga.dev/docs/interacting/relationship-queries#what-is-it-for-1)\
  - [When to use?](https://openfga.dev/docs/interacting/relationship-queries#when-to-use-1)\
  - [Caveats and when not to use it](https://openfga.dev/docs/interacting/relationship-queries#caveats-and-when-not-to-use-it-1)\
- [Read](https://openfga.dev/docs/interacting/relationship-queries#read)\
  - [What Is It For?](https://openfga.dev/docs/interacting/relationship-queries#what-is-it-for-2)\
  - [When to use?](https://openfga.dev/docs/interacting/relationship-queries#when-to-use-2)\
  - [Caveats and when not to use it](https://openfga.dev/docs/interacting/relationship-queries#caveats-and-when-not-to-use-it-2)\
- [Expand](https://openfga.dev/docs/interacting/relationship-queries#expand)\
  - [What is it for?](https://openfga.dev/docs/interacting/relationship-queries#what-is-it-for-3)\
  - [When to use?](https://openfga.dev/docs/interacting/relationship-queries#when-to-use-3)\
- [ListObjects](https://openfga.dev/docs/interacting/relationship-queries#listobjects)\
  - [What is it for?](https://openfga.dev/docs/interacting/relationship-queries#what-is-it-for-4)\
  - [When to use?](https://openfga.dev/docs/interacting/relationship-queries#when-to-use-4)\
  - [Caveats](https://openfga.dev/docs/interacting/relationship-queries#caveats)\
- [ListUsers](https://openfga.dev/docs/interacting/relationship-queries#listusers)\
  - [What is it for?](https://openfga.dev/docs/interacting/relationship-queries#what-is-it-for-5)\
  - [When to use?](https://openfga.dev/docs/interacting/relationship-queries#when-to-use-5)\
  - [Caveats](https://openfga.dev/docs/interacting/relationship-queries#caveats-1)\
- [Summary](https://openfga.dev/docs/interacting/relationship-queries#summary)\
- [Related Sections](https://openfga.dev/docs/interacting/relationship-queries#related-sections)

## Multiple Authorizations
[Skip to main content](https://openfga.dev/docs/modeling/multiple-restrictions#__docusaurus_skipToContent_fallback)

On this page

In this guide we are going to model system that requires multiple authorizations before allowing users to perform actions on particular objects using [OpenFGA](https://openfga.dev/docs/fga).
For example, _[users](https://openfga.dev/docs/concepts#what-is-a-user)_ are allowed to delete a `document` if both of these conditions are met:

- they are a member of the organization that owns the document
- they have writer permissions on the document

In this way, we prevent other users from deleting such document.

When to use

This is useful when:

- Limiting certain actions (such as deleting or reading sensitive document) to privileged users.
- Adding restrictions and requiring multiple authorization paths before granting access.

## Before You Start [​](https://openfga.dev/docs/modeling/multiple-restrictions\#before-you-start "Direct link to Before You Start")

In order to understand this guide correctly you must be familiar with some [OpenFGA Concepts](https://openfga.dev/docs/concepts) and know how to develop the things that we will list below.

You will start with the _[authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model)_ below,
it represents a `document` _[type](https://openfga.dev/docs/concepts#what-is-a-type)_ that can have users
**[related](https://openfga.dev/docs/concepts#what-is-a-relation)** as `writer` and `organizations` related as `owner`.
Document's `can_write` relation is based on whether user is a writer to the document. The `organization` type can have users related as `member`.

Let us also assume that we have:

- A `document` called "planning" owned by the ABC `organization`.
- Becky is a member of the ABC `organization`.
- Carl is a member of the XYZ `organization`.
- Becky and Carl both have `writer` access to the "planning" `document`.

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define owner: [organization]
    define writer: [user]
    define can_write: writer

type organization
  relations
    define member: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "document",\
      "relations": {\
        "owner": {\
          "this": {}\
        },\
        "writer": {\
          "this": {}\
        },\
        "can_write": {\
          "computedUserset": {\
            "object": "",\
            "relation": "writer"\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "owner": {\
            "directly_related_user_types": [\
              {\
                "type": "organization"\
              }\
            ]\
          },\
          "writer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "organization",\
      "relations": {\
        "member": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "member": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

The current state of the system is represented by the following relationship tuples being in the system already:

```codeBlockLines_e6Vv
[// organization ABC is the owner of planning document\
  {\
  "_description": "organization ABC is the owner of planning document",\
  "user": "organization:ABC",\
  "relation": "owner",\
  "object": "document:planning"\
}// Becky is a writer to the planning document\
  {\
  "_description": "Becky is a writer to the planning document",\
  "user": "user:becky",\
  "relation": "writer",\
  "object": "document:planning"\
}// Carl is a writer to the planning document\
  {\
  "_description": "Carl is a writer to the planning document",\
  "user": "user:carl",\
  "relation": "writer",\
  "object": "document:planning"\
}// Becky is a member of the organization ABC\
  {\
  "_description": "Becky is a member of the organization ABC",\
  "user": "user:becky",\
  "relation": "member",\
  "object": "organization:ABC"\
}// Carl is a member of the organization XYZ\
  {\
  "_description": "Carl is a member of the organization XYZ",\
  "user": "user:carl",\
  "relation": "member",\
  "object": "organization:XYZ"\
}]

```

info

Note that we assign the organization, not the organization's members, as owner to the planning document.

* * *

In addition, you will need to know the following:

### Modeling Parent-Child Objects [​](https://openfga.dev/docs/modeling/multiple-restrictions\#modeling-parent-child-objects "Direct link to Modeling Parent-Child Objects")

You need to know how to model access based on parent-child relationships, e.g.: folders and documents. [Learn more →](https://openfga.dev/docs/modeling/parent-child)

### Modeling Roles And Permissions [​](https://openfga.dev/docs/modeling/multiple-restrictions\#modeling-roles-and-permissions "Direct link to Modeling Roles And Permissions")

You need to know how to model roles for users at the object level and model permissions for those roles. [Learn more →](https://openfga.dev/docs/modeling/roles-and-permissions)

### OpenFGA Concepts [​](https://openfga.dev/docs/modeling/multiple-restrictions\#-concepts "Direct link to -concepts")

- A [Type](https://openfga.dev/docs/concepts#what-is-a-type): a class of objects that have similar characteristics
- A [User](https://openfga.dev/docs/concepts#what-is-a-user): an entity in the system that can be related to an object
- A [Relation](https://openfga.dev/docs/concepts#what-is-a-relation): is a string defined in the type definition of an authorization model that defines the possibility of a relationship between an object of the same type as the type definition and a user in the system
- An [Object](https://openfga.dev/docs/concepts#what-is-an-object): represents an entity in the system. Users' relationships to it can be define through relationship tuples and the authorization model
- A [Relationship Tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple): a grouping consisting of a user, a relation and an object stored in OpenFGA
- [Intersection Operator](https://openfga.dev/docs/configuration-language#the-intersection-operator): the intersection operator can be used to indicate a relationship exists if the user is in all the sets of users

## Step By Step [​](https://openfga.dev/docs/modeling/multiple-restrictions\#step-by-step "Direct link to Step By Step")

With the above authorization model and relationship tuples, OpenFGA will correctly respond with `{"allowed":true}` when \* [check](https://openfga.dev/docs/concepts#what-is-a-check-request)\*is called to see if Carl and Becky can write this `document`.

We can verify that by issuing two check requests:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:becky',
    relation: 'can_write',
    object: 'document:planning',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:becky",
    Relation: "can_write",
    Object:   "document:planning",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:becky",
    Relation = "can_write",
    Object = "document:planning",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:becky",
    relation="can_write",
    object="document:planning",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:becky")
        .relation("can_write")
        ._object("document:planning");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:becky can_write document:planning

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:becky","relation":"can_write","object":"document:planning"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:becky", // check if the user `user:becky`
  relation = "can_write", // has an `can_write` relation
  object = "document:planning", // with the object `document:planning`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:becky related to document:planning as can_write?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:carl',
    relation: 'can_write',
    object: 'document:planning',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:carl",
    Relation: "can_write",
    Object:   "document:planning",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:carl",
    Relation = "can_write",
    Object = "document:planning",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:carl",
    relation="can_write",
    object="document:planning",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:carl")
        .relation("can_write")
        ._object("document:planning");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:carl can_write document:planning

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:carl","relation":"can_write","object":"document:planning"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:carl", // check if the user `user:carl`
  relation = "can_write", // has an `can_write` relation
  object = "document:planning", // with the object `document:planning`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:carl related to document:planning as can_write?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

What we would like to do is offer a way so that a document can be written by Becky and Carl, but only writers who are also members of the organization that owns the document can remove it.

To do this, we need to:

1. [Add can\_delete relation to only allow writers that are members of the ownership organization](https://openfga.dev/docs/modeling/multiple-restrictions#01-add-can_delete-relation-to-only-allow-writers-that-are-members-of-the-ownership-organization)
2. [Verify that our solutions work](https://openfga.dev/docs/modeling/multiple-restrictions#02-verify-that-our-solutions-work)

### 01\. Add can\_delete Relation To Only Allow Writers That Are Members Of The Ownership Organization [​](https://openfga.dev/docs/modeling/multiple-restrictions\#01-add-can_delete-relation-to-only-allow-writers-that-are-members-of-the-ownership-organization "Direct link to 01. Add can_delete Relation To Only Allow Writers That Are Members Of The Ownership Organization")

The first step is to add the relation definition for `can_delete` so that it requires users to be both `writer` and `member` of the owner. This is accomplished via the keyword [`and`](https://openfga.dev/docs/configuration-language#the-intersection-operator).

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define owner: [organization]
    define writer: [user]
    define can_write: writer
    define can_delete: writer and member from owner

type organization
  relations
    define member: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "document",\
      "relations": {\
        "owner": {\
          "this": {}\
        },\
        "writer": {\
          "this": {}\
        },\
        "can_write": {\
          "computedUserset": {\
            "object": "",\
            "relation": "writer"\
          }\
        },\
        "can_delete": {\
          "intersection": {\
            "child": [\
              {\
                "computedUserset": {\
                  "object": "",\
                  "relation": "writer"\
                }\
              },\
              {\
                "tupleToUserset": {\
                  "tupleset": {\
                    "object": "",\
                    "relation": "owner"\
                  },\
                  "computedUserset": {\
                    "object": "",\
                    "relation": "member"\
                  }\
                }\
              }\
            ]\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "owner": {\
            "directly_related_user_types": [\
              {\
                "type": "organization"\
              }\
            ]\
          },\
          "writer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "organization",\
      "relations": {\
        "member": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "member": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

### 02\. Verify That Our Solutions Work [​](https://openfga.dev/docs/modeling/multiple-restrictions\#02-verify-that-our-solutions-work "Direct link to 02. Verify That Our Solutions Work")

To verify that our solutions work, we need to check that Becky can delete the planning document because she is a writer AND she is a member of organization:ABC that owns the planning document.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:becky',
    relation: 'can_delete',
    object: 'document:planning',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:becky",
    Relation: "can_delete",
    Object:   "document:planning",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:becky",
    Relation = "can_delete",
    Object = "document:planning",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:becky",
    relation="can_delete",
    object="document:planning",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:becky")
        .relation("can_delete")
        ._object("document:planning");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:becky can_delete document:planning

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:becky","relation":"can_delete","object":"document:planning"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:becky", // check if the user `user:becky`
  relation = "can_delete", // has an `can_delete` relation
  object = "document:planning", // with the object `document:planning`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:becky related to document:planning as can_delete?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

However, Carl cannot delete the planning document because although he is a writer, Carl is not a member of organization:ABC that owns the planning document.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:carl',
    relation: 'can_delete',
    object: 'document:planning',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:carl",
    Relation: "can_delete",
    Object:   "document:planning",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:carl",
    Relation = "can_delete",
    Object = "document:planning",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:carl",
    relation="can_delete",
    object="document:planning",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:carl")
        .relation("can_delete")
        ._object("document:planning");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:carl can_delete document:planning

# Response: {"allowed":false}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:carl","relation":"can_delete","object":"document:planning"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:carl", // check if the user `user:carl`
  relation = "can_delete", // has an `can_delete` relation
  object = "document:planning", // with the object `document:planning`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:carl related to document:planning as can_delete?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

## Related Sections [​](https://openfga.dev/docs/modeling/multiple-restrictions\#related-sections "Direct link to Related Sections")

Check the following sections for more on how to model privileged access.

Modeling: User Groups

Learn about how to add group members.

- [More](https://openfga.dev/docs/modeling/user-groups)

Modeling: Blocklists

Learn about how to set block lists.

- [More](https://openfga.dev/docs/modeling/blocklists)

Modeling: Public Access

Learn about model public access.

- [More](https://openfga.dev/docs/modeling/public-access)

- [Before You Start](https://openfga.dev/docs/modeling/multiple-restrictions#before-you-start)
  - [Modeling Parent-Child Objects](https://openfga.dev/docs/modeling/multiple-restrictions#modeling-parent-child-objects)
  - [Modeling Roles And Permissions](https://openfga.dev/docs/modeling/multiple-restrictions#modeling-roles-and-permissions)
  - [Concepts](https://openfga.dev/docs/modeling/multiple-restrictions#-concepts)
- [Step By Step](https://openfga.dev/docs/modeling/multiple-restrictions#step-by-step)
  - [01\. Add can\_delete Relation To Only Allow Writers That Are Members Of The Ownership Organization](https://openfga.dev/docs/modeling/multiple-restrictions#01-add-can_delete-relation-to-only-allow-writers-that-are-members-of-the-ownership-organization)
  - [02\. Verify That Our Solutions Work](https://openfga.dev/docs/modeling/multiple-restrictions#02-verify-that-our-solutions-work)
- [Related Sections](https://openfga.dev/docs/modeling/multiple-restrictions#related-sections)

## Transactional Writes Guide
[Skip to main content](https://openfga.dev/docs/interacting/transactional-writes#__docusaurus_skipToContent_fallback)

On this page

UsingOpenFGA, you can update multiple [relationship tuples](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple) in a single transaction.

When to use

Updating multiple relationship tuples can keep your system state consistent.

## Before you start [​](https://openfga.dev/docs/interacting/transactional-writes\#before-you-start "Direct link to Before you start")

Familiarize yourself with basic [OpenFGA Concepts](https://openfga.dev/docs/concepts) before completing this guide.

In the following [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model), there is [type](https://openfga.dev/docs/concepts#what-is-a-type) called `tweet` that can have a `reader`. There is another type called `user` that can have a `follower` and `followed_by` relationship.

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type tweet
  relations
    define viewer: [user, user:*, user#follower]

type user
  relations
    define follower: [user]
    define followed_by: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "tweet",\
      "relations": {\
        "viewer": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "user",\
                "wildcard": {}\
              },\
              {\
                "type": "user",\
                "relation": "follower"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "user",\
      "relations": {\
        "follower": {\
          "this": {}\
        },\
        "followed_by": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "follower": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "followed_by": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

* * *

In addition:

### Direct access [​](https://openfga.dev/docs/interacting/transactional-writes\#direct-access "Direct link to Direct access")

Creating an authorization model and a relationship tuple grants a user access to an object. To learn more, [read about Direct Access.](https://openfga.dev/docs/modeling/direct-access)

### Modeling public access [​](https://openfga.dev/docs/interacting/transactional-writes\#modeling-public-access "Direct link to Modeling public access")

The following example uses public access. To learn more, [read about Public Access.](https://openfga.dev/docs/modeling/direct-access)

### OpenFGA concepts [​](https://openfga.dev/docs/interacting/transactional-writes\#-concepts "Direct link to -concepts")

- A [Type](https://openfga.dev/docs/concepts#what-is-a-type): a class of objects that have similar characteristics
- A [User](https://openfga.dev/docs/concepts#what-is-a-user): an entity in the system that can be related to an object
- A [Relation](https://openfga.dev/docs/concepts#what-is-a-relation): is a string defined in the type definition of an authorization model that defines the possibility of a relationship between an object of the same type as the type definition and a user in the system
- A [Relation](https://openfga.dev/docs/concepts#what-is-a-relation): a string defined in the type definition of an authorization model that defines the possibility of a relationship between an object of the same type as the type definition and a user in the system
- A [Relationship Tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple): a group stored in OpenFGA that consists of a user, a relation, and an object

## Step by step [​](https://openfga.dev/docs/interacting/transactional-writes\#step-by-step "Direct link to Step by step")

### 01\. Add and remove relationship tuples in the same transaction [​](https://openfga.dev/docs/interacting/transactional-writes\#01-add-and-remove-relationship-tuples-in-the-same-transaction "Direct link to 01. Add and remove relationship tuples in the same transaction")

A call to the Write API can add or delete tuples in your store. For example, the following tuple makes `tweet:1` public by making everyone a `viewer`:

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"user:*","relation":"viewer","object":"tweet:1"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             User: "user:*",
             Relation: "viewer",
             Object: "tweet:1",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
       new() {
                  User = "user:*",
                  Relation = "viewer",
                  Object = "tweet:1"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    user="user:*",\
                    relation="viewer",\
                    object="tweet:1",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                new ClientTupleKey()
                        .user("user:*")
                        .relation("viewer")
                        ._object("tweet:1")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"user":"user:*","relation":"viewer","object":"tweet:1"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:* viewer tweet:1

```

```codeBlockLines_e6Vv
write([\
    {\
      "user":"user:*",\
      "relation":"viewer",\
      "object":"tweet:1"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

Deleting the previous tuple converts this `tweet` to private:

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  deletes: [\
      { user: 'user:*', relation: 'viewer', object: 'tweet:1'}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Deletes: []ClientTupleKeyWithoutCondition{
        {
             User: "user:*",
             Relation: "viewer",
             Object: "tweet:1",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Deletes = new List<ClientTupleKeyWithoutCondition>() {
    new() { User = "user:*", Relation = "viewer", Object = "tweet:1" }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        deletes=[\
                ClientTuple(\
                    user="user:*",\
                    relation="viewer",\
                    object="tweet:1",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .deletes(List.of(
                new ClientTupleKey()
                        .user("user:*")
                        .relation("viewer")
                        ._object("tweet:1")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"deletes": { "tuple_keys" : [{"user":"user:*","relation":"viewer","object":"tweet:1"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv

fga tuple delete --store-id=${FGA_STORE_ID} user:* viewer tweet:1

```

```codeBlockLines_e6Vv

delete([\
    {\
      "user":"user:*",\
      "relation":"viewer",\
      "object":"tweet:1"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

By removing the tuple, we made the tweet visible to no-one, which may not be what we want.

Limitations on duplicate tuples in a single request

When using the Write API, you cannot include the same tuple (same user, relation, and object) in both the writes and deletes arrays within a single request. The API will return an error with code `cannot_allow_duplicate_tuples_in_one_request` if duplicate tuples are detected.

For example, this request would fail:

```codeBlockLines_e6Vv
curl -X POST 'http://localhost:8080/stores/{store_id}/write' \
  -H 'content-type: application/json' \
  --data '{
    "writes": {
      "tuple_keys": [{\
        "user": "user:anne",\
        "relation": "member",\
        "object": "group:2"\
      }]
    },
    "deletes": {
      "tuple_keys": [{\
        "user": "user:anne",\
        "relation": "member",\
        "object": "group:2"\
      }]
    }
  }'

```

The Write API allows you to send up to 100 unique tuples in the request. (This limit applies to the sum of both writes and deletes in that request). This means we can submit one API call that converts the `tweet` from public to visible to only the `user`'s followers.

- Node.js
- Go
- .NET
- Python
- Java
- curl
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // Anne's followers can view tweet:1\
      {"_description":"Anne's followers can view tweet:1","user":"user:anne#follower","relation":"viewer","object":"tweet:1"}\
  ],
  deletes: [\
      // tweet:1 is no longer viewable by everyone (*)\
      { user: 'user:*', relation: 'viewer', object: 'tweet:1'}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             // Anne's followers can view tweet:1
             User: "user:anne#follower",
             Relation: "viewer",
             Object: "tweet:1",
        },
    },
    Deletes: []ClientTupleKeyWithoutCondition{
        {
             // tweet:1 is no longer viewable by everyone (*)
             User: "user:*",
             Relation: "viewer",
             Object: "tweet:1",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
    // Anne's followers can view tweet:1
       new() {
                  User = "user:anne#follower",
                  Relation = "viewer",
                  Object = "tweet:1"
              }
  },
  Deletes = new List<ClientTupleKeyWithoutCondition>() {
    // tweet:1 is no longer viewable by everyone (*)
    new() { User = "user:*", Relation = "viewer", Object = "tweet:1" }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    # Anne's followers can view tweet:1\
                    user="user:anne#follower",\
                    relation="viewer",\
                    object="tweet:1",\
                ),\
        ],    deletes=[\
                ClientTuple(\
                    # tweet:1 is no longer viewable by everyone (*)\
                    user="user:*",\
                    relation="viewer",\
                    object="tweet:1",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                // Anne's followers can view tweet:1
                new ClientTupleKey()
                        .user("user:anne#follower")
                        .relation("viewer")
                        ._object("tweet:1")
        ))
        .deletes(List.of(
                // tweet:1 is no longer viewable by everyone (*)
                new ClientTupleKey()
                        .user("user:*")
                        .relation("viewer")
                        ._object("tweet:1")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"_description":"Anne's followers can view tweet:1","user":"user:anne#follower","relation":"viewer","object":"tweet:1"}] },"deletes": { "tuple_keys" : [{"_description":"tweet:1 is no longer viewable by everyone (*)","user":"user:*","relation":"viewer","object":"tweet:1"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

```codeBlockLines_e6Vv
write([\
    // Anne's followers can view tweet:1\
    {\
      "user":"user:anne#follower",\
      "relation":"viewer",\
      "object":"tweet:1"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"),
delete([\
    // tweet:1 is no longer viewable by everyone (*)\
    {\
      "user":"user:*",\
      "relation":"viewer",\
      "object":"tweet:1"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

### 02\. Add multiple related relationship tuples in the same transaction [​](https://openfga.dev/docs/interacting/transactional-writes\#02-add-multiple-related-relationship-tuples-in-the-same-transaction "Direct link to 02. Add multiple related relationship tuples in the same transaction")

Sending multiple tuples per request can also help maintain consistency. For example, if `anne` follows `becky`, you can save the following two tuples or neither of them:

```codeBlockLines_e6Vv
[// Anne is a follower of Becky\
  {\
  "_description": "Anne is a follower of Becky",\
  "user": "user:anne",\
  "relation": "follower",\
  "object": "user:becky"\
}// Becky is followed by Anne\
  {\
  "_description": "Becky is followed by Anne",\
  "user": "user:becky",\
  "relation": "followed_by",\
  "object": "user:anne"\
}]

```

info

In this case, the type `user` exists because users can be related to each other, so users now are a type in the system.

The OpenFGA service attempts to perform all the changes sent in a single Write API call in one transaction. If it cannot complete all the changes, it rejects all of them.

## Related Sections [​](https://openfga.dev/docs/interacting/transactional-writes\#related-sections "Direct link to Related Sections")

Check the following sections for more on how to update tuples.

Update relationship tuples in SDK

Learn about how to update relationship tuples in SDK.

- [More](https://openfga.dev/docs/getting-started/update-tuples)

OpenFGA API

Details on the write API in the OpenFGA reference guide.

- [More](https://openfga.dev/api/service#Relationship%20Tuples/Write)

- [Before you start](https://openfga.dev/docs/interacting/transactional-writes#before-you-start)
  - [Direct access](https://openfga.dev/docs/interacting/transactional-writes#direct-access)
  - [Modeling public access](https://openfga.dev/docs/interacting/transactional-writes#modeling-public-access)
  - [concepts](https://openfga.dev/docs/interacting/transactional-writes#-concepts)
- [Step by step](https://openfga.dev/docs/interacting/transactional-writes#step-by-step)
  - [01\. Add and remove relationship tuples in the same transaction](https://openfga.dev/docs/interacting/transactional-writes#01-add-and-remove-relationship-tuples-in-the-same-transaction)
  - [02\. Add multiple related relationship tuples in the same transaction](https://openfga.dev/docs/interacting/transactional-writes#02-add-multiple-related-relationship-tuples-in-the-same-transaction)
- [Related Sections](https://openfga.dev/docs/interacting/transactional-writes#related-sections)

## OpenFGA Authorization System
[Skip to main content](https://openfga.dev/docs/fga#__docusaurus_skipToContent_fallback)

On this page

OpenFGA is a scalable open source authorization system for developers that allows implementing authorization for any kind of application and smoothly evolve as complexity increases over time. It is owned by the [Cloud Native Computing Foundation](https://cncf.io/).

Inspired by [Google’s Zanzibar](https://zanzibar.academy/), Google’s internal authorization system, OpenFGA relies on Relationship-Based Access Control, which allows developers to easily implement Role-Based Access Control and provides additional capabilities to implement Attribute-Based Access Control. You can learn more about different authorization concepts [here](https://openfga.dev/docs/authorization-concepts).

## Benefits [​](https://openfga.dev/docs/fga\#benefits "Direct link to Benefits")

OpenFGA provides developers the following benefits:

- Move authorization logic outside of application code, making it easier to write, change and audit.
- Increase velocity by standardizing on a single authorization solution.
- Centralize authorization decisions and audit logs making it simpler to comply with security and compliance requirements.
- Help their products to move faster because it is simpler to evolve authorization policies.

## Features [​](https://openfga.dev/docs/fga\#features "Direct link to Features")

OpenFGA helps developers achieve those benefits with features as:

- Support for multiple [stores](https://openfga.dev/docs/concepts#what-is-a-store) that allow authorization management in different environments (prod/testing/dev) and use cases (internal apps, external apps, infrastructure).
- Support for some ABAC scenarios with [Contextual Tuples](https://openfga.dev/docs/modeling/token-claims-contextual-tuples) and [Conditional Relationship Tuples](https://openfga.dev/docs/modeling/conditions).
- SDKs for [Java](https://github.com/openfga/java-sdk), [.NET](https://github.com/openfga/dotnet-sdk), [Javascript](https://github.com/openfga/js-sdk), [Go](https://github.com/openfga/go-sdk), and [Python](https://github.com/openfga/python-sdk).
- [HTTP](https://docs.fga.dev/api/service) and [gRPC](https://buf.build/openfga/api) APIs.
- Support for being run as a library, from with a Go based service.
- Support for using Postgres, MySQL or SQLite as the production datastore, as well as an in-memory datastore for non-production usage.
- [A Command Line Interface tool](https://openfga.dev/docs/getting-started/cli) for managing OpenFGA stores, test models, import/export models, and data.
- Github Actions for [testing](https://github.com/marketplace/actions/openfga-model-testing-action) and [deploying](https://github.com/marketplace/actions/openfga-model-deploy-action) models.
- A [Visual Studio Code Extension](https://marketplace.visualstudio.com/items?itemName=openfga.openfga-vscode) with syntax highlighting and validation of FGA models and tests.
- [Helm Charts](https://github.com/openfga/helm-charts) to easily deploy to Kubernetes.
- [OpenTelemetry](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga#telemetry) support to integrate it with your monitoring infrastructure.

## Related Sections [​](https://openfga.dev/docs/fga\#related-sections "Direct link to Related Sections")

Check the following sections to learn more about OpenFGA.

Authorization Concepts

Learn about Authorization.

- [More](https://openfga.dev/docs/authorization-concepts)

Product Concepts

Learn about OpenFGA.

- [More](https://openfga.dev/docs/concepts)

Modeling: Getting Started

Learn about how to get started with modeling your permission system in OpenFGA.

- [More](https://openfga.dev/docs/modeling/getting-started)

- [Benefits](https://openfga.dev/docs/fga#benefits)
- [Features](https://openfga.dev/docs/fga#features)
- [Related Sections](https://openfga.dev/docs/fga#related-sections)

## Public Access Guide
[Skip to main content](https://openfga.dev/docs/modeling/public-access#__docusaurus_skipToContent_fallback)

On this page

In this guide you will learn how to grant public access to an [object](https://openfga.dev/docs/concepts#what-is-an-object), such as a certain document, using [type bound public access](https://openfga.dev/docs/concepts#what-is-type-bound-public-access).

When to use

Public access allows your application to grant every user in the system access to an object. You would add a relationship tuple with type-bound public access when:

- sharing a `document` publicly to indicate that everyone can `view` it
- a public `poll` is created to indicate that anyone can `vote` on it
- a blog `post` is published and anyone should be able to `read` it
- a `video` is made public for anyone to `watch`

## Before You Start [​](https://openfga.dev/docs/modeling/public-access\#before-you-start "Direct link to Before You Start")

In order to understand this guide correctly you must be familiar with some [OpenFGA Concepts](https://openfga.dev/docs/concepts) and know how to develop the things that we will list below.

Assume that you have the following [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model).

You have a [type](https://openfga.dev/docs/concepts#what-is-a-type) called `document` that can have a `view` relation.

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define view: [user, user:*]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "document",\
      "relations": {\
        "view": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "view": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "user",\
                "wildcard": {}\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

* * *

In addition, you will need to know the following:

### Direct Access [​](https://openfga.dev/docs/modeling/public-access\#direct-access "Direct link to Direct Access")

You need to know how to create an authorization model and create a relationship tuple to grant a user access to an object. [Learn more →](https://openfga.dev/docs/modeling/direct-access)

### OpenFGA Concepts [​](https://openfga.dev/docs/modeling/public-access\#-concepts "Direct link to -concepts")

- A [Type](https://openfga.dev/docs/concepts#what-is-a-type): a class of objects that have similar characteristics
- A [User](https://openfga.dev/docs/concepts#what-is-a-user): an entity in the system that can be related to an object
- A [Relation](https://openfga.dev/docs/concepts#what-is-a-relation): is a string defined in the type definition of an authorization model that defines the possibility of a relationship between an object of the same type as the type definition and a user in the system
- An [Object](https://openfga.dev/docs/concepts#what-is-an-object): represents an entity in the system. Users' relationships to it can be define through relationship tuples and the authorization model
- A [Relationship Tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple): a grouping consisting of a user, a relation and an object stored in OpenFGA
- A [Type Bound Public Access](https://openfga.dev/docs/concepts#what-is-type-bound-public-access): is a special OpenFGA concept (represented by `<type>:*`) can be used in relationship tuples to represent every object of that type

caution

Make sure to use unique ids for each object and user within your application domain when creating relationship tuples for OpenFGA. We are using first names and simple ids to just illustrate an easy-to-follow example.

## Step By Step [​](https://openfga.dev/docs/modeling/public-access\#step-by-step "Direct link to Step By Step")

In previous guides, we have shown how to indicate that objects are related to users or objects. In some cases, you might want to indicate that everyone is related to an object (for example when sharing a document publicly).

### 01\. Create A Relationship Tuple [​](https://openfga.dev/docs/modeling/public-access\#01-create-a-relationship-tuple "Direct link to 01. Create A Relationship Tuple")

To do this we need to create a relationship tuple using the [type bound public access](https://openfga.dev/docs/concepts#what-is-type-bound-public-access). The type bound public access syntax is used to indicate that all users of a particular type have a relation to a specific object.

Let us create a relationship tuple that states: **any user can view document:company-psa.doc**

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // user:* denotes every object of type user\
      {"_description":"user:* denotes every object of type user","user":"user:*","relation":"view","object":"document:company-psa.doc"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             // user:* denotes every object of type user
             User: "user:*",
             Relation: "view",
             Object: "document:company-psa.doc",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
    // user:* denotes every object of type user
       new() {
                  User = "user:*",
                  Relation = "view",
                  Object = "document:company-psa.doc"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    # user:* denotes every object of type user\
                    user="user:*",\
                    relation="view",\
                    object="document:company-psa.doc",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                // user:* denotes every object of type user
                new ClientTupleKey()
                        .user("user:*")
                        .relation("view")
                        ._object("document:company-psa.doc")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"_description":"user:* denotes every object of type user","user":"user:*","relation":"view","object":"document:company-psa.doc"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:* view document:company-psa.doc

```

```codeBlockLines_e6Vv
write([\
    // user:* denotes every object of type user\
    {\
      "user":"user:*",\
      "relation":"view",\
      "object":"document:company-psa.doc"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

Wildcard syntax usage

Please note that type-bound public access is not a wildcard or a regex expression.

**You cannot use the `<type>:*` syntax in the tuple's object field.**

The following syntax is invalid:

```codeBlockLines_e6Vv
[// It is invalid to use this syntax in the object field. The below relationship tuple is invalid and does not mean that Bob can view all documents.\
  {\
  "_description": "It is invalid to use this syntax in the object field. The below relationship tuple is invalid and does not mean that Bob can view all documents.",\
  "user": "user:bob",\
  "relation": "view",\
  "object": "document:*"\
}]

```

Wildcard syntax usage

**You cannot use `<type>:*` as part of a userset in the tuple's user field.**

The following syntax is invalid:

```codeBlockLines_e6Vv
[// It is invalid to use this syntax as part of a userset. The below relationship tuple is invalid and does not mean that members of any org can view the company-psa document.\
  {\
  "_description": "It is invalid to use this syntax as part of a userset. The below relationship tuple is invalid and does not mean that members of any org can view the company-psa document.",\
  "user": "org:*#member",\
  "relation": "view",\
  "object": "document:company-psa.doc"\
}]

```

### 02\. Check That The Relationship Exists [​](https://openfga.dev/docs/modeling/public-access\#02-check-that-the-relationship-exists "Direct link to 02. Check That The Relationship Exists")

Once the above _relationship tuple_ is added, we can [check](https://openfga.dev/docs/concepts#what-is-a-check-request) if **bob** cab `view` `document`: **company-psa.doc**. OpenFGA will return `{ "allowed": true }` even though no relationship tuple linking **bob** to the document was added. That is because the relationship tuple with `user:*` as the user made it so every object of type user (such as `user:bob`) can `view` the document, making it public.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:bob',
    relation: 'view',
    object: 'document:company-psa.doc',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:bob",
    Relation: "view",
    Object:   "document:company-psa.doc",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:bob",
    Relation = "view",
    Object = "document:company-psa.doc",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:bob",
    relation="view",
    object="document:company-psa.doc",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:bob")
        .relation("view")
        ._object("document:company-psa.doc");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:bob view document:company-psa.doc

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:bob","relation":"view","object":"document:company-psa.doc"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:bob", // check if the user `user:bob`
  relation = "view", // has an `view` relation
  object = "document:company-psa.doc", // with the object `document:company-psa.doc`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:bob related to document:company-psa.doc as view?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

## Related Sections [​](https://openfga.dev/docs/modeling/public-access\#related-sections "Direct link to Related Sections")

Check the following sections for more on how to model with OpenFGA.

Modeling: Getting Started

Learn about how to get started with modeling.

- [More](https://openfga.dev/docs/modeling/getting-started)

Configuration Language

Learn about OpenFGA Configuration Language.

- [More](https://openfga.dev/docs/configuration-language)

Modeling Blocklists

Learn about model block lists.

- [More](https://openfga.dev/docs/modeling/blocklists)

- [Before You Start](https://openfga.dev/docs/modeling/public-access#before-you-start)
  - [Direct Access](https://openfga.dev/docs/modeling/public-access#direct-access)
  - [Concepts](https://openfga.dev/docs/modeling/public-access#-concepts)
- [Step By Step](https://openfga.dev/docs/modeling/public-access#step-by-step)
  - [01\. Create A Relationship Tuple](https://openfga.dev/docs/modeling/public-access#01-create-a-relationship-tuple)
  - [02\. Check That The Relationship Exists](https://openfga.dev/docs/modeling/public-access#02-check-that-the-relationship-exists)
- [Related Sections](https://openfga.dev/docs/modeling/public-access#related-sections)

## Authorization Model Building Blocks
[Skip to main content](https://openfga.dev/docs/modeling/building-blocks#__docusaurus_skipToContent_fallback)

This section has guides that on the building blocks of authorization model.

When to use

The content in this section is useful:

- If you are starting with OpenFGA and want to learn the building blocks that can be used to build any model.

Direct Relationships

Learn to model relationships that may or may not be assigned directly to individual users.

- [Click to navigate](https://openfga.dev/docs/modeling/building-blocks/direct-relationships)

Concentric Relationships

Learn to model nested relationships in your application.

- [Click to navigate](https://openfga.dev/docs/modeling/building-blocks/concentric-relationships)

Object to Object Relationships

Learn to model your application with objects that are not specifically tied to a user.

- [Click to navigate](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships)

Usersets

Learn to model your application by assigning relationships to groups of users.

- [Click to navigate](https://openfga.dev/docs/modeling/building-blocks/usersets)

## OpenFGA Tags
[Skip to main content](https://openfga.dev/blog/tags#__docusaurus_skipToContent_fallback)

# Tags

## C [​](https://openfga.dev/blog/tags\#C "Direct link to C")

- [conferences1](https://openfga.dev/blog/tags/conferences)

* * *

## F [​](https://openfga.dev/blog/tags\#F "Direct link to F")

- [features4](https://openfga.dev/blog/tags/features)

* * *

## K [​](https://openfga.dev/blog/tags\#K "Direct link to K")

- [kubecon1](https://openfga.dev/blog/tags/kubecon)

* * *

## N [​](https://openfga.dev/blog/tags\#N "Direct link to N")

- [newsletter14](https://openfga.dev/blog/tags/newsletter)

* * *

## O [​](https://openfga.dev/blog/tags\#O "Direct link to O")

- [openfga4](https://openfga.dev/blog/tags/openfga)

* * *

## Update Relationship Tuples
[Skip to main content](https://openfga.dev/docs/getting-started/update-tuples#__docusaurus_skipToContent_fallback)

On this page

This section will illustrate how to update _[relationship tuples](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple)_.

## Before you start [​](https://openfga.dev/docs/getting-started/update-tuples\#before-you-start "Direct link to Before you start")

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk).
3. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model).
4. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk).
3. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model).
4. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk).
3. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model).
4. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk).
3. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model).
4. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk).
3. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model).
4. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model).
3. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model).
3. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

## Step by step [​](https://openfga.dev/docs/getting-started/update-tuples\#step-by-step "Direct link to Step by step")

Assume that you want to add user `user:anne` to have relationship `reader` with object `document:Z`

```codeBlockLines_e6Vv
{
  user: 'user:anne',
  relation: 'reader',
  object: 'document:Z',
}

```

### 01\. Configure the OpenFGA API client [​](https://openfga.dev/docs/getting-started/update-tuples\#01-configure-the--api-client "Direct link to 01-configure-the--api-client")

Before calling the write API, you will need to configure the API client.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl

```codeBlockLines_e6Vv
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

To obtain the [access token](https://auth0.com/docs/authorization/flows/call-your-api-using-the-client-credentials-flow):

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

### 02\. Calling write API to add new relationship tuples [​](https://openfga.dev/docs/getting-started/update-tuples\#02-calling-write-api-to-add-new-relationship-tuples "Direct link to 02. Calling write API to add new relationship tuples")

To add the relationship tuples, we can invoke the write API.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"user:anne","relation":"reader","object":"document:Z"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             User: "user:anne",
             Relation: "reader",
             Object: "document:Z",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
       new() {
                  User = "user:anne",
                  Relation = "reader",
                  Object = "document:Z"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    user="user:anne",\
                    relation="reader",\
                    object="document:Z",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("reader")
                        ._object("document:Z")
        ));

var response = fgaClient.write(body, options).get();

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne reader document:Z

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"user":"user:anne","relation":"reader","object":"document:Z"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

### 03\. Calling write API to delete relationship tuples [​](https://openfga.dev/docs/getting-started/update-tuples\#03-calling-write-api-to-delete-relationship-tuples "Direct link to 03. Calling write API to delete relationship tuples")

To delete relationship tuples, we can invoke the write API.

Assume that you want to delete user `user:anne`'s `reader` relationship with object `document:Z`

```codeBlockLines_e6Vv
{
  user: 'user:anne',
  relation: 'reader',
  object: 'document:Z',
}

```

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl

```codeBlockLines_e6Vv

await fgaClient.write({
  deletes: [\
      { user: 'user:anne', relation: 'reader', object: 'document:Z'}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Deletes: []ClientTupleKeyWithoutCondition{
        {
             User: "user:anne",
             Relation: "reader",
             Object: "document:Z",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Deletes = new List<ClientTupleKeyWithoutCondition>() {
    new() { User = "user:anne", Relation = "reader", Object = "document:Z" }
  },
};
var response = await fgaClient.Write(body, options);

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        deletes=[\
                ClientTuple(\
                    user="user:anne",\
                    relation="reader",\
                    object="document:Z",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .deletes(List.of(
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("reader")
                        ._object("document:Z")
        ));

var response = fgaClient.write(body, options).get();

```

```codeBlockLines_e6Vv

fga tuple delete --store-id=${FGA_STORE_ID} user:anne reader document:Z

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"deletes": { "tuple_keys" : [{"user":"user:anne","relation":"reader","object":"document:Z"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

## Related Sections [​](https://openfga.dev/docs/getting-started/update-tuples\#related-sections "Direct link to Related Sections")

Check the following sections for more on how to write your authorization data

Managing User Access

Learn about how to give a user access to a particular object.

- [More](https://openfga.dev/docs/interacting/managing-user-access)

Managing Group Access

Learn about how to give a group of users access to a particular object.

- [More](https://openfga.dev/docs/interacting/managing-group-access)

Transactional Writes

Learn about how to update multiple relations within the same API call.

- [More](https://openfga.dev/docs/interacting/transactional-writes)

- [Before you start](https://openfga.dev/docs/getting-started/update-tuples#before-you-start)
- [Step by step](https://openfga.dev/docs/getting-started/update-tuples#step-by-step)
  - [01\. Configure the  API client](https://openfga.dev/docs/getting-started/update-tuples#01-configure-the--api-client)
  - [02\. Calling write API to add new relationship tuples](https://openfga.dev/docs/getting-started/update-tuples#02-calling-write-api-to-add-new-relationship-tuples)
  - [03\. Calling write API to delete relationship tuples](https://openfga.dev/docs/getting-started/update-tuples#03-calling-write-api-to-delete-relationship-tuples)
- [Related Sections](https://openfga.dev/docs/getting-started/update-tuples#related-sections)

## Managing User Access
[Skip to main content](https://openfga.dev/docs/interacting/managing-user-access#__docusaurus_skipToContent_fallback)

On this page

In this guide you will learn how to grant a [user](https://openfga.dev/docs/concepts#what-is-a-user) access to a particular [object](https://openfga.dev/docs/concepts#what-is-an-object).

When to use

Granting access with a _[relationship tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple)_ is a core part of OpenFGA. Without any relationship tuples, any _[check](https://openfga.dev/docs/concepts#what-is-a-check-request)_ will fail. You should use:

- _authorization model_ to represent what **relation** s are possible between the users and objects in your system
- _relationship tuples_ to represent the facts about the relationships between users and objects in your system.

## Before you start [​](https://openfga.dev/docs/interacting/managing-user-access\#before-you-start "Direct link to Before you start")

In order to understand this guide correctly you must be familiar with some [OpenFGA Concepts](https://openfga.dev/docs/concepts) and know how to develop the things that we will list below.

Assume that you have the following [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model).

You have a [type](https://openfga.dev/docs/concepts#what-is-a-type) called `tweet` that can have a `reader`.

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type tweet
  relations
    define reader: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "tweet",\
      "relations": {\
        "reader": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "reader": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

* * *

In addition, you will need to know the following:

### Direct access [​](https://openfga.dev/docs/interacting/managing-user-access\#direct-access "Direct link to Direct access")

You need to know how to create an authorization model and create a relationship tuple to grant a user access to an object. [Learn more →](https://openfga.dev/docs/modeling/direct-access)

### OpenFGA concepts [​](https://openfga.dev/docs/interacting/managing-user-access\#-concepts "Direct link to -concepts")

- A [Type](https://openfga.dev/docs/concepts#what-is-a-type): a class of objects that have similar characteristics
- A [User](https://openfga.dev/docs/concepts#what-is-a-user): an entity in the system that can be related to an object
- A [Relation](https://openfga.dev/docs/concepts#what-is-a-relation): is a string defined in the type definition of an authorization model that defines the possibility of a relationship between an object of the same type as the type definition and a user in the system
- An [Object](https://openfga.dev/docs/concepts#what-is-an-object): represents an entity in the system. Users' relationships to it can be define through relationship tuples and the authorization model
- A [Relationship Tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple): a grouping consisting of a user, a relation and an object stored in OpenFGA

## Step by step [​](https://openfga.dev/docs/interacting/managing-user-access\#step-by-step "Direct link to Step by step")

### 01\. Adding direct relationship [​](https://openfga.dev/docs/interacting/managing-user-access\#01-adding-direct-relationship "Direct link to 01. Adding direct relationship")

For our application, we will give user Anne the `reader` relationship to a particular `tweet`. To do so we add a tuple as follows:

```codeBlockLines_e6Vv
[// Anne can read tweet:1\
  {\
  "_description": "Anne can read tweet:1",\
  "user": "user:anne",\
  "relation": "reader",\
  "object": "tweet:1"\
}]

```

With the above, we have added a [**direct** relationship](https://openfga.dev/docs/modeling/building-blocks/direct-relationships) between Anne and `tweet:1`. When we call the Check API to see if Anne has a `reader` relationship, OpenFGA will say yes.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'reader',
    object: 'tweet:1',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "reader",
    Object:   "tweet:1",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "reader",
    Object = "tweet:1",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="reader",
    object="tweet:1",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("reader")
        ._object("tweet:1");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne reader tweet:1

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"reader","object":"tweet:1"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "reader", // has an `reader` relation
  object = "tweet:1", // with the object `tweet:1`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to tweet:1 as reader?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

### 02\. Removing direct relationship [​](https://openfga.dev/docs/interacting/managing-user-access\#02-removing-direct-relationship "Direct link to 02. Removing direct relationship")

Now let's change this so that Anne no longer has a `reader` relationship to `tweet:1` by deleting the tuple:

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  deletes: [\
      { user: 'user:anne', relation: 'reader', object: 'tweet:1'}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Deletes: []ClientTupleKeyWithoutCondition{
        {
             User: "user:anne",
             Relation: "reader",
             Object: "tweet:1",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Deletes = new List<ClientTupleKeyWithoutCondition>() {
    new() { User = "user:anne", Relation = "reader", Object = "tweet:1" }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        deletes=[\
                ClientTuple(\
                    user="user:anne",\
                    relation="reader",\
                    object="tweet:1",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .deletes(List.of(
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("reader")
                        ._object("tweet:1")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"deletes": { "tuple_keys" : [{"user":"user:anne","relation":"reader","object":"tweet:1"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv

fga tuple delete --store-id=${FGA_STORE_ID} user:anne reader tweet:1

```

```codeBlockLines_e6Vv

delete([\
    {\
      "user":"user:anne",\
      "relation":"reader",\
      "object":"tweet:1"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

With this, we have removed the [direct relationship](https://openfga.dev/docs/modeling/building-blocks/direct-relationships) between Anne and `tweet:1`. And because our type definition for `reader` does not include any other relations, a call to the Check API will now return a negative response.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'reader',
    object: 'tweet:1',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "reader",
    Object:   "tweet:1",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "reader",
    Object = "tweet:1",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="reader",
    object="tweet:1",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("reader")
        ._object("tweet:1");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne reader tweet:1

# Response: {"allowed":false}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"reader","object":"tweet:1"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "reader", // has an `reader` relation
  object = "tweet:1", // with the object `tweet:1`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:anne related to tweet:1 as reader?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

## Related Sections [​](https://openfga.dev/docs/interacting/managing-user-access\#related-sections "Direct link to Related Sections")

Check the following sections for more on how to manage user access.

Direct Access

Learn about how to model granting user access to an object.

- [More](https://openfga.dev/docs/modeling/direct-access)

Modeling Public Access

Learn about how to model granting public access.

- [More](https://openfga.dev/docs/modeling/public-access)

How to update relationship tuples

Learn about how to update relationship tuples in SDK.

- [More](https://openfga.dev/docs/getting-started/update-tuples)

- [Before you start](https://openfga.dev/docs/interacting/managing-user-access#before-you-start)
  - [Direct access](https://openfga.dev/docs/interacting/managing-user-access#direct-access)
  - [concepts](https://openfga.dev/docs/interacting/managing-user-access#-concepts)
- [Step by step](https://openfga.dev/docs/interacting/managing-user-access#step-by-step)
  - [01\. Adding direct relationship](https://openfga.dev/docs/interacting/managing-user-access#01-adding-direct-relationship)
  - [02\. Removing direct relationship](https://openfga.dev/docs/interacting/managing-user-access#02-removing-direct-relationship)
- [Related Sections](https://openfga.dev/docs/interacting/managing-user-access#related-sections)

## Group Access Management
[Skip to main content](https://openfga.dev/docs/interacting/managing-group-access#__docusaurus_skipToContent_fallback)

On this page

OpenFGA allows you to grant a group of users access to a particular object.

When to use

Relationship tuples are helpful when you want to specify that a group of users all have the same relation to an object. For example, OpenFGA allows you to:

- Grant a group of `engineers` `viewer` access to `roadmap.doc`
- Create a `block_list` of `members` who can't access a `document`
- Share a `document` with a `team`
- Grant `viewer` access to a `photo` to `followers` only
- Make a `file` viewable for all `users` within an `organization`
- Manage access to a `database` for `users` in a certain `locale`

## Before you start [​](https://openfga.dev/docs/interacting/managing-group-access\#before-you-start "Direct link to Before you start")

Familiarize yourself with basic [OpenFGA Concepts](https://openfga.dev/docs/concepts) before you continue.

In the example below, you have the following [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model) with two [types](https://openfga.dev/docs/concepts#what-is-a-type):

- `company` that can have an `employee` relation
- `document` that can have a `reader` relation.

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type company
  relations
    define employee: [user]

type document
  relations
    define reader: [company#employee]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "company",\
      "relations": {\
        "employee": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "employee": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "document",\
      "relations": {\
        "reader": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "reader": {\
            "directly_related_user_types": [\
              {\
                "type": "company",\
                "relation": "employee"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

* * *

In addition, the following concepts are important to group access management:

### Modeling user groups [​](https://openfga.dev/docs/interacting/managing-group-access\#modeling-user-groups "Direct link to Modeling user groups")

OpenFGA allows you to add users to groups and grant groups access to an object. [For more information, see User Groups.](https://openfga.dev/docs/modeling/user-groups)

### OpenFGA concepts [​](https://openfga.dev/docs/interacting/managing-group-access\#-concepts "Direct link to -concepts")

- A [Type](https://openfga.dev/docs/concepts#what-is-a-type): a class of objects that have similar characteristics
- A [User](https://openfga.dev/docs/concepts#what-is-a-user): an entity in the system that can be related to an object
- A [Relation](https://openfga.dev/docs/concepts#what-is-a-relation): a string defined in the type definition of an authorization model that defines the possibility of a relationship between an object of the same type as the type definition and a user in the system
- An [Object](https://openfga.dev/docs/concepts#what-is-an-object): represents an entity in the system. Users' relationships to it can be define through relationship tuples and the authorization model
- A [Relationship Tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple): a grouping consisting of a user, a relation and an object stored in OpenFGA

## Step by step [​](https://openfga.dev/docs/interacting/managing-group-access\#step-by-step "Direct link to Step by step")

### 01\. Adding company to the document [​](https://openfga.dev/docs/interacting/managing-group-access\#01-adding-company-to-the-document "Direct link to 01. Adding company to the document")

The following [Relationship Tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple) assigns ever `employee` of a type `company` a `reader` relationship with a particular object of type `document`, in this case `document:planning`):

```codeBlockLines_e6Vv
[// Every employee in the company can read document:planning\
  {\
  "_description": "Every employee in the company can read document:planning",\
  "user": "company:xyz#employee",\
  "relation": "reader",\
  "object": "document:planning"\
}]

```

### 02\. Add an employee to the company [​](https://openfga.dev/docs/interacting/managing-group-access\#02-add-an-employee-to-the-company "Direct link to 02. Add an employee to the company")

Below is a [relationship tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple) specifying that `Anne` is an `employee` of `company:xyz`:

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"user:anne","relation":"employee","object":"company:xyz"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             User: "user:anne",
             Relation: "employee",
             Object: "company:xyz",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
       new() {
                  User = "user:anne",
                  Relation = "employee",
                  Object = "company:xyz"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    user="user:anne",\
                    relation="employee",\
                    object="company:xyz",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("employee")
                        ._object("company:xyz")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"user":"user:anne","relation":"employee","object":"company:xyz"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne employee company:xyz

```

```codeBlockLines_e6Vv
write([\
    {\
      "user":"user:anne",\
      "relation":"employee",\
      "object":"company:xyz"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

### 03\. Checking an individual member's access to an object [​](https://openfga.dev/docs/interacting/managing-group-access\#03-checking-an-individual-members-access-to-an-object "Direct link to 03. Checking an individual member's access to an object")

Call the Check API to verify that Anne can read `document:planning` returns true:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'reader',
    object: 'document:planning',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "reader",
    Object:   "document:planning",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "reader",
    Object = "document:planning",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="reader",
    object="document:planning",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("reader")
        ._object("document:planning");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne reader document:planning

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"reader","object":"document:planning"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "reader", // has an `reader` relation
  object = "document:planning", // with the object `document:planning`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to document:planning as reader?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

The same check for Becky, a different user, returns false, because Becky does not have an `employee` relationship with `company:xyz`:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:becky',
    relation: 'reader',
    object: 'document:planning',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:becky",
    Relation: "reader",
    Object:   "document:planning",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:becky",
    Relation = "reader",
    Object = "document:planning",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:becky",
    relation="reader",
    object="document:planning",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:becky")
        .relation("reader")
        ._object("document:planning");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:becky reader document:planning

# Response: {"allowed":false}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:becky","relation":"reader","object":"document:planning"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:becky", // check if the user `user:becky`
  relation = "reader", // has an `reader` relation
  object = "document:planning", // with the object `document:planning`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:becky related to document:planning as reader?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

## Related Sections [​](https://openfga.dev/docs/interacting/managing-group-access\#related-sections "Direct link to Related Sections")

Check the following sections for more on how to model group.

Modeling User Groups

Learn about how to model users and groups.

- [More](https://openfga.dev/docs/modeling/user-groups)

Managing Group Membership

Learn about managing group membership.

- [More](https://openfga.dev/docs/interacting/managing-group-membership)

- [Before you start](https://openfga.dev/docs/interacting/managing-group-access#before-you-start)
  - [Modeling user groups](https://openfga.dev/docs/interacting/managing-group-access#modeling-user-groups)
  - [concepts](https://openfga.dev/docs/interacting/managing-group-access#-concepts)
- [Step by step](https://openfga.dev/docs/interacting/managing-group-access#step-by-step)
  - [01\. Adding company to the document](https://openfga.dev/docs/interacting/managing-group-access#01-adding-company-to-the-document)
  - [02\. Add an employee to the company](https://openfga.dev/docs/interacting/managing-group-access#02-add-an-employee-to-the-company)
  - [03\. Checking an individual member's access to an object](https://openfga.dev/docs/interacting/managing-group-access#03-checking-an-individual-members-access-to-an-object)
- [Related Sections](https://openfga.dev/docs/interacting/managing-group-access#related-sections)

## Configure Authorization Model
[Skip to main content](https://openfga.dev/docs/getting-started/configure-model#__docusaurus_skipToContent_fallback)

On this page

This article explains how to configure an [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model) for a [store](https://openfga.dev/docs/concepts#what-is-a-store) in an OpenFGA server.

## Before you start [​](https://openfga.dev/docs/getting-started/configure-model\#before-you-start "Direct link to Before you start")

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk), [created the store](https://openfga.dev/docs/getting-started/create-store) and [setup the SDK client](https://openfga.dev/docs/getting-started/setup-sdk-client).
3. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk), [created the store](https://openfga.dev/docs/getting-started/create-store) and [setup the SDK client](https://openfga.dev/docs/getting-started/setup-sdk-client).
3. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk), [created the store](https://openfga.dev/docs/getting-started/create-store) and [setup the SDK client](https://openfga.dev/docs/getting-started/setup-sdk-client).
3. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk), [created the store](https://openfga.dev/docs/getting-started/create-store) and [setup the SDK client](https://openfga.dev/docs/getting-started/setup-sdk-client).
3. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk), [created the store](https://openfga.dev/docs/getting-started/create-store) and [setup the SDK client](https://openfga.dev/docs/getting-started/setup-sdk-client).
3. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the CLI](https://openfga.dev/docs/getting-started/install-sdk), [created the store](https://openfga.dev/docs/getting-started/create-store) and [setup your environment variables](https://openfga.dev/docs/getting-started/setup-sdk-client).
3. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [created the store](https://openfga.dev/docs/getting-started/create-store) and have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

## Step by step [​](https://openfga.dev/docs/getting-started/configure-model\#step-by-step "Direct link to Step by step")

Assume that you want to configure your store with the following model.

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define reader: [user]
    define writer: [user]
    define owner: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "document",\
      "relations": {\
        "reader": {\
          "this": {}\
        },\
        "writer": {\
          "this": {}\
        },\
        "owner": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "reader": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "writer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "owner": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

To configure authorization model, we can invoke the [write authorization models API](https://openfga.dev/api/service#Authorization%20Models/WriteAuthorizationModel).

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

const { authorization_model_id: id } = await fgaClient.writeAuthorizationModel({
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "document",\
      "relations": {\
        "reader": {\
          "this": {}\
        },\
        "writer": {\
          "this": {}\
        },\
        "owner": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "reader": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "writer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "owner": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
});
// id = "01HVMMBCMGZNT3SED4Z17ECXCA"

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

  var writeAuthorizationModelRequestString = "{\"schema_version\":\"1.1\",\"type_definitions\":[{\"type\":\"user\"},{\"type\":\"document\",\"relations\":{\"reader\":{\"this\":{}},\"writer\":{\"this\":{}},\"owner\":{\"this\":{}}},\"metadata\":{\"relations\":{\"reader\":{\"directly_related_user_types\":[{\"type\":\"user\"}]},\"writer\":{\"directly_related_user_types\":[{\"type\":\"user\"}]},\"owner\":{\"directly_related_user_types\":[{\"type\":\"user\"}]}}}}]}"
  var body WriteAuthorizationModelRequest
  if err := json.Unmarshal([]byte(writeAuthorizationModelRequestString), &body); err != nil {
      // .. Handle error
      return
  }

  data, err := fgaClient.WriteAuthorizationModel(context.Background()).
      Body(body).
      Execute()

  if err != nil {
      // .. Handle error
  }

  // data.AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA"

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

  var modelJson = "{\"schema_version\":\"1.1\",\"type_definitions\":[{\"type\":\"user\"},{\"type\":\"document\",\"relations\":{\"reader\":{\"this\":{}},\"writer\":{\"this\":{}},\"owner\":{\"this\":{}}},\"metadata\":{\"relations\":{\"reader\":{\"directly_related_user_types\":[{\"type\":\"user\"}]},\"writer\":{\"directly_related_user_types\":[{\"type\":\"user\"}]},\"owner\":{\"directly_related_user_types\":[{\"type\":\"user\"}]}}}}]}";
  var body = JsonSerializer.Deserialize<OpenFga.Sdk.Model.WriteAuthorizationModelRequest>(modelJson);

  var response = await fgaClient.WriteAuthorizationModel(body);
  // response.AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA"

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv

# from openfga_sdk.models.write_authorization_model_request import WriteAuthorizationModelRequest

async def write_authorization_model():
    body_string = "{\"schema_version\":\"1.1\",\"type_definitions\":[{\"type\":\"user\"},{\"type\":\"document\",\"relations\":{\"reader\":{\"this\":{}},\"writer\":{\"this\":{}},\"owner\":{\"this\":{}}},\"metadata\":{\"relations\":{\"reader\":{\"directly_related_user_types\":[{\"type\":\"user\"}]},\"writer\":{\"directly_related_user_types\":[{\"type\":\"user\"}]},\"owner\":{\"directly_related_user_types\":[{\"type\":\"user\"}]}}}}]}"
    response = await fga_client_instance.write_authorization_model(json.loads(body))
    # response.authorization_model_id = "01HVMMBCMGZNT3SED4Z17ECXCA"

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
// import com.fasterxml.jackson.databind.ObjectMapper;
// import dev.openfga.sdk.api.model.WriteAuthorizationModelRequest;

var mapper = new ObjectMapper().findAndRegisterModules();
var authorizationModel = fgaClient
            .writeAuthorizationModel(mapper.readValue("{\"schema_version\":\"1.1\",\"type_definitions\":[{\"type\":\"user\"},{\"type\":\"document\",\"relations\":{\"reader\":{\"this\":{}},\"writer\":{\"this\":{}},\"owner\":{\"this\":{}}},\"metadata\":{\"relations\":{\"reader\":{\"directly_related_user_types\":[{\"type\":\"user\"}]},\"writer\":{\"directly_related_user_types\":[{\"type\":\"user\"}]},\"owner\":{\"directly_related_user_types\":[{\"type\":\"user\"}]}}}}]}", WriteAuthorizationModelRequest.class))
            .get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga model write --store-id=${FGA_STORE_ID} --format=json '{"schema_version":"1.1","type_definitions":[{"type":"user"},{"type":"document","relations":{"reader":{"this":{}},"writer":{"this":{}},"owner":{"this":{}}},"metadata":{"relations":{"reader":{"directly_related_user_types":[{"type":"user"}]},"writer":{"directly_related_user_types":[{"type":"user"}]},"owner":{"directly_related_user_types":[{"type":"user"}]}}}}]}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/authorization-models \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"schema_version":"1.1","type_definitions":[{"type":"user"},{"type":"document","relations":{"reader":{"this":{}},"writer":{"this":{}},"owner":{"this":{}}},"metadata":{"relations":{"reader":{"directly_related_user_types":[{"type":"user"}]},"writer":{"directly_related_user_types":[{"type":"user"}]},"owner":{"directly_related_user_types":[{"type":"user"}]}}}}]}'

```

The API will then return the authorization model ID.

Note

The OpenFGA API only accepts an authorization model in the API's JSON syntax.

To convert between the API Syntax and the friendly DSL, you can use the [FGA CLI](https://github.com/openfga/cli/).

## Related Sections [​](https://openfga.dev/docs/getting-started/configure-model\#related-sections "Direct link to Related Sections")

Take a look at the following sections for more information on how to configure authorization model in your store.

Getting Started with Modeling

Read how to get started with modeling.

- [More](https://openfga.dev/docs/modeling/getting-started)

Modeling: Direct Relationships

Read the basics of modeling authorization and granting access to users.

- [More](https://openfga.dev/docs/modeling/direct-access)

- [Before you start](https://openfga.dev/docs/getting-started/configure-model#before-you-start)
- [Step by step](https://openfga.dev/docs/getting-started/configure-model#step-by-step)
- [Related Sections](https://openfga.dev/docs/getting-started/configure-model#related-sections)

## Immutable Authorization Models
[Skip to main content](https://openfga.dev/docs/getting-started/immutable-models#__docusaurus_skipToContent_fallback)

On this page

Authorization Models in OpenFGA are immutable, they are created once and then can no longer be deleted or modified. Each time you write an authorization model, a new version is created.

## Viewing all the authorization models [​](https://openfga.dev/docs/getting-started/immutable-models\#viewing-all-the-authorization-models "Direct link to Viewing all the authorization models")

You can list all the authorization models for a store using the [ReadAuthorizationModels](https://openfga.dev/api/service#/Authorization%20Models/ReadAuthorizationModels) API. This endpoint returns the results sorted in reverse chronological order, as in the first model in the list is the latest model. By default, only the last 50 models are returned, but you can paginate across by passing in the appropriate `continuation_token`.

## How to target a particular model [​](https://openfga.dev/docs/getting-started/immutable-models\#how-to-target-a-particular-model "Direct link to How to target a particular model")

Some endpoints relating to tuples ( [Check](https://openfga.dev/api/service#/Relationship%20Queries/Check), [ListObjects](https://openfga.dev/api/service#/Relationship%20Queries/ListObjects), [ListUsers](https://openfga.dev/api/service#/Relationship%20Queries/ListUsers), [Expand](https://openfga.dev/api/service#/Relationship%20Queries/Expand), [Write](https://openfga.dev/api/service#/Relationship%20Tuples/Write)) accept an `authorization_model_id`, which we strongly recommend passing, especially in production.

In practice, you would pin the authorization model ID alongside the store ID in your configuration management system. Your services would read this value and use it in their requests to FGA. This helps you ensure that your services are using the same consistent ID across all your applications, and that rollouts can be seamless.

## Benefits of passing in an authorization model ID [​](https://openfga.dev/docs/getting-started/immutable-models\#benefits-of-passing-in-an-authorization-model-id "Direct link to Benefits of passing in an authorization model ID")

Targeting a specific model ID would ensure that you don't accidentally break your authorization checks in production because a mistake was made when updating the authorization model. It would also slightly improve the latency on your check requests.

If that field is passed, evaluation and validation will happen for that particular authorization model ID. If this field is not passed, OpenFGA will use the last created Authorization Model for that store.

## Potential use-cases [​](https://openfga.dev/docs/getting-started/immutable-models\#potential-use-cases "Direct link to Potential use-cases")

### Complex model migrations [​](https://openfga.dev/docs/getting-started/immutable-models\#complex-model-migrations "Direct link to Complex model migrations")

Certain model changes require adapting your application code and migrating tuples before rolling it out. For example, if you rename a relation, you need to change the application and copy the existing tuples to use the new relation name. This scenario requires the following steps:

- Update the authorization model with the renamed relation. A new model ID will be generated but it won't be used in production yet.
- Update the application to use the new relation name.
- Copy existing tuples to use the new relation name.
- Deploy the new application targeting the new model ID.

You can learn more about model migrations [here](https://openfga.dev/docs/modeling/migrating).

### Progresivelly rollout changes [​](https://openfga.dev/docs/getting-started/immutable-models\#progresivelly-rollout-changes "Direct link to Progresivelly rollout changes")

Being able to target multiple versions of the authorization model enables you to progressively roll out model changes, which is something you should consider doing if the changes are significant. You could:

- Do shadow checks where you would perform checks against both your existing model and the new upcoming model you are hoping to replace it with.This will help you detect and resolve any accidental discrepancies you may be introducing, and ensure that your new model is at least as good as your old one.

- When you are confident with your model, you could implement gradual rollouts that would allow you to monitor and check if any users are having access issues before you go ahead and increase the rollout to 100% of your user base.


Getting an Authorization Model's Creation Date

The Authorization Model ID is a [ULID](https://github.com/ulid/spec) which includes the date created. You can extract the creation date using a library for your particular language.

For example, in JavaScript you can do the following:

```codeBlockLines_e6Vv
import ulid = require('ulid');

const time = ulid.decodeTime(id);

```

## Related Sections [​](https://openfga.dev/docs/getting-started/immutable-models\#related-sections "Direct link to Related Sections")

Learn more about modeling and production usage in OpenFGA.

Configuration Language

Learn about the OpenFGA Configuration Language.

- [More](https://openfga.dev/docs/configuration-language)

Getting Started with Modeling

Read how to get started with modeling.

- [More](https://openfga.dev/docs/modeling/getting-started)

Data and API Best Practices

Learn the best practices for managing data and invoking APIs in production environment

- [More](https://openfga.dev/docs/getting-started/tuples-api-best-practices)

- [Viewing all the authorization models](https://openfga.dev/docs/getting-started/immutable-models#viewing-all-the-authorization-models)
- [How to target a particular model](https://openfga.dev/docs/getting-started/immutable-models#how-to-target-a-particular-model)
- [Benefits of passing in an authorization model ID](https://openfga.dev/docs/getting-started/immutable-models#benefits-of-passing-in-an-authorization-model-id)
- [Potential use-cases](https://openfga.dev/docs/getting-started/immutable-models#potential-use-cases)
  - [Complex model migrations](https://openfga.dev/docs/getting-started/immutable-models#complex-model-migrations)
  - [Progresivelly rollout changes](https://openfga.dev/docs/getting-started/immutable-models#progresivelly-rollout-changes)
- [Related Sections](https://openfga.dev/docs/getting-started/immutable-models#related-sections)

## OpenFGA Telemetry Setup
[Skip to main content](https://openfga.dev/docs/getting-started/configure-telemetry#__docusaurus_skipToContent_fallback)

On this page

The OpenFGA SDK Client supports telemetry data collection using [OpenTelemetry](https://opentelemetry.io/).

## Enabling Telemetry [​](https://openfga.dev/docs/getting-started/configure-telemetry\#enabling-telemetry "Direct link to Enabling Telemetry")

1. [Install the OpenFGA SDK Client](https://openfga.dev/docs/getting-started/install-sdk)
2. [Setup OpenTelemetry](https://opentelemetry.io/docs/getting-started/)
3. Install the OpenTelemetry SDK dependencies for your application
4. Instantiate the OpenTelemetry SDK in your application

Once you have completed these steps, the OpenFGA SDK Client will automatically collect telemetry data using your application's OpenTelemetry configuration.

## Customizing Telemetry [​](https://openfga.dev/docs/getting-started/configure-telemetry\#customizing-telemetry "Direct link to Customizing Telemetry")

The OpenFGA SDK Client will automatically use [a default configuration](https://openfga.dev/docs/getting-started/configure-telemetry#supported-metrics) for telemetry collection. You can provide your own configuration to include additional metrics or to exclude metrics that are not relevant to your application.

- Node.js
- Go
- .NET
- Python
- Java

```codeBlockLines_e6Vv
import 'dotenv/config';
import { OpenFgaClient, TelemetryAttribute, TelemetryConfiguration, TelemetryMetric } from '@openfga/sdk';

const telemetryConfig = {
  metrics: {
    [TelemetryMetric.CounterCredentialsRequest]: {
      attributes: new Set([\
        TelemetryAttribute.UrlScheme,\
        TelemetryAttribute.UserAgentOriginal,\
        TelemetryAttribute.HttpRequestMethod,\
        TelemetryAttribute.FgaClientRequestClientId,\
        TelemetryAttribute.FgaClientRequestStoreId,\
        TelemetryAttribute.FgaClientRequestModelId,\
        TelemetryAttribute.HttpRequestResendCount,\
      ]),
    },
    [TelemetryMetric.HistogramRequestDuration]: {
      attributes: new Set([\
        TelemetryAttribute.HttpResponseStatusCode,\
        TelemetryAttribute.UserAgentOriginal,\
        TelemetryAttribute.FgaClientRequestMethod,\
        TelemetryAttribute.FgaClientRequestClientId,\
        TelemetryAttribute.FgaClientRequestStoreId,\
        TelemetryAttribute.FgaClientRequestModelId,\
        TelemetryAttribute.HttpRequestResendCount,\
      ]),
    },
    [TelemetryMetric.HistogramQueryDuration]: {
      attributes: new Set([\
        TelemetryAttribute.HttpResponseStatusCode,\
        TelemetryAttribute.UserAgentOriginal,\
        TelemetryAttribute.FgaClientRequestMethod,\
        TelemetryAttribute.FgaClientRequestClientId,\
        TelemetryAttribute.FgaClientRequestStoreId,\
        TelemetryAttribute.FgaClientRequestModelId,\
        TelemetryAttribute.HttpRequestResendCount,\
      ]),
    },
  },
};

const fgaClient = new OpenFgaClient({
  telemetry: telemetryConfig,
  // ...
});

```

```codeBlockLines_e6Vv
import (
  "github.com/openfga/go-sdk/client"
  "github.com/openfga/go-sdk/telemetry"
)

otel := telemetry.Configuration{
  Metrics: &telemetry.MetricsConfiguration{
    METRIC_COUNTER_CREDENTIALS_REQUEST: &telemetry.MetricConfiguration{
      ATTR_FGA_CLIENT_REQUEST_CLIENT_ID: &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_HTTP_REQUEST_METHOD:          &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_FGA_CLIENT_REQUEST_MODEL_ID:  &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_FGA_CLIENT_REQUEST_STORE_ID:  &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_FGA_CLIENT_RESPONSE_MODEL_ID: &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_HTTP_HOST:                    &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_HTTP_REQUEST_RESEND_COUNT:    &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_HTTP_RESPONSE_STATUS_CODE:    &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_URL_FULL:                     &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_URL_SCHEME:                   &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_USER_AGENT_ORIGINAL:          &telemetry.AttributeConfiguration{Enabled: true},
    },
    METRIC_HISTOGRAM_REQUEST_DURATION: &telemetry.MetricConfiguration{
      ATTR_FGA_CLIENT_REQUEST_CLIENT_ID: &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_HTTP_REQUEST_METHOD:          &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_FGA_CLIENT_REQUEST_MODEL_ID:  &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_FGA_CLIENT_REQUEST_STORE_ID:  &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_FGA_CLIENT_RESPONSE_MODEL_ID: &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_HTTP_HOST:                    &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_HTTP_REQUEST_RESEND_COUNT:    &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_HTTP_RESPONSE_STATUS_CODE:    &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_URL_FULL:                     &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_URL_SCHEME:                   &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_USER_AGENT_ORIGINAL:          &telemetry.AttributeConfiguration{Enabled: true},
    },
    METRIC_HISTOGRAM_QUERY_DURATION: &telemetry.MetricConfiguration{
      ATTR_FGA_CLIENT_REQUEST_CLIENT_ID: &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_HTTP_REQUEST_METHOD:          &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_FGA_CLIENT_REQUEST_MODEL_ID:  &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_FGA_CLIENT_REQUEST_STORE_ID:  &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_FGA_CLIENT_RESPONSE_MODEL_ID: &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_HTTP_HOST:                    &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_HTTP_REQUEST_RESEND_COUNT:    &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_HTTP_RESPONSE_STATUS_CODE:    &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_URL_FULL:                     &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_URL_SCHEME:                   &telemetry.AttributeConfiguration{Enabled: true},
      ATTR_USER_AGENT_ORIGINAL:          &telemetry.AttributeConfiguration{Enabled: true},
    },
  },
}

fgaClient, err := client.NewSdkClient(&client.ClientConfiguration{
  Telemetry: &otel,
  // ...
})

```

```codeBlockLines_e6Vv
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Configuration;
using OpenFga.Sdk.Telemetry;

TelemetryConfig telemetryConfig = new TelemetryConfig() {
    Metrics = new Dictionary<string, MetricConfig> {
        [TelemetryMeter.RequestDuration] = new () {
            Attributes = new HashSet<string> {
                TelemetryAttribute.HttpStatus,
                TelemetryAttribute.HttpUserAgent,
                TelemetryAttribute.RequestMethod,
                TelemetryAttribute.RequestClientId,
                TelemetryAttribute.RequestStoreId,
                TelemetryAttribute.RequestModelId,
                TelemetryAttribute.RequestRetryCount,
            },
        },
    },
};

var configuration = new ClientConfiguration {
    Telemetry = telemetryConfig,
    // ...
};

var fgaClient = new OpenFgaClient(configuration);

```

```codeBlockLines_e6Vv
from openfga_sdk import (
  ClientConfiguration,
  OpenFgaClient,
)

telemetry_config: dict[str, dict[str, dict[str, bool]]] = {
  "metrics": {
    "fga-client.request.duration": {
      "fga-client.request.model_id": False,
      "fga-client.response.model_id": False,
      "fga-client.user": True,
      "http.client.request.duration": True,
      "http.server.request.duration": True,
    },
  },
}

configuration = ClientConfiguration(
  telemetry=telemetry_config,
  // ...
)

with OpenFgaClient(configuration) as fga_client:
  # ...

```

```codeBlockLines_e6Vv
import dev.openfga.sdk.api.client.ApiClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;
import dev.openfga.sdk.api.configuration.TelemetryConfiguration;

Map<Attribute, Optional<Object>> attributes = new HashMap<>();
attributes.put(Attributes.FGA_CLIENT_REQUEST_CLIENT_ID, Optional.empty());
attributes.put(Attributes.FGA_CLIENT_REQUEST_METHOD, Optional.empty());
attributes.put(Attributes.FGA_CLIENT_REQUEST_MODEL_ID, Optional.empty());
attributes.put(Attributes.FGA_CLIENT_REQUEST_STORE_ID, Optional.empty());
attributes.put(Attributes.FGA_CLIENT_RESPONSE_MODEL_ID, Optional.empty());
attributes.put(Attributes.HTTP_HOST, Optional.empty());
attributes.put(Attributes.HTTP_REQUEST_METHOD, Optional.empty());
attributes.put(Attributes.HTTP_REQUEST_RESEND_COUNT, Optional.empty());
attributes.put(Attributes.HTTP_RESPONSE_STATUS_CODE, Optional.empty());
attributes.put(Attributes.URL_FULL, Optional.empty());
attributes.put(Attributes.URL_SCHEME, Optional.empty());
attributes.put(Attributes.USER_AGENT, Optional.empty());

Map<Metric, Map<Attribute, Optional<Object>>> metrics = new HashMap<>();
metrics.put(Counters.CREDENTIALS_REQUEST, attributes);
metrics.put(Histograms.QUERY_DURATION, attributes);
metrics.put(Histograms.REQUEST_DURATION, attributes);

ClientConfiguration config = new ClientConfiguration()
  // ...
  .telemetryConfiguration(new TelemetryConfiguration(metrics);

OpenFgaClient fgaClient = new OpenFgaClient(config);

```

## Examples [​](https://openfga.dev/docs/getting-started/configure-telemetry\#examples "Direct link to Examples")

We provide example applications for using telemetry with the OpenFGA SDK Client.

- [Node.js](https://github.com/openfga/js-sdk/tree/main/example/opentelemetry)
- [Go](https://github.com/openfga/go-sdk/tree/main/example/opentelemetry)
- [.NET](https://github.com/openfga/dotnet-sdk/tree/main/example/OpenTelemetryExample)
- [Python](https://github.com/openfga/python-sdk/tree/main/example/opentelemetry)

## Supported Metrics [​](https://openfga.dev/docs/getting-started/configure-telemetry\#supported-metrics "Direct link to Supported Metrics")

The OpenFGA SDK Client can collect the following metrics:

| Metric Name | Type | Enabled by Default | Description |
| --- | --- | --- | --- |
| `fga-client.request.duration` | Histogram | Yes | Total request time for FGA requests, in milliseconds |
| `fga-client.query.duration` | Histogram | Yes | Time taken by the FGA server to process and evaluate the request, in milliseconds |
| `fga-client.credentials.request` | Counter | Yes | Total number of new token requests initiated using the Client Credentials flow |

## Supported Attributes [​](https://openfga.dev/docs/getting-started/configure-telemetry\#supported-attributes "Direct link to Supported Attributes")

The OpenFGA SDK Client can collect the following attributes:

| Attribute Name | Type | Enabled by Default | Description |
| --- | --- | --- | --- |
| `fga-client.request.client_id` | string | Yes | Client ID associated with the request, if any |
| `fga-client.request.method` | string | Yes | FGA method/action that was performed (e.g., Check, ListObjects) in TitleCase |
| `fga-client.request.model_id` | string | Yes | Authorization model ID that was sent as part of the request, if any |
| `fga-client.request.store_id` | string | Yes | Store ID that was sent as part of the request |
| `fga-client.response.model_id` | string | Yes | Authorization model ID that the FGA server used |
| `fga-client.user` | string | No | User associated with the action of the request for check and list users |
| `http.client.request.duration` | int | No | Duration for the SDK to complete the request, in milliseconds |
| `http.host` | string | Yes | Host identifier of the origin the request was sent to |
| `http.request.method` | string | Yes | HTTP method for the request |
| `http.request.resend_count` | int | Yes | Number of retries attempted, if any |
| `http.response.status_code` | int | Yes | Status code of the response (e.g., `200` for success) |
| `http.server.request.duration` | int | No | Time taken by the FGA server to process and evaluate the request, in milliseconds |
| `url.scheme` | string | Yes | HTTP scheme of the request ( `http`/ `https`) |
| `url.full` | string | Yes | Full URL of the request |
| `user_agent.original` | string | Yes | User Agent used in the query |

## Tracing [​](https://openfga.dev/docs/getting-started/configure-telemetry\#tracing "Direct link to Tracing")

OpenFGA [supports](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga) tracing with OpenTelemetry.

If your application uses OpenTelemetry tracing, traces will be propagated to OpenFGA, provided the traces are exported to the same address.
This can be useful to help diagnose any suspected performance issues when using OpenFGA.

If your application does not already use tracing, OpenTelemetry offers [zero-code instrumentation](https://opentelemetry.io/docs/zero-code/) for several languages.
For example, a TypeScript application can be configured with tracing by using one of the [OpenTelemetry JavaScript Instrumentation Libraries](https://opentelemetry.io/docs/languages/js/libraries/):

```codeBlockLines_e6Vv
npm install --save @opentelemetry/auto-instrumentations-node

```

Create an initialization file to configure tracing:

```codeBlockLines_e6Vv
// tracing.ts
import { NodeSDK } from '@opentelemetry/sdk-node';
import { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';
import { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';

const sdk = new NodeSDK({
  traceExporter: new OTLPTraceExporter(),
  // registers all instrumentation packages, you may wish to change this
  instrumentations: [getNodeAutoInstrumentations()],
});

sdk.start();

```

Run the application with the appropriate OTEL environment variables:

```codeBlockLines_e6Vv
OTEL_SERVICE_NAME='YOUR-SERVICE-NAME' ts-node -r ./tracing.ts YOUR-APP.ts

```

See the [OpenTelemetry documentation](https://opentelemetry.io/docs/) for additional information to configure your application for tracing.

- [Enabling Telemetry](https://openfga.dev/docs/getting-started/configure-telemetry#enabling-telemetry)
- [Customizing Telemetry](https://openfga.dev/docs/getting-started/configure-telemetry#customizing-telemetry)
- [Examples](https://openfga.dev/docs/getting-started/configure-telemetry#examples)
- [Supported Metrics](https://openfga.dev/docs/getting-started/configure-telemetry#supported-metrics)
- [Supported Attributes](https://openfga.dev/docs/getting-started/configure-telemetry#supported-attributes)
- [Tracing](https://openfga.dev/docs/getting-started/configure-telemetry#tracing)

## OpenFGA Adoption Patterns
[Skip to main content](https://openfga.dev/docs/best-practices/adoption-patterns#__docusaurus_skipToContent_fallback)

On this page

This document outlines key implementation patterns for adopting OpenFGA in your organization.

## Starting with coarse-grained access control [​](https://openfga.dev/docs/best-practices/adoption-patterns\#starting-with-coarse-grained-access-control "Direct link to Starting with coarse-grained access control")

When evaluating this solution, many companies start by replicating their existing permissions structure before moving to more granular controls. For example, if you're using Role-Based Access Control (RBAC) in a B2B scenario, you might start with a simple model:

```codeBlockLines_e6Vv
model
  schema 1.1

  type user
  type organization
    relations
      define admin : [user]
      define member : [user]
      # .. add additional organization roles

      # map permissions to organization roles
      define can_add_member : admin
      define can_delete_member : admin
      define can_view_member : admin or member
      define can_add_resource : admin or member

```

You can define any number of roles for the organization type and then define the permissions based on those roles. You can then check if users have a specific permission at the organization level by calling the Check API on the organization object:

```codeBlockLines_e6Vv
Check(user: "user:anne", relation: "can_add_member", object: "organization:acme")

```

A better implementation is to define the application's resource types in the model (e.g. documents, projects, insurance policies, bank accounts, etc):

```codeBlockLines_e6Vv
model
  schema 1.1

  type user
  type organization
    relations
      define admin : [user]
      define member : [user]

      define can_add_member : admin
      define can_delete_member : admin
      define can_view_member : admin or member
      define can_add_resource : admin or member

   type resource
     relations
       define organization : [organization]

      # map resource permissions to organization roles
       define can_delete_resource : admin from organization or member from organization
       define can_view_resource : admin from organization or member from organization

```

In this case, you'll need to write tuples that establish the relationship between resource instances and organizations, or use Contextual Tuples to specify them, e.g:

```codeBlockLines_e6Vv
user: organization:acme
relation: organization
object: resource:root

```

In this case, the Check() call will be at the resource level, for example:

```codeBlockLines_e6Vv
Check(user: "user:anne", relation: "can_view_resource", object: "resource:root")

```

The main advantage of this approach is that your APIs will be checking permissions at the proper level. If you later want to evolve your authorization model to be more fine grained, you won't need to change your app. For example, you can add fine grained access permissions at the resource level, and your authorization check won't change:

```codeBlockLines_e6Vv
   type resource
     relations
       define organization : [organization]
       define owner: [user]
       define viewer : [user]

      # map resource permissions to organization roles
       define can_delete_resource : admin from organization or member from organization or owner
       define can_view_resource : admin from organization or member from organization or owner or viewer

```

## Provide request-level data [​](https://openfga.dev/docs/best-practices/adoption-patterns\#provide-request-level-data "Direct link to Provide request-level data")

One of the advantages of the Zanzibar/OpenFGA approach is that all the data you need to make authorization decisions is stored in a centralized database. That greatly simplifies how application implement access control. Applications do not need to retrieve al the required data before invoking an authorization service.

However, writing the data to the centralized store adds implementation complexity. You need to implement a data pipeline that makes sure the data is always up to date.

OpenFGA provides a feature called [Contextual Tuples](https://openfga.dev/docs/interacting/contextual-tuples) that allows sending the required data as part of each authorization request instead of storing it on the OpenFGA database. Overusing this feature has many drawbacks, as you are now adding additional complexity and latency around collecting the data, and you are not benefiting from using OpenFGA as intended. However, implementing a hybrid approach can make sense in many scenarios and can also be a helpful tool at the start when you are transitioning into a more OpenFGA tailored approach.

When the data is already available to the calling API, sending it as a contextual tuple is very simple. A common use case is you have data in [your access tokens](https://openfga.dev/docs/modeling/token-claims-contextual-tuples) (for example, roles/groups claims). Instead of synchronizing groups/roles relations to OpenFGA, you can send those as contextual tuples.

When the data is not already, you will need to retrieve it. This is what you need to do if you are implementing pure Attribute Access Control. You'd retrieve the data and send it to the authorization policy engine. You can do the same with OpenFGA using Contextual Tuples.

You'll need to make the trade-off between writing the data to OpenFGA so it's always available for any authorization request, or requesting it before making an authorization check.

We've seen companies successfully following a hybrid approach, starting by synchronizing the data that's easy first and providing the rest as contextual tuples. As their implementation matures, they implement more synchronization processes and stop sending the contextual tuples.

## Use OpenFGA to enrich JWTs [​](https://openfga.dev/docs/best-practices/adoption-patterns\#use--to-enrich-jwts "Direct link to use--to-enrich-jwts")

Once you have your authorization model and data set up, you can start making authorization checks from your application. The preferred way is to perform a [Check()](https://openfga.dev/docs/getting-started/perform-check) call.

However, you might have a large set of APIs that are already making authorization checks using JWTs. Changing those applications can be a significant investment. Even if JWTs have several drawbacks compared to making FGA API calls, it can be reasonable to first start by using OpenFGA to generate the claims that are stored in JWTs, while the applications keep using those claims to make authorization decisions.

Over time, you'll migrate the applications and APIs to use authorization check instead.

Authentication services usually provide a way to enrich access tokens during the authorization flow. You can see an example on how to do it with Auth0 [here](https://auth0.com/blog/adding-custom-claims-to-id-token-with-auth0-actions/).

For example, if you want to include in the access token the organizations that a user can log-in to, based on the following model:

```codeBlockLines_e6Vv
  type user
  type organization
    relations
      define member : [user]

```

You can call `ListObjects(type:"organization", relation:"member", user: "user:xxx")` and include those.

## Promoting Organization-Wide Adoption [​](https://openfga.dev/docs/best-practices/adoption-patterns\#promoting-organization-wide-adoption "Direct link to Promoting Organization-Wide Adoption")

To introduce OpenFGA in a large company, it's recommended that you identify a problem where the additional enables quickly delivering business value to customers. It can be a new project, a new module, a new feature. Using OpenFGA for such a project can be an easier decision. Once an implementation is successful, you can try influencing the rest of the organization to adopt it.

However, influencing the decision makers of a large organization can be hard. Each team has their own internal roadmaps and not all of the teams will see value in implementing a new authorization system. Migration can be seen as a tech-debt project instead of a business-value-driven one.

The can take advantage of the following capabilities to simplify adoption by multiple teams:

- [Modular Models](https://openfga.dev/docs/modeling/modular-models) enable each team to independently evolve their authorization policies without relying on a central team.
- [Access Control](https://openfga.dev/docs/getting-started/setup-openfga/access-control) allows you to issue different credentials for each application, with permissions that ensure that each credential can only write data to the types defined in the Modules they own.

## Domain-Specific Authorization Server [​](https://openfga.dev/docs/best-practices/adoption-patterns\#domain-specific-authorization-server "Direct link to Domain-Specific Authorization Server")

Some companies decide to wrap OpenFGA with their own authorization service. They decide to do this for multiple reasons:

- Sometimes they already have a centralized service, and it's easy to replace it with another without changing the calling applications.
- It can simplify internal adoption by providing domain-specific APIs. Instead of calling `write` or `check`, applications can call a `/share-document` endpoint or a `/can-view-document` one. Each team does not need to learn the OpenFGA API.
- If they are using Contextual Tuples, they can keep the logic to retrieve additional data to send to OpenFGA in a single service.
- They only need to provide OpenFGA configuration data like Store ID and Model ID in a single service.

On the other hand, adding another service increases latency, adds additional complexity and would make the teams less likely to find help from existing public OpenFGA documentation and resources.

## Shadowing the OpenFGA API [​](https://openfga.dev/docs/best-practices/adoption-patterns\#shadowing-the--api "Direct link to shadowing-the--api")

When migrating from an existing authorization system to OpenFGA, it's recommended to first run both systems in parallel, with OpenFGA in "shadow mode". This means that while the existing system continues to make the actual authorization decisions, you also make calls to OpenFGA asynchornously and compare the results.

This approach has several benefits:

- You can validate that your authorization model and relationship tuples are correctly configured before switching to OpenFGA.
- You can measure the performance impact of adding OpenFGA calls to your application.
- You can identify edge cases where the OpenFGA results differ from your existing system.
- You can gradually build confidence in the OpenFGA implementation.

To implement shadow mode:

1. Configure your application to make authorization checks against both systems
2. Log any discrepancies between the two systems
3. Analyze the logs to identify and fix any issues
4. Once confident in the results, switch to using OpenFGA as the source of truth. The same approach of shallow checks when [migrating between models](https://openfga.dev/docs/getting-started/immutable-models#potential-use-cases).

This pattern is particularly useful for critical systems where authorization errors could have significant impact.

## Related Sections [​](https://openfga.dev/docs/best-practices/adoption-patterns\#related-sections "Direct link to Related Sections")

Check out these related resources for more information about adopting OpenFGA

Production Best Practices

Learn about best practices for running OpenFGA in production environments.

- [More](https://openfga.dev/docs/getting-started/running-in-production)

Modular Authorization Models

Learn how to break down your authorization model into modules.

- [More](https://openfga.dev/docs/modeling/modular-models)

- [Starting with coarse-grained access control](https://openfga.dev/docs/best-practices/adoption-patterns#starting-with-coarse-grained-access-control)
- [Provide request-level data](https://openfga.dev/docs/best-practices/adoption-patterns#provide-request-level-data)
- [Use  to enrich JWTs](https://openfga.dev/docs/best-practices/adoption-patterns#use--to-enrich-jwts)
- [Promoting Organization-Wide Adoption](https://openfga.dev/docs/best-practices/adoption-patterns#promoting-organization-wide-adoption)
- [Domain-Specific Authorization Server](https://openfga.dev/docs/best-practices/adoption-patterns#domain-specific-authorization-server)
- [Shadowing the  API](https://openfga.dev/docs/best-practices/adoption-patterns#shadowing-the--api)
- [Related Sections](https://openfga.dev/docs/best-practices/adoption-patterns#related-sections)

## OpenFGA Check Requests
[Skip to main content](https://openfga.dev/docs/getting-started/perform-check#__docusaurus_skipToContent_fallback)

On this page

This section will illustrate how to perform a [check](https://openfga.dev/docs/concepts#what-is-a-check-request) request to determine whether a [user](https://openfga.dev/docs/concepts#what-is-a-user) has a certain [relationship](https://openfga.dev/docs/concepts#what-is-a-relationship) with an [object](https://openfga.dev/docs/concepts#what-is-an-object).

## Before you start [​](https://openfga.dev/docs/getting-started/perform-check\#before-you-start "Direct link to Before you start")

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk).
3. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model) and [updated the _relationship tuples_](https://openfga.dev/docs/getting-started/update-tuples).
4. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk).
3. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model) and [updated the _relationship tuples_](https://openfga.dev/docs/getting-started/update-tuples).
4. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk).
3. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model) and [updated the _relationship tuples_](https://openfga.dev/docs/getting-started/update-tuples).
4. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk).
3. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model) and [updated the _relationship tuples_](https://openfga.dev/docs/getting-started/update-tuples).
4. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk).
3. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model) and [updated the _relationship tuples_](https://openfga.dev/docs/getting-started/update-tuples).
4. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model).
3. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model) and [updated the _relationship tuples_](https://openfga.dev/docs/getting-started/update-tuples).
3. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

## Step by step [​](https://openfga.dev/docs/getting-started/perform-check\#step-by-step "Direct link to Step by step")

Assume that you want to check whether user `anne` has relationship `reader` with object `document:Z`

### 01\. Configure the OpenFGA API client [​](https://openfga.dev/docs/getting-started/perform-check\#01-configure-the--api-client "Direct link to 01-configure-the--api-client")

Before calling the check API, you will need to configure the API client.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl

```codeBlockLines_e6Vv
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

To obtain the [access token](https://auth0.com/docs/get-started/authentication-and-authorization-flow/call-your-api-using-the-client-credentials-flow):

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

### 02\. Calling Check API [​](https://openfga.dev/docs/getting-started/perform-check\#02-calling-check-api "Direct link to 02. Calling Check API")

To check whether user `user:anne` has relationship `can_view` with object `document:Z`

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'can_view',
    object: 'document:Z',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "can_view",
    Object:   "document:Z",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "can_view",
    Object = "document:Z",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="can_view",
    object="document:Z",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("can_view")
        ._object("document:Z");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne can_view document:Z

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"can_view","object":"document:Z"}}'

# Response: {"allowed":true}

```

The result's `allowed` field will return `true` if the relationship exists and `false` if the relationship does not exist.

### 03\. Calling Batch Check API [​](https://openfga.dev/docs/getting-started/perform-check\#03-calling-batch-check-api "Direct link to 03. Calling Batch Check API")

If you want to check multiple user-object-relationship combinations in a single request, you can use the [Batch Check](https://openfga.dev/api/service#Relationship%20Queries/BatchCheck) API endpoint. Batching authorization checks together in a single request significantly reduces overall network latency.

note

The BatchCheck endpoint is currently only supported by the JS SDK (>= [v0.8.0](https://github.com/openfga/js-sdk/releases/tag/v0.8.0) and the Python SDK (>= [v0.9.0](https://github.com/openfga/python-sdk/releases/tag/v0.9.0)). Support in the other SDKs is being worked on.

In the SDKs that don't support the server-side `BatchCheck`, the `BatchCheck` method performs client-side batch checks by making multiple check requests with limited parallelization, in SDK versions that do support the server-side `BatchCheck`, the existing method has been renamed to `ClientBatchCheck`.

Refer to the README for each SDK for more information. Refer to the release notes of the relevant SDK version for more information on how to migrate from client-side to the server-side `BatchCheck`.

The BatchCheck endpoint requires a `correlation_id` parameter for each check. The `correlation_id` is used to "correlate" the check responses with the checks sent in the request, since `tuple_keys` and `contextual_tuples` are not returned in the response on purpose to reduce data transfer to improve network latency. A `correlation_id` can be composed of any string of alphanumeric characters or dashes between 1-36 characters in length.
This means you can use:

- simple iterating integers `1,2,3,etc`
- UUID `e5fe049b-f252-40b3-b795-fe485d588279`
- ULID `01JBMD9YG0XH3B4GVA8A9D2PSN`
- or some other unique string

Each `correlation_id` within a request must be unique.

note

If you are using one of our SDKs:

- the `correlation_id` is inserted for you by default and automatically correlates the `allowed` response with the proper `tuple_key`
- if you pass in more checks than the server supports in a single call (default `50`, configurable on the server), the SDK will automatically split and batch the `BatchCheck` requests for you, how it does this can be configured using the `maxBatchSize` and `maxParallelRequests` options in the SDK.

To check whether user `user:anne` has multiple relationships `writer` and `reader` with object `document:Z`

- Node.js
- Go
- .NET
- Python
- Java
- curl
- Pseudocode

```codeBlockLines_e6Vv
// Requires >=v0.8.0 for the server side BatchCheck, earlier versions support a client-side BatchCheck with a slightly different interface
const body = {
  checks: [\
    {\
      user: 'user:anne',\
      relation: 'writer',\
      object: 'document:Z',\
      correlationId: '886224f6-04ae-4b13-bd8e-559c7d3754e1'\
    },{\
      user: 'user:anne',\
      relation: 'reader',\
      object: 'document:Z',\
      correlationId: 'da452239-a4e0-4791-b5d1-fb3d451ac078'\
    }\
  ],
}

const options = {
  authorization_model_id: '01HVMMBCMGZNT3SED4Z17ECXCA',
  maxBatchSize: 50, // optional, default is 50, can be used to limit the number of checks in a single server request
  maxParallelRequests: 10, // optional, default is 10, can be used to limit the parallelization of the BatchCheck chunks
};
const { result } = await fgaClient.batchCheck(body, options);

/*
{
  "results": [\
    {\
      "correlationId": '886224f6-04ae-4b13-bd8e-559c7d3754e1',\
      "allowed": false,\
      "request": {\
        "user": 'user:anne',\
        "relation": 'writer',\
        "object": 'document:Z'}\
    }, {\
      "correlationId": 'da452239-a4e0-4791-b5d1-fb3d451ac078',\
      "allowed": true,\
      "request": {\
        "user": 'user:anne',\
        "relation": 'reader',\
        "object": 'document:Z'}\
    }\
  ],
}
*/

```

```codeBlockLines_e6Vv
// The Go SDK does not yet support server-side batch checks. This currently just calls the check endpoint in parallel.

body := ClientBatchCheckBody{
  {
    User: "user:anne",
    Relation: "writer",
    Object: "document:Z",
  },
  {
    User: "user:anne",
    Relation: "reader",
    Object: "document:Z",
  },
}
options := ClientBatchCheckOptions{
  AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}
data, err := fgaClient.BatchCheck(context.Background()).Body(requestBody).Options(options).Execute()
/*
data = [{\
  Allowed: false,\
  Request: {\
    User: 'user:anne',\
    Relation: 'writer',\
    Object: 'document:Z'\
  }\
}, {\
  Allowed: true,\
  Request: {\
    User: 'user:anne',\
    Relation: 'reader',\
    Object: 'document:Z'\
  }\
}]
*/

```

```codeBlockLines_e6Vv
// The .NET SDK does not yet support server-side batch checks. This currently just calls the check endpoint in parallel.

var body = new ClientBatchCheckRequest {
  Checks = new List<ClientCheckRequest>() {
    new() {
      User = "user:anne",
      Relation = "writer",
      Object = "document:Z",
    },
    new() {
      User = "user:anne",
      Relation = "reader",
      Object = "document:Z",
    },
  },
}
var options = new ClientBatchCheckOptions {
  AuthorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA",
}
var response = await fgaClient.BatchCheck(body, options);
/*
response.Responses = [{\
  Allowed: false,\
  Request: {\
    User: 'user:anne',\
    Relation: 'writer',\
    Object: 'document:Z'\
  }\
}, {\
  Allowed: true,\
  Request: {\
    User: 'user:anne',\
    Relation: 'reader',\
    Object: 'document:Z'\
  }\
}]
*/

```

```codeBlockLines_e6Vv
# Requires >=v0.9.0 for the server side BatchCheck, earlier versions support a client-side BatchCheck with a slightly different interface

checks = [\
  ClientBatchCheckItem(\
    user="user:anne",\
    relation="writer",\
    object="document:Z",\
    correlation_id="886224f6-04ae-4b13-bd8e-559c7d3754e1",\
  ClientBatchCheckItem(\
    user="user:anne",\
    relation="reader",\
    object="document:Z",\
    correlation_id="da452239-a4e0-4791-b5d1-fb3d451ac078"\
]
options = {
  authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"}
response = await fga_client.batch_check(ClientBatchCheckRequest(checks=checks), options)

# response.results = [{\
#  correlation_id: '886224f6-04ae-4b13-bd8e-559c7d3754e1',\
#  allowed: false,\
#  request: {\
#    user: 'user:anne',\
#    relation: 'writer',\
#    object: 'document:Z'}\
#}, {\
#  correlation_id: 'da452239-a4e0-4791-b5d1-fb3d451ac078',\
#  allowed: true,\
#  request: {\
#    user: 'user:anne',\
#    relation: 'reader',\
#    object: 'document:Z'}\
#}]

```

```codeBlockLines_e6Vv
 // Requires >=v0.8.0 for the server side BatchCheck, earlier versions support a client-side BatchCheck with a slightly different interface
var request = new ClientBatchCheckRequest().checks(
    List.of(
      new ClientBatchCheckItem()
          .user("user:anne")
          .relation("writer")
          ._object("document:Z")
          .correlationId("886224f6-04ae-4b13-bd8e-559c7d3754e1"),
      new ClientBatchCheckItem()
          .user("user:anne")
          .relation("reader")
          ._object("document:Z")
          .correlationId("da452239-a4e0-4791-b5d1-fb3d451ac078")
);

var options = new ClientBatchCheckOptions()
    .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA")
    .maxBatchSize(50) // optional, default is 50, can be used to limit the number of checks in a single server request
    .maxParallelRequests(10); // optional, default is 10, can be used to limit the parallelization of the BatchCheck chunks

var response = fgaClient.batchCheck(request, options).get();

/*
{
  "result": [\
    {\
      "correlationId": '886224f6-04ae-4b13-bd8e-559c7d3754e1',\
      "allowed": false,\
      "request": {\
        "user": 'user:anne',\
        "relation": 'writer',\
        "_object": 'document:Z'}\
    }, {\
      "correlationId": 'da452239-a4e0-4791-b5d1-fb3d451ac078',\
      "allowed": true,\
      "request": {\
        "user": 'user:anne',\
        "relation": 'reader',\
        "_object": 'document:Z'}\
    }\
  ],
}
*/

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/batch-check \
-H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
-H "content-type: application/json" \
-d '{
  "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA",
  "checks": [\
    {\
      "tuple_key": {\
        "user":"user:anne",\
        "relation":"writer",\
        "object":"document:Z",\
      },\
      "correlation_id": "886224f6-04ae-4b13-bd8e-559c7d3754e1"\
    },\
    {\
      "tuple_key": {\
        "user":"user:anne",\
        "relation":"reader",\
        "object":"document:Z",\
      },\
      "correlation_id": "da452239-a4e0-4791-b5d1-fb3d451ac078"\
    },\
\
\
# Response:\
{\
  "results": {\
    { "886224f6-04ae-4b13-bd8e-559c7d3754e1": { "allowed": false }}, # writer\
    { "da452239-a4e0-4791-b5d1-fb3d451ac078": { "allowed": true }}, # reader\
\
  }\
}\
\
```\
\
```codeBlockLines_e6Vv\
BatchCheck([\
  - user="user:anne", relation="writer", object="document:Z", correlation_id="886224f6-04ae-4b13-bd8e-559c7d3754e1"\
  - user="user:anne", relation="reader", object="document:Z", correlation_id="da452239-a4e0-4791-b5d1-fb3d451ac078"\
])\
\
Reply:\
  - correlation_id="886224f6-04ae-4b13-bd8e-559c7d3754e1": false\
  - correlation_id="da452239-a4e0-4791-b5d1-fb3d451ac078": true\
\
```\
\
The result will include an `allowed` field for each authorization check that will return `true` if the relationship exists and `false` if the relationship does not exist.\
\
#### Configuring Batch Check [​](https://openfga.dev/docs/getting-started/perform-check\#configuring-batch-check "Direct link to Configuring Batch Check")\
\
BatchCheck has two available configuration options:\
\
1. Limit the number of checks allowed in a single BatchCheck request.\
   - Environment variable: `OPENFGA_MAX_CHECKS_PER_BATCH_CHECK`\
   - Command line flag: `--max-checks-per-batch-check`\
   - If more items are received in a single request than allowed by this limit, the API will return an error.\
2. Limit the number of Checks which can be resolved concurrently\
   - Environment variable: `OPENFGA_MAX_CONCURRENT_CHECKS_PER_BATCH_CHECK`\
   - Command line flag: `--max-concurrent-checks-per-batch-check`\
\
## Related Sections [​](https://openfga.dev/docs/getting-started/perform-check\#related-sections "Direct link to Related Sections")\
\
Take a look at the following section for more on how to perform authorization checks in your system\
\
OpenFGA Check API\
\
Read the Check API documentation and see how it works.\
\
- [More](https://openfga.dev/api/service#Relationship%20Queries/Check)\
\
OpenFGA Batch Check API\
\
Read the Batch Check API documentation and see how it works.\
\
- [More](https://openfga.dev/api/service#Relationship%20Queries/BatchCheck)\
\
- [Before you start](https://openfga.dev/docs/getting-started/perform-check#before-you-start)\
- [Step by step](https://openfga.dev/docs/getting-started/perform-check#step-by-step)\
  - [01\. Configure the  API client](https://openfga.dev/docs/getting-started/perform-check#01-configure-the--api-client)\
  - [02\. Calling Check API](https://openfga.dev/docs/getting-started/perform-check#02-calling-check-api)\
  - [03\. Calling Batch Check API](https://openfga.dev/docs/getting-started/perform-check#03-calling-batch-check-api)\
    - [Configuring Batch Check](https://openfga.dev/docs/getting-started/perform-check#configuring-batch-check)\
- [Related Sections](https://openfga.dev/docs/getting-started/perform-check#related-sections)

## Managing Group Membership
[Skip to main content](https://openfga.dev/docs/interacting/managing-group-membership#__docusaurus_skipToContent_fallback)

On this page

In this guide you will learn how to update a user's membership to a group by adding and removing them from it.

When to use

Suppose:

- An employee is hired at a company and thus gains access to all of the company's resources.
- An employee quits and thus loses access to all of the company's resources.
- A user joins a GitHub organization and gains access to the organizations private repositories.
- A student graduates from school and loses access to the school's facilities.

These are cases where using group membership can be helpful as you do not need to iterate over all of the group's resources to add or revoke access to particular objects. You can add a relationship tuple indicating that a user belongs to a group, or delete a tuple to indicate that a user is no longer part of the group.

## Before you start [​](https://openfga.dev/docs/interacting/managing-group-membership\#before-you-start "Direct link to Before you start")

In order to understand this guide correctly you must be familiar with some [OpenFGA Concepts](https://openfga.dev/docs/concepts) and know how to develop the things that we will list below.

Assume that you have the following [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model).

You have two [types](https://openfga.dev/docs/concepts#what-is-a-type):

- `org` that can have a `member` relation
- `document` that can have a `reader` relation.

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type org
  relations
    define member: [user]

type document
  relations
    define reader: [org#member]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "org",\
      "relations": {\
        "member": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "member": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "document",\
      "relations": {\
        "reader": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "reader": {\
            "directly_related_user_types": [\
              {\
                "type": "org",\
                "relation": "member"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

Let us also assume that we have an `org` called "contoso" and a `document` called `planning`, and every `member` of that `org` can read the document. That is represented by having the following _[relationship tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple)_ in the store:

```codeBlockLines_e6Vv
[// Members of the contoso org can read the planning document\
  {\
  "_description": "Members of the contoso org can read the planning document",\
  "user": "org:contoso#member",\
  "relation": "reader",\
  "object": "document:planning"\
}]

```

With the above authorization model and relationship tuples, OpenFGA will respond with `{"allowed":false}` when _[check](https://openfga.dev/docs/concepts#what-is-a-check-request)_ is called to see if Anne can read `document:planning`.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'anne',
    relation: 'reader',
    object: 'document:planning',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "anne",
    Relation: "reader",
    Object:   "document:planning",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "anne",
    Relation = "reader",
    Object = "document:planning",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="anne",
    relation="reader",
    object="document:planning",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("anne")
        .relation("reader")
        ._object("document:planning");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA anne reader document:planning

# Response: {"allowed":false}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"anne","relation":"reader","object":"document:planning"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "anne", // check if the user `anne`
  relation = "reader", // has an `reader` relation
  object = "document:planning", // with the object `document:planning`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is anne related to document:planning as reader?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

Now let's make Anne a `member` of `org:contoso` by adding another tuple:

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // Anne is a member of the contoso org\
      {"_description":"Anne is a member of the contoso org","user":"user:anne","relation":"member","object":"org:contoso"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             // Anne is a member of the contoso org
             User: "user:anne",
             Relation: "member",
             Object: "org:contoso",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
    // Anne is a member of the contoso org
       new() {
                  User = "user:anne",
                  Relation = "member",
                  Object = "org:contoso"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    # Anne is a member of the contoso org\
                    user="user:anne",\
                    relation="member",\
                    object="org:contoso",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                // Anne is a member of the contoso org
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("member")
                        ._object("org:contoso")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"_description":"Anne is a member of the contoso org","user":"user:anne","relation":"member","object":"org:contoso"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne member org:contoso

```

```codeBlockLines_e6Vv
write([\
    // Anne is a member of the contoso org\
    {\
      "user":"user:anne",\
      "relation":"member",\
      "object":"org:contoso"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

The OpenFGA service will now correctly respond with `{"allowed":true}` when check is called to see if Anne can read `document:planning`, but it will still respond with `{"allowed":false}` if we ask the same question for another user called Becky, who is not a member of the group `org:contoso`.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'reader',
    object: 'document:planning',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "reader",
    Object:   "document:planning",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "reader",
    Object = "document:planning",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="reader",
    object="document:planning",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("reader")
        ._object("document:planning");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne reader document:planning

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"reader","object":"document:planning"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "reader", // has an `reader` relation
  object = "document:planning", // with the object `document:planning`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to document:planning as reader?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:becky',
    relation: 'reader',
    object: 'document:planning',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:becky",
    Relation: "reader",
    Object:   "document:planning",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:becky",
    Relation = "reader",
    Object = "document:planning",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:becky",
    relation="reader",
    object="document:planning",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:becky")
        .relation("reader")
        ._object("document:planning");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:becky reader document:planning

# Response: {"allowed":false}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:becky","relation":"reader","object":"document:planning"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:becky", // check if the user `user:becky`
  relation = "reader", // has an `reader` relation
  object = "document:planning", // with the object `document:planning`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:becky related to document:planning as reader?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

### Modeling user groups [​](https://openfga.dev/docs/interacting/managing-group-membership\#modeling-user-groups "Direct link to Modeling user groups")

You need to know how to add users to groups and grant groups access to an object. [Learn more →](https://openfga.dev/docs/modeling/user-groups)

### Managing group access [​](https://openfga.dev/docs/interacting/managing-group-membership\#managing-group-access "Direct link to Managing group access")

You need to know how to manage group access to an object. [Learn more →](https://openfga.dev/docs/interacting/managing-group-access)

### OpenFGA concepts [​](https://openfga.dev/docs/interacting/managing-group-membership\#-concepts "Direct link to -concepts")

- A [Type](https://openfga.dev/docs/concepts#what-is-a-type): a class of objects that have similar characteristics
- A [User](https://openfga.dev/docs/concepts#what-is-a-user): an entity in the system that can be related to an object
- A [Relation](https://openfga.dev/docs/concepts#what-is-a-relation): is a string defined in the type definition of an authorization model that defines the possibility of a relationship between an object of the same type as the type definition and a user in the system
- An [Object](https://openfga.dev/docs/concepts#what-is-an-object): represents an entity in the system. Users' relationships to it can be define through relationship tuples and the authorization model
- A [Relationship Tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple): a grouping consisting of a user, a relation and an object stored in OpenFGA

## Step by step [​](https://openfga.dev/docs/interacting/managing-group-membership\#step-by-step "Direct link to Step by step")

### 01\. Revoking group membership [​](https://openfga.dev/docs/interacting/managing-group-membership\#01-revoking-group-membership "Direct link to 01. Revoking group membership")

Imagine that every member of `org:contoso` has a `reader` relationship to 1000 documents. Now imagine that `anne` is no longer a member of `org:contoso`, so we want to revoke her access to all those documents, including `document:planning`. To accomplish this, we can simply **delete** the tuple in OpenFGA that specifies that Anne is a `member` of `org:contoso`.

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  deletes: [\
      { user: 'user:anne', relation: 'member', object: 'org:contoso'}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Deletes: []ClientTupleKeyWithoutCondition{
        {
             User: "user:anne",
             Relation: "member",
             Object: "org:contoso",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Deletes = new List<ClientTupleKeyWithoutCondition>() {
    new() { User = "user:anne", Relation = "member", Object = "org:contoso" }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        deletes=[\
                ClientTuple(\
                    user="user:anne",\
                    relation="member",\
                    object="org:contoso",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .deletes(List.of(
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("member")
                        ._object("org:contoso")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"deletes": { "tuple_keys" : [{"user":"user:anne","relation":"member","object":"org:contoso"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv

fga tuple delete --store-id=${FGA_STORE_ID} user:anne member org:contoso

```

```codeBlockLines_e6Vv

delete([\
    {\
      "user":"user:anne",\
      "relation":"member",\
      "object":"org:contoso"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

### 02\. Validating revoked member no longer has access [​](https://openfga.dev/docs/interacting/managing-group-membership\#02-validating-revoked-member-no-longer-has-access "Direct link to 02. Validating revoked member no longer has access")

Once the above relationship tuple is deleted, we can check if Anne can read `document:planning`. OpenFGA will return `{ "allowed": false }`.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'reader',
    object: 'document:planning',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "reader",
    Object:   "document:planning",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "reader",
    Object = "document:planning",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="reader",
    object="document:planning",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("reader")
        ._object("document:planning");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne reader document:planning

# Response: {"allowed":false}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"reader","object":"document:planning"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "reader", // has an `reader` relation
  object = "document:planning", // with the object `document:planning`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:anne related to document:planning as reader?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

## Related Sections [​](https://openfga.dev/docs/interacting/managing-group-membership\#related-sections "Direct link to Related Sections")

Check the following sections for more on how to model group.

Modeling User Groups

Learn about how to model users and groups.

- [More](https://openfga.dev/docs/modeling/user-groups)

Managing Group Access

Learn about managing group access.

- [More](https://openfga.dev/docs/interacting/managing-group-access)

- [Before you start](https://openfga.dev/docs/interacting/managing-group-membership#before-you-start)
  - [Modeling user groups](https://openfga.dev/docs/interacting/managing-group-membership#modeling-user-groups)
  - [Managing group access](https://openfga.dev/docs/interacting/managing-group-membership#managing-group-access)
  - [concepts](https://openfga.dev/docs/interacting/managing-group-membership#-concepts)
- [Step by step](https://openfga.dev/docs/interacting/managing-group-membership#step-by-step)
  - [01\. Revoking group membership](https://openfga.dev/docs/interacting/managing-group-membership#01-revoking-group-membership)
  - [02\. Validating revoked member no longer has access](https://openfga.dev/docs/interacting/managing-group-membership#02-validating-revoked-member-no-longer-has-access)
- [Related Sections](https://openfga.dev/docs/interacting/managing-group-membership#related-sections)

## OpenFGA Model Migration
[Skip to main content](https://openfga.dev/docs/modeling/migrating/migrating-models#__docusaurus_skipToContent_fallback)

On this page

You can think of model migrations for OpenFGA in the same way as you think about relational database migrations. You can perform migrations with or without downtime for both, and for some changes, doing them without downtime is harder.

| OpenFGA | Relational Databases |
| --- | --- |
| Add a type | Add a table |
| Remove a type | Remove a table |
| Rename a type | Rename a table |
| Add a relation | Add a nullable column |
| Rename a relation | Rename a column |
| Delete a relation | Delete a column |

When thinking about migrations, keep in mind that:

- [Models are immutable](https://openfga.dev/docs/getting-started/immutable-models).
- The tuples that are not valid according to the specified model, are ignored when evaluating queries.

## To add a type or relation [​](https://openfga.dev/docs/modeling/migrating/migrating-models\#to-add-a-type-or-relation "Direct link to To add a type or relation")

1. Add the type or relation to the authorization model, and write the model to the store. This will generate a new model ID.
2. If you have tuples to write for the new types/relations, write them.
3. Update the application code to start using those new types/relations.
4. Configure the application to start using the new model ID.

## To delete a type or relation [​](https://openfga.dev/docs/modeling/migrating/migrating-models\#to-delete-a-type-or-relation "Direct link to To delete a type or relation")

1. Delete the type or relation to the authorization model, and write the model to the store. This will generate a new model ID.
2. Update the application code to stops using the deleted types/relations.
3. Configure the application to start using the new model ID.
4. Delete the tuples for the deleted type/relations. While not required, doing so can improve performance. Invalid tuples will be ignored during query evaluation, but their presence may slow down the process if they need to be retrieved.

## To rename a type or relation [​](https://openfga.dev/docs/modeling/migrating/migrating-models\#to-rename-a-type-or-relation "Direct link to To rename a type or relation")

- [This document](https://openfga.dev/docs/modeling/migrating/migrating-relations) describes an end-to-end example for that use case.

- [To add a type or relation](https://openfga.dev/docs/modeling/migrating/migrating-models#to-add-a-type-or-relation)
- [To delete a type or relation](https://openfga.dev/docs/modeling/migrating/migrating-models#to-delete-a-type-or-relation)
- [To rename a type or relation](https://openfga.dev/docs/modeling/migrating/migrating-models#to-rename-a-type-or-relation)

## OpenFGA Query Consistency
[Skip to main content](https://openfga.dev/docs/interacting/consistency#__docusaurus_skipToContent_fallback)

On this page

## Background [​](https://openfga.dev/docs/interacting/consistency\#background "Direct link to Background")

When querying OpenFGA using Read or any of the query APIs like [Check, Expand, ListObjects and ListUsers](https://openfga.dev/docs/interacting/relationship-queries), you can specify a query consistency parameter that can have one of the following values:

| Name | Description |
| --- | --- |
| MINIMIZE\_LATENCY (default) | OpenFGA will serve queries from the cache when possible |
| HIGHER\_CONSISTENCY | OpenFGA will skip the cache and query the database directly |

If you write a tuple and you immediately make a Check on a relation affected by that tuple using `MINIMIZE_LATENCY`, the tuple change might not be taken in consideration if OpenFGA serves the result from the cache.

## When to use higher consistency [​](https://openfga.dev/docs/interacting/consistency\#when-to-use-higher-consistency "Direct link to When to use higher consistency")

When specifying `HIGHER_CONSISTENCY` you are trading off consistency for latency and system performance. Always specifying `HIGHER_CONSISTENCY` will have a significant impact in performance.

If you have a use case where higher consistency is needed, it's recommended that whenever possible, you decide in runtime the consistency level you need. If you are storing a timestamp indicating when a resource was last modified in your database, you can use that to decide the kind of request you do.

For example, if you share `document:readme` with a `user:anne` and you update a `modified_date` field in the `document` table when that happens, you can write code like the below when calling `check("user:anne", "can_view", "document:readme")` to avoid paying the price of additional latency when calling the API.

```codeBlockLines_e6Vv
if (date_modified + cache_time_to_live_period > Date.now()) {
    const { allowed } = await fgaClient.check(
      { user: "user:anne", relation: "can_view", object: "document:roadmap"}
    );
} else {
    const { allowed } = await fgaClient.check(
        {  user: "user:anne", relation: "can_view", object: "document:roadmap"},
        {  consistency: ConsistencyPreference.HigherConsistency }
    );
}

```

## Cache expiration [​](https://openfga.dev/docs/interacting/consistency\#cache-expiration "Direct link to Cache expiration")

OpenFGA caching is disabled by default. When caching is disabled, all queries will have strong consistency regardless of the consistency mode specified. When caching is enabled, the cache will be used for queries with `MINIMIZE_LATENCY` consistency mode.

You can use the following command line parameters to configure OpenFGA's cache. To see the default value of each parameter, please run `openfga run --help`.

| Name | Description |
| --- | --- |
| check-cache-limit | Configures the number of items that will be kept in the in-memory cache used to resolve Check queries |
| check-query-cache-enabled | Enables in-memory caching of Check subproblems. For example, if you have a relation `define viewer: owner or editor`, and the query is `Check(user:anne, viewer, doc:1)`, we'll evaluate the `owner` relation and the `editor` relation and cache both results: `(user:anne, viewer, doc:1) -> allowed=true` and `(user:anne, owner, doc:1) -> allowed=true`. |
| check-query-cache-ttl | Specifies the time that items will be kept in the cache of Check subproblems |
| check-iterator-cache-enabled | Enables in-memory caching of database iterators. Each iterator is the result of a database query, for example, usersets related to a specific object, or objects related to a specific user, up to a certain number of tuples per iterator |
| check-iterator-cache-max-results | Configures the number of tuples that will be stored for each database iterator |
| check-iterator-cache-ttl | Specifies the time that items will be kept in the cache of database iterators |
| cache-controller-enabled | When enabled, cache controller will verify whether check subproblem cache and check iterator cache needs to be invalidated when there is a check or list objects API request. The invalidation determination is based on whether there are recent write or deletes for the store. This feature allows a larger check-query-cache-ttl and check-iterator-cache-ttl at the expense of additional datastore queries for recent writes and deletes. |
| cache-controller-ttl | Specifies how frequently the cache controller checks for Writes occurring. While the cache controller result is cached, the server will not read the datastore to check whether subproblem cache and iterator cache needs to be invalidated. |

Learn how to [configure OpenFGA](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga).

Currently, the cache is used by Check and partially in ListObjects. It will be implemented for other query endpoints in the future.

## Future work [​](https://openfga.dev/docs/interacting/consistency\#future-work "Direct link to Future work")

The [Zanzibar paper](https://openfga.dev/docs/authorization-concepts#what-is-zanzibar) has a feature called `Zookies`, which is a consistency token that is returned from Write operation. You can store that token in you resource table, and specify it in subsequent calls to query APIs.

OpenFGA is considering a similar feature in future releases.

## Related Sections [​](https://openfga.dev/docs/interacting/consistency\#related-sections "Direct link to Related Sections")

Check the following sections for more on how to check, read and expand.

Relationship Queries

Comparison Between Check, Read And Expand API Calls.

- [More](https://openfga.dev/docs/interacting/relationship-queries)

- [Background](https://openfga.dev/docs/interacting/consistency#background)
- [When to use higher consistency](https://openfga.dev/docs/interacting/consistency#when-to-use-higher-consistency)
- [Cache expiration](https://openfga.dev/docs/interacting/consistency#cache-expiration)
- [Future work](https://openfga.dev/docs/interacting/consistency#future-work)
- [Related Sections](https://openfga.dev/docs/interacting/consistency#related-sections)

## Authorization Conditions Overview
[Skip to main content](https://openfga.dev/docs/modeling/conditions#__docusaurus_skipToContent_fallback)

On this page

## Overview [​](https://openfga.dev/docs/modeling/conditions\#overview "Direct link to Overview")

Conditions allow you to model more complex authorization modeling scenarios involving attributes and can be used to represent some Attribute-based Access Control (ABAC) policies. Take a look at the [Conditions](https://openfga.dev/docs/concepts#what-is-a-condition) and [Conditional Relationship Tuples](https://openfga.dev/docs/concepts#what-is-a-conditional-relationship-tuple) concepts for a quick overview.

There are various use cases where Conditions can be helpful. These include, but are not limited to:

- [**Temporal Access Policies**](https://github.com/openfga/sample-stores/tree/main/stores/temporal-access) \- manage user access for a window of time.
- [**IP Allowlists or Geo-fencing Policies**](https://github.com/openfga/sample-stores/tree/main/stores/ip-based-access) \- limit or grant access based on an IP Address range or corporate network policy.
- [**Usage-based/Feature-based Policies (Entitlements)**](https://github.com/openfga/sample-stores/tree/main/stores/advanced-entitlements) \- enforce quota or usage of some resource or feature.
- [**Resource-attribute Policies**](https://github.com/openfga/sample-stores/tree/main/stores/groups-resource-attributes) \- define policies to access resources based on attributes/fields of the resource(s).

For more information and background context on why we added this feature, please see our blog post on [Conditional Relationship Tuples for OpenFGA](https://openfga.dev/blog/conditional-tuples-announcement).

## Defining conditions in models [​](https://openfga.dev/docs/modeling/conditions\#defining-conditions-in-models "Direct link to Defining conditions in models")

For this example we'll use the following authorization model to demonstrate a temporal based access policy. Namely, a user can view a document if and only if they have been granted the viewer relationship AND their non-expired grant policy is met.

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define viewer: [user with non_expired_grant]

condition non_expired_grant(current_time: timestamp, grant_time: timestamp, grant_duration: duration) {
  current_time < grant_time + grant_duration
}

```

note

The type restriction for `document#viewer` requires that any user of type `user` that is written in the relationship tuple must be accompanied by the `non_expired_grant` condition. This is denoted by the `user with non_expired_grant` specification.

Write the model to the FGA store:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl

```codeBlockLines_e6Vv

const { authorization_model_id: id } = await fgaClient.writeAuthorizationModel({
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "document",\
      "relations": {\
        "viewer": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user",\
                "condition": "non_expired_grant"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ],
  "conditions": {
    "non_expired_grant": {
      "name": "non_expired_grant",
      "expression": "current_time < grant_time + grant_duration",
      "parameters": {
        "current_time": {
          "type_name": "TYPE_NAME_TIMESTAMP"
        },
        "grant_duration": {
          "type_name": "TYPE_NAME_DURATION"
        },
        "grant_time": {
          "type_name": "TYPE_NAME_TIMESTAMP"
        }
      }
    }
  }
});
// id = "01HVMMBCMGZNT3SED4Z17ECXCA"

```

```codeBlockLines_e6Vv

  var writeAuthorizationModelRequestString = "{\"schema_version\":\"1.1\",\"type_definitions\":[{\"type\":\"user\"},{\"type\":\"document\",\"relations\":{\"viewer\":{\"this\":{}}},\"metadata\":{\"relations\":{\"viewer\":{\"directly_related_user_types\":[{\"type\":\"user\",\"condition\":\"non_expired_grant\"}]}}}}],\"conditions\":{\"non_expired_grant\":{\"name\":\"non_expired_grant\",\"expression\":\"current_time < grant_time + grant_duration\",\"parameters\":{\"current_time\":{\"type_name\":\"TYPE_NAME_TIMESTAMP\"},\"grant_duration\":{\"type_name\":\"TYPE_NAME_DURATION\"},\"grant_time\":{\"type_name\":\"TYPE_NAME_TIMESTAMP\"}}}}}"
  var body WriteAuthorizationModelRequest
  if err := json.Unmarshal([]byte(writeAuthorizationModelRequestString), &body); err != nil {
      // .. Handle error
      return
  }

  data, err := fgaClient.WriteAuthorizationModel(context.Background()).
      Body(body).
      Execute()

  if err != nil {
      // .. Handle error
  }

  // data.AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA"

```

```codeBlockLines_e6Vv

  var modelJson = "{\"schema_version\":\"1.1\",\"type_definitions\":[{\"type\":\"user\"},{\"type\":\"document\",\"relations\":{\"viewer\":{\"this\":{}}},\"metadata\":{\"relations\":{\"viewer\":{\"directly_related_user_types\":[{\"type\":\"user\",\"condition\":\"non_expired_grant\"}]}}}}],\"conditions\":{\"non_expired_grant\":{\"name\":\"non_expired_grant\",\"expression\":\"current_time < grant_time + grant_duration\",\"parameters\":{\"current_time\":{\"type_name\":\"TYPE_NAME_TIMESTAMP\"},\"grant_duration\":{\"type_name\":\"TYPE_NAME_DURATION\"},\"grant_time\":{\"type_name\":\"TYPE_NAME_TIMESTAMP\"}}}}}";
  var body = JsonSerializer.Deserialize<OpenFga.Sdk.Model.WriteAuthorizationModelRequest>(modelJson);

  var response = await fgaClient.WriteAuthorizationModel(body);
  // response.AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA"

```

```codeBlockLines_e6Vv

# from openfga_sdk.models.write_authorization_model_request import WriteAuthorizationModelRequest

async def write_authorization_model():
    body_string = "{\"schema_version\":\"1.1\",\"type_definitions\":[{\"type\":\"user\"},{\"type\":\"document\",\"relations\":{\"viewer\":{\"this\":{}}},\"metadata\":{\"relations\":{\"viewer\":{\"directly_related_user_types\":[{\"type\":\"user\",\"condition\":\"non_expired_grant\"}]}}}}],\"conditions\":{\"non_expired_grant\":{\"name\":\"non_expired_grant\",\"expression\":\"current_time < grant_time + grant_duration\",\"parameters\":{\"current_time\":{\"type_name\":\"TYPE_NAME_TIMESTAMP\"},\"grant_duration\":{\"type_name\":\"TYPE_NAME_DURATION\"},\"grant_time\":{\"type_name\":\"TYPE_NAME_TIMESTAMP\"}}}}}"
    response = await fga_client_instance.write_authorization_model(json.loads(body))
    # response.authorization_model_id = "01HVMMBCMGZNT3SED4Z17ECXCA"

```

```codeBlockLines_e6Vv
// import com.fasterxml.jackson.databind.ObjectMapper;
// import dev.openfga.sdk.api.model.WriteAuthorizationModelRequest;

var mapper = new ObjectMapper().findAndRegisterModules();
var authorizationModel = fgaClient
            .writeAuthorizationModel(mapper.readValue("{\"schema_version\":\"1.1\",\"type_definitions\":[{\"type\":\"user\"},{\"type\":\"document\",\"relations\":{\"viewer\":{\"this\":{}}},\"metadata\":{\"relations\":{\"viewer\":{\"directly_related_user_types\":[{\"type\":\"user\",\"condition\":\"non_expired_grant\"}]}}}}],\"conditions\":{\"non_expired_grant\":{\"name\":\"non_expired_grant\",\"expression\":\"current_time < grant_time + grant_duration\",\"parameters\":{\"current_time\":{\"type_name\":\"TYPE_NAME_TIMESTAMP\"},\"grant_duration\":{\"type_name\":\"TYPE_NAME_DURATION\"},\"grant_time\":{\"type_name\":\"TYPE_NAME_TIMESTAMP\"}}}}}", WriteAuthorizationModelRequest.class))
            .get();

```

```codeBlockLines_e6Vv
fga model write --store-id=${FGA_STORE_ID} --format=json '{"schema_version":"1.1","type_definitions":[{"type":"user"},{"type":"document","relations":{"viewer":{"this":{}}},"metadata":{"relations":{"viewer":{"directly_related_user_types":[{"type":"user","condition":"non_expired_grant"}]}}}}],"conditions":{"non_expired_grant":{"name":"non_expired_grant","expression":"current_time < grant_time + grant_duration","parameters":{"current_time":{"type_name":"TYPE_NAME_TIMESTAMP"},"grant_duration":{"type_name":"TYPE_NAME_DURATION"},"grant_time":{"type_name":"TYPE_NAME_TIMESTAMP"}}}}}'

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/authorization-models \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"schema_version":"1.1","type_definitions":[{"type":"user"},{"type":"document","relations":{"viewer":{"this":{}}},"metadata":{"relations":{"viewer":{"directly_related_user_types":[{"type":"user","condition":"non_expired_grant"}]}}}}],"conditions":{"non_expired_grant":{"name":"non_expired_grant","expression":"current_time < grant_time + grant_duration","parameters":{"current_time":{"type_name":"TYPE_NAME_TIMESTAMP"},"grant_duration":{"type_name":"TYPE_NAME_DURATION"},"grant_time":{"type_name":"TYPE_NAME_TIMESTAMP"}}}}}'

```

## Writing conditional relationship tuples [​](https://openfga.dev/docs/modeling/conditions\#writing-conditional-relationship-tuples "Direct link to Writing conditional relationship tuples")

Using the model above, when we [Write](https://openfga.dev/api/service#/Relationship%20Tuples/Write) relationship tuples to the OpenFGA store, then any `document#viewer` relationship with `user` objects must be accompanied by the condition `non_expired_grant` because the type restriction requires it.

For example, we can give `user:anne` viewer access to `document:1` for 10 minutes by writing the following relationship tuple:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"user:anne","relation":"viewer","object":"document:1","condition":{"name":"non_expired_grant","context":{"grant_time":"2023-01-01T00:00:00Z","grant_duration":"10m"}}}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             User: "user:anne",
             Relation: "viewer",
             Object: "document:1",
             Condition: &RelationshipCondition{
                 Name: "non_expired_grant",
                 Context: &map[string]interface{}{"grant_time":"2023-01-01T00:00:00Z","grant_duration":"10m"},
             },
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
       new() {
                  User = "user:anne",
                  Relation = "viewer",
                  Object = "document:1",
                  Condition = new RelationshipCondition(){
                    Name = "non_expired_grant",
                    Context = new {
                        grant_time="2023-01-01T00:00:00Z",
                        grant_duration="10m"
                    }
                  }
              }
  },
};
var response = await fgaClient.Write(body, options);

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    user="user:anne",\
                    relation="viewer",\
                    object="document:1",\
                    condition=RelationshipCondition(\
                        name='non_expired_grant',\
                        context=dict(\
                            grant_time="2023-01-01T00:00:00Z",\
                            grant_duration="10m"\
                        )\
                    )\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("viewer")
                        ._object("document:1")
                        .condition(new ClientRelationshipCondition()
                                .name("non_expired_grant")
                                .context(Map.of("grant_time", "2023-01-01T00:00:00Z","grant_duration", "10m"))
                        )

        ));

var response = fgaClient.write(body, options).get();

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne viewer document:1 --condition-name non_expired_grant --condition-context '{"grant_time":"2023-01-01T00:00:00Z","grant_duration":"10m"}'

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"user":"user:anne","relation":"viewer","object":"document:1","condition":{"name":"non_expired_grant","context":{"grant_time":"2023-01-01T00:00:00Z","grant_duration":"10m"}}}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

## Queries with condition context [​](https://openfga.dev/docs/modeling/conditions\#queries-with-condition-context "Direct link to Queries with condition context")

Now that we have written a [Conditional Relationship Tuple](https://openfga.dev/docs/concepts#what-is-a-conditional-relationship-tuple), we can query OpenFGA using the [Check API](https://openfga.dev/api/service#/Relationship%20Queries/Check) to see if `user:anne` has viewer access to `document:1` under certain conditions/context. That is, `user:anne` should only have access if the current timestamp is less than the grant timestamp (e.g. the time which the tuple was written) plus the duration of the grant (10 minutes). If the current timestamp is less than, then you'll get a permissive decision. For example,

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'viewer',
    object: 'document:1',
    context: {"current_time":"2023-01-01T00:09:50Z"}
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "viewer",
    Object:   "document:1",
    Context: &map[string]interface{}{"current_time":"2023-01-01T00:09:50Z"},
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "viewer",
    Object = "document:1",
    Context = new { current_time="2023-01-01T00:09:50Z" }
};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="viewer",
    object="document:1",
    context=dict(
        current_time="2023-01-01T00:09:50Z"
    )
)

response = await fga_client.check(body, options)

# response.allowed = true

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("viewer")
        ._object("document:1")
        .context(Map.of("current_time", "2023-01-01T00:09:50Z"));

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne viewer document:1 --context='{"current_time":"2023-01-01T00:09:50Z"}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"viewer","object":"document:1"},"context":{"current_time":"2023-01-01T00:09:50Z"}}'

# Response: {"allowed":true}

```

but if the current time is outside the grant window then you get a deny decision. For example,

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'viewer',
    object: 'document:1',
    context: {"current_time":"2023-01-01T00:10:01Z"}
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "viewer",
    Object:   "document:1",
    Context: &map[string]interface{}{"current_time":"2023-01-01T00:10:01Z"},
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "viewer",
    Object = "document:1",
    Context = new { current_time="2023-01-01T00:10:01Z" }
};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="viewer",
    object="document:1",
    context=dict(
        current_time="2023-01-01T00:10:01Z"
    )
)

response = await fga_client.check(body, options)

# response.allowed = false

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("viewer")
        ._object("document:1")
        .context(Map.of("current_time", "2023-01-01T00:10:01Z"));

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne viewer document:1 --context='{"current_time":"2023-01-01T00:10:01Z"}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"viewer","object":"document:1"},"context":{"current_time":"2023-01-01T00:10:01Z"}}'

# Response: {"allowed":false}

```

Similarly, we can use the [ListObjects API](https://openfga.dev/api/service#/Relationship%20Queries/ListObjects) to return all of the documents that `user:anne` has viewer access given the current time. For example,

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl

```codeBlockLines_e6Vv
const response = await fgaClient.listObjects({
  user: "user:anne",
  relation: "viewer",
  type: "document",
  context:{"current_time":"2023-01-01T00:09:50Z"},
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA",
});
// response.objects = ["document:1"]

```

```codeBlockLines_e6Vv
options := ClientListObjectsOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientListObjectsRequest{
    User:     "user:anne",
    Relation: "viewer",
    Type:     "document",
    Context: &map[string]interface{}{"current_time":"2023-01-01T00:09:50Z"},
}

data, err := fgaClient.ListObjects(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { "objects": ["document:1"] }

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientListObjectsRequest {
    User = "user:anne",
    Relation = "viewer",
    Type = "document",
    Context = new { current_time="2023-01-01T00:09:50Z" }
};

var response = await fgaClient.ListObjects(body, options);

// response.Objects = ["document:1"]

```

```codeBlockLines_e6Vv

options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientListObjectsRequest(
    user="user:anne",
    relation="viewer",
    type="document",
    context=dict(
        current_time="2023-01-01T00:09:50Z"
    )
)

response = await fga_client.list_objects(body, options)

# response.objects = ["document:1"]

```

```codeBlockLines_e6Vv
var options = new ClientListObjectsOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientListObjectsRequest()
        .user("user:anne")
        .relation("viewer")
        .type("document")
        .context(Map.of("current_time", "2023-01-01T00:09:50Z"));

var response = fgaClient.listObjects(body, options).get();

// response.getObjects() = ["document:1"]

```

```codeBlockLines_e6Vv
fga query list-objects --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne viewer document --context='{"current_time":"2023-01-01T00:09:50Z"}'

# Response: {"objects": ["document:1"]}

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/list-objects \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{
        "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA",
        "type": "document",
        "relation": "viewer",
        "user":"user:anne",
        "context":{"current_time":"2023-01-01T00:09:50Z"}
    }'

# Response: {"objects": ["document:1"]}

```

but if the current time is outside the grant window then we don't get the object in the response. For example,

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl

```codeBlockLines_e6Vv
const response = await fgaClient.listObjects({
  user: "user:anne",
  relation: "viewer",
  type: "document",
  context:{"current_time":"2023-01-01T00:10:01Z"},
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA",
});
// response.objects = []

```

```codeBlockLines_e6Vv
options := ClientListObjectsOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientListObjectsRequest{
    User:     "user:anne",
    Relation: "viewer",
    Type:     "document",
    Context: &map[string]interface{}{"current_time":"2023-01-01T00:10:01Z"},
}

data, err := fgaClient.ListObjects(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { "objects": [] }

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientListObjectsRequest {
    User = "user:anne",
    Relation = "viewer",
    Type = "document",
    Context = new { current_time="2023-01-01T00:10:01Z" }
};

var response = await fgaClient.ListObjects(body, options);

// response.Objects = []

```

```codeBlockLines_e6Vv

options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientListObjectsRequest(
    user="user:anne",
    relation="viewer",
    type="document",
    context=dict(
        current_time="2023-01-01T00:10:01Z"
    )
)

response = await fga_client.list_objects(body, options)

# response.objects = []

```

```codeBlockLines_e6Vv
var options = new ClientListObjectsOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientListObjectsRequest()
        .user("user:anne")
        .relation("viewer")
        .type("document")
        .context(Map.of("current_time", "2023-01-01T00:10:01Z"));

var response = fgaClient.listObjects(body, options).get();

// response.getObjects() = []

```

```codeBlockLines_e6Vv
fga query list-objects --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne viewer document --context='{"current_time":"2023-01-01T00:10:01Z"}'

# Response: {"objects": []}

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/list-objects \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{
        "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA",
        "type": "document",
        "relation": "viewer",
        "user":"user:anne",
        "context":{"current_time":"2023-01-01T00:10:01Z"}
    }'

# Response: {"objects": []}

```

note

When evaluating a condition at request time, the context written/persisted in the relationship tuple and the context provided at request time are merged together into a single evaluation context.

If you provide a context value in the request context that is also written/persisted in the relationship tuple, then the context values written in the relationship tuple take precedence. That is, the merge strategy is such that persisted context has higher precedence than request context.

## Examples [​](https://openfga.dev/docs/modeling/conditions\#examples "Direct link to Examples")

For more examples take a look at our [Sample Stores](https://github.com/openfga/sample-stores) repository. There are various examples with ABAC models in that repository.

## Supported parameter types [​](https://openfga.dev/docs/modeling/conditions\#supported-parameter-types "Direct link to Supported parameter types")

The following table enumerates the list of supported parameter types. The more formal list is defined in [https://github.com/openfga/openfga/tree/main/internal/condition/types](https://github.com/openfga/openfga/tree/main/internal/condition/types).

Note that some of the types support generics, these types are indicated with `<T>`.

| Friendly Type Name | Type Name (Protobuf Enum) | Description | Examples |
| --- | --- | --- | --- |
| int | TYPE\_NAME\_INT | A 64-bit signed integer value. | -1<br>"-1" |
| uint | TYPE\_NAME\_UINT | A 64-bit unsigned integer value. | 1<br>"1" |
| double | TYPE\_NAME\_DOUBLE | A double-width floating point value, represented equivalently as a Go `float64` value.<br>If the value is provided as a string we parse it with `strconv.ParseFloat(s, 64)`. See [`strconv.ParseFloat`](https://pkg.go.dev/strconv#ParseFloat) for more info. | 3.14159<br>-0.75<br>"1"<br>"-2.5" |
| bool | TYPE\_NAME\_BOOL | A boolean value. | true<br>false<br>"true"<br>"false" |
| bytes | TYPE\_NAME\_BYTES | An array of byte values specified as a byte string. | "bytestring" |
| string | TYPE\_NAME\_STRING | A string value. | "hello, world" |
| duration | TYPE\_NAME\_DURATION | A value representing a duration of time specified using Go duration string format.<br>See [time.Duration#ParseDuration](https://pkg.go.dev/time#ParseDuration) | "120s"<br>"2m" |
| timestamp | TYPE\_NAME\_TIMESTAMP | A timestamp value that follows the RFC3339 specification. | "2023-01-01T00:00:00Z" |
| any | TYPE\_NAME\_ANY | A variant type which permits any value to be provided. | {"x": 1}<br>"hello"<br>\["a", "b"\] |
| list<T> | TYPE\_NAME\_LIST | A list of values of generic type T. | list<string> - \["a", "b", "c"\]<br>list<int> - \[-1, 1\]<br>list<duration> - \["60s", "1m"\] |
| map<T> | TYPE\_NAME\_MAP | A map whose keys are strings and whose values are values of generic type T.<br>Any map value must have string keys, only the value types can vary. | map<int> - {"x": -1, "y": 1}<br>map<string> - {"key": "value"} |
| ipaddress | TYPE\_NAME\_IPADDRESS | A custom value type specified as a string representation of an IP Address. | "192.168.0.1" |

## Limitations [​](https://openfga.dev/docs/modeling/conditions\#limitations "Direct link to Limitations")

- The size of the condition `context` parameter that can be written alongside a relationship tuple is limited to 32KB in size.

- The size of the condition `context` parameter for query requests (e.g. Check, ListObjects, etc.) is not explicitly limited, but the OpenFGA server has an overall request size limit of 512KB at this time.

- We enforce a maximum Google CEL expression evaluation cost of 100 (by default) to protect the server from malicious conditions. The evaluation cost of a CEL expression is a function of the size the input that is being compared and the composition of the expression. For more general information please see the official [Language Definition for Google CEL](https://github.com/google/cel-spec/blob/master/doc/langdef.md). If you hit these limits with practical use-cases, please reach out to the maintainer team and we can discuss.


- [Overview](https://openfga.dev/docs/modeling/conditions#overview)
- [Defining conditions in models](https://openfga.dev/docs/modeling/conditions#defining-conditions-in-models)
- [Writing conditional relationship tuples](https://openfga.dev/docs/modeling/conditions#writing-conditional-relationship-tuples)
- [Queries with condition context](https://openfga.dev/docs/modeling/conditions#queries-with-condition-context)
- [Examples](https://openfga.dev/docs/modeling/conditions#examples)
- [Supported parameter types](https://openfga.dev/docs/modeling/conditions#supported-parameter-types)
- [Limitations](https://openfga.dev/docs/modeling/conditions#limitations)

## OpenFGA ListUsers API
[Skip to main content](https://openfga.dev/blog/page/2#__docusaurus_skipToContent_fallback)

Today we are launching a new API for OpenFGA: ListUsers.

This API will answer the question "what users have relation X with object Y?". This will be useful, for example, in UIs that want to display the list of users that a resource has been shared with, e.g. the "share" dialog in Google Docs.

You can read more about it in the [API docs](https://openfga.dev/api/service#/Relationship%20Queries/ListUsers) and the [product documentation](https://openfga.dev/docs/getting-started/perform-list-users).

## How to use it? [​](https://openfga.dev/blog/page/2\#how-to-use-it "Direct link to How to use it?")

ListUsers is available in OpenFGA starting with [v1.5.4](https://github.com/openfga/openfga/releases/tag/v1.5.4).

To be able to call this API, you must turn on this flag on the server: `--experimentals enable-list-users`. Be sure to also check out the various configuration flags that were added to control its behavior.

The new functionality is available on the latest versions of the [Java](https://github.com/openfga/java-sdk/), [.NET](https://github.com/openfga/dotnet-sdk/), [Go](https://github.com/openfga/go-sdk/) and [Javascript SDK](https://github.com/openfga/js-sdk/), [CLI](https://github.com/openfga/cli?tab=readme-ov-file#list-users) and [VS Code integration](https://marketplace.visualstudio.com/items?itemName=openfga.openfga-vscode).

We'll be releasing support for the Python SDK soon.

## We want your feedback! [​](https://openfga.dev/blog/page/2\#we-want-your-feedback "Direct link to We want your feedback!")

We want to learn how you use this API and how we can improve it!

Please reach out through our [community channels](https://openfga.dev/community) with any questions or feedback.

Welcome to Fine Grained News, April edition!

## New Releases! [​](https://openfga.dev/blog/page/2\#new-releases "Direct link to New Releases!")

- [Modular Models](https://openfga.dev/blog/modular-models-announcement) is now part of the OpenFGA core, making it easy for multiple teams to collaborate on a single OpenFGA model. Check it out, we love the feature! :)

- Thanks to the help provided by the [Spring Security team](https://github.com/spring-projects/spring-security/issues/14121) there's now a [Spring Boot Starter for OpenFGA](https://github.com/openfga/spring-boot-starter)!

- We shipped an OpenFGA Release Candidate with [a new ListUsers API](https://openfga.dev/blog/list-users-announcement), that can be enabled with an experimental flag. ListUsers allows you to retrieve all the users that have a specific relation with a resource, for example, all users that can view a document.


## OpenFGA Hackathon [​](https://openfga.dev/blog/page/2\#openfga-hackathon "Direct link to OpenFGA Hackathon")

A few weeks ago we hosted a Hackathon where multiple team members experimented new ideas around OpenFGA. You'll need to wait until the next [community meeting](https://github.com/openfga/community/blob/main/community-meetings.md) to learn more :).

## OpenFGA Security Assessment [​](https://openfga.dev/blog/page/2\#openfga-security-assessment "Direct link to OpenFGA Security Assessment")

We are working with the CNCF Tag-Security team on a [joint security assessment](https://github.com/cncf/tag-security/issues/1236), which is a step required to get accepted as a CNCF Incubation project.

## What's Next [​](https://openfga.dev/blog/page/2\#whats-next "Direct link to What's Next")

- In collaboration with [Yann D'Isanto](https://github.com/le-yams) we are building a [plugin for JetBrain's IDEs](https://github.com/le-yams/openfga4intellij) to allow syntax coloring and validation of OpenFGA models. Together with the [Visual Studio Code integration](https://marketplace.visualstudio.com/items?itemName=openfga.openfga-vscode) and the [Tree sitter grammar](https://github.com/matoous/tree-sitter-fga) from [Matouš Dzivjak](https://github.com/matoous/) OpenFGA will get great coverage for major IDEs and editors.

- We'll be [instrumenting our SDKs](https://github.com/openfga/roadmap/issues/41) to provide metrics / tracing and logging through OpenTelemetry APIs.

- We'll be adding [additional consistency options](https://github.com/openfga/roadmap/issues/54) for OpenFGA query APIs.

- We'll be working on adding [authorization for OpenFGA APIs](https://github.com/openfga/roadmap/issues/30).


Please check the items above and let us know if you have any feedback or idea.

## Transitioning from Discord to CNCF's Slack [​](https://openfga.dev/blog/page/2\#transitioning-from-discord-to-cncfs-slack "Direct link to Transitioning from Discord to CNCF's Slack")

As we mentioned in the last edition, we transitioned out from Discord for OpenFGA and are now using the CNCF [#openfga Slack channel](https://cloud-native.slack.com/archives/C06G1NNH47N). If you are not part of the CNCF Slack workspace, you need to join the [CNCF Slack](https://slack.cncf.io/) first.

## See you next month! [​](https://openfga.dev/blog/page/2\#see-you-next-month "Direct link to See you next month!")

Fine Grained News are published every month. If you have any feedback, want to share your OpenFGA story, or know about something that you think is worth mentioning, please let us know!

Modular models aims to improve the model authoring experience when multiple teams are maintaining a model, such as:

- A model can grow large and difficult to understand
- As more teams begin to contribute to a model, the ownership boundaries may not be clear and code review processes might not scale

With modular models, a single model can be separated across multiple files allow grouping of types and conditions into modules. This means that a model can be organized more easily in terms of team or organizational structure. Used in conjunction with features such as [GitHub](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners), [GitLab](https://docs.gitlab.com/ee/user/project/codeowners/) or [Gitea's](https://docs.gitea.com/usage/code-owners) code owners, it should become easier to ensure the owners of a portion of your model are correctly assigned to review it.

## How to use it? [​](https://openfga.dev/blog/page/2\#how-to-use-it "Direct link to How to use it?")

Modular models is available in the latest version of OpenFGA. To use it you need to:

- Update to the [v0.3.0 release](https://github.com/openfga/cli/releases/tag/v0.3.0) of the CLI
- Update to [v0.2.21](https://github.com/openfga/vscode-ext/releases/tag/v0.2.21) of the VS Code Extension
- Download [v1.5.3](https://github.com/openfga/openfga/releases/tag/v1.5.3) of OpenFGA
- Check out the modular models sample store in the [sample-stores repo](https://github.com/openfga/sample-stores/tree/main/stores/modular)
- Review the [documentation for this feature](https://openfga.dev/docs/modeling/modular-models)
- Check a [demo video in Youtube](https://youtu.be/oeqroL8-wCQ)

## What's next? [​](https://openfga.dev/blog/page/2\#whats-next "Direct link to What's next?")

Looking beyond the near term, modular models allows us to implement [additional API authorization options for OpenFGA](https://github.com/openfga/roadmap/issues/30).

## Reach out! [​](https://openfga.dev/blog/page/2\#reach-out "Direct link to Reach out!")

We want to learn how you use this feature and how we can improve it!

Please reach out through our [community channels](https://openfga.dev/community) with any questions or feedback.

Welcome to Fine Grained News, KubeCon Edition!

## KubeCon Europe 2024 was super-busy! [​](https://openfga.dev/blog/page/2\#kubecon-europe-2024-was-super-busy "Direct link to KubeCon Europe 2024 was super-busy!")

You can now watch online:

- An AppDeveloperCon session about [Implementing Modern Cloud Native Authorization Using OpenFGA](https://www.youtube.com/watch?v=5NkJHeToEwo) where [Pauline Jamin](https://github.com/paulinejamin) and [Andres Aguiar](https://github.com/aaguiarz) go over how OpenFGA is helping Agicap to implement fine-grained authorization.

- A 7-min Lightning Talk about [OpenFGA: The Cloud Native way to implement Fine Grained Authorization](https://www.youtube.com/watch?v=K7Me3OjFxJ0).

- [Jonathan Whitaker](https://www.linkedin.com/in/jonathan-whitaker-5a8b2484/)'s talk about [Federated IAM for Kubernetes with OpenFGA](https://www.youtube.com/watch?v=UaK1EnRgrng), demoing how to use OpenFGA and KeyCloak to implement fine-grained authorization in a Kubernetes cluster, in ways it's not possible today, like giving access to a user for 90 seconds.

- We also participated in [Canonical's Operator Day](https://app.myonvent.com/event/operator-day) sharing how Canonical is using OpenFGA, but the presentation is not online yet.


Also, thanks to everyone who stopped by the OpenFGA Kiosk in the Project Pavilion to share their feedback about the project or learn more about it!

## CNCF incubation [​](https://openfga.dev/blog/page/2\#cncf-incubation "Direct link to CNCF incubation")

As you may know, the CNCF has three stages for projects: Sandbox, Incubation, and Graduation. OpenFGA is currently a Sandbox project.

We are very happy to announce that we just [applied for Incubation](https://github.com/cncf/toc/pull/1276)! We are excited about this step and will keep you posted on the progress.

## New Adopters [​](https://openfga.dev/blog/page/2\#new-adopters "Direct link to New Adopters")

The OpenFGA community [maintains a list](https://github.com/openfga/community/blob/main/ADOPTERS.md) of products/projects/companies that are using OpenFGA in production. We'd like to thank thank the following adopters for adding themselves to the list in the last month:

- [Instill AI](https://www.instill.tech/)
- [Zuplo](https://zuplo.com/)
- [OpenObserve](https://openobserve.ai/)
- [Datum](https://datum.net/)

If you are using OpenFGA in production, please consider adding your company/project to the list.

## Community News [​](https://openfga.dev/blog/page/2\#community-news "Direct link to Community News")

- [Raghd Hamzeh](https://github.com/rhamzeh/) represented OpenFGA in an [episode on Authorizing Access](https://www.youtube.com/watch?v=VyHbFwfrf04) within a series called "You Choose - Choose Your Own Adventure: The Treacherous Trek to Security”. This episode was comparing OpenFGA with Hexa and Paralus. OpenFGA was the project viewers voted for as most interested in being featured in a demo.

- [Sam Bellen](https://github.com/Sambego) published a [Google Drive example](https://github.com/Sambego/fga-drive-example/) using OpenFGA. It's a Next.js project, written in TypeScript and ready to deploy on Vercel.

- [Philipp Wagner](https://github.com/bytefish) is working on a [.NET example](https://github.com/bytefish/gitclub-dotnet) inspired by the Github model.

- [Pauline Jamin](https://github.com/paulinejamin) and [Geoffroy Braun](https://github.com/geoffroybraun) will present about [Infuser du métier dans les autorisations avec ReBAC](https://www.devoxx.fr/schedule/talk/?id=42356) at [Devoxx France 2024](https://www.devoxx.fr/) in April 17th.


## New Releases [​](https://openfga.dev/blog/page/2\#new-releases "Direct link to New Releases")

We just shipped a [release candidate of Modular Models](https://openfga.dev/blog/modular-models-announcement), that makes it easy for multiple teams to collaborate in a single OpenFGA model. It requires the following components:

- [OpenFGA v.1.5.1](https://github.com/openfga/js-sdk/releases/tag/v0.3.5)
- [CLI v0.3.0](https://github.com/openfga/cli/releases/tag/v0.3.0)
- [Visual Studio Code Extension v0.2.20](https://github.com/openfga/vscode-ext/releases/tag/v0.2.20)

We also shipped new version of our SDKs with several fixes:

- [Javascript SDK 0.3.5](https://github.com/openfga/js-sdk/releases/tag/v0.3.5).
- [Go SDK v0.3.5](https://github.com/openfga/go-sdk/releases/tag/v0.3.5)
- [Java SDK v0.4.0](https://github.com/openfga/java-sdk/releases/tag/v0.4.0)

## Transitioning from Discord to CNCF's Slack [​](https://openfga.dev/blog/page/2\#transitioning-from-discord-to-cncfs-slack "Direct link to Transitioning from Discord to CNCF's Slack")

As we mentioned in the last edition, we transitioned out from Discord for OpenFGA and are now using the CNCF [#openfga Slack channel](https://cloud-native.slack.com/archives/C06G1NNH47N). If you are not part of the CNCF Slack workspace, you need to join the [CNCF Slack](https://slack.cncf.io/) first.

## See you next month! [​](https://openfga.dev/blog/page/2\#see-you-next-month "Direct link to See you next month!")

Fine Grained News are published every month. If you have any feedback, want to share your OpenFGA story, or know about something that you think is worth mentioning, please let us know!

Welcome to the 3rd edition of Fine Grained News!

## KubeCon Europe 2024 is getting closer! [​](https://openfga.dev/blog/page/2\#kubecon-europe-2024-is-getting-closer "Direct link to KubeCon Europe 2024 is getting closer!")

We'll be pretty busy during [KubeCon Europe 2024](https://events.linuxfoundation.org/kubecon-cloudnativecon-europe/):

- [Jonathan Whitaker](https://www.linkedin.com/in/jonathan-whitaker-5a8b2484/) from Okta will talk about [Federated IAM for Kubernetes with OpenFGA](https://kccnceu2024.sched.com/event/1YeQD)

- [Pauline Jamin](https://www.linkedin.com/in/paulinejamin/) from Agicap and [Andres Aguiar](https://www.linkedin.com/in/aaguiar/) from Okta will present on [Implementing Modern Cloud Native Authorization Using OpenFGA](https://colocatedeventseu2024.sched.com/event/1YFhM/implementing-modern-cloud-native-authorization-using-openfga-andres-aguiar-okta-pauline-jamin-agicap)

- OpenFGA will be present in [Canonical's Operator's day](https://app.myonvent.com/event/operator-day/), co-located at KubeCon EU. Andres Aguiar and Massimilano Gori from Canonical, will talk about how Canonical adopted OpenFGA for implementing authorization in [Juju](https://juju.is/).

- Andres Aguiar will also be delivering a Lightning Talk titled **OpenFGA - The Cloud Native way to implement Fine Grained Authorization** (link not available yet :) ).


We'll also have a kiosk in the CNCF Project Pavilion, so if you plan to attend let us know and we can schedule some time together!

## Documentation Improvements [​](https://openfga.dev/blog/page/2\#documentation-improvements "Direct link to Documentation Improvements")

We keep improving our documentation, and added a few new documents that you might find interesting:

- Learn how to [use the FGA CLI](https://openfga.dev/docs/getting-started/cli) to perform every possible operation on OpenFGA and simplify most common workflows.

- Learn how you can [test FGA models](https://openfga.dev/docs/modeling/testing) as part of your development flow or CI/CD pipelines, without the need to run an OpenFGA server.

- Learn how you can include [identity token claims contextual tuples](https://openfga.dev/docs/modeling/token-claims-contextual-tuples) to model ABAC-like scenarios or simplify data integrations with OpenFGA.


## OpenFGA in the Java Ecosystem [​](https://openfga.dev/blog/page/2\#openfga-in-the-java-ecosystem "Direct link to OpenFGA in the Java Ecosystem")

OpenFGA is getting bigger on the Java world! We are [working with the Spring Security team](https://github.com/spring-projects/spring-security/issues/14121) to build an Spring Security integration for OpenFGA. You can check the ideas we are exploring in [this repository](https://github.com/jimmyjames/fga-spring-examples).

Also, the Testcontainers team added [an OpenFGA integration for Java](https://java.testcontainers.org/modules/openfga/) to make it simple to write integration tests for applications using OpenFGA.

We'd love to hear your feedback!

## SDK Improvements [​](https://openfga.dev/blog/page/2\#sdk-improvements "Direct link to SDK Improvements")

New releases with bug fixes and improvements:

- [Javascript SDK 0.3.3](https://github.com/openfga/js-sdk/releases/tag/v0.3.3).
- [Go SDK v0.3.5](https://github.com/openfga/go-sdk/releases/tag/v0.3.5)
- [Python SDK v0.4.1](https://github.com/openfga/python-sdk/releases/tag/v0.4.1)

## Modular Models [​](https://openfga.dev/blog/page/2\#modular-models "Direct link to Modular Models")

We wrapped up the [RFC for Modular Models](https://github.com/openfga/rfcs/blob/main/20231212-modular-models.md), which will enable multiple teams to work on different parts of the model independently and we are now working on the implementation. We'd love feedback on the RFC.

Wait for a demo on our next [Community Meeting](https://github.com/openfga/community/blob/main/community-meetings.md)!

## Community News [​](https://openfga.dev/blog/page/2\#community-news "Direct link to Community News")

- Learn [how stacklok is using OpenFGA](https://stacklok.com/blog/using-openfga-to-build-a-relationship-based-authorization-model-in-minder) to implement authorization in Minder, an open source project that makes it easier to apply and automate the enforcement of security checks and policies across multiple GitHub repositories.

- Check this [OpenFGA tutorial](https://www.albertcoronado.com/2024/02/08/tutorial-openfga/) by [Alberto Coronado](https://twitter.com/acoronadoc) (in Spanish!).

- [Raghd Hamzeh](https://www.linkedin.com/in/raghdhamzeh/) joined [Whitney Lee](https://twitter.com/wiggitywhitney) in an in-depth Tanzu ⚡️Enlightning [session](https://www.youtube.com/watch?v=yTgtAzhvC28) about OpenFGA.


## Transitioning from Discord to CNCF's Slack [​](https://openfga.dev/blog/page/2\#transitioning-from-discord-to-cncfs-slack "Direct link to Transitioning from Discord to CNCF's Slack")

As you may know, we've been using Discord for the OpenFGA community. We’ll transition it to the CNCF [OpenFGA Slack channel](https://cloud-native.slack.com/archives/C06G1NNH47N). If you are not part of the CNCF Slack workspace, you need to join the [CNCF Slack](https://slack.cncf.io/) first.

## See you next month! [​](https://openfga.dev/blog/page/2\#see-you-next-month "Direct link to See you next month!")

Fine Grained News are published every month, after the OpenFGA community meeting. If you have any feedback, you want to share your OpenFGA story, or know about something that you think is worth mentioning, please let us know!

Welcome to the 2nd edition of Fine Grained News!

## Team News [​](https://openfga.dev/blog/page/2\#team-news "Direct link to Team News")

The OpenFGA team got bigger, and we met in person in Toronto for the first time! We got to know each other better, helped new team members to get familiar with the project, hacked some code, had some fun with ax throwing, and loved Toronto's weather!

![OpenFGA Team](https://openfga.dev/assets/images/fgn-2024-01-team-fdc90c95b67c4a2f60a3235944480b1d.png)

## KubeCon Europe 2024! [​](https://openfga.dev/blog/page/2\#kubecon-europe-2024 "Direct link to KubeCon Europe 2024!")

We got two presentations accepted in KubeCon Europe!

- [Jonathan Whitaker](https://www.linkedin.com/in/jonathan-whitaker-5a8b2484/) from Okta will talk about [Federated IAM for Kubernetes with OpenFGA](https://kccnceu2024.sched.com/event/1YeQD)

- [Pauline Jamin](https://www.linkedin.com/in/paulinejamin/) from Agicap and [Andres Aguiar](https://www.linkedin.com/in/aaguiar/) from Okta will present on [Implementing Modern Cloud Native Authorization Using OpenFGA](https://colocatedeventseu2024.sched.com/event/1YFhM/implementing-modern-cloud-native-authorization-using-openfga-andres-aguiar-okta-pauline-jamin-agicap)


We'll also have a Project Kiosk, so if you plan to attend let us know and we can schedule some time together!

## OpenFGA ⚡️Enlightning Session! [​](https://openfga.dev/blog/page/2\#openfga-%EF%B8%8Fenlightning-session "Direct link to OpenFGA ⚡️Enlightning Session!")

Our own [Raghd Hamzeh](https://www.linkedin.com/in/raghdhamzeh/) will join [Whitney Lee](https://twitter.com/wiggitywhitney) in a Tanzu ⚡️Enlightning session on **February 8th at 9am PT**.

Join their Youtube stream [here](https://www.youtube.com/watch?v=yTgtAzhvC28).

## Visual Studio Code Integration Enhancements [​](https://openfga.dev/blog/page/2\#visual-studio-code-integration-enhancements "Direct link to Visual Studio Code Integration Enhancements")

We keep investing in improving our VS Code experience. The video below shows how, in addition to validating the model, we can validate the tuple content and the tests.

We are identifying:

- Invalid object types, user types, and relations when defining tuples.
- Invalid object types, user types, and relations when defining tests.
- User id or object id that was not included in any tuple in check tests.

This helps authoring/testing models, making the whole process less error prone and more fun!

![VS Code](https://openfga.dev/assets/images/fgn-2024-01-vscode-d007f1d2381717433705be88761959e2.gif)

## CLI improvements [​](https://openfga.dev/blog/page/2\#cli-improvements "Direct link to CLI improvements")

We love the FGA CLI and we keep making it even better.

We had a few of contributions from new team members and the community :).

- You can now import tuples from a CSV file. We supported JSON/YAML, but if you are exporting data from a database, producing to CSV is way simpler.
- You can take a .fga.yaml file with a model and tuples, and get it imported in OpenFGA.
- Added support for specifying an external tuple\_file in .fga.yaml files.
- Added support for specifying a continuation\_token when calling fga tuple changes.
- Support for configuring OAuth scopes to authenticate to OIDC servers.

Check the updated documentation in our [CLI repository](https://github.com/openfga/cli)

Thanks to [Yann D'Isanto](https://github.com/le-yams) for all your help on this!

## OpenFGA v1.4.3 [​](https://openfga.dev/blog/page/2\#openfga-v143 "Direct link to OpenFGA v1.4.3")

We just shipped OpenFGA [v1.4.3](https://github.com/openfga/openfga/releases/tag/v1.4.3), with performance improvements and [one security issue](https://github.com/openfga/openfga/security/advisories/GHSA-rxpw-85vw-fx87) fixed. We recommend everyone to upgrade to the latest release.

## SDK Improvements [​](https://openfga.dev/blog/page/2\#sdk-improvements "Direct link to SDK Improvements")

New releases with bug fixes and improvements:

- [Java SDK v0.3.2](https://github.com/openfga/java-sdk/releases/tag/v0.3.2). If you are using the Java SDK please upgrade to this version.
- [Go SDK v0.3.4](https://github.com/openfga/go-sdk/releases/tag/v0.3.4)
- [Python SDK v0.4.0](https://github.com/openfga/python-sdk/releases/tag/v0.4.0), which has breaking changes.

Thanks again to [Yann D'Isanto](https://github.com/le-yams) for your help on the Java SDK!

## Language Improvements [​](https://openfga.dev/blog/page/2\#language-improvements "Direct link to Language Improvements")

The DSL language now has better support for comments and mixed operator support, where you can use parentheses to group expressions when defining relations:

![DSL improvements](https://openfga.dev/assets/images/fgn-2023-12-language-8a3e7f852814fa536430c8e3f81e57f1.png)

It's available in the VS Code extension, the CLI and the Playground.

## Github Actions [​](https://openfga.dev/blog/page/2\#github-actions "Direct link to Github Actions")

We shipped a couple of Github Actions that help you deploy FGA models, and run model tests as part of your CI/CD build. Find them [here](https://github.com/marketplace?query=openfga).

## What's Next? Check our RFCs! [​](https://openfga.dev/blog/page/2\#whats-next-check-our-rfcs "Direct link to What's Next? Check our RFCs!")

We've been discussing with the OpenFGA community a couple of RFCs that we are planning to implement in the next few weeks:

- [Support for modular models](https://github.com/openfga/rfcs/pull/14).
- [ListUsers API](https://github.com/openfga/rfcs/pull/15).

Please take a look at them and let us know what you think!

## OpenFGA Community [​](https://openfga.dev/blog/page/2\#openfga-community "Direct link to OpenFGA Community")

We have a very welcoming community, and we'd love to have you there! You can join us in different ways:

- Join our [community meetings](https://github.com/openfga/community/blob/main/community-meetings.md), the second Thursday of every month. All the recordings are [here](https://www.youtube.com/@OpenFGA).
- Stay up to date by following us on [X](https://twitter.com/openfga).
- Join our [community channels](https://openfga.dev/community) in Slack or GitHub.

## See you next month! [​](https://openfga.dev/blog/page/2\#see-you-next-month "Direct link to See you next month!")

Fine Grained News are published every month, after the OpenFGA community meeting. If you have any feedback, you want to share your OpenFGA story, or know about something that you think is worth mentioning, please let us know!

Hi Everyone!

We've been publishing a monthly internal newsletter we called **Fine Grained News** since the beginning on 2023, and we just thought it would be a good idea to share it with the community. Yeah, we are slow thinkers!

You can expect to find here a summary of what we've been up to, what we are planning to do, and some other random stuff we think you might find interesting.

## Team News [​](https://openfga.dev/blog/page/2\#team-news "Direct link to Team News")

We always start our Monthly Community Meetings presenting the team. If you attended the last one, you've seen that the size of the team has grown quite a bit! We are pretty excited about the impact it will have in OpenFGA and the authorization space in general.

## Behavior Driven Development with OpenFGA [​](https://openfga.dev/blog/page/2\#behavior-driven-development-with-openfga "Direct link to Behavior Driven Development with OpenFGA")

In our last Community Meeting, the [Agicap](https://agicap.com/en) team (Pauline and Yann) demoed how they are using OpenFGA to implement Behavior Driven Development (BDD) in their authorization system.

The screenshot below might be enough to understand what they are doing, but if you want to know more, you can watch the full presentation [here](https://youtu.be/xXhwPPcGRqE?t=765).

![bdd demo](https://openfga.dev/assets/images/fgn-2023-12-bdd-919c556a442e23bdac6643a34267ea70.png)

## GoDaddy & OpenFGA [​](https://openfga.dev/blog/page/2\#godaddy--openfga "Direct link to GoDaddy & OpenFGA")

GoDaddy has been working with OpenFGA for a few months. They just published a document explaining why they picked OpenFGA, and how they used to address the authorization challenges they were facing.

Some interesting tidbits:

- They implemented their own DynamoDB Storage Adapter, as they were heavy Dynamo DB users and liked the eventual consistency model it provided.
- They needed [Contextual Tuples](https://docs.fga.dev/modeling/basics/contextual-time-based-authorization#use-contextual-tuples-for-context-related-checks) to fully support their use case.

Read the full article [here](https://www.godaddy.com/engineering/2023/12/12/authorization-oauth-openfga/).

## Canonical & OpenFGA [​](https://openfga.dev/blog/page/2\#canonical--openfga "Direct link to Canonical & OpenFGA")

Canonical has also been working with OpenFGA for a while, and it's adding OpenFGA to different layers in their stack.

![OpenFGA at Canonical](https://openfga.dev/assets/images/fgn-2023-12-canonical-38a8b58970e46161957f5acb3ed43a46.png)

They just announced that OpenFGA support is included [in LXD](https://discourse.ubuntu.com/t/lxd-5-20-has-been-released/40865) and [MicroCloud](https://www.gamingdeputy.com/canonical-unveils-microcloud-a-toolkit-for-rapid-cluster-deployment/).

Pretty soon, if you are using Ubuntu Pro, you will be using OpenFGA :).

## OpenFGA v1.4! [​](https://openfga.dev/blog/page/2\#openfga-v14 "Direct link to OpenFGA v1.4!")

Last week we released OpenFGA v1.4! This release includes our support for Conditional Relationship Tuples, which helps implementing additional Attribute-Based Access Control scenarios like temporal access, IP based access, bank transfer limits, SaaS application plans, and much more!

You can read more about it [here](https://openfga.dev/docs/modeling/conditions).

## SDK Improvements [​](https://openfga.dev/blog/page/2\#sdk-improvements "Direct link to SDK Improvements")

- The [Java SDK](https://github.com/openfga/java-sdk) has now feature parity with the rest of the our SDKs. It can be used from any language for the Java VM. You can see examples on Kotlin, Groovy and Scala [here](https://github.com/booniepepper/openfga-java-sdk-preview/tree/core/src/main).

- The [Python SDK](https://github.com/openfga/python-sdk) was updated to support synchronous clients, support custom SSL certificates, and better performance in batch checks.


## Language Improvements [​](https://openfga.dev/blog/page/2\#language-improvements "Direct link to Language Improvements")

We've been working on the OpenFGA language with some long-due improvements. Soon, you'll be able to use parentheses to group expressions when defining relations:

![DSL improvements](https://openfga.dev/assets/images/fgn-2023-12-language-8a3e7f852814fa536430c8e3f81e57f1.png)

The syntax is still not supported in the FGA CLI, but we are pretty close. Daniel demoed it in our latest community meeting, you can see the full demo [here](https://youtu.be/xXhwPPcGRqE?t=1313).

## VS Code Extension Improvements [​](https://openfga.dev/blog/page/2\#vs-code-extension-improvements "Direct link to VS Code Extension Improvements")

We have also been improving tuple validation when writing `fga.yaml` files, and it's pretty cool! Works on Daniel's machine for now :).

![Tuple Validation Demo](https://openfga.dev/assets/images/fgn-2023-12-validation-b3df7ed681e938abf6f1d43c02423439.png)

Daniel also demoed it in our latest community meeting, watch it [here](https://youtu.be/xXhwPPcGRqE?t=1598).

## KubeCon EU 2024 [​](https://openfga.dev/blog/page/2\#kubecon-eu-2024 "Direct link to KubeCon EU 2024")

We are getting ready for KubeCon Europe 2024, in Paris. We'll have a Project Kiosk, and we have submitted a few talks. We'll keep you posted!

## OpenFGA Community [​](https://openfga.dev/blog/page/2\#openfga-community "Direct link to OpenFGA Community")

We have a very welcoming community, and we'd love to have you there! You can join us in different ways:

- Join our [community meetings](https://github.com/openfga/community/blob/main/community-meetings.md), the second Thursday of every month. All the recordings are [here](https://www.youtube.com/@OpenFGA).
- Join our [community channels](https://openfga.dev/community) in Slack or GitHub.
- Stay up to date by following us on [X](https://twitter.com/openfga).
- Ask questions, submit ideas, or just say hi in our [GitHub Discussions](https://github.com/orgs/openfga/discussions).

## See you next month! [​](https://openfga.dev/blog/page/2\#see-you-next-month "Direct link to See you next month!")

We'll keep publishing our Fine Grained News each month, after the OpenFGA community meeting. If you have any feedback, you want to share your OpenFGA story, or know about something that you think is worth mentioning, please let us know!

Relationship Tuples are the facts that the OpenFGA evaluates to determine whether a user is permitted to access a resource.

The way tuples are considered when making authorization decisions in OpenFGA is guided by an authorization model, which employs concepts from Relationship-Based Access Control (ReBAC) to establish authorization policies. For instance, you might declare that users are allowed to view a document if they have permission to view its parent folder.

Although ReBAC offers a highly flexible method for structuring permissions, it encounters difficulties with defining permissions based on attributes that are not easily represented as relationships. Attributes such as “parent folder,” “department,” “region,” and “country” can be conceptualized as relationships between two entities. However, attributes like “IP address,” “time of day,” “team size limit,” or “maximum amount for a bank transfer” cannot be easily handled.

In our ongoing efforts to expand OpenFGA’s capacity for articulating a broader range of authorization policies, we are introducing **Conditional Relationship Tuples**. These allow for the specification of conditions under which a particular tuple is relevant when evaluating an authorization query.

Consider the following example, where we utilize Conditional Tuples to grant access for a user over a specified time duration. We stipulate that a user may be granted either unconditional access or access constrained to a certain time period:

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define viewer: [user, user with non_expired_grant]

condition non_expired_grant(current_time: timestamp, grant_time: timestamp, grant_duration: duration) {
  current_time < grant_time + grant_duration
}

```

If we write the following tuples:

| user | relation | object | condition |
| --- | --- | --- | --- |
| user:bob | viewer | document:1 |  |
| user:anne | viewer | document:1 | `name` : `non_expired_grant`, `context` : { `grant_time` : `2023-01-01T00:00:00Z`, `grant_duration` : `1h` } |

You'll get the following results for the [Check](https://openfga.dev/api/service#/Relationship%20Queries/Check) operations below:

| user | relation | object | context | result |
| --- | --- | --- | --- | --- |
| user:bob | viewer | document:1 |  | `allowed` : `true` |
| user:anne | viewer | document:1 | `current_time` : `2023-01-01T00:10:00Z` | `allowed` : `true` |
| user:anne | viewer | document:1 | `current_time` : `2023-01-01T02:00:00Z` | `allowed` : `false` |
| user:anne | viewer | document:1 |  | `error` : "failed to evaluate relationship condition 'non\_expired\_grant': context is missing parameters '\[current\_time\]' |

You'll get the following results for the [ListObjects](https://openfga.dev/api/service#/Relationship%20Queries/ListObjects) operations below:

| user | relation | object | context | result |
| --- | --- | --- | --- | --- |
| user:anne | viewer | document:1 | `current_time` : `2023-01-01T00:10:00Z` | `objects`: `[ "document:1"]` |
| user:anne | viewer | document:1 |  | `error`: "failed to evaluate relationship condition 'non\_expired\_grant': tuple 'document:1#viewer@user:anne' is missing context parameters '\[current\_time\]' |

Note that:

- `user:bob` will always get `allowed:true` as we have assigned as viewer unconditionally.
- `user:anne` will get `allowed:true` if the `current_time` is before the `grant_time` \+ `grant_duration` and `allowed:false` otherwise.
- If you don't provide the `current_time` in the context, the Check and ListObjects operations will fail.

## Use Cases [​](https://openfga.dev/blog/page/2\#use-cases "Direct link to Use Cases")

The [OpenFGA Sample Stores repository](https://github.com/openfga/sample-stores) has several examples that take advantage of this new feature:

- [Granting access during a specific period of time (the use case explained above)](https://github.com/openfga/sample-stores/tree/main/stores/temporal-access).
- [Allow access based on the user’s IP Address](https://github.com/openfga/sample-stores/tree/main/stores/ip-based-access).
- [Granting access based on group membership and resource attributes](https://github.com/openfga/sample-stores/tree/main/stores/groups-resource-attributes).
- [Allow access to specific features based on usage](https://github.com/openfga/sample-stores/tree/main/stores/advanced-entitlements).
- [Determine if a user can make a bank transfer based .on the transaction amount](https://github.com/openfga/sample-stores/tree/main/stores/banking).
- [Data types and operations supported in conditions](https://github.com/openfga/sample-stores/tree/main/stores/condition-data-types).

## How to use it? [​](https://openfga.dev/blog/page/2\#how-to-use-it "Direct link to How to use it?")

Conditional Relationship Tuples are included in OpenFGA 1.4.0-rc1 version. You can run it by pulling it from docker:

```codeBlockLines_e6Vv
docker pull openfga/openfga:v1.4.0-rc1
docker run -p 8080:8080 -p 8081:8081 -p 3000:3000 openfga/openfga:v1.4.0-rc1 run`

```

OpenFGA has a rich ecosystem of developer tools. The following have been updated to support Conditional Relationship Tuples:

- [Visual Studio Code integration](https://github.com/openfga/vscode-ext) which provides syntax highlighting and model validations for conditions.

- Beta versions of the [Javascript SDK](https://www.npmjs.com/package/@openfga/sdk/v/0.3.0-beta.1) and the [Go SDK](https://github.com/openfga/go-sdk/releases/tag/v0.3.0-beta.1), which allows using the additional parameters.

- The [OpenFGA CLI](https://github.com/openfga/cli) allows validating models and runing tests that use conditional tuples. You can use it to test the new features by pointing to a `“.fga.yaml”` file that [defines the tests you want to run](https://github.com/openfga/cli#run-tests-on-an-authorization-model), without having to deploy OpenFGA.


## What’s Next? [​](https://openfga.dev/blog/page/2\#whats-next "Direct link to What’s Next?")

We’ll address some limitations of the current implementation:

- The [Expand API](https://openfga.dev/api/service#/Relationship%20Queries/Expand) does not consider conditions.
- The Visual Studio Code integration is not validating the expressions in conditions.
- The Playground does not let you add context for tuples and assertions. You should use the VS Code Extension + the FGA CLI to test your models for now.

We'll also improve ListObjects scenarios when it's called with missing context. For example, consider the following model that enables access only to documents with a specific status:

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define can_access: [user with docs_in_draft_status]

condition docs_in_draft_status(status: string) {
  status == "draft"
}

```

If you want to list all the documents a user can view, you'll need to know the status of all of those documents. Given you don't know the documents the user has access too, you can't send the status of those as a parameter to ListObjects.

Our goal is to return a structure that you can use to filter documents on your side, similar to:
`(document.id = ‘1’ and document.status = ‘draft’) or (document.id = ‘2’ and.status = draft)`

This won’t scale to a large number of documents, but would be useful in some scenarios.

## Reach out! [​](https://openfga.dev/blog/page/2\#reach-out "Direct link to Reach out!")

We want to learn how you use this feature and how we can improve it!

Please reach out through our [community channels](https://openfga.dev/community) with any questions or feedback.

As you'd expect, the OpenFGA team will be at KubeCon NA 2023 in Chicago, IL!

We'll have a packed agenda for the week:

- [Jonathan Whitaker](https://www.linkedin.com/in/jonathan-whitaker-5a8b2484/) and [Lucas Käldström](https://www.linkedin.com/in/luxas/) will be presenting in [Could\_Native Rejects](https://cloud-native.rejekts.io/) on how to use OpenFGA to manage and extend authorization in Kubernetes. Learn more [here](https://cfp.cloud-native.rejekts.io/cloud-native-rejekts-na-chicago-2023/speaker/XB7EUR/).

- [Maria Ines Parnisari](https://www.linkedin.com/in/miparnisari/) and [Andres Aguiar](https://www.linkedin.com/in/aaguiar/) will be presenting in [AppDeveloperCon](https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/co-located-events/appdevelopercon/) about modernizing authorization for cloud native applications using OpenFGA. Learn more [here](https://colocatedeventsna2023.sched.com/event/1Rj2j/modernizing-authorization-for-cloud-native-applications-using-openfga-andres-aguiar-maria-ines-parnisari-okta).

- We'll host a Project Meeting on Monday 9.30 AM in the Hudson room at the [Hilton Garden Inn](https://maps.app.goo.gl/77FwgGdpsWK5jWHd6). We'll share how the product is being used, demo the latests features like our new CLI, the VS Code Extension, Conditional Relationships, the Java SDK... and more!

- We'll be in the CNCF Project Pavilion during the afternoons.

- We'll host our [OpenFGA community meeting](https://github.com/openfga/community/blob/main/community-meetings.md) directly from KubeCon on Thursday 9th at 3PM UTC (8AM PST/11AM EST).


If you want to meet with the team outside of these events, please pick any spot that works for you in our [calendar](https://calendar.app.google/GonEwLboKvPkG8pL6).

See you in Chicago!

## OpenFGA Features Overview
[Skip to main content](https://openfga.dev/blog/tags/features#__docusaurus_skipToContent_fallback)

OpenFGA query APIs now allow specifying the desired consistency of query results. By default, OpenFGA does not use a cache. However, when caching is enabled, it applies to all requests. This means that any changes in permissions won't be reflected in authorization checks during the cache TTL period.

The community expressed the need for flexibility in using the cache on a per-request basis. In response, starting with [OpenFGA v1.5.7](https://github.com/openfga/openfga/releases/tag/v1.5.7), all query APIs can accept a consistency parameter with the following values:

| Name | Description |
| --- | --- |
| MINIMIZE\_LATENCY (default) | OpenFGA will try to minimize latency (e.g. by making use of the cache) |
| HIGHER\_CONSISTENCY | OpenFGA will try to optimize for stronger consistency (e.g. by bypassing cache) |

When `HIGHER_CONSISTENCY` is specified, OpenFGA reads directly from the database, even when the cache is enabled.

## How to use it? [​](https://openfga.dev/blog/tags/features\#how-to-use-it "Direct link to How to use it?")

The new consistency parameter is available in OpenFGA starting [v1.5.7](https://github.com/openfga/openfga/releases/tag/v1.5.7).

The parameter is supported by all OpenFGA SDKs.

For more information on enabling the cache and best practices for specifying consistency values, refer to the [documentation](https://openfga.dev/docs/interacting/consistency).

## Custom database adapter implementations [​](https://openfga.dev/blog/tags/features\#custom-database-adapter-implementations "Direct link to Custom database adapter implementations")

For those with a custom database adapter for a multi-region database, the behavior of the HIGHER\_CONSISTENCY parameter can be defined according to your needs. With an eventually consistent database (e.g., Dynamo DB) in a multi-region setup, there will be replication lag even if the cache is bypassed. If the database supports strong reads, you can choose to perform those at an extra cost. Otherwise, you can perform an eventually consistent read without providing full consistency semantics to the caller. In some other databases where you have Read/Write replicas, you may choose to go to the Write replica when the `HIGHER_CONSISTENCY` preference is selected.

## Future work [​](https://openfga.dev/blog/tags/features\#future-work "Direct link to Future work")

[Google Zanzibar](https://zanzibar.academy/) features a consistency token called `Zookies`, returned from write operations. This token can be stored in a resource table and specified in subsequent query API calls. We are considering introducing a similar feature in future releases.

## We want your feedback! [​](https://openfga.dev/blog/tags/features\#we-want-your-feedback "Direct link to We want your feedback!")

We want to learn how you use this API and how we can improve it!

Please reach out through our [community channels](https://openfga.dev/community) with any questions or feedback.

Today we are launching a new API for OpenFGA: ListUsers.

This API will answer the question "what users have relation X with object Y?". This will be useful, for example, in UIs that want to display the list of users that a resource has been shared with, e.g. the "share" dialog in Google Docs.

You can read more about it in the [API docs](https://openfga.dev/api/service#/Relationship%20Queries/ListUsers) and the [product documentation](https://openfga.dev/docs/getting-started/perform-list-users).

## How to use it? [​](https://openfga.dev/blog/tags/features\#how-to-use-it "Direct link to How to use it?")

ListUsers is available in OpenFGA starting with [v1.5.4](https://github.com/openfga/openfga/releases/tag/v1.5.4).

To be able to call this API, you must turn on this flag on the server: `--experimentals enable-list-users`. Be sure to also check out the various configuration flags that were added to control its behavior.

The new functionality is available on the latest versions of the [Java](https://github.com/openfga/java-sdk/), [.NET](https://github.com/openfga/dotnet-sdk/), [Go](https://github.com/openfga/go-sdk/) and [Javascript SDK](https://github.com/openfga/js-sdk/), [CLI](https://github.com/openfga/cli?tab=readme-ov-file#list-users) and [VS Code integration](https://marketplace.visualstudio.com/items?itemName=openfga.openfga-vscode).

We'll be releasing support for the Python SDK soon.

## We want your feedback! [​](https://openfga.dev/blog/tags/features\#we-want-your-feedback "Direct link to We want your feedback!")

We want to learn how you use this API and how we can improve it!

Please reach out through our [community channels](https://openfga.dev/community) with any questions or feedback.

Modular models aims to improve the model authoring experience when multiple teams are maintaining a model, such as:

- A model can grow large and difficult to understand
- As more teams begin to contribute to a model, the ownership boundaries may not be clear and code review processes might not scale

With modular models, a single model can be separated across multiple files allow grouping of types and conditions into modules. This means that a model can be organized more easily in terms of team or organizational structure. Used in conjunction with features such as [GitHub](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners), [GitLab](https://docs.gitlab.com/ee/user/project/codeowners/) or [Gitea's](https://docs.gitea.com/usage/code-owners) code owners, it should become easier to ensure the owners of a portion of your model are correctly assigned to review it.

## How to use it? [​](https://openfga.dev/blog/tags/features\#how-to-use-it "Direct link to How to use it?")

Modular models is available in the latest version of OpenFGA. To use it you need to:

- Update to the [v0.3.0 release](https://github.com/openfga/cli/releases/tag/v0.3.0) of the CLI
- Update to [v0.2.21](https://github.com/openfga/vscode-ext/releases/tag/v0.2.21) of the VS Code Extension
- Download [v1.5.3](https://github.com/openfga/openfga/releases/tag/v1.5.3) of OpenFGA
- Check out the modular models sample store in the [sample-stores repo](https://github.com/openfga/sample-stores/tree/main/stores/modular)
- Review the [documentation for this feature](https://openfga.dev/docs/modeling/modular-models)
- Check a [demo video in Youtube](https://youtu.be/oeqroL8-wCQ)

## What's next? [​](https://openfga.dev/blog/tags/features\#whats-next "Direct link to What's next?")

Looking beyond the near term, modular models allows us to implement [additional API authorization options for OpenFGA](https://github.com/openfga/roadmap/issues/30).

## Reach out! [​](https://openfga.dev/blog/tags/features\#reach-out "Direct link to Reach out!")

We want to learn how you use this feature and how we can improve it!

Please reach out through our [community channels](https://openfga.dev/community) with any questions or feedback.

Relationship Tuples are the facts that the OpenFGA evaluates to determine whether a user is permitted to access a resource.

The way tuples are considered when making authorization decisions in OpenFGA is guided by an authorization model, which employs concepts from Relationship-Based Access Control (ReBAC) to establish authorization policies. For instance, you might declare that users are allowed to view a document if they have permission to view its parent folder.

Although ReBAC offers a highly flexible method for structuring permissions, it encounters difficulties with defining permissions based on attributes that are not easily represented as relationships. Attributes such as “parent folder,” “department,” “region,” and “country” can be conceptualized as relationships between two entities. However, attributes like “IP address,” “time of day,” “team size limit,” or “maximum amount for a bank transfer” cannot be easily handled.

In our ongoing efforts to expand OpenFGA’s capacity for articulating a broader range of authorization policies, we are introducing **Conditional Relationship Tuples**. These allow for the specification of conditions under which a particular tuple is relevant when evaluating an authorization query.

Consider the following example, where we utilize Conditional Tuples to grant access for a user over a specified time duration. We stipulate that a user may be granted either unconditional access or access constrained to a certain time period:

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define viewer: [user, user with non_expired_grant]

condition non_expired_grant(current_time: timestamp, grant_time: timestamp, grant_duration: duration) {
  current_time < grant_time + grant_duration
}

```

If we write the following tuples:

| user | relation | object | condition |
| --- | --- | --- | --- |
| user:bob | viewer | document:1 |  |
| user:anne | viewer | document:1 | `name` : `non_expired_grant`, `context` : { `grant_time` : `2023-01-01T00:00:00Z`, `grant_duration` : `1h` } |

You'll get the following results for the [Check](https://openfga.dev/api/service#/Relationship%20Queries/Check) operations below:

| user | relation | object | context | result |
| --- | --- | --- | --- | --- |
| user:bob | viewer | document:1 |  | `allowed` : `true` |
| user:anne | viewer | document:1 | `current_time` : `2023-01-01T00:10:00Z` | `allowed` : `true` |
| user:anne | viewer | document:1 | `current_time` : `2023-01-01T02:00:00Z` | `allowed` : `false` |
| user:anne | viewer | document:1 |  | `error` : "failed to evaluate relationship condition 'non\_expired\_grant': context is missing parameters '\[current\_time\]' |

You'll get the following results for the [ListObjects](https://openfga.dev/api/service#/Relationship%20Queries/ListObjects) operations below:

| user | relation | object | context | result |
| --- | --- | --- | --- | --- |
| user:anne | viewer | document:1 | `current_time` : `2023-01-01T00:10:00Z` | `objects`: `[ "document:1"]` |
| user:anne | viewer | document:1 |  | `error`: "failed to evaluate relationship condition 'non\_expired\_grant': tuple 'document:1#viewer@user:anne' is missing context parameters '\[current\_time\]' |

Note that:

- `user:bob` will always get `allowed:true` as we have assigned as viewer unconditionally.
- `user:anne` will get `allowed:true` if the `current_time` is before the `grant_time` \+ `grant_duration` and `allowed:false` otherwise.
- If you don't provide the `current_time` in the context, the Check and ListObjects operations will fail.

## Use Cases [​](https://openfga.dev/blog/tags/features\#use-cases "Direct link to Use Cases")

The [OpenFGA Sample Stores repository](https://github.com/openfga/sample-stores) has several examples that take advantage of this new feature:

- [Granting access during a specific period of time (the use case explained above)](https://github.com/openfga/sample-stores/tree/main/stores/temporal-access).
- [Allow access based on the user’s IP Address](https://github.com/openfga/sample-stores/tree/main/stores/ip-based-access).
- [Granting access based on group membership and resource attributes](https://github.com/openfga/sample-stores/tree/main/stores/groups-resource-attributes).
- [Allow access to specific features based on usage](https://github.com/openfga/sample-stores/tree/main/stores/advanced-entitlements).
- [Determine if a user can make a bank transfer based .on the transaction amount](https://github.com/openfga/sample-stores/tree/main/stores/banking).
- [Data types and operations supported in conditions](https://github.com/openfga/sample-stores/tree/main/stores/condition-data-types).

## How to use it? [​](https://openfga.dev/blog/tags/features\#how-to-use-it "Direct link to How to use it?")

Conditional Relationship Tuples are included in OpenFGA 1.4.0-rc1 version. You can run it by pulling it from docker:

```codeBlockLines_e6Vv
docker pull openfga/openfga:v1.4.0-rc1
docker run -p 8080:8080 -p 8081:8081 -p 3000:3000 openfga/openfga:v1.4.0-rc1 run`

```

OpenFGA has a rich ecosystem of developer tools. The following have been updated to support Conditional Relationship Tuples:

- [Visual Studio Code integration](https://github.com/openfga/vscode-ext) which provides syntax highlighting and model validations for conditions.

- Beta versions of the [Javascript SDK](https://www.npmjs.com/package/@openfga/sdk/v/0.3.0-beta.1) and the [Go SDK](https://github.com/openfga/go-sdk/releases/tag/v0.3.0-beta.1), which allows using the additional parameters.

- The [OpenFGA CLI](https://github.com/openfga/cli) allows validating models and runing tests that use conditional tuples. You can use it to test the new features by pointing to a `“.fga.yaml”` file that [defines the tests you want to run](https://github.com/openfga/cli#run-tests-on-an-authorization-model), without having to deploy OpenFGA.


## What’s Next? [​](https://openfga.dev/blog/tags/features\#whats-next "Direct link to What’s Next?")

We’ll address some limitations of the current implementation:

- The [Expand API](https://openfga.dev/api/service#/Relationship%20Queries/Expand) does not consider conditions.
- The Visual Studio Code integration is not validating the expressions in conditions.
- The Playground does not let you add context for tuples and assertions. You should use the VS Code Extension + the FGA CLI to test your models for now.

We'll also improve ListObjects scenarios when it's called with missing context. For example, consider the following model that enables access only to documents with a specific status:

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define can_access: [user with docs_in_draft_status]

condition docs_in_draft_status(status: string) {
  status == "draft"
}

```

If you want to list all the documents a user can view, you'll need to know the status of all of those documents. Given you don't know the documents the user has access too, you can't send the status of those as a parameter to ListObjects.

Our goal is to return a structure that you can use to filter documents on your side, similar to:
`(document.id = ‘1’ and document.status = ‘draft’) or (document.id = ‘2’ and.status = draft)`

This won’t scale to a large number of documents, but would be useful in some scenarios.

## Reach out! [​](https://openfga.dev/blog/tags/features\#reach-out "Direct link to Reach out!")

We want to learn how you use this feature and how we can improve it!

Please reach out through our [community channels](https://openfga.dev/community) with any questions or feedback.

## OpenFGA Newsletter Updates
[Skip to main content](https://openfga.dev/blog/tags/newsletter#__docusaurus_skipToContent_fallback)

Welcome to the second Fine Grained News edition of 2025!

## Just Shipped! [​](https://openfga.dev/blog/tags/newsletter\#just-shipped "Direct link to Just Shipped!")

- We shipped 3 minor versions of OpenFGA which include:
  - Fixes for [CVE-2025-25196](https://github.com/openfga/openfga/security/advisories/GHSA-g4v5-6f5p-m38j) and [CVE-2024-56323](https://github.com/openfga/openfga/security/advisories/GHSA-32q6-rr98-cjqv)

  - Several performance improvements that are enabled with the `enable-check-optimizations` experimental flag.

  - Dynamic TLS certificate reloading for HTTP and gRPC servers. Thanks [Rokibul Hasan](https://github.com/RokibulHasan7) for your contribution!

  - A `name` filter to ListStores. The name parameter instructs the API to only include results that match that name. Thanks [Karl Persson](https://github.com/kalleep) for your contribution!

  - Optimized database dialect handling by setting it during initialization instead of per-call, fixing SQL syntax errors in MySQL. Thanks [Siddhant Khare](https://github.com/Siddhant-K-code) for your contribution!

  - Support for Go 1.24. We follow Go's version support policy and will only support the latest two major versions of Go. Now that Go 1.24 is out, we have dropped support for Go < 1.23.
- Two minor versions of the [Java SDK](https://github.com/openfga/java-sdk), with support for server-side [BatchCheck](https://github.com/openfga/js-sdk?tab=readme-ov-file#batch-check). Thanks [Piotr Olaszewski](https://github.com/piotrooo) for your contribution!

- A minor release of the [Go SDK](https://github.com/openfga/go-sdk), with support for the `StartTime` parameter in the [ReadChanges method](https://github.com/openfga/go-sdk?tab=readme-ov-file#read-relationship-tuple-changes-watch) and support for specifying contextual tuples and context parameters in assertions.

- A minor release of the [FGA CLI](https://github.com/openfga/cli), with support for the `start-time` parameter for the `changes` command and importing assertions during `fga store import`. Thanks [Sujitha A V](https://github.com/sujitha-av) for your contribution!


## Using OpenFGA for GenAI and Retrieval Augmented Generation (RAG) [​](https://openfga.dev/blog/tags/newsletter\#using-openfga-for-genai-and-retrieval-augmented-generation-rag "Direct link to Using OpenFGA for GenAI and Retrieval Augmented Generation (RAG)")

We are seeing a lot of interest in using OpenFGA for RAG scenarios and we wanted to share a list of interesting articles and repositories that were published lately:

- [RAG and Access Control: Where Do You Start?](https://auth0.com/blog/rag-and-access-control-where-do-you-start/)
- [Building a Secure RAG with Python, LangChain, and OpenFGA](https://auth0.com/blog/building-a-secure-rag-with-python-langchain-and-openfga/)
- [GenAI, LangChain.js, and FGA](https://auth0.com/blog/genai-langchain-js-fga/)
- [Building a Permissions System For Your RAG Application](https://www.useparagon.com/learn/ai-knowledge-chatbot-with-permissions-chapter-2/)
- [mdb-openfga: OpenFGA + MongoDB](https://github.com/ranfysvalle02/mdb-openfga)

## Learning OpenFGA [​](https://openfga.dev/blog/tags/newsletter\#learning-openfga "Direct link to Learning OpenFGA")

We've been busy creating blog posts and videos that help you adopt OpenFGA, check them out!

- [OpenFGA: Modeling Guide](https://www.youtube.com/watch?v=5Lwy9aHXXHE&list=PLUR5l-oTFZqWaDdhEOVt_IfPOIbKo1Ypt)
- [OpenFGA: The Basics](https://www.youtube.com/watch?v=v1Io8TtB4bg&list=PLUR5l-oTFZqXGikFJolWJfP7zDK4GRYJ6)
- [OpenFGA for Python Flask Applications](https://auth0.com/blog/fine-grained-access-control-with-python-flask/)
- [How to Implement Relationship-Based Access Control (ReBAC) in a Ruby On Rails API?](https://auth0.com/blog/what-is-rebac-and-how-to-implement-rails-api/)
- [Securing data in your Next.js app with Okta and OpenFGA](https://vercel.com/blog/securing-data-in-your-next-js-app-with-okta-and-openfga)
- [OpenFGA for an Express + Typescript Node.js API](https://auth0.com/blog/express-typescript-fga/)
- [OpenFGA for Spring Boot Applications](https://auth0.com/blog/add-fga-to-spring-boot-api-with-openfga/)

## OpenFGA to CNCF Incubation [​](https://openfga.dev/blog/tags/newsletter\#openfga-to-cncf-incubation "Direct link to OpenFGA to CNCF Incubation")

The [CNCF Technical Oversight Committee](https://www.cncf.io/people/technical-oversight-committee/) triaged OpenFGA's application to be accepted as an "Incubation" project, decided we had provided the appropriate information and references, and [moved the project to the next step](https://github.com/orgs/cncf/projects/27/views/9). We now need to wait for a TOC member to pick the project and do their due diligence.

Thanks to Canonical, Grafana, Docker, Read.AI, Agicap, Sourcegraph, Zuplo, and Stacklok for agreeing to be interviewed by the CNCF as reference adopters!

## OpenFGA in London [​](https://openfga.dev/blog/tags/newsletter\#openfga-in-london "Direct link to OpenFGA in London")

OpenFGA will be present in two high-profile events in London:

- [Sam Bellen](https://www.linkedin.com/in/sambellen/) will participate in the [Gartner IAM EMEA event](https://www.gartner.com/en/conferences/emea/identity-access-management-uk) demoing [OpenFGA interoperability with the AuthZen standard](https://openid.net/authzen-at-gartner-iam/).

- [Poovamraj Thanganadar Thiagarajan](https://www.linkedin.com/in/poovamraj/) from Okta will be presenting at KubeCon Europe, together with [Jo Guerreiro](https://www.linkedin.com/in/jmlguerreiro/) from Grafana Labs about [From Chaos To Control: Migrating Access Control To OpenFGA in a Multi-Tenant World](https://kccnceu2025.sched.com/event/1txIJ/from-chaos-to-control-migrating-access-control-to-openfga-in-a-multi-tenant-world-jo-guerreiro-grafana-labs-poovamraj-thanganadar-thiagarajan-okta).

- [Andres Aguiar](https://www.linkedin.com/in/aaguiar/) from Okta was invited to present on the Maintainer's Summit at KubeCon Europe about our experiences collaborating with the CNCF TAG-Security team: [A Project Maintainers Guide To TAG Security](https://maintainersummiteu2025.sched.com/event/1tj8v/a-project-maintainers-guide-to-tag-security-marina-moore-edera-andres-aguiar-okta).


## **See You Next Month:** [​](https://openfga.dev/blog/tags/newsletter\#see-you-next-month "Direct link to see-you-next-month")

Fine Grained News is published every month. If you have any feedback, want to share your OpenFGA story, or have a noteworthy update, please let us know on any of our [community channels](https://openfga.dev/community) or at [community@openfga.dev](mailto:community@openfga.dev).

Welcome to the first Fine Grained News edition of 2025! January is always a good month to look back at what the OpenFGA community accomplished over the past year.

## Major faatures [​](https://openfga.dev/blog/tags/newsletter\#major-faatures "Direct link to Major faatures")

Below is a list of the major features that were shipped in 2024:

- [Modular Models](https://openfga.dev/docs/modeling/modular-models)
- [Java Spring Boot Integration](https://github.com/openfga/spring-boot-starter)
- [JetBrains Integration](https://plugins.jetbrains.com/plugin/24394-openfga)
- [Telemetry in OpenFGA SDKs](https://openfga.dev/docs/getting-started/configure-telemetry)
- [ListUsers Endpoint](https://openfga.dev/docs/getting-started/perform-list-users)
- [Batch Check Endpoint](https://openfga.dev/docs/interacting/relationship-queries#batch-check)
- [Query Consistency Options](https://openfga.dev/docs/interacting/consistency)
- [Storage adapter for SQLite](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga#sqlite), contributed by [DanCech](https://github.com/DanCech) from Grafana Labs
- [Experimental Access Control for the OpenFGA server](https://openfga.dev/docs/getting-started/setup-openfga/access-control)

We heavily invested in OpenFGA performance, reducing latency by 90% in several cases. We'll continue improving performance in the following months.

## But that's not all! [​](https://openfga.dev/blog/tags/newsletter\#but-thats-not-all "Direct link to But that's not all!")

We are very grateful with the OpenFGA community, who helped shipping **126** releases and improvements across the board:

- [OpenFGA Server](https://github.com/openfga/openfga): [23 releases](https://github.com/openfga/openfga). Thanks [kalleep](https://github.com/kalleep), [DanCech](https://github.com/DanCech), [golanglemonade](https://github.com/golanglemonade,) [tranngoclam](https://github.com/tranngoclam), [lalalalatt](https://github.com/lalalalatt), [Code2Life](https://github.com/Code2Life), [JAORMX](https://github.com/JAORMX), [Zach-Johnson](https://github.com/Zach-Johnson), [cmmoran](https://github.com/cmmoran), [00chorch](https://github.com/00chorch), [chenrui333](https://github.com/chenrui333), [le-yams](https://github.com/le-yams), [lekaf974](https://github.com/lekaf974), [raj-saxena](https://github.com/raj-saxena)!
- [Python SDK](https://github.com/openfga/go-sdkk): [16 Releases](https://github.com/openfga/go-sdk/releases). Thanks [Oscmage](https://github.com/Oscmage) [ovindu-a](https://github.com/ovindu-a), [GMorris-professional](https://github.com/GMorris-professional), [Divan009](https://github.com/Divan009)!
- [Go SDK](https://github.com/openfga/go-sdk): [10 releases](https://github.com/openfga/go-sdk/releases). Thanks [le-yams](https://github.com/le-yams), [le-yams](https://github.com/HeroicHorizon), [gurleensethi](https://github.com/gurleensethi), [gurleensethi](https://github.com/gurleensethi), [wonyx](https://github.com/wonyx), [Code2Life](https://github.com/Code2Life), [Kryvchun](https://github.com/Kryvchun)!
- [Java SDK](https://github.com/openfga/java-sdk): [10 releases](https://github.com/openfga/java-sdk/releases). Thanks [le-yams](https://github.com/le-yams), [paulosuzart](https://github.com/paulosuzart) and [Didier-SimpleCommeDev](https://github.com/Didier-SimpleCommeDev)!
- [JS SDK](https://github.com/openfga/js-sdk): [13 releases](https://github.com/openfga/js-sdk/releases). Thanks [sccalabr](https://github.com/sccalabr), [Siddhant-K-code](https://github.com/Siddhant-K-code), [vil02](https://github.com/vil02), [Waheedsys](https://github.com/Waheedsys), [tmsagarofficial](https://github.com/tmsagarofficial)!
- [.NET SDK](https://github.com/openfga/dotnet-sdk): [5 releases](https://github.com/openfga/dotnet-sdk/releases).
- [Spring Boot](https://github.com/openfga/spring-boot-starter): [2 releases](https://github.com/openfga/spring-boot-starter/releases). Thanks [eddumelendez](https://github.com/eddumelendez) and [dheid](https://github.com/dheid)!
- [Helm Chart](https://github.com/openfga/helm-charts): [31 releases](https://github.com/openfga/helm-charts). Thanks
[jliedy](https://github.com/jliedy), [aaronschweig](https://github.com/aaronschweig), [bagnaram](https://github.com/bagnaram), [vil02](https://github.com/vil02), [jagregory](https://github.com/jagregory) [danielloader](https://github.com/danielloader), [wenzel-felix](https://github.com/wenzel-felix%5D), [aballet](https://github.com/aballet), [tamalsaha](https://github.com/tamalsaha), [Oscmage](https://github.com/Oscmage), [rorynickolls-skyral](https://github.com/rorynickolls-skyral),
[juusujanar](https://github.com/juusujanar), [cstruck](https://github.com/cstruck), [almeynman](https://github.com/almeynman), [JAORMX](https://github.com/JAORMX)!
- [openfga.dev](https://github.com/openfga/openfga.dev): Our website received contributions from [Siddhant-K-code](https://github.com/Siddhant-K-code), [tazarov](https://github.com/tazarov), [sarthak-kumar-shailendra](https://github.com/sarthak-kumar-shailendra), [nimakarimi97](https://github.com/nimakarimi97), [soura-b](https://github.com/soura-ba), [asenawritescode](https://github.com/asenawritescode), [kwiky](https://github.com/kwiky), [lupeterm](https://github.com/lupeterm), [RobertKielty](https://github.com/RobertKielty), [t3hmrman](https://github.com/t3hmrman), [mwangersjo](https://github.com/mwangersjo), [josxha](https://github.com/josxha), [tbcvl](https://github.com/tbcvl), [sujitha-av](https://github.com/sujitha-av), [jamct](https://github.com/jamct), [lhchingit](https://github.com/lhchingit), [DanCech](https://github.com/DanCech). Thanks to everyone!
- [Visual Studio Code Extension](https://github.com/openfga/vscode-ext): [11 releases](https://github.com/openfga/vscode-ext/releases). Thanks [solon](https://github.com/solon)!
- [IntelliJ Plugin](https://github.com/openfga/intellij-plugin): [5 releases](https://github.com/openfga/intellij-plugin/releases). Thanks [le-yams](https://github.com/le-yams) and [edlundin](https://github.com/edlundin)!

## More community accomplishments [​](https://openfga.dev/blog/tags/newsletter\#more-community-accomplishments "Direct link to More community accomplishments")

- [OpenFGA](https://github.com/openfga/openfga) repository’s stars increased 70%, crossing the 3k mark.
- [External contributors](https://github.com/openfga/openfga/graphs/contributors) to the OpenFGA repository doubled.
- There are [more than 140 repositories](https://github.com/search?q=openfga&type=repositories) in Github that have ‘openfga’ in its name or description and are not maintained by the OpenFGA team.
- We onboarded [Grafana Labs](https://grafana.com/) as a new maintainer for the OpenFGA project.
- We just launched a [LinkedIn Page](https://www.linkedin.com/company/openfga). We need more followers!
- There are [15 Production OpenFGA Models](https://github.com/openfga/sample-stores?tab=readme-ov-file#openfga-models-in-open-source-projects) in different projects in Github.
- We applied to CNCF Incubation in April 2024, [we are third in the line](https://github.com/orgs/cncf/projects/27/views/9) waiting for being evaluated.

## Future community presentations [​](https://openfga.dev/blog/tags/newsletter\#future-community-presentations "Direct link to Future community presentations")

[Sam Bellen](https://www.linkedin.com/in/sambellen/) will present [Can’t Touch This!](https://jfokus.se/talks/1839), a talk about access control, including OpenFGA at JFokus Stockholm.

[Poovamraj Thanganadar Thiagarajan](https://www.linkedin.com/in/poovamraj/) from Okta will be presenting at KubeCon Europe, together with [Jo Guerreiro](https://www.linkedin.com/in/jmlguerreiro/) from Grafana Labs about [From Chaos To Control: Migrating Access Control To OpenFGA in a Multi-Tenant World](https://kccnceu2025.sched.com/event/1txIJ/from-chaos-to-control-migrating-access-control-to-openfga-in-a-multi-tenant-world-jo-guerreiro-grafana-labs-poovamraj-thanganadar-thiagarajan-okta).

[Andres Aguiar](https://www.linkedin.com/in/aaguiar/) from Okta was invited to present on the Maintainer’s Summit at KubeCon Europe aaout our experiences collaborating with the CNCF TAG-Security team: [A Project Maintainers Guide To TAG Security](https://maintainersummiteu2025.sched.com/event/1tj8v/a-project-maintainers-guide-to-tag-security-marina-moore-edera-andres-aguiar-okta).

[Mark Laing](https://www.linkedin.com/in/mark-laing/) from Canonical will present at FOSDEM about [Fine-grained access control in LXD with OpenFGA](https://fosdem.org/2025/schedule/event/fosdem-2025-6194-fine-grained-access-control-in-lxd-with-openfga/).

## **See You Next Month:** [​](https://openfga.dev/blog/tags/newsletter\#see-you-next-month "Direct link to see-you-next-month")

Fine Grained News is published every month. If you have any feedback, want to share your OpenFGA story, or have a noteworthy update, please let us know on any of our [community channels](https://openfga.dev/community) or at [community@openfga.dev](mailto:community@openfga.dev).

Welcome to the November edition of Fine Grained News! As we enter the final stretch of 2024, there are exciting developments in the OpenFGA to share.

🌟 **We hit 3,000 stars on the OpenFGA repo!:** 🌟 Because of this great community, we've just this incredible milestone! Thank you so much for all the support you've shown this project. Let's keep the momentum going! If you haven't yet, we'd greatly appreciate you [starring the repo](https://github.com/openfga/openfga) to help push us toward 4,000 stars and grow our amazing community!

![Celebrating OpenFGA reaching 3,000 GitHub stars](https://openfga.dev/assets/images/fgn-2024-11-stars-d961d19917669492d95418e8f8ab7233.png)

## Just Shipped [​](https://openfga.dev/blog/tags/newsletter\#just-shipped "Direct link to Just Shipped")

**v1.8.1:** This release focuses on performance and monitoring enhancements. It introduces two new flags for better control over check operations, optimizes performance for TTU relationships with set operations, and expands metrics tracking with duration measurements. Additionally, deduplication logic has been added to the `BatchCheck` API, along with new logging fields for authz calls. Read more in the [Read more in the Changelog...](https://github.com/openfga/openfga/releases/tag/v1.8.1)

For more about the new OPENFGA\_CHECK\_ITERATOR\_TTL and OPENFGA\_CHECK\_CACHE\_LIMIT flags, run `./openfga run --help`

**Batch Check API:** Introduced in v1.8.0, the `BatchCheck` API significantly reduces network latency by batching authorization checks in a single request. With v1.8.1, deduplication logic increasing its efficiency further. v1.8.0 also added support for Contextual Tuples in the `Expand` API, time-based filtering in the `ReadChanges` API, and additional performance improvements. [Read more in the Changelog](https://github.com/openfga/openfga/releases/tag/v1.8.0) or the [`BatchCheck` API docs](https://openfga.dev/docs/interacting/relationship-queries#batch-check).

## **Coming Up** [​](https://openfga.dev/blog/tags/newsletter\#coming-up "Direct link to coming-up")

**SDK Updates:** We will be updating the SDKs next to take advantage of the new BatchCheck, starting with Python and JavaScript. If you want to see an SDK prioritized, let us know!

Check out our roadmap to see what we're working on. Feature requests and ideas can be shared in [GitHub Discussions](https://github.com/orgs/openfga/discussions).

## **Community Highlights** [​](https://openfga.dev/blog/tags/newsletter\#community-highlights "Direct link to community-highlights")

**OpenFGA at KubeCon:** In November, [Andres Aguiar](https://www.linkedin.com/in/andresaguiar/) represented OpenFGA at KubeCon/CloudNativeCon. OpenFGA had a kiosk in the Project Pavilion, where Andres delivered a lightning talk and participated in _The Policy Engines Showdown_ with other authorization solution providers. [Watch the panel discussion...](https://www.youtube.com/watch?v=AVA32aYObRE)

![Andres Aguiar at OpenFGA&#39;s KubeCon booth](https://openfga.dev/assets/images/fgn-2024-11-kubecon1-85f27733b8385fd1339ec1c2e168741c.jpg)![Andres Aguiar participating in The Policy Engines Showdown](https://openfga.dev/assets/images/fgn-2024-11-kubecon2-10ef89f7b795d8b870ad8deca04926aa.jpg)

_Andres Aguiar representing OpenFGA at KubeCon_

**OpenFGA in Italy:** [Andrea Chiarelli](https://www.linkedin.com/in/andreachiarelli/) presented _Authorize in the Cloud with OpenFGA_ at Cloud Day 2024 in Milan.

![Andrea Chiarelli presenting OpenFGA in Milan](https://openfga.dev/assets/images/fgn-2024-11-andrea-chiarelli1-8b865d5915d209e4ba425ec08706268e.png)![Andrea Chiarelli during his talk at Cloud Day 2024](https://openfga.dev/assets/images/fgn-2024-11-andrea-chiarelli2-678faee102f1bf7a25d178f91f8bbc92.png)

_Andrea Chiarelli presenting at Cloud Day 2024_

**OpenFGA Offsite:** The team that works hard to bring you OpenFGA met in Chicago this November for a fun and productive offsite, diving deep into our vision, developer needs, and the roadmap ahead.

![OpenFGA team group photo in Chicago](https://openfga.dev/assets/images/fgn-2024-11-chicago-offsite-team-photo-eb4af67e361d204336a083503595de2f.png)

_The OpenFGA team in Chicago_

**New Modeling Demos Available!:** Learn how to model fine-grained authorization in OpenFGA's domain-specific language step-by-step with our [new demo video series](https://www.youtube.com/playlist?list=PLUR5l-oTFZqWaDdhEOVt_IfPOIbKo1Ypt)! Starting with the basics and gradually adding complexity, this playlist is your guide to mastering OpenFGA modeling.

**Monthly Community Meeting:** Join our in depth monthly community discussions every second Thursday at [11 AM Eastern Time (US)](https://www.worldtimebuddy.com/?qm=1&lid=12,100,5,8&h=5&sln=11-12&hf=1). Check out our [meeting details](https://github.com/openfga/community/blob/main/community-meetings.md#:~:text=OpenFGA%20Community%20Meetings) for more information.

November's highlights included:

- [Sebastian Döll](https://www.linkedin.com/in/katallaxie/) from ZEISS showcasing their Terraform/OpenFGA integration.
- [Justin Cohen](https://www.linkedin.com/in/justincoh/) demonstrating the new Batch Check functionality.

Can't make it? Catch up on our [latest recording](https://youtu.be/4MGF4rTzhbA?si=iGcoZTw8T99E0LKs) or browse previous sessions on our [YouTube channel](https://www.youtube.com/@OpenFGA).

**Blogs and Videos for AuthZ Fans:**

- Granting TTL based permissions in OpenFGA: Implement TTL-based permissions in OpenFGA for time-limited access control. [Read more on Medium...](https://medium.com/@shruti1810/granting-ttl-based-permissions-in-openfga-2ed2073931c3)

- Overcoming Security Challenges in Protecting Shared Generative AI Environments: Explore solutions for ensuring secure, scalable, and efficient multi-tenancy in generative AI environments. [Read more on Medium...](https://towardsdatascience.com/overcoming-security-challenges-in-protecting-shared-generative-ai-environments-1ffb27da1bde)

- Fine-Grained Authorization for Backstage using OpenFGA: Learn how OpenFGA enables dynamic fine-grained authorization in Backstage through ReBAC models and seamless policy updates. [See the webinar on YouTube...](https://www.youtube.com/watch?v=wWFbLPvwOyQ)


## **New Adopters** [​](https://openfga.dev/blog/tags/newsletter\#new-adopters "Direct link to new-adopters")

- Are you using OpenFGA in production? Join our growing community of adopters! Add your company to our [ADOPTERS.md](https://github.com/openfga/community/blob/main/ADOPTERS.md#companiesprojects-using-openfga-in-production) file with a quick PR.

- Do you offer OpenFGA implementation services? Get listed in our [Implementation Services](https://github.com/openfga/community/blob/main/ADOPTERS.md#companies-offering-openfga-implementation-services) directory. Note: Listings are community-contributed and not officially endorsed by the OpenFGA project.


## **Announcements** [​](https://openfga.dev/blog/tags/newsletter\#announcements "Direct link to announcements")

**OpenFGA Ranked #5 in CNCF Project Contributions!**
Thanks to our amazing community, OpenFGA soared to become the 5th most active CNCF project during Hacktoberfest in October! Your contributions made this possible, and hope to continue the engagement!

Ready to join our community of contributors? We have opportunities for every skill level:

- Start with our [Good First Issues](https://github.com/search?q=org%3Aopenfga+is%3Aopen+label%3A%22good+first+issue%22+&type=issues&s=created&o=desc) for beginner-friendly tasks.
- Take on more complex challenges in our [Issue queue](https://github.com/openfga/openfga/issues).
- Follow our [Contribution Guide](https://github.com/openfga/.github/blob/main/CONTRIBUTING.md) to get started.

![CNCF projects ranked by commits during Hacktoberfest](https://openfga.dev/assets/images/fgn-2024-11-open-fga-ranks-5th-3bc380d0478b8988d07beaeca665cca2.jpeg)

_CNCF Projects Ranked by Commits during Hacktoberfest_

**Follow OpenFGA on LinkedIn**
Connect with a growing community of fine-grained authorization enthusiasts and expand your professional network by following our new
[OpenFGA LinkedIn](http://linkedin.com/company/openfga) page!

![OpenFGA&#39;s LinkedIn page](https://openfga.dev/assets/images/fgn-2024-11-linkedin-9463378da14cb33d27b81eb8fb461a86.png)

## **See You Next Month:** [​](https://openfga.dev/blog/tags/newsletter\#see-you-next-month "Direct link to see-you-next-month")

Fine Grained News is published every month. If you have any feedback, want to share your OpenFGA story, or have a noteworthy update, please let us know on any of our [community channels](https://openfga.dev/community) or at [community@openfga.dev](mailto:community@openfga.dev).

Welcome to the October edition of Fine Grained News! As we approach the end of the year, we're excited to bring you the latest updates, improvements, and community contributions shaping the future of OpenFGA.

As always, if you’re finding the OpenFGA project to be a valuable resource, we would greatly appreciate if you would [star our repo](https://github.com/openfga/openfga) on GitHub to show your support!⭐

## Just Shipped [​](https://openfga.dev/blog/tags/newsletter\#just-shipped "Direct link to Just Shipped")

- **OpenFGA v1.7.0:** In our latest release, we’ve introduced Access Control. This experimental feature allows you to control access to your OpenFGA server, and of course, we built it using OpenFGA! We’ve updated our Docs to show you [how to enable this feature](https://openfga.dev/docs/getting-started/setup-openfga/access-control); please share your feedback in the [GitHub Discussions](https://github.com/orgs/openfga/discussions/382)!

- This month, we’ve also added documentation of our [OpenFGA release process](https://github.com/openfga/openfga/pull/1923).

- We’ve [improved performance for checks involving nested tuple-to-userset relations](https://github.com/openfga/openfga/pull/2025). This is commonly used when implementing nested groups. Users can enable this with the experimental flag `enable-check-optimizations`.

- Following last month’s launch of OpenFGA SDK support for telemetry data using OpenTelemetry, we’ve also [updated our Docs](https://openfga.dev/docs/getting-started/configure-telemetry) to guide users through configuration to collect tracing data and metrics.


## In Progress [​](https://openfga.dev/blog/tags/newsletter\#in-progress "Direct link to In Progress")

**Batch Check API Endpoint:** We’re close to releasing a [new feature](https://github.com/orgs/openfga/projects/1/views/1?pane=issue&itemId=28481432&issue=openfga%7Croadmap%7C35) to enable sending multiple check operations in a single network request.

Check out our roadmap to see what’s in the works. Feature requests and ideas can be shared in [GitHub Discussions](https://github.com/orgs/openfga/discussions).

## Community Highlights [​](https://openfga.dev/blog/tags/newsletter\#community-highlights "Direct link to Community Highlights")

- **OpenFGA at Open Source Strategy Forum 2024:** [Kiah Imani](https://www.linkedin.com/in/kiah-tolliver/) presented “Role-Based Access Is So Yesterday: Revolutionizing Authorization with OpenFGA” at the OSSF 2024 earlier this month. The presentation is now [available in Youtube](https://www.youtube.com/watch?v=uHKeE4DAHpE)![Kiah Imani](https://openfga.dev/assets/images/fgn-2024-10-kiah-imani-eceac7fa9e3d3ea9257956280ed9007c.jpeg)

- **OpenFGA at KubeCon:** [Andres Aguiar](https://www.linkedin.com/in/aaguiar/) will participate in KubeCon/CloudNativeCon in November! OpenFGA will have a Kiosk in the Project Pavilion. He'll present a [lightning talk on OpenFGA](https://kccncna2024.sched.com/event/1iWA6/openfga-the-cloud-native-way-to-implement-fine-grained-authorization-project-lightning-talk) and participate in [The Policy Engines Showdown](https://kccncna2024.sched.com/event/1i7qp/the-policy-engines-showdown-gabriel-l-manor-permitio-andres-aguiar-okta-omri-gazitt-aserto-anders-eknert-styra-sarah-cecchetti-aws?iframe=no).

![Andres Aguiar](https://openfga.dev/assets/images/fgn-2024-10-andres-aguiar-68c2e8b22fedf6e908b5f6bb6ccbc920.jpg)

- **OpenFGA in Italy:** [Andrea Chiarelli](https://www.linkedin.com/in/andreachiarelli) will present [Authorize in the Cloud with OpenFGA](https://www.cloudday.it/e/sessione/3533/Autorizzare-nel-cloud-con-OpenFGA) at [Cloud Day 2024](https://www.cloudday.it/e/3486/Cloud-Day-2024) in Milan on November 20, 2024.

![Andrea Chiarelli](https://openfga.dev/assets/images/fgn-2024-10-andrea-chiarelli-c078f103fd5b28ef4dfff0b1245aae0e.jpeg)

- **New Demp Flask App Added:** To complement our OpenFGA examples and guides, we have published an [example app demonstrating the integration of OpenFGA](https://github.com/openfga/flask-demo). This app utilizes several FGA features to provide a multi-user system for folder and text file sharing. Thanks to @ [ryanpq](https://github.com/openfga/flask-demo/commits?author=ryanpq) for your contribution!

![Ryan Quinn](<Base64-Image-Removed>)

- **Monthly Community Meeting:** Join us for our monthly [Community Meetings](https://github.com/openfga/community/blob/main/community-meetings.md#:~:text=OpenFGA%20Community%20Meetings), held on the second Thursday of every month at [11 AM Eastern Time (US)](https://www.worldtimebuddy.com/?qm=1&lid=12,100,5,6,8&h=5&sln=11-12&hf=1). Our next meeting is on Thursday, November 14, 2024. Our community meetings are a great way to stay updated with the latest developments, ask questions, and engage with the OpenFGA community. If you can’t join the meetings live, our [latest month's video](https://youtu.be/LITUfwqpNIo?si=ze7dhGG46rhatWBN) will always be posted on our [YouTube channel](https://www.youtube.com/@OpenFGA)!

As always, we welcome community members to demo their use cases. If you want to demo your implementation of OpenFGA, please contact any of the OpenFGA team on our community channels linked below.


## New Adopters [​](https://openfga.dev/blog/tags/newsletter\#new-adopters "Direct link to New Adopters")

- This month, we welcome [Gillion](https://www.gilion.com/) and [Flex](https://flex.team/) as OpenFGA adopters! If you or your company have implemented OpenFGA, we would love to hear about it! Please add your name as an adopter by updating the [ADOPTERS.md](https://github.com/openfga/community/blob/main/ADOPTERS.md#companiesprojects-using-openfga-in-production) file and sending us a PR.

- If you or your company provides implementation services for OpenFGA, we invite you to share your information with the community in our [Implementation Services](https://github.com/openfga/community/blob/main/ADOPTERS.md#companies-offering-openfga-implementation-services) section of the ADOPTERS.md file by sending us a PR! However, please note that the OpenFGA project has not evaluated or endorsed the individuals and companies listed, and inclusion does not imply endorsement.


## Announcements [​](https://openfga.dev/blog/tags/newsletter\#announcements "Direct link to Announcements")

- **Hacktoberfest Highlights:** This Hacktoberfest, we welcomed 13 new contributors making their first commit to OpenFGA! Thanks to the incredible community participation, we saw a 28% increase in pull requests compared to September and a remarkable 260% increase in PRs on the SDK Generator. A huge thanks to this community for your continued participation and contributions!

- **OpenFGA Community Meeting Updates:** We are adding chapters to our [YouTube channel](https://www.youtube.com/@OpenFGA) videos to simplify content navigation. We’ve begun with the most recent videos and will add chapters as time goes on. We have also begun releasing [demos](https://www.youtube.com/playlist?list=PLUR5l-oTFZqXYaB3W_OEEsUhI4l8iLYNe) as individual videos for easier content consumption. You can catch this month’s demos on [Modular Authorization](https://www.youtube.com/watch?v=ws9BjricJu4) and [Client-Side Caching](https://www.youtube.com/watch?v=sst9PyvPHSk), with Materialize Integration coming soon!


## See you Next Month [​](https://openfga.dev/blog/tags/newsletter\#see-you-next-month "Direct link to See you Next Month")

Fine Grained News is published every month. If you have any feedback, want to share your OpenFGA story, or have a noteworthy update, please let us know on any of our [community channels](https://openfga.dev/community) or at [community@openfga.dev](mailto:community@openfga.dev).

Welcome to the September edition of Fine Grained News! As we transition into the fall season, we’re excited to bring you the latest updates on the progress of OpenFGA.

## **Just Shipped** [​](https://openfga.dev/blog/tags/newsletter\#just-shipped "Direct link to just-shipped")

- We shipped [OpenFGA v1.6.1](https://github.com/openfga/openfga/releases/tag/v1.6.1) with performance fixes, bug fixes, and a new SQLite storage adapter contributed by [Grafana](https://grafana.com/). Thanks [@DanCech](https://github.com/DanCech)!

- This month we released improved [OpenTelemetry metrics support](https://openfga.dev/docs/getting-started/configure-telemetry) for [.NET SDK](https://github.com/openfga/dotnet-sdk/releases), [Go SDK](https://github.com/openfga/go-sdk/releases/tag/v0.6.1), [Java SDK](https://github.com/openfga/java-sdk/releases/tag/v0.7.1), and [JavaScript SDK](https://github.com/openfga/js-sdk/releases/tag/v0.7.0).


## **In Progress** [​](https://openfga.dev/blog/tags/newsletter\#in-progress "Direct link to in-progress")

- **Authorization for OpenFGA**: OpenFGA currently supports global pre-shared keys and OIDC for API authentication, but [we’re exploring more granular authorization options](https://github.com/openfga/roadmap/issues/30), such as store-specific credentials and varying permissions for stores, modules, and types.

- **Batch Check**: OpenFGA SDKs currently implement BatchCheck by issuing multiple parallel request to the OpenFGA server. We'll be implementing a [BatchCheck server endpoint](https://github.com/openfga/roadmap/issues/35) to improve performance and reduce network overhead.


Check out our [roadmap](https://github.com/orgs/openfga/projects/1/views/1) to see what’s in the works. Feature requests and ideas can be shared in [GitHub Discussions](https://github.com/orgs/openfga/discussions/categories/ideas).

## **Community Highlights** [​](https://openfga.dev/blog/tags/newsletter\#community-highlights "Direct link to community-highlights")

- **OpenFGA at Open Source Summit Europe:** [José Carlos Chávez](https://www.linkedin.com/in/jcchavezs/) gave a talk on [RBAC with OpenFGA](https://osseu2024.sched.com/event/1ej2u/fine-grained-policies-rbac-with-openfga-jose-carlos-chavez-okta) at OSS Europe 2024 in Vienna, Austria this month. You can see the presentation deck [here](https://speakerdeck.com/jcchavezs/fine-grained-policies-rbac-with-openfga).
- **OpenFGA at Open Source Strategy Forum 2024:** [Kiah Imani](https://www.linkedin.com/in/kiah-tolliver/) will present [Role-Based Access Is So Yesterday: Revolutionizing Authorization with OpenFGA](https://sossfusion2024.sched.com/event/1hcQa?iframe=no) at OSSF on Wednesday, October 23, 2024. In this session, attendees will learn how OpenFGA addresses the limitations of RBAC, enhancing security, performance, and access management across various systems.
- **OpenFGA at KubeCon:** [Andres Aguiar](https://www.linkedin.com/in/aaguiar/) will participate in KubeCon/CloudNativeCon in November! OpenFGA will have a Kiosk in the Project Pavilion. He'll present a [lightning talk on OpenFGA](https://kccncna2024.sched.com/event/1iWA6/openfga-the-cloud-native-way-to-implement-fine-grained-authorization-project-lightning-talk) and participate in [The Policy Engines Showdown](https://kccncna2024.sched.com/event/1i7qp/the-policy-engines-showdown-gabriel-l-manor-permitio-andres-aguiar-okta-omri-gazitt-aserto-anders-eknert-styra-sarah-cecchetti-aws?iframe=no).
- We added new authorization model examples for [multi-tenant RBAC](https://github.com/openfga/sample-stores/tree/main/stores/multitenant-rbac) and how to define [ABAC policies using ReBAC](https://github.com/openfga/sample-stores/tree/main/stores/abac-with-rebac).
- **Guide to Building Auth Systems:** Level Up Coding offers a [comprehensive guide](https://levelup.gitconnected.com/complete-guide-to-building-authorization-systems-using-rbac-rebac-and-abac-0a2ce5311d25) to building authorization systems using RBAC, ReBAC, and ABAC models. The guide covers the differences between these approaches and when to use each.
- **High Marks for OpenFGA Policy Languages:** Trial Of Bits published a report comparing the security of the [Cedar, OPA, and OpenFGA policy languages](https://github.com/trailofbits/publications/blob/master/reports/Policy_Language_Security_Comparison_and_TM.pdf). OpenFGA was very well evaluated!
- **September Community Meeting:** Check out the [September Community Meeting](https://www.youtube.com/watch?v=p_ERXS8Dsu4&list=PLUR5l-oTFZqUneyHz-h4WzaJssgxBXdxB&index=18), which is posted on YouTube! In last month’s meeting, we reviewed recent updates, demos with [Envoy](https://github.com/openfga/openfga-envoy), an OpenFGA Kubernetes Operator, fine-grained access for OpenFGA, and reviewed the results of the 2024 Community Survey.

## **New Adopters** [​](https://openfga.dev/blog/tags/newsletter\#new-adopters "Direct link to new-adopters")

- If you or your company have implemented OpenFGA, we would love to hear about it! Please add your name as yourself as an adopter by updating the [Adopters.md](https://github.com/openfga/community/blob/main/ADOPTERS.md#companiesprojects-using-openfga-in-production) file and send us a PR.
- If you or your company provides implementation services for OpenFGA, we invite you to share your information with the community in our [Implementation Services](https://github.com/openfga/community/blob/main/ADOPTERS.md#companies-offering-openfga-implementation-services) section of the Adopters.md file by sending us a PR! However, please note that the listed individuals and companies have not been evaluated or endorsed by the OpenFGA project, and inclusion on the list does not imply endorsement.

## **Announcements** [​](https://openfga.dev/blog/tags/newsletter\#announcements "Direct link to announcements")

- **Hacktoberfest 2024:** [Hacktoberfest](https://hacktoberfest.com/) is a month long celebration of open source software which encourages new and experienced developers alike to contribute code to open source projects during the month of October. This makes October a great time to become an OpenFGA contributor! We have labeled a number of issues on GitHub with "Hacktoberfest" and "Good First Issue" labels making it easy to find a way to get involved and have your code included in OpenFGA.
- **Monthly Community Meeting:** Join us for our monthly Community Meetings, held on the second Thursday of every month at 11 AM Eastern Time (US). Our next meeting is on Thursday, October 10, 2024. Our community meetings are a great way to stay updated with the latest developments, ask questions, and engage with the OpenFGA community. If you would like to demo your implementation of OpenFGA, please reach out to us on any of our [community channels](https://openfga.dev/community) or at [community@openfga.dev](mailto:community@openfga.dev). You can find the link to the meeting invite [here](https://openfga.dev/docs/community#monthly-community-meetings). We look forward to seeing you there!

## **See You Next Month!** [​](https://openfga.dev/blog/tags/newsletter\#see-you-next-month "Direct link to see-you-next-month")

Fine Grained News is published every month. If you have any feedback, want to share your OpenFGA story, or have a noteworthy update, please let us know on any of our [community channels](https://openfga.dev/community) or at [community@openfga.dev](mailto:community@openfga.dev).

Welcome to the August 2024 edition of Fine Grained News! We are excited to bring you the latest updates, features, and community highlights from OpenFGA.

## Just Shipped! [​](https://openfga.dev/blog/tags/newsletter\#just-shipped "Direct link to Just Shipped!")

- **OpenFGA v1.6.0:** The [latest OpenFGA release](https://github.com/openfga/openfga/releases/tag/v1.6.0) enables support for [query consistency options](https://openfga.dev/docs/interacting/consistency) and includes additional performance enhancements.

- **Query Consistency Options in SDKs:** All OpenFGA SDKs now support specifying [a query consistency parameter](https://openfga.dev/docs/interacting/consistency) for OpenFGA query endpoints. Make sure to update to the latest versions of the SDKs and OpenFGA to take advantage of this feature.

- **Metrics Telemetry for SDKs:** We already supported OpenTelemetry metrics in the [Python](https://github.com/openfga/python-sdk/) and [Javascript](https://github.com/openfga/js-sdk/) SDKs. We’ve just added support in [the Java SDK](https://github.com/openfga/java-sdk/releases/tag/v0.6.1), and [the GO SDK](https://github.com/openfga/go-sdk/releases/v0.6.0).


## Security Advisory [​](https://openfga.dev/blog/tags/newsletter\#security-advisory "Direct link to Security Advisory")

We recently addressed a security issue, identified as GHSA-3f6g-m4hr-59h8, that was present in OpenFGA v1.5.7 and v1.5.8. This issue has been fixed starting v1.5.9, and we strongly recommend all users update to the latest version to ensure their systems remain secure. For more details, please refer to the [security advisory](https://github.com/openfga/openfga/security/advisories/GHSA-3f6g-m4hr-59h8) on our GitHub page.

## In Progress [​](https://openfga.dev/blog/tags/newsletter\#in-progress "Direct link to In Progress")

- [Support for OpenTelemetry tracing and logging](https://github.com/openfga/roadmap/issues/41)
- [Performance Improvements for OpenFGA queries](https://github.com/openfga/roadmap/issues/61)
- [Additional OpenFGA API Authorization Options](https://github.com/openfga/roadmap/issues/30)
- [SQLite Storage Adapter](https://github.com/openfga/roadmap/issues/56), thanks to [Grafana](https://grafana.com/) for the contribution!

Curious about what’s coming next for OpenFGA? Check out our [roadmap](https://github.com/orgs/openfga/projects/1/views/1) to see what’s in store. We also welcome your feature requests and ideas in [GitHub Discussions](https://github.com/orgs/openfga/discussions/categories/ideas).

## Community Highlights [​](https://openfga.dev/blog/tags/newsletter\#community-highlights "Direct link to Community Highlights")

- **CNCF Security TAG:** This month, [Andrés Aguiar](https://www.linkedin.com/in/aaguiar/) presented OpenFGA to the [CNCF Security Technical Advisory Group (TAG)](https://tag-security.cncf.io/), where he discussed the project's current [status](https://github.com/cncf/tag-security/issues/1339) and showcased various use cases. You can see the presentation deck [here](https://docs.google.com/presentation/d/1-TFfvKPi3jJ-jO-bjsHb3Soj_kKcQCf4Y_UvST7z744/edit#slide=id.p). It’s a great way to see how OpenFGA is being utilized and what’s on the horizon for the project.
- **API Security: APISIX + OpenFGA:** Check out this [blog post](https://dev.to/kaankahraman/supercharging-api-security-apisix-with-openfga-45da) by Kaan Kahraman on enhancing API security by integrating [APISIX](https://apisix.apache.org/) with OpenFGA.

### Upcoming Events [​](https://openfga.dev/blog/tags/newsletter\#upcoming-events "Direct link to Upcoming Events")

- **Join Us at Open Source Summit Europe 2024:** [José Carlos Chávez](https://www.linkedin.com/in/jcchavezs/) will present at Open Source Summit Europe 2024 in Vienna, Austria on September 16, 2024! He will discuss [Fine-Grained Policies: RBAC with OpenFGA](https://osseu2024.sched.com/event/1ej2u/fine-grained-policies-rbac-with-openfga-jose-carlos-chavez-okta). We look forward to seeing you there!
- **OpenFGA at Open Source Strategy Forum 2024:** [Kiah Imani](https://www.linkedin.com/in/kiah-tolliver/) will present [Role-Based Access Is So Yesterday: Revolutionizing Authorization with OpenFGA](https://sossfusion2024.sched.com/event/1hcQa?iframe=no) at OSSF on Wednesday, October 23, 2024. In this session, attendees will learn how OpenFGA addresses the limitations of RBAC, enhancing security, performance, and access management across various systems.
- We'll be participating of KubeCon / CloudNativeCon North America! OpenFGA will have a Kiosk in the Project Pavilion, we'll present a [lightning talk on OpenFGA](https://kccncna2024.sched.com/event/1iWA6/openfga-the-cloud-native-way-to-implement-fine-grained-authorization-project-lightning-talk) and participate in [The Policy Engines Showdown](https://kccncna2024.sched.com/event/1i7qp/the-policy-engines-showdown-gabriel-l-manor-permitio-andres-aguiar-okta-omri-gazitt-aserto-anders-eknert-styra-sarah-cecchetti-aws?iframe=no).

### New Adopters [​](https://openfga.dev/blog/tags/newsletter\#new-adopters "Direct link to New Adopters")

We want to welcome [Patika Global Technology](https://patikaglobal.com/) as an OpenFGA adopter! If you're using OpenFGA in production, we encourage you to add your company or project to our [Adopters list](https://github.com/openfga/community/blob/main/ADOPTERS.md) by opening a PR. Please include a short description of your use case in your submission. If you’ve previously added your company or project to the adopter's list, we would appreciate you updating it to include a short description. Your contributions help the community, and we greatly appreciate your support!

### OpenFGA Service Providers [​](https://openfga.dev/blog/tags/newsletter\#openfga-service-providers "Direct link to OpenFGA Service Providers")

We’ve added a new section within the Adopters list for those offering OpenFGA [implementation services](https://github.com/openfga/community/blob/main/ADOPTERS.md#companies-offering-openfga-implementation-services). If your organization wants help adopting OpenFGA, this resource can connect you with professionals specializing in our technology. If your company provides implementation services for OpenFGA, we invite you to add your details by sending us a PR! Please note that the listed companies have not been individually evaluated or endorsed by the OpenFGA project, and inclusion on the list does not imply endorsement.

### Announcements [​](https://openfga.dev/blog/tags/newsletter\#announcements "Direct link to Announcements")

- **OpenFGA Joins Docker-Sponsored Open Source Program:** We’re excited to share that OpenFGA has been accepted into the Docker-Sponsored Open Source Program! This partnership allows us to distribute [our container image](https://hub.docker.com/r/openfga/openfga) more efficiently and securely, ensuring that our community can easily access and trust the latest versions of OpenFGA on Docker Hub with higher rate limits.
- **2024 Community Survey Participation:** A huge thank you to everyone who participated in the 2024 Community Survey! Your insights are invaluable in helping us shape the future of OpenFGA. We truly appreciate the time and thought you put into sharing your experiences and suggestions. Remember, we always welcome feedback across our [community channels](https://openfga.dev/community) — your input is what drives us forward.
- **Monthly Community Meeting:** Join us for our monthly Community Meetings, held on the second Thursday of every month at 11 AM Eastern Time (US). Our next meeting is on Thursday, September 12, 2024. These meetings are a fantastic opportunity to stay updated with the latest developments, ask questions, and engage with the OpenFGA community. You can find the link to the meeting invite [here](https://openfga.dev/docs/community#monthly-community-meetings). We look forward to seeing you there!

## See You Next Month! [​](https://openfga.dev/blog/tags/newsletter\#see-you-next-month "Direct link to See You Next Month!")

Fine Grained News is published every month. Although we have transitioned from Discord to the CNCF Slack channel, we want to continue to hear from you! Whether you have questions or feedback or just want to connect with others using OpenFGA, our community channels are the best place to do so. You can reach us at:

- **CNCF Slack:** Join the conversation in the [#openfga](https://cloud-native.slack.com/archives/C06G1NNH47N) channel. Please note: If you are not currently part of the CNCF Slack channel, you will need to click [here](https://slack.cncf.io/) to join the channel first.
- **GitHub Discussions:** Share your feedback, ask questions, and engage with the community on [GitHub Discussions](https://github.com/orgs/openfga/discussions).
- **Twitter:** Follow us [@openfga](https://twitter.com/openfga) for updates and news.

Visit our [community page](https://openfga.dev/docs/community) for more details and to join these channels. We look forward to your contributions and conversations!

Welcome to the July 2024 edition of Fine Grained News! We are thrilled to bring you the latest updates, features, and community highlights from OpenFGA. This month has included releases, performance improvements, and insights shared through our community meetings and presentations.

We value your feedback and invite you to participate in our [2024 OpenFGA Community Survey](https://www.surveymonkey.com/r/OPENFGA2024). Your insights help us understand your needs better and improve our offerings. Please take a few minutes to complete the survey and let your voice be heard.

## Improvements [​](https://openfga.dev/blog/tags/newsletter\#improvements "Direct link to Improvements")

**Latest Features**

- We’ve introduced consistency options for query requests. This new, experimental, feature provides more flexibility and control over how queries are executed, enhancing the accuracy and reliability of query results. [Learn more about this update](https://openfga.dev/blog/query-consistency-options-announcement).

- We’re now publishing images to `ghcr.io/openfga/openfga` as an alternative to DockerHub, thanks to the contribution from [@JAORMX](https://github.com/JAORMX). This provides an additional option for accessing and deploying our containers. [Read more](https://github.com/openfga/openfga/pull/1775).


**Performance Improvements**

- We've improved our Check latency up to 20X in some scenarios in OpenFGA [v1.5.7](https://github.com/openfga/openfga/releases/tag/v1.5.7) and [v1.5.6](https://github.com/openfga/openfga/releases/tag/v1.5.6).

If you have any feedback, or want to try a feature early, or are interested to learn more, please reach out!

## Breaking Changes [​](https://openfga.dev/blog/tags/newsletter\#breaking-changes "Direct link to Breaking Changes")

Several breaking changes related to the storage interface [have been introduced](https://github.com/openfga/openfga/releases/tag/v1.5.7). These changes should not impact your usage of OpenFGA unless you are implementing a custom storage adapter for OpenFGA.

## In Progress [​](https://openfga.dev/blog/tags/newsletter\#in-progress "Direct link to In Progress")

- [Additional Consistency Options for OpenFGA queries](https://github.com/openfga/roadmap/issues/54): We've just shipped the first iteration of this feature, we're working on adding support for it in more SDKs. We’ll also be working on adding a consistency token in the future.

- [Telemetry for SDKs](https://github.com/openfga/roadmap/issues/41): We shipped OpenTelemetry Metrics support for Python and Javascript. We’ll be adding metrics support to the rest of the SDKs and then add support for tracing and logging. If you have feedback regarding our OpenTelemetry support, please do reach out on any of our community channels.

- We’ll keep working on [Performance Improvements](https://github.com/openfga/roadmap/issues/61) for Check, List Objects and List Users APIs.

- We’ll be adding additional [authorization options for OpenFGA](https://github.com/openfga/roadmap/issues/30) to restrict API credentials to performing specific actions in OpenFGA stores.

- We collaborated with members of the CNCF [TAG-Security team](https://github.com/cncf/tag-security) for a few weeks to get it wrapped up (thanks [Krishna Krishna](https://github.com/krishnakv) and [Eddie](https://github.com/eddie-knight) for your help).


## Community Highlights [​](https://openfga.dev/blog/tags/newsletter\#community-highlights "Direct link to Community Highlights")

- Check out [July’s Community Meeting](https://www.youtube.com/watch?v=GvgeQcQlUuU&t=212s&pp=ygUHT3BlbkZHQQ%3D%3D)! It's a great opportunity to stay updated with the latest developments, ask questions, and engage with the OpenFGA community.

- [Maria Ines Parnisari](https://www.linkedin.com/in/miparnisari/) from the OpenFGA team and [Evan Anderson](https://www.linkedin.com/in/evankanderson/) from Stacklok presented on Implementing a Multi-Tenant, Relationship-Based Authorization Model with OpenFGA at CloudNative SecurityCon North America. If you didn’t attend the conference in June, the presentation recording is now [live](https://www.youtube.com/watch?v=zIJOBLbaZOc).

- This month, [Andres Aguiar](https://www.linkedin.com/in/aaguiar/) and [Damian Schenkelman](https://www.linkedin.com/in/damianschenkelman/) appeared in the [Identerati Office Hours](https://www.youtube.com/watch?v=Ups1FFxK3VE&pp=ygUHT3BlbkZHQQ%3D%3D) livestream for an in-depth exploration of OpenFGA. This video covers advanced topics and provides valuable insights into the capabilities and implementation of OpenFGA. Whether you're a seasoned user or new to OpenFGA, this deep dive is packed with information that will enhance your understanding and usage of the platform.

- Andres Aguiar sat down with Open at Intel host Katherine Druckman during KubeCon Europe to discuss OpenFGA. You can hear that podcast
[here](https://www.intel.com/content/www/us/en/developer/articles/community/fine-grained-authorization-with-openfga.html).


## New Adopters [​](https://openfga.dev/blog/tags/newsletter\#new-adopters "Direct link to New Adopters")

We’re happy to share that [Bump](https://www.bump-charge.com/) is now an OpenFGA adopter! If you are using OpenFGA in production, please consider adding your company or project to our [list](https://github.com/openfga/community/blob/main/ADOPTERS.md). Your contribution will be greatly appreciated!

## Announcements [​](https://openfga.dev/blog/tags/newsletter\#announcements "Direct link to Announcements")

Join us for our monthly Community Meetings, held on the second Thursday of every month at 11am Eastern Time (US). Our next meeting is on Thursday, August 8, 2024. These meetings are a fantastic opportunity to stay updated with the latest developments, ask questions, and engage with the OpenFGA community. You can find the link to the meeting invite [here](https://openfga.dev/docs/community#monthly-community-meetings). We look forward to seeing you there!

## Transitioning from Discord to CNCF's Slack [​](https://openfga.dev/blog/tags/newsletter\#transitioning-from-discord-to-cncfs-slack "Direct link to Transitioning from Discord to CNCF's Slack")

As a reminder, we transitioned out from Discord for OpenFGA and are now using the CNCF [#openfga Slack channel](https://cloud-native.slack.com/archives/C06G1NNH47N). If you are not part of the CNCF Slack workspace, you need to join the [CNCF Slack](https://slack.cncf.io/) first.

## See You Next Month! [​](https://openfga.dev/blog/tags/newsletter\#see-you-next-month "Direct link to See You Next Month!")

Fine Grained News is published every month. If you have any feedback, want to share your OpenFGA story, or have a noteworthy update, please let us know on any of our [community channels](https://openfga.dev/community) or at [community@openfga.dev](mailto:community@openfga.dev).

Welcome to Fine Grained News, June 2024 edition!

This is where we share what has been going on in the OpenFGA community during the last 30 days :).

## What are we working on? [​](https://openfga.dev/blog/tags/newsletter\#what-are-we-working-on "Direct link to What are we working on?")

- We started adding [OpenTelemetry instrumentation](https://github.com/openfga/roadmap/issues/41) to our SDKs. We just shipped metrics support for Python and Javascript. We'll continue with tracing and logging, and we'll be adding support for Java, Go and .NET next.

- We are close to ship a first iteration to [add additional consistency options](https://github.com/orgs/openfga/projects/1?pane=issue&itemId=49635084) for OpenFGA.

- We are working with [Krishna Kumar](https://github.com/krishnakv) and [Eddie Knight](https://github.com/eddie-knight) from the CNCF Tag-Security team on a joint security assessment for OpenFGA. We are pretty close to wrapping it up! You can follow the progress in [this PR](https://github.com/cncf/tag-security/pull/1289).

- We'll be working on adding [authorization for OpenFGA APIs](https://github.com/openfga/roadmap/issues/30).

- We've identified a few areas where we can improve performance and we are actively working on them.


If you have any feedback, or want to try a feature early, or are interested to learn more, please reach out!

## New Adopters [​](https://openfga.dev/blog/tags/newsletter\#new-adopters "Direct link to New Adopters")

We are thrilled to welcome [Sourcegraph](https://sourcegraph.com/) to the list of companies in our [Adopters list](https://github.com/openfga/community/blob/main/ADOPTERS.md)! We are proud to be addressing their fine-grained authorization needs.

If you are using OpenFGA in production, please consider adding your company/project to the [list](https://github.com/openfga/community/blob/main/ADOPTERS.md), it will be greatly appreciated!

## Community [​](https://openfga.dev/blog/tags/newsletter\#community "Direct link to Community")

- [Zuplo](https://zuplo.com/) released an [OpenFGA Authorization Inbound Policy](https://zuplo.com/docs/policies/openfga-authz-inbound) that makes it super simple to add fine-grained authorization to your APIs. They are also using OpenFGA deployed globally in GCP for Zuplo itself. You can learn more about their OpenFGA integration journey [in this webinar](https://landing.zuplo.com/oktafgawebinarreg).

- [Martin Besozzi](https://github.com/embesozzi) built an [APISIX plugin for OpenFGA](https://github.com/embesozzi/apisix-authz-openfga). He also published a blog post about [Mastering Access Control: Implementing Low-Code Authorization Based on ReBAC and Decoupling Pattern](https://embesozzi.medium.com/mastering-access-control-implementing-low-code-authorization-based-on-rebac-and-decoupling-pattern-f6f54f70115e) demonstrating how to use it.

- [Andres Aguiar](https://github.com/aaguiarz) and [Damian Schenkelman](https://github.com/dschenkelman) will do an OpenFGA Deep Dive in the [July 17 episode of Identirati Office Hours](https://www.linkedin.com/feed/update/urn:li:activity:7211830083366322176/).


## OpenFGA @ CloudNative SecurityCon [​](https://openfga.dev/blog/tags/newsletter\#openfga--cloudnative-securitycon "Direct link to OpenFGA @ CloudNative SecurityCon")

OpenFGA was present in [CloudNative SecurityCon North America](https://events.linuxfoundation.org/cloudnativesecuritycon-north-america/)!

[Maria Ines Parnisari](https://github.com/miparnisari) from the OpenFGA team and [Evan Anderson](https://github.com/evankanderson) from [Stacklok](https://stacklok.com/) presented on [Implementing a Multi-Tenant, Relationship-Based Authorization Model with OpenFGA](https://cloudnativesecurityconna24.sched.com/event/1dCVn/implementing-a-multi-tenant-relationship-based-authorization-model-with-openfga-evan-anderson-stacklok-maria-ines-parnisari-okta).

![CloudNative SecurityCon Presentation](https://openfga.dev/assets/images/fgn-2024-06-securitycon-talk-57abfc6e4e3f7e573481a2fdfe30692c.jpg)

We also got a last-minute kiosk to showcase OpenFGA at the event:

![OpenFGA Kiosk](https://openfga.dev/assets/images/fgn-2024-06-securitycon-booth-b547906de2fa364259b5ba8c112ba91c.png)

Thanks to everyone that stopped by!

## Latest Features [​](https://openfga.dev/blog/tags/newsletter\#latest-features "Direct link to Latest Features")

In case you missed them, here are some of the latest major features we've added to OpenFGA:

- [List Users API](https://openfga.dev/blog/list-users-announcement) allows you to retrieve all the users that have a specific relation with a resource.

- [Modular Models](https://openfga.dev/blog/modular-models-announcement) makes it easy for multiple teams to collaborate on a single OpenFGA model.

- [JetBrain's IDEs plugin](https://plugins.jetbrains.com/plugin/24394-openfga) to allow syntax coloring and validation of OpenFGA models.

- [Conditional Tuples](https://openfga.dev/blog/conditional-tuples-announcement) allows you to define tuples that are only valid under certain conditions

- [Spring Boot Starter for OpenFGA](https://github.com/openfga/spring-boot-starter) simplifies integrating OpenFGA with Spring Security applications.


## Transitioning from Discord to CNCF's Slack [​](https://openfga.dev/blog/tags/newsletter\#transitioning-from-discord-to-cncfs-slack "Direct link to Transitioning from Discord to CNCF's Slack")

As we mentioned before, we transitioned out from Discord for OpenFGA and are now using the CNCF [#openfga Slack channel](https://cloud-native.slack.com/archives/C06G1NNH47N). If you are not part of the CNCF Slack workspace, you need to join the [CNCF Slack](https://slack.cncf.io/) first.

Checkout [https://openfga.dev/community](https://openfga.dev/community) for all the places to find us.

## See you next month! [​](https://openfga.dev/blog/tags/newsletter\#see-you-next-month "Direct link to See you next month!")

Fine Grained News are published every month. If you have any feedback, want to share your OpenFGA story, or know about something that you think is worth mentioning, please let us know!

Welcome to Fine Grained News, May edition!

## New Releases! [​](https://openfga.dev/blog/tags/newsletter\#new-releases "Direct link to New Releases!")

- We shipped the [a ListUsers API](https://openfga.dev/blog/list-users-announcement). ListUsers allows you to retrieve all the users that have a specific relation with a resource (e.g. all users that can view a document).

- In collaboration with [Yann D'Isanto](https://github.com/yann-disanto) we shipped a [plugin for JetBrain's IDEs](https://plugins.jetbrains.com/plugin/24394-openfga) to allow syntax coloring and validation of OpenFGA models. Together with the [Visual Studio Code integration](https://marketplace.visualstudio.com/items?itemName=openfga.openfga-vscode) and the [Tree sitter grammar](https://github.com/matoous/tree-sitter-fga) from [Matouš Dzivjak](https://github.com/matoous/), OpenFGA has get great coverage for major IDEs and editors.


## What's Next [​](https://openfga.dev/blog/tags/newsletter\#whats-next "Direct link to What's Next")

- We've identified a few areas where we can improve performance and we are actively working on them.
- We'll be [instrumenting our SDKs](https://github.com/openfga/roadmap/issues/41) to provide metrics / tracing and logging through OpenTelemetry APIs.
- We'll be adding [additional consistency options](https://github.com/openfga/roadmap/issues/54) for OpenFGA query APIs.
- We'll be working on adding [authorization for OpenFGA APIs](https://github.com/openfga/roadmap/issues/30).

Please check the items above and let us know if you have any feedback or idea.

## OpenFGA @ CloudNative SecurityCon [​](https://openfga.dev/blog/tags/newsletter\#openfga--cloudnative-securitycon "Direct link to OpenFGA @ CloudNative SecurityCon")

OpenFGA will be present in [CloudNative SecurityCon North America](https://events.linuxfoundation.org/cloudnativesecuritycon-north-america/)!

[Maria Ines Parnisari](https://github.com/miparnisari) from the OpenFGA team and [Evan Anderson](https://github.com/evankanderson) from [Stacklok](https://stacklok.com/) will be presenting on [Implementing a Multi-Tenant, Relationship-Based Authorization Model with OpenFGA](https://cloudnativesecurityconna24.sched.com/event/1dCVn/implementing-a-multi-tenant-relationship-based-authorization-model-with-openfga-evan-anderson-stacklok-maria-ines-parnisari-okta).

We hope to see you there!

## Latest Features [​](https://openfga.dev/blog/tags/newsletter\#latest-features "Direct link to Latest Features")

In case you missed them, here are some of the latest major features we've added to OpenFGA:

- [Conditional Tuples](https://openfga.dev/blog/conditional-tuples-announcement) allows you to define tuples that are only valid under certain conditions.
- [Modular Models](https://openfga.dev/blog/modular-models-announcement) makes it easy for multiple teams to collaborate on a single OpenFGA model.
- [List Users API](https://openfga.dev/blog/list-users-announcement) allowing you to retrieve all the users that have a specific relation with a resource.
- [Spring Boot Starter for OpenFGA](https://github.com/openfga/spring-boot-starter) simplifies integrating OpenFGA with Spring Security applications.
- [JetBrain's IDEs plugin](https://plugins.jetbrains.com/plugin/24394-openfga) to allow syntax coloring and validation of OpenFGA models.

## Transitioning from Discord to CNCF's Slack [​](https://openfga.dev/blog/tags/newsletter\#transitioning-from-discord-to-cncfs-slack "Direct link to Transitioning from Discord to CNCF's Slack")

As we mentioned before, we transitioned out from Discord for OpenFGA and are now using the CNCF [#openfga Slack channel](https://cloud-native.slack.com/archives/C06G1NNH47N). If you are not part of the CNCF Slack workspace, you need to join the [CNCF Slack](https://slack.cncf.io/) first.

Checkout [https://openfga.dev/community](https://openfga.dev/community) for all the places to find us.

## See you next month! [​](https://openfga.dev/blog/tags/newsletter\#see-you-next-month "Direct link to See you next month!")

Fine Grained News are published every month. If you have any feedback, want to share your OpenFGA story, or know about something that you think is worth mentioning, please let us know!

Welcome to Fine Grained News, April edition!

## New Releases! [​](https://openfga.dev/blog/tags/newsletter\#new-releases "Direct link to New Releases!")

- [Modular Models](https://openfga.dev/blog/modular-models-announcement) is now part of the OpenFGA core, making it easy for multiple teams to collaborate on a single OpenFGA model. Check it out, we love the feature! :)

- Thanks to the help provided by the [Spring Security team](https://github.com/spring-projects/spring-security/issues/14121) there's now a [Spring Boot Starter for OpenFGA](https://github.com/openfga/spring-boot-starter)!

- We shipped an OpenFGA Release Candidate with [a new ListUsers API](https://openfga.dev/blog/list-users-announcement), that can be enabled with an experimental flag. ListUsers allows you to retrieve all the users that have a specific relation with a resource, for example, all users that can view a document.


## OpenFGA Hackathon [​](https://openfga.dev/blog/tags/newsletter\#openfga-hackathon "Direct link to OpenFGA Hackathon")

A few weeks ago we hosted a Hackathon where multiple team members experimented new ideas around OpenFGA. You'll need to wait until the next [community meeting](https://github.com/openfga/community/blob/main/community-meetings.md) to learn more :).

## OpenFGA Security Assessment [​](https://openfga.dev/blog/tags/newsletter\#openfga-security-assessment "Direct link to OpenFGA Security Assessment")

We are working with the CNCF Tag-Security team on a [joint security assessment](https://github.com/cncf/tag-security/issues/1236), which is a step required to get accepted as a CNCF Incubation project.

## What's Next [​](https://openfga.dev/blog/tags/newsletter\#whats-next "Direct link to What's Next")

- In collaboration with [Yann D'Isanto](https://github.com/le-yams) we are building a [plugin for JetBrain's IDEs](https://github.com/le-yams/openfga4intellij) to allow syntax coloring and validation of OpenFGA models. Together with the [Visual Studio Code integration](https://marketplace.visualstudio.com/items?itemName=openfga.openfga-vscode) and the [Tree sitter grammar](https://github.com/matoous/tree-sitter-fga) from [Matouš Dzivjak](https://github.com/matoous/) OpenFGA will get great coverage for major IDEs and editors.

- We'll be [instrumenting our SDKs](https://github.com/openfga/roadmap/issues/41) to provide metrics / tracing and logging through OpenTelemetry APIs.

- We'll be adding [additional consistency options](https://github.com/openfga/roadmap/issues/54) for OpenFGA query APIs.

- We'll be working on adding [authorization for OpenFGA APIs](https://github.com/openfga/roadmap/issues/30).


Please check the items above and let us know if you have any feedback or idea.

## Transitioning from Discord to CNCF's Slack [​](https://openfga.dev/blog/tags/newsletter\#transitioning-from-discord-to-cncfs-slack "Direct link to Transitioning from Discord to CNCF's Slack")

As we mentioned in the last edition, we transitioned out from Discord for OpenFGA and are now using the CNCF [#openfga Slack channel](https://cloud-native.slack.com/archives/C06G1NNH47N). If you are not part of the CNCF Slack workspace, you need to join the [CNCF Slack](https://slack.cncf.io/) first.

## See you next month! [​](https://openfga.dev/blog/tags/newsletter\#see-you-next-month "Direct link to See you next month!")

Fine Grained News are published every month. If you have any feedback, want to share your OpenFGA story, or know about something that you think is worth mentioning, please let us know!

## Testing OpenFGA Models
[Skip to main content](https://openfga.dev/docs/modeling/testing#__docusaurus_skipToContent_fallback)

On this page

Every OpenFGA model should be tested before deployment to ensure your authorization model is correctly designed.

The `.fga.yaml` contains tests for OpenFGA authorization models. If you are using Visual Studio Code as your IDE, install the [OpenFGA extension](https://marketplace.visualstudio.com/items?itemName=openfga.openfga-vscode) to enable syntax coloring and validation.

## Define the model and tuples [​](https://openfga.dev/docs/modeling/testing\#define-the-model-and-tuples "Direct link to Define the model and tuples")

`.fga.yaml` files have the following top level items:

| Object | Description |
| --- | --- |
| `name` (optional) | A descriptive name for the test file |
| `model` or `model_file` | An OpenFGA model or a reference to an external model file in `fga` or `json` format |
| `tuples or tuple_file` (optional) | A set of tuples or a reference to an external tuple file in `json`, `yaml` or `csv` format. These are considered for all tests. |
| `tests` | A set of tests that verify the return values of OpenFGA API calls |

The example below defines a model and tuples:

```codeBlockLines_e6Vv
name: Model Tests # optional

# model_file: ./model.fga # you can specify an external .fga file, or include it inline
model: |
  model
    schema 1.1

  type user

  type organization
     relations
       define member : [user]
       define admin : [user with non_expired_grant]

   condition non_expired_grant(current_time: timestamp, grant_time: timestamp, grant_duration: duration) {
     current_time < grant_time + grant_duration
  }

# tuple_file: ./tuples.yaml # you can specify an external file, or include it inline
tuples:

   # Anne is a member of the Acme organization
  - user: user:anne
    relation: member
    object: organization:acme

  # Peter has the admin role from February 2nd 2024 0AM to 1AM
  - user: user:peter
    relation: admin
    object: organization:acme
    condition:
      name: non_expired_grant
      context:
        grant_time : "2024-02-01T00:00:00Z"
        grant_duration : 1h

```

## Write tests [​](https://openfga.dev/docs/modeling/testing\#write-tests "Direct link to Write tests")

Always write tests to verify that the calls your application will make return the results you expect. A good test covers scenarios that verify every relation.

Tests have the following structure:

| Object | Description |
| --- | --- |
| `name` (optional) | A descriptive name for the test, like “Organization Membership” |
| `tuples` | A set of tuples that are only considered for the test |
| `check` | A set of tests for Check calls, each with a user/object and a set of assertions |
| `list_objects` | A set of tests for ListObjects calls, each one with a user/type and a set of assertions for any number of relations |
| `list_users` | A set of tests for ListUsers calls, each one with an object and user filter and a set of assertions for the users for any number of relations |

## Write Check tests [​](https://openfga.dev/docs/modeling/testing\#write-check-tests "Direct link to Write Check tests")

Check tests verify the results of the [check API](https://openfga.dev/docs/getting-started/perform-check) calls to validate access requirements for a user. Each check verification has the following structure:

| Object | Description |
| --- | --- |
| `user` | The user type and user id you are checking for access |
| `object` | The object type and object id related to the user |
| `context` | A set of tests for contextual parameters used to evaluate [conditions](https://openfga.dev/docs/modeling/conditions) |
| `assertions` | A list of `relation:expected-result` pairs |
| `<relation>: <true or false>` | The name of the relation you want to verify and the expected result |

The following example adds multiple check verifications in every test:

```codeBlockLines_e6Vv
tests:
  - name: Test
    check:
      - user: user:anne
        object: organization:acme
        assertions:
          member: true
          admin: false

      - user: user:peter
        object: organization:acme
        context:
          current_time : "2024-02-01T00:10:00Z"
        assertions:
          member: false
          admin: true

```

## Write List Objects tests [​](https://openfga.dev/docs/modeling/testing\#write-list-objects-tests "Direct link to Write List Objects tests")

A good test covers scenarios that specify every relation for every object type that your application will need to call the [list-objects API](https://openfga.dev/docs/getting-started/perform-list-objects) for.

The following verifies the expected results using the `list_objects` option in OpenFGA tests:

```codeBlockLines_e6Vv
    list_objects:
      - user: user:anne
        type: organization
        assertions:
            member:
                - organization:acme
            admin: []

      - user: user:peter
        type: organization
        context:
          current_time : "2024-02-01T00:10:00Z"

        assertions:
            member: []
            admin:
                - organization:acme

```

The example above checks that `user:anne` has access to the `organization:acme` as a member and is not an admin of any organization. It also checks that `user:peter`, given the current time is February 1st 2024, 0:10 AM, is not related to any organization as a member, but is related to `organization:acme` as an admin.

## Write List Users tests [​](https://openfga.dev/docs/modeling/testing\#write-list-users-tests "Direct link to Write List Users tests")

List users tests verify the results of the [list-users API](https://openfga.dev/docs/getting-started/perform-list-users) to validate the users who or do not have access to an object

Each list users verification has the following structure:

| Object | Description |
| --- | --- |
| `object` | The object to list users for |
| `user_filter` | Specifies the type or userset to filter with, this must only contain one entry |
| `user_filter.type` | The specific type of results to return with response |
| `user_filter.relation` | The specific relation of results to return with response. Specify to return usersets (optional) |
| `context` | A set of tests for contextual parameters used to evaluate [conditions](https://openfga.dev/docs/modeling/conditions) |
| `assertions` | A list of assertions to make |
| `<relation>` | The name of the relation you want to verify |
| `<relation>.users` | The users who should have the stated relation to the object |

In order to simplify test writing, the following syntax is supported for the various object types included in `users` from the API response:

- `<type>:<id>` to represent a userset that is a user
- `<type>:<id>#<relation>` to represent a userset that is a relation on a type
- `<type>:*` to represent a userset that is a type bound public access for a type

The following is an example of using the `list_users` option in OpenFGA tests:

```codeBlockLines_e6Vv
    list_users:
      - object: organization:acme
        user_filter:
          - type: user
        context:
          current_time : "2024-02-02T00:10:00Z"
        assertions:
            member:
              users:
                - user:anne
            admin:
              users: []

```

The example above checks that the `organization:acme`, given the current time is February 2nd 2024, it has 'user:anne' as a `member`, nobody as an `admin`. If we tried with current time being February 1st 2024, then `user:peter` would be listed as an `admin`

## Running tests [​](https://openfga.dev/docs/modeling/testing\#running-tests "Direct link to Running tests")

Tests are run using the `model test` CLI command. For instructions on installing the OpenFGA CLI, visit the [OpenFGA CLI Github repository](https://github.com/openfga/cli).

```codeBlockLines_e6Vv
fga model test --tests <filename>.fga.yaml

```

When all tests pass, a summary with the number of tests passed is displayed. When a test fails, a line for every test is displayed.

```codeBlockLines_e6Vv
$ fga model test --tests docs.fga.yaml
# Test Summary #
Tests 2/2 passing
Checks 4/4 passing
ListObjects 4/4 passing

$ fga model test --tests docs.fga.yaml
(FAILING) : ListUsers(1/2 passing)
ⅹ ListUsers(object={Type:organization Id:acme},relation=member,user_filter={Type:user Relation:<nil>}, context:&map[current_time:2024-02-02T00:10:00Z]): expected={Users:[user:ann]}, got={Users:[user:anne]}
---
# Test Summary #
Tests 1/2 passing
Checks 4/4 passing
ListObjects 4/4 passing

```

## Running tests using GitHub Actions [​](https://openfga.dev/docs/modeling/testing\#running-tests-using-github-actions "Direct link to Running tests using GitHub Actions")

Use the [OpenFGA Model Testing Action](https://github.com/marketplace/actions/openfga-model-testing-action) to run tests from CI/CD flows in GitHub.

Set the path to the `.fga.yaml` file as the `store-file-path` parameter when configuring the action:

```codeBlockLines_e6Vv
name: Test Action

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Run test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v4
      - name: Run Test
        uses: openfga/action-openfga-test@v0.1.0
        with:
          store-file-path: ./example/model.fga.yaml

```

## Related Sections [​](https://openfga.dev/docs/modeling/testing\#related-sections "Direct link to Related Sections")

Check the following sections for more on how to learn how to write tests.

Use the FGA CLI

Learn how to use the FGA CLI.

- [More](https://openfga.dev/docs/getting-started/cli)

Super Admin Example

Define a model and tests for modeling a super-admin role.

- [More](https://github.com/openfga/sample-stores/blob/main/stores/superadmin/store.fga.yaml)

Banking Example

Define a model and tests for banking application.

- [More](https://github.com/openfga/sample-stores/blob/main/stores/banking/store.fga.yaml)

Entitlements Example

Define a model and tests for B2B application entitlements.

- [More](https://github.com/openfga/sample-stores/blob/main/stores/advanced-entitlements/store.fga.yaml)

- [Define the model and tuples](https://openfga.dev/docs/modeling/testing#define-the-model-and-tuples)
- [Write tests](https://openfga.dev/docs/modeling/testing#write-tests)
- [Write Check tests](https://openfga.dev/docs/modeling/testing#write-check-tests)
- [Write List Objects tests](https://openfga.dev/docs/modeling/testing#write-list-objects-tests)
- [Write List Users tests](https://openfga.dev/docs/modeling/testing#write-list-users-tests)
- [Running tests](https://openfga.dev/docs/modeling/testing#running-tests)
- [Running tests using GitHub Actions](https://openfga.dev/docs/modeling/testing#running-tests-using-github-actions)
- [Related Sections](https://openfga.dev/docs/modeling/testing#related-sections)

## Authorization Concepts Overview
[Skip to main content](https://openfga.dev/docs/authorization-concepts#__docusaurus_skipToContent_fallback)

On this page

## Authentication and Authorization [​](https://openfga.dev/docs/authorization-concepts\#authentication-and-authorization "Direct link to Authentication and Authorization")

[Authentication](https://en.wikipedia.org/wiki/Authentication) ensures a user's identity. [Authorization](https://en.wikipedia.org/wiki/Authorization) determines if a user can perform a certain action on a particular resource.

For example, when you log in to Google, Authentication is the process of verifying that your username and password are correct. Authorization is the process of ensuring that you can access a given Google service or feature.

## What is Fine-Grained Authorization? [​](https://openfga.dev/docs/authorization-concepts\#what-is-fine-grained-authorization "Direct link to What is Fine-Grained Authorization?")

Fine-Grained Authorization (FGA) implies the ability to grant specific users permission to perform certain actions in specific resources.

Well-designed FGA systems allow you to manage permissions for millions of objects and users. These permissions can change rapidly as a system continually adds objects and updates access permissions for its users.

A notable example of FGA is Google Drive: access can be granted either to documents or to folders, as well as to individual users or users as a group, and access rights regularly change as new documents are created and shared with specific users or groups.

## What is Role-Based Access Control? [​](https://openfga.dev/docs/authorization-concepts\#what-is-role-based-access-control "Direct link to What is Role-Based Access Control?")

In [Role-Based Access Control](https://en.wikipedia.org/wiki/Role-based_access_control) (RBAC), permissions are assigned to users based on their role in a system. For example, a user needs the `editor` role to edit content.

RBAC systems enable you to define users, groups, roles, and permissions, then store them in a centralized location. Applications access that information to make authorization decisions.

## What is Attribute-Based Access Control? [​](https://openfga.dev/docs/authorization-concepts\#what-is-attribute-based-access-control "Direct link to What is Attribute-Based Access Control?")

In [Attribute-Based Access Control](https://en.wikipedia.org/wiki/Attribute-based_access_control) (ABAC), permissions are granted based on a set of attributes that a user or resource possesses. For example, a user assigned both `marketing` and `manager` attributes is entitled to publish and delete posts that have a `marketing` attribute.

Applications implementing ABAC need to retrieve information stored in multiple data sources - like RBAC services, user directories, and application-specific data sources - to make authorization decisions.

## What is Policy-Based Access Control? [​](https://openfga.dev/docs/authorization-concepts\#what-is-policy-based-access-control "Direct link to What is Policy-Based Access Control?")

Policy-Based Access Control (PBAC) is the ability to manage authorization policies in a centralized way that’s external to the application code. Most implementations of ABAC are also PBAC.

## What is Relationship-Based Access Control? [​](https://openfga.dev/docs/authorization-concepts\#what-is-relationship-based-access-control "Direct link to What is Relationship-Based Access Control?")

[Relationship-Based Access Control](https://en.wikipedia.org/wiki/Relationship-based_access_control) (ReBAC) enables user access rules to be conditional on relations that a given user has with a given object _and_ that object's relationship with other objects. For example, a given user can view a given document if the user has access to the document's parent folder.

ReBAC is a superset of RBAC: you can fully implement RBAC with ReBAC.
ReBAC also lets you natively solve for ABAC when attributes can be expressed in the form of relationships. For example ‘a user’s manager’, ‘the parent folder’, ‘the owner of a document’, ‘the user’s department’ can be defined as relationships.

OpenFGA extends ReBAC by making it simpler to express additional ABAC scenarios using [Conditions](https://openfga.dev/docs/modeling/conditions) or [Contextual Tuples](https://openfga.dev/docs/modeling/token-claims-contextual-tuples).

ReBAC can also be considered PBAC, as authorization policies are centralized.

## What is Zanzibar? [​](https://openfga.dev/docs/authorization-concepts\#what-is-zanzibar "Direct link to What is Zanzibar?")

[Zanzibar](https://research.google/pubs/pub48190/) is Google's global authorization system across Google's product suite. It’s based on ReBAC and uses object-relation-user tuples to store relationship data, then checks those relations for a match between a user and an object. For more information, see [Zanzibar Academy](https://zanzibar.academy/).

ReBAC systems based on Zanzibar store the data necessary to make authorization decisions in a centralized database. Applications only need to call an API to make authorization decisions.

OpenFGA is an example of a Zanzibar-based authorization system.

Learn about OpenFGA.

OpenFGA Concepts

Learn about the OpenFGA Concepts

- [More](https://openfga.dev/docs/concepts)

Modeling: Getting Started

Learn about how to get started with modeling your permission system in OpenFGA.

- [More](https://openfga.dev/docs/getting-started)

- [Authentication and Authorization](https://openfga.dev/docs/authorization-concepts#authentication-and-authorization)
- [What is Fine-Grained Authorization?](https://openfga.dev/docs/authorization-concepts#what-is-fine-grained-authorization)
- [What is Role-Based Access Control?](https://openfga.dev/docs/authorization-concepts#what-is-role-based-access-control)
- [What is Attribute-Based Access Control?](https://openfga.dev/docs/authorization-concepts#what-is-attribute-based-access-control)
- [What is Policy-Based Access Control?](https://openfga.dev/docs/authorization-concepts#what-is-policy-based-access-control)
- [What is Relationship-Based Access Control?](https://openfga.dev/docs/authorization-concepts#what-is-relationship-based-access-control)
- [What is Zanzibar?](https://openfga.dev/docs/authorization-concepts#what-is-zanzibar)

## OpenFGA Updates
[Skip to main content](https://openfga.dev/blog/tags/openfga#__docusaurus_skipToContent_fallback)

OpenFGA query APIs now allow specifying the desired consistency of query results. By default, OpenFGA does not use a cache. However, when caching is enabled, it applies to all requests. This means that any changes in permissions won't be reflected in authorization checks during the cache TTL period.

The community expressed the need for flexibility in using the cache on a per-request basis. In response, starting with [OpenFGA v1.5.7](https://github.com/openfga/openfga/releases/tag/v1.5.7), all query APIs can accept a consistency parameter with the following values:

| Name | Description |
| --- | --- |
| MINIMIZE\_LATENCY (default) | OpenFGA will try to minimize latency (e.g. by making use of the cache) |
| HIGHER\_CONSISTENCY | OpenFGA will try to optimize for stronger consistency (e.g. by bypassing cache) |

When `HIGHER_CONSISTENCY` is specified, OpenFGA reads directly from the database, even when the cache is enabled.

## How to use it? [​](https://openfga.dev/blog/tags/openfga\#how-to-use-it "Direct link to How to use it?")

The new consistency parameter is available in OpenFGA starting [v1.5.7](https://github.com/openfga/openfga/releases/tag/v1.5.7).

The parameter is supported by all OpenFGA SDKs.

For more information on enabling the cache and best practices for specifying consistency values, refer to the [documentation](https://openfga.dev/docs/interacting/consistency).

## Custom database adapter implementations [​](https://openfga.dev/blog/tags/openfga\#custom-database-adapter-implementations "Direct link to Custom database adapter implementations")

For those with a custom database adapter for a multi-region database, the behavior of the HIGHER\_CONSISTENCY parameter can be defined according to your needs. With an eventually consistent database (e.g., Dynamo DB) in a multi-region setup, there will be replication lag even if the cache is bypassed. If the database supports strong reads, you can choose to perform those at an extra cost. Otherwise, you can perform an eventually consistent read without providing full consistency semantics to the caller. In some other databases where you have Read/Write replicas, you may choose to go to the Write replica when the `HIGHER_CONSISTENCY` preference is selected.

## Future work [​](https://openfga.dev/blog/tags/openfga\#future-work "Direct link to Future work")

[Google Zanzibar](https://zanzibar.academy/) features a consistency token called `Zookies`, returned from write operations. This token can be stored in a resource table and specified in subsequent query API calls. We are considering introducing a similar feature in future releases.

## We want your feedback! [​](https://openfga.dev/blog/tags/openfga\#we-want-your-feedback "Direct link to We want your feedback!")

We want to learn how you use this API and how we can improve it!

Please reach out through our [community channels](https://openfga.dev/community) with any questions or feedback.

Today we are launching a new API for OpenFGA: ListUsers.

This API will answer the question "what users have relation X with object Y?". This will be useful, for example, in UIs that want to display the list of users that a resource has been shared with, e.g. the "share" dialog in Google Docs.

You can read more about it in the [API docs](https://openfga.dev/api/service#/Relationship%20Queries/ListUsers) and the [product documentation](https://openfga.dev/docs/getting-started/perform-list-users).

## How to use it? [​](https://openfga.dev/blog/tags/openfga\#how-to-use-it "Direct link to How to use it?")

ListUsers is available in OpenFGA starting with [v1.5.4](https://github.com/openfga/openfga/releases/tag/v1.5.4).

To be able to call this API, you must turn on this flag on the server: `--experimentals enable-list-users`. Be sure to also check out the various configuration flags that were added to control its behavior.

The new functionality is available on the latest versions of the [Java](https://github.com/openfga/java-sdk/), [.NET](https://github.com/openfga/dotnet-sdk/), [Go](https://github.com/openfga/go-sdk/) and [Javascript SDK](https://github.com/openfga/js-sdk/), [CLI](https://github.com/openfga/cli?tab=readme-ov-file#list-users) and [VS Code integration](https://marketplace.visualstudio.com/items?itemName=openfga.openfga-vscode).

We'll be releasing support for the Python SDK soon.

## We want your feedback! [​](https://openfga.dev/blog/tags/openfga\#we-want-your-feedback "Direct link to We want your feedback!")

We want to learn how you use this API and how we can improve it!

Please reach out through our [community channels](https://openfga.dev/community) with any questions or feedback.

Modular models aims to improve the model authoring experience when multiple teams are maintaining a model, such as:

- A model can grow large and difficult to understand
- As more teams begin to contribute to a model, the ownership boundaries may not be clear and code review processes might not scale

With modular models, a single model can be separated across multiple files allow grouping of types and conditions into modules. This means that a model can be organized more easily in terms of team or organizational structure. Used in conjunction with features such as [GitHub](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners), [GitLab](https://docs.gitlab.com/ee/user/project/codeowners/) or [Gitea's](https://docs.gitea.com/usage/code-owners) code owners, it should become easier to ensure the owners of a portion of your model are correctly assigned to review it.

## How to use it? [​](https://openfga.dev/blog/tags/openfga\#how-to-use-it "Direct link to How to use it?")

Modular models is available in the latest version of OpenFGA. To use it you need to:

- Update to the [v0.3.0 release](https://github.com/openfga/cli/releases/tag/v0.3.0) of the CLI
- Update to [v0.2.21](https://github.com/openfga/vscode-ext/releases/tag/v0.2.21) of the VS Code Extension
- Download [v1.5.3](https://github.com/openfga/openfga/releases/tag/v1.5.3) of OpenFGA
- Check out the modular models sample store in the [sample-stores repo](https://github.com/openfga/sample-stores/tree/main/stores/modular)
- Review the [documentation for this feature](https://openfga.dev/docs/modeling/modular-models)
- Check a [demo video in Youtube](https://youtu.be/oeqroL8-wCQ)

## What's next? [​](https://openfga.dev/blog/tags/openfga\#whats-next "Direct link to What's next?")

Looking beyond the near term, modular models allows us to implement [additional API authorization options for OpenFGA](https://github.com/openfga/roadmap/issues/30).

## Reach out! [​](https://openfga.dev/blog/tags/openfga\#reach-out "Direct link to Reach out!")

We want to learn how you use this feature and how we can improve it!

Please reach out through our [community channels](https://openfga.dev/community) with any questions or feedback.

Relationship Tuples are the facts that the OpenFGA evaluates to determine whether a user is permitted to access a resource.

The way tuples are considered when making authorization decisions in OpenFGA is guided by an authorization model, which employs concepts from Relationship-Based Access Control (ReBAC) to establish authorization policies. For instance, you might declare that users are allowed to view a document if they have permission to view its parent folder.

Although ReBAC offers a highly flexible method for structuring permissions, it encounters difficulties with defining permissions based on attributes that are not easily represented as relationships. Attributes such as “parent folder,” “department,” “region,” and “country” can be conceptualized as relationships between two entities. However, attributes like “IP address,” “time of day,” “team size limit,” or “maximum amount for a bank transfer” cannot be easily handled.

In our ongoing efforts to expand OpenFGA’s capacity for articulating a broader range of authorization policies, we are introducing **Conditional Relationship Tuples**. These allow for the specification of conditions under which a particular tuple is relevant when evaluating an authorization query.

Consider the following example, where we utilize Conditional Tuples to grant access for a user over a specified time duration. We stipulate that a user may be granted either unconditional access or access constrained to a certain time period:

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define viewer: [user, user with non_expired_grant]

condition non_expired_grant(current_time: timestamp, grant_time: timestamp, grant_duration: duration) {
  current_time < grant_time + grant_duration
}

```

If we write the following tuples:

| user | relation | object | condition |
| --- | --- | --- | --- |
| user:bob | viewer | document:1 |  |
| user:anne | viewer | document:1 | `name` : `non_expired_grant`, `context` : { `grant_time` : `2023-01-01T00:00:00Z`, `grant_duration` : `1h` } |

You'll get the following results for the [Check](https://openfga.dev/api/service#/Relationship%20Queries/Check) operations below:

| user | relation | object | context | result |
| --- | --- | --- | --- | --- |
| user:bob | viewer | document:1 |  | `allowed` : `true` |
| user:anne | viewer | document:1 | `current_time` : `2023-01-01T00:10:00Z` | `allowed` : `true` |
| user:anne | viewer | document:1 | `current_time` : `2023-01-01T02:00:00Z` | `allowed` : `false` |
| user:anne | viewer | document:1 |  | `error` : "failed to evaluate relationship condition 'non\_expired\_grant': context is missing parameters '\[current\_time\]' |

You'll get the following results for the [ListObjects](https://openfga.dev/api/service#/Relationship%20Queries/ListObjects) operations below:

| user | relation | object | context | result |
| --- | --- | --- | --- | --- |
| user:anne | viewer | document:1 | `current_time` : `2023-01-01T00:10:00Z` | `objects`: `[ "document:1"]` |
| user:anne | viewer | document:1 |  | `error`: "failed to evaluate relationship condition 'non\_expired\_grant': tuple 'document:1#viewer@user:anne' is missing context parameters '\[current\_time\]' |

Note that:

- `user:bob` will always get `allowed:true` as we have assigned as viewer unconditionally.
- `user:anne` will get `allowed:true` if the `current_time` is before the `grant_time` \+ `grant_duration` and `allowed:false` otherwise.
- If you don't provide the `current_time` in the context, the Check and ListObjects operations will fail.

## Use Cases [​](https://openfga.dev/blog/tags/openfga\#use-cases "Direct link to Use Cases")

The [OpenFGA Sample Stores repository](https://github.com/openfga/sample-stores) has several examples that take advantage of this new feature:

- [Granting access during a specific period of time (the use case explained above)](https://github.com/openfga/sample-stores/tree/main/stores/temporal-access).
- [Allow access based on the user’s IP Address](https://github.com/openfga/sample-stores/tree/main/stores/ip-based-access).
- [Granting access based on group membership and resource attributes](https://github.com/openfga/sample-stores/tree/main/stores/groups-resource-attributes).
- [Allow access to specific features based on usage](https://github.com/openfga/sample-stores/tree/main/stores/advanced-entitlements).
- [Determine if a user can make a bank transfer based .on the transaction amount](https://github.com/openfga/sample-stores/tree/main/stores/banking).
- [Data types and operations supported in conditions](https://github.com/openfga/sample-stores/tree/main/stores/condition-data-types).

## How to use it? [​](https://openfga.dev/blog/tags/openfga\#how-to-use-it "Direct link to How to use it?")

Conditional Relationship Tuples are included in OpenFGA 1.4.0-rc1 version. You can run it by pulling it from docker:

```codeBlockLines_e6Vv
docker pull openfga/openfga:v1.4.0-rc1
docker run -p 8080:8080 -p 8081:8081 -p 3000:3000 openfga/openfga:v1.4.0-rc1 run`

```

OpenFGA has a rich ecosystem of developer tools. The following have been updated to support Conditional Relationship Tuples:

- [Visual Studio Code integration](https://github.com/openfga/vscode-ext) which provides syntax highlighting and model validations for conditions.

- Beta versions of the [Javascript SDK](https://www.npmjs.com/package/@openfga/sdk/v/0.3.0-beta.1) and the [Go SDK](https://github.com/openfga/go-sdk/releases/tag/v0.3.0-beta.1), which allows using the additional parameters.

- The [OpenFGA CLI](https://github.com/openfga/cli) allows validating models and runing tests that use conditional tuples. You can use it to test the new features by pointing to a `“.fga.yaml”` file that [defines the tests you want to run](https://github.com/openfga/cli#run-tests-on-an-authorization-model), without having to deploy OpenFGA.


## What’s Next? [​](https://openfga.dev/blog/tags/openfga\#whats-next "Direct link to What’s Next?")

We’ll address some limitations of the current implementation:

- The [Expand API](https://openfga.dev/api/service#/Relationship%20Queries/Expand) does not consider conditions.
- The Visual Studio Code integration is not validating the expressions in conditions.
- The Playground does not let you add context for tuples and assertions. You should use the VS Code Extension + the FGA CLI to test your models for now.

We'll also improve ListObjects scenarios when it's called with missing context. For example, consider the following model that enables access only to documents with a specific status:

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define can_access: [user with docs_in_draft_status]

condition docs_in_draft_status(status: string) {
  status == "draft"
}

```

If you want to list all the documents a user can view, you'll need to know the status of all of those documents. Given you don't know the documents the user has access too, you can't send the status of those as a parameter to ListObjects.

Our goal is to return a structure that you can use to filter documents on your side, similar to:
`(document.id = ‘1’ and document.status = ‘draft’) or (document.id = ‘2’ and.status = draft)`

This won’t scale to a large number of documents, but would be useful in some scenarios.

## Reach out! [​](https://openfga.dev/blog/tags/openfga\#reach-out "Direct link to Reach out!")

We want to learn how you use this feature and how we can improve it!

Please reach out through our [community channels](https://openfga.dev/community) with any questions or feedback.

## List Objects API
[Skip to main content](https://openfga.dev/docs/getting-started/perform-list-objects#__docusaurus_skipToContent_fallback)

On this page

This section describes how to perform a [list objects](https://openfga.dev/docs/concepts#what-is-a-list-objects-request) request. The List Objects API allows you to retrieve all [objects](https://openfga.dev/docs/concepts#what-is-an-object) of a specified [type](https://openfga.dev/docs/concepts#what-is-a-type) that a [user](https://openfga.dev/docs/concepts#what-is-a-user) has a given [relationship](https://openfga.dev/docs/concepts#what-is-a-relationship) with. This can be used in scenarios like displaying all documents a user can read or listing resources a user can manage.

## Before you start [​](https://openfga.dev/docs/getting-started/perform-list-objects\#before-you-start "Direct link to Before you start")

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk).
3. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model) and [updated the _relationship tuples_](https://openfga.dev/docs/getting-started/update-tuples).
4. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk).
3. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model) and [updated the _relationship tuples_](https://openfga.dev/docs/getting-started/update-tuples).
4. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk).
3. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model) and [updated the _relationship tuples_](https://openfga.dev/docs/getting-started/update-tuples).
4. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk).
3. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model) and [updated the _relationship tuples_](https://openfga.dev/docs/getting-started/update-tuples).
4. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk).
3. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model) and [updated the _relationship tuples_](https://openfga.dev/docs/getting-started/update-tuples).
4. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model).
3. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model) and [updated the _relationship tuples_](https://openfga.dev/docs/getting-started/update-tuples).
3. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

## Step by step [​](https://openfga.dev/docs/getting-started/perform-list-objects\#step-by-step "Direct link to Step by step")

Consider the following model which includes a `user` that can have a `reader` relationship with a `document`:

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define reader: [user]

```

Assume that you want to list all objects of type document that user `anne` has `reader` relationship with:

### 01\. Configure the OpenFGA API client [​](https://openfga.dev/docs/getting-started/perform-list-objects\#01-configure-the--api-client "Direct link to 01-configure-the--api-client")

Before calling the check API, you will need to configure the API client.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl

```codeBlockLines_e6Vv
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

To obtain the [access token](https://auth0.com/docs/get-started/authentication-and-authorization-flow/call-your-api-using-the-client-credentials-flow):

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

### 02\. Calling list objects API [​](https://openfga.dev/docs/getting-started/perform-list-objects\#02-calling-list-objects-api "Direct link to 02. Calling list objects API")

To return all documents that user `user:anne` has relationship `reader` with:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl

```codeBlockLines_e6Vv
const response = await fgaClient.listObjects({
  user: "user:anne",
  relation: "reader",
  type: "document",
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA",
});
// response.objects = ["document:otherdoc", "document:planning"]

```

```codeBlockLines_e6Vv
options := ClientListObjectsOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientListObjectsRequest{
    User:     "user:anne",
    Relation: "reader",
    Type:     "document",
}

data, err := fgaClient.ListObjects(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { "objects": ["document:otherdoc", "document:planning"] }

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientListObjectsRequest {
    User = "user:anne",
    Relation = "reader",
    Type = "document",

};

var response = await fgaClient.ListObjects(body, options);

// response.Objects = ["document:otherdoc", "document:planning"]

```

```codeBlockLines_e6Vv

options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientListObjectsRequest(
    user="user:anne",
    relation="reader",
    type="document",
)

response = await fga_client.list_objects(body, options)

# response.objects = ["document:otherdoc", "document:planning"]

```

```codeBlockLines_e6Vv
var options = new ClientListObjectsOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientListObjectsRequest()
        .user("user:anne")
        .relation("reader")
        .type("document");

var response = fgaClient.listObjects(body, options).get();

// response.getObjects() = ["document:otherdoc", "document:planning"]

```

```codeBlockLines_e6Vv
fga query list-objects --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne reader document

# Response: {"objects": ["document:otherdoc", "document:planning"]}

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/list-objects \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{
        "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA",
        "type": "document",
        "relation": "reader",
        "user":"user:anne"
    }'

# Response: {"objects": ["document:otherdoc", "document:planning"]}

```

The result `document:otherdoc` and `document:planning` are the document objects that `user:anne` has `reader` relationship with.

Warning

The performance characteristics of the ListObjects endpoint vary drastically depending on the model complexity, number of tuples, and the relations it needs to evaluate. Relations with 'and' or 'but not' are more expensive to evaluate than relations with 'or'.

## Related Sections [​](https://openfga.dev/docs/getting-started/perform-list-objects\#related-sections "Direct link to Related Sections")

Take a look at the following section for more on how to perform authorization checks in your system

OpenFGA List Objects API

Read the List Objects API documentation and see how it works.

- [More](https://openfga.dev/api/service#Relationship%20Queries/ListObjects)

- [Before you start](https://openfga.dev/docs/getting-started/perform-list-objects#before-you-start)
- [Step by step](https://openfga.dev/docs/getting-started/perform-list-objects#step-by-step)
  - [01\. Configure the  API client](https://openfga.dev/docs/getting-started/perform-list-objects#01-configure-the--api-client)
  - [02\. Calling list objects API](https://openfga.dev/docs/getting-started/perform-list-objects#02-calling-list-objects-api)
- [Related Sections](https://openfga.dev/docs/getting-started/perform-list-objects#related-sections)

## Managing Object Relationships
[Skip to main content](https://openfga.dev/docs/interacting/managing-relationships-between-objects#__docusaurus_skipToContent_fallback)

On this page

In this guide you will learn how to grant a user access to a particular object through a relationship with another object.

When to use

Giving user access through a relationship with another object is helpful because it allows scaling as the number of object grows. For example:

- organization that owns many repos
- team that administers many documents

## Before you start [​](https://openfga.dev/docs/interacting/managing-relationships-between-objects\#before-you-start "Direct link to Before you start")

In order to understand this guide correctly you must be familiar with some [OpenFGA Concepts](https://openfga.dev/docs/concepts) and know how to develop the things that we will list below.

Assume that you have the following [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model)

- a `repo` type that can have a `admin` relation

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type repo
  relations
    define admin: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "repo",\
      "relations": {\
        "admin": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "admin": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

* * *

In addition, you will need to know the following:

### Direct access [​](https://openfga.dev/docs/interacting/managing-relationships-between-objects\#direct-access "Direct link to Direct access")

You need to know how to create an authorization model and create a relationship tuple to grant a user access to an object. [Learn more →](https://openfga.dev/docs/modeling/direct-access)

### OpenFGA concepts [​](https://openfga.dev/docs/interacting/managing-relationships-between-objects\#-concepts "Direct link to -concepts")

- A [Type](https://openfga.dev/docs/concepts#what-is-a-type): a class of objects that have similar characteristics
- A [User](https://openfga.dev/docs/concepts#what-is-a-user): an entity in the system that can be related to an object
- A [Relation](https://openfga.dev/docs/concepts#what-is-a-relation): is a string defined in the type definition of an authorization model that defines the possibility of a relationship between an object of the same type as the type definition and a user in the system
- An [Object](https://openfga.dev/docs/concepts#what-is-an-object): represents an entity in the system. Users' relationships to it can be define through relationship tuples and the authorization model
- A [Relationship Tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple): a grouping consisting of a user, a relation and an object stored in OpenFGA

## Step by step [​](https://openfga.dev/docs/interacting/managing-relationships-between-objects\#step-by-step "Direct link to Step by step")

For the current model, a [user](https://openfga.dev/docs/concepts#what-is-a-user) can be related as an `admin` to an [object](https://openfga.dev/docs/concepts#what-is-an-object) of [type](https://openfga.dev/docs/concepts#what-is-a-type) `repo`. If we wanted to have Anne be related to two repos, `repo:1` and `repo:2`, we would have to add two [relationship tuples](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple), like so:

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"user:anne","relation":"admin","object":"repo:1"},\
      {"user":"user:anne","relation":"admin","object":"repo:2"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             User: "user:anne",
             Relation: "admin",
             Object: "repo:1",
        },         {
             User: "user:anne",
             Relation: "admin",
             Object: "repo:2",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
       new() {
                  User = "user:anne",
                  Relation = "admin",
                  Object = "repo:1"
              },
       new() {
                  User = "user:anne",
                  Relation = "admin",
                  Object = "repo:2"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    user="user:anne",\
                    relation="admin",\
                    object="repo:1",\
                ),\
                ClientTuple(\
                    user="user:anne",\
                    relation="admin",\
                    object="repo:2",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("admin")
                        ._object("repo:1"),
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("admin")
                        ._object("repo:2")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"user":"user:anne","relation":"admin","object":"repo:1"},{"user":"user:anne","relation":"admin","object":"repo:2"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne admin repo:1
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne admin repo:2

```

```codeBlockLines_e6Vv
write([\
    {\
      "user":"user:anne",\
      "relation":"admin",\
      "object":"repo:1"\
    },\
    {\
      "user":"user:anne",\
      "relation":"admin",\
      "object":"repo:2"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

In general, every time we wanted to add a new `admin` relationship to a `repo` we'd have to add a new tuple. This doesn't scale as the list of `repo` s and users grows.

### 01\. Modify authorization model [​](https://openfga.dev/docs/interacting/managing-relationships-between-objects\#01-modify-authorization-model "Direct link to 01. Modify authorization model")

Another way of modeling this is to have an authorization model as follows:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type repo
  relations
    define admin: [user] or repo_admin from owner
    define owner: [org]

type org
  relations
    define repo_admin: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "repo",\
      "relations": {\
        "admin": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "tupleToUserset": {\
                  "tupleset": {\
                    "object": "",\
                    "relation": "owner"\
                  },\
                  "computedUserset": {\
                    "object": "",\
                    "relation": "repo_admin"\
                  }\
                }\
              }\
            ]\
          }\
        },\
        "owner": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "owner": {\
            "directly_related_user_types": [\
              {\
                "type": "org"\
              }\
            ]\
          },\
          "admin": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "org",\
      "relations": {\
        "repo_admin": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "repo_admin": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

In this model, we have:

- added a new type `org` with one relation `repo_admin`.
- added a new relation `owner` for type `repo`.
- re-defined the relation `admin` for `repo`. A user can be defined as an `admin` directly, as we have seen above, or through the `repo_admin from owner` clause. How this works, for example, is that if `user` is related as `repo_admin` to `org:xyz`, and `org:xyz` is related as `owner` to `repo:1`, then `user` is an `admin` of `repo:1`.

### 02\. Adding relationship tuples where user is another object [​](https://openfga.dev/docs/interacting/managing-relationships-between-objects\#02-adding-relationship-tuples-where-user-is-another-object "Direct link to 02. Adding relationship tuples where user is another object")

With this model, we can add tuples representing that an `org` is the `owner` of a `repo`. By adding following relationship tuples, we are indicating that the xyz organization is the owner of repositories with IDs `1` and `2`:

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"org:xyz","relation":"owner","object":"repo:1"},\
      {"user":"org:xyz","relation":"owner","object":"repo:2"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             User: "org:xyz",
             Relation: "owner",
             Object: "repo:1",
        },         {
             User: "org:xyz",
             Relation: "owner",
             Object: "repo:2",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
       new() {
                  User = "org:xyz",
                  Relation = "owner",
                  Object = "repo:1"
              },
       new() {
                  User = "org:xyz",
                  Relation = "owner",
                  Object = "repo:2"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    user="org:xyz",\
                    relation="owner",\
                    object="repo:1",\
                ),\
                ClientTuple(\
                    user="org:xyz",\
                    relation="owner",\
                    object="repo:2",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                new ClientTupleKey()
                        .user("org:xyz")
                        .relation("owner")
                        ._object("repo:1"),
                new ClientTupleKey()
                        .user("org:xyz")
                        .relation("owner")
                        ._object("repo:2")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"user":"org:xyz","relation":"owner","object":"repo:1"},{"user":"org:xyz","relation":"owner","object":"repo:2"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA org:xyz owner repo:1
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA org:xyz owner repo:2

```

```codeBlockLines_e6Vv
write([\
    {\
      "user":"org:xyz",\
      "relation":"owner",\
      "object":"repo:1"\
    },\
    {\
      "user":"org:xyz",\
      "relation":"owner",\
      "object":"repo:2"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

### 03\. Adding relationship tuples to the other object [​](https://openfga.dev/docs/interacting/managing-relationships-between-objects\#03-adding-relationship-tuples-to-the-other-object "Direct link to 03. Adding relationship tuples to the other object")

Now, imagine we have a new user Becky. If we wanted to have Becky be the `admin` of all `repo` s without having to add one tuple per `repo`, all we need to do is add one tuple that says that Becky is related as `repo_admin` to `org:xyz`.

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"user:becky","relation":"repo_admin","object":"org:xyz"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             User: "user:becky",
             Relation: "repo_admin",
             Object: "org:xyz",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
       new() {
                  User = "user:becky",
                  Relation = "repo_admin",
                  Object = "org:xyz"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    user="user:becky",\
                    relation="repo_admin",\
                    object="org:xyz",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                new ClientTupleKey()
                        .user("user:becky")
                        .relation("repo_admin")
                        ._object("org:xyz")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"user":"user:becky","relation":"repo_admin","object":"org:xyz"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:becky repo_admin org:xyz

```

```codeBlockLines_e6Vv
write([\
    {\
      "user":"user:becky",\
      "relation":"repo_admin",\
      "object":"org:xyz"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

### 04\. Validating user access [​](https://openfga.dev/docs/interacting/managing-relationships-between-objects\#04-validating-user-access "Direct link to 04. Validating user access")

We can now verify that Becky an `admin` of all the `repo` s owned by `org:xyz`:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:becky',
    relation: 'admin',
    object: 'repo:1',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:becky",
    Relation: "admin",
    Object:   "repo:1",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:becky",
    Relation = "admin",
    Object = "repo:1",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:becky",
    relation="admin",
    object="repo:1",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:becky")
        .relation("admin")
        ._object("repo:1");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:becky admin repo:1

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:becky","relation":"admin","object":"repo:1"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:becky", // check if the user `user:becky`
  relation = "admin", // has an `admin` relation
  object = "repo:1", // with the object `repo:1`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:becky related to repo:1 as admin?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:becky',
    relation: 'admin',
    object: 'repo:2',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:becky",
    Relation: "admin",
    Object:   "repo:2",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:becky",
    Relation = "admin",
    Object = "repo:2",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:becky",
    relation="admin",
    object="repo:2",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:becky")
        .relation("admin")
        ._object("repo:2");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:becky admin repo:2

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:becky","relation":"admin","object":"repo:2"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:becky", // check if the user `user:becky`
  relation = "admin", // has an `admin` relation
  object = "repo:2", // with the object `repo:2`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:becky related to repo:2 as admin?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

### 05\. Revoking access [​](https://openfga.dev/docs/interacting/managing-relationships-between-objects\#05-revoking-access "Direct link to 05. Revoking access")

Suppose now that we want to prevent users from being an `admin` of `repo:1` via `org:xyz`. We can delete one tuple:

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  deletes: [\
      { user: 'org:xyz', relation: 'owner', object: 'repo:1'}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Deletes: []ClientTupleKeyWithoutCondition{
        {
             User: "org:xyz",
             Relation: "owner",
             Object: "repo:1",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Deletes = new List<ClientTupleKeyWithoutCondition>() {
    new() { User = "org:xyz", Relation = "owner", Object = "repo:1" }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        deletes=[\
                ClientTuple(\
                    user="org:xyz",\
                    relation="owner",\
                    object="repo:1",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .deletes(List.of(
                new ClientTupleKey()
                        .user("org:xyz")
                        .relation("owner")
                        ._object("repo:1")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"deletes": { "tuple_keys" : [{"user":"org:xyz","relation":"owner","object":"repo:1"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv

fga tuple delete --store-id=${FGA_STORE_ID} org:xyz owner repo:1

```

```codeBlockLines_e6Vv

delete([\
    {\
      "user":"org:xyz",\
      "relation":"owner",\
      "object":"repo:1"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

With this change, we may now verify that Becky is no longer an `admin` of `repo:1`.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:becky',
    relation: 'admin',
    object: 'repo:1',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:becky",
    Relation: "admin",
    Object:   "repo:1",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:becky",
    Relation = "admin",
    Object = "repo:1",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:becky",
    relation="admin",
    object="repo:1",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:becky")
        .relation("admin")
        ._object("repo:1");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:becky admin repo:1

# Response: {"allowed":false}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:becky","relation":"admin","object":"repo:1"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:becky", // check if the user `user:becky`
  relation = "admin", // has an `admin` relation
  object = "repo:1", // with the object `repo:1`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:becky related to repo:1 as admin?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

## Related Sections [​](https://openfga.dev/docs/interacting/managing-relationships-between-objects\#related-sections "Direct link to Related Sections")

Check the following sections for more on how to model relationships between objects.

Modeling Parent-Child Objects

Learn about how to cascade relationships from parent object to child object.

- [More](https://openfga.dev/docs/modeling/parent-child)

Modeling Object to Object Relationships

Learn about modeling patterns on objects that are not specifically tied to a user.

- [More](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships)

Modeling GitHub

An example of object to object relationships.

- [More](https://openfga.dev/docs/modeling/advanced/github)

- [Before you start](https://openfga.dev/docs/interacting/managing-relationships-between-objects#before-you-start)
  - [Direct access](https://openfga.dev/docs/interacting/managing-relationships-between-objects#direct-access)
  - [concepts](https://openfga.dev/docs/interacting/managing-relationships-between-objects#-concepts)
- [Step by step](https://openfga.dev/docs/interacting/managing-relationships-between-objects#step-by-step)
  - [01\. Modify authorization model](https://openfga.dev/docs/interacting/managing-relationships-between-objects#01-modify-authorization-model)
  - [02\. Adding relationship tuples where user is another object](https://openfga.dev/docs/interacting/managing-relationships-between-objects#02-adding-relationship-tuples-where-user-is-another-object)
  - [03\. Adding relationship tuples to the other object](https://openfga.dev/docs/interacting/managing-relationships-between-objects#03-adding-relationship-tuples-to-the-other-object)
  - [04\. Validating user access](https://openfga.dev/docs/interacting/managing-relationships-between-objects#04-validating-user-access)
  - [05\. Revoking access](https://openfga.dev/docs/interacting/managing-relationships-between-objects#05-revoking-access)
- [Related Sections](https://openfga.dev/docs/interacting/managing-relationships-between-objects#related-sections)

## OpenFGA Production Guidelines
[Skip to main content](https://openfga.dev/docs/getting-started/running-in-production#__docusaurus_skipToContent_fallback)

On this page

The following list outlines best practices for running OpenFGA in a production environment:

- [Configure Authentication](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga#configuring-authentication)
- Enable HTTP TLS or gRPC TLS or both
- Set the log format to "json" and log level to "info"
- [Disable the Playground](https://openfga.dev/docs/getting-started/setup-openfga/playground#disabling-the-playground)
- [Set Cluster](https://openfga.dev/docs/getting-started/running-in-production#cluster-recommendations)
- [Set Database Options](https://openfga.dev/docs/getting-started/running-in-production#database-recommendations)
- [Set Maximum Results](https://openfga.dev/docs/getting-started/running-in-production#maximum-results)
- [Set Concurrency Limits](https://openfga.dev/docs/getting-started/running-in-production#concurrency-limits)

## Cluster recommendations [​](https://openfga.dev/docs/getting-started/running-in-production\#cluster-recommendations "Direct link to Cluster recommendations")

We recommend:

1. Turn on in-memory caching in Check API via flags. This will reduce latency of requests, but it will increase the staleness of OpenFGA's responses. Please see [Cache Expiration](https://openfga.dev/docs/interacting/consistency#cache-expiration) for details on the flags.
2. Prefer having a small pool of servers with high capacity (memory and CPU cores) instead of a big pool of servers, to increase cache hit ratios and simplify pool management.
3. Turn on metrics collection via the flags `--metrics-enabled` and `--datastore-metrics-enabled`. This will allow you to debug issues.
4. Turn on tracing via the flag `--trace-enabled`, but set sampling ratio to a low value, for example `--trace-sample-ratio=0.3`. This will allow you to debug issues without overwhelming the tracing server. However, keep in mind that enabling tracing comes with a slight performance cost.

## Database recommendations [​](https://openfga.dev/docs/getting-started/running-in-production\#database-recommendations "Direct link to Database recommendations")

To ensure good performance for OpenFGA, it is recommended that the [database](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga#configuring-data-storage) be:

- Co-located in the same physical datacenter and network as your OpenFGA servers. This will minimize latency of database calls.
- Used exclusively for OpenFGA and not shared with other applications. This allows scaling the database independently and avoiding contention with your database.
- Bootstrapped and managed with the `openfga migrate` command. This will ensure the appropriate database indexes are created.

It's strongly recommended to fine-tune your server database connection settings to avoid having to re-establish database connections frequently. Establishing database connections is slow and will negatively impact performance, and so here are some guidelines for managing database connection settings:

- The server setting `OPENFGA_DATASTORE_MAX_OPEN_CONNS` should be set to be equal to your database's max connections. For example, in Postgres, you can see this value via running the SQL query `SHOW max_connections;`. If you are running multiple instances of the OpenFGA server, you should divide this setting equally among the instances. For example, if your database's `max_connections` is 100, and you have 2 OpenFGA instances, `OPENFGA_DATASTORE_MAX_OPEN_CONNS` should be set to 50 for each instance.

- The `OPENFGA_DATASTORE_MAX_IDLE_CONNS` should be set to a value no greater than the maximum open connections (see the bullet point above), but it should be set sufficiently high enough to avoid having to recreate connections on each request.

If, when monitoring your database stats, you see a lot of database connections being closed and subsequently reopened, then you should consider increasing the maximum number of idle connections.

- If idle connections are getting reaped frequently, then consider increasing the `OPENFGA_DATASTORE_CONN_MAX_IDLE_TIME` to a large value. When in doubt, prioritize keeping connections around for longer rather than shorter, because doing so will drastically improve performance.


## Concurrency limits [​](https://openfga.dev/docs/getting-started/running-in-production\#concurrency-limits "Direct link to Concurrency limits")

note

Before modifying concurrency limits please make sure you've followed the guidance for [Database Recommendations](https://openfga.dev/docs/getting-started/running-in-production#database-recommendations)

OpenFGA queries such as Check, ListObjects and ListUsers can be quite database and CPU intensive in some cases. If you notice that a single request is consuming a lot of CPU or creating a high degree of database contention, then you may consider setting some concurrency limits to protect other requests from being negatively impacted by overly aggressive queries.

The following table enumerates the server's concurrency specific settings:

| flag | env | config |
| --- | --- | --- |
| --max-concurrent-reads-for-list-objects | OPENFGA\_MAX\_CONCURRENT\_READS\_FOR\_LIST\_OBJECTS | maxConcurrentReadsForListObjects |
| --max-concurrent-reads-for-list-users | OPENFGA\_MAX\_CONCURRENT\_READS\_FOR\_LIST\_USERS | maxConcurrentReadsForListUsers |
| --max-concurrent-reads-for-check | OPENFGA\_MAX\_CONCURRENT\_READS\_FOR\_CHECK | maxConcurrentReadsForCheck |
| --resolve-node-limit | OPENFGA\_RESOLVE\_NODE\_LIMIT | resolveNodeLimit |
| --resolve-node-breadth-limit | OPENFGA\_RESOLVE\_NODE\_BREADTH\_LIMIT | resolveNodeBreadthLimit |
| --max-concurrent-checks-per-batch-check | OPENFGA\_MAX\_CONCURRENT\_CHECKS\_PER\_BATCH\_CHECK | maxConcurrentChecksPerBatchCheck |

Determining the right values for these settings will be based on a variety of factors including, but not limited to, the database specific deployment topology, the FGA model(s) involved, and the relationship tuples in the system. However, here are some high-level guidelines:

- If a single ListObjects or ListUsers query is negatively impacting other query endpoints by increasing their latency or their error rate, then consider setting a lower value for `OPENFGA_MAX_CONCURRENT_READS_FOR_LIST_OBJECTS` or `OPENFGA_MAX_CONCURRENT_READS_FOR_LIST_USERS`.

- If a single Check query is negatively impacting other query endpoints by increasing their latency or their error rate, then consider setting a lower value for `OPENFGA_MAX_CONCURRENT_READS_FOR_CHECK`.


If you still see high request latencies despite the guidance above, then you may additionally consider setting stricter limits on the query resolution behavior by limiting the resolution depth and resolution breadth. These can be controlled with the `OPENFGA_RESOLVE_NODE_LIMIT` and `OPENFGA_RESOLVE_NODE_BREADTH_LIMIT` settings, respectively. Consider these guidelines:

- `OPENFGA_RESOLVE_NODE_LIMIT` limits the resolution depth of a single query, and thus it sets an upper bound on how deep a relationship hierarchy may be. A high value will allow a single query to involve more hierarchical resolution and therefore more database queries, while a low value will reduce the number of hierarchical resolutions that will be allowed and thus reduce the number of database queries.

- `OPENFGA_RESOLVE_NODE_BREADTH_LIMIT` limits the resolution breadth. It sets an upper bound on the number of in-flight resolutions that can be taking place on one or more [usersets](https://openfga.dev/docs/concepts#what-is-a-user). A high value will allow a single query to involve more concurrent evaluations to take place and therefore more database queries and server processes, while a low value will reduce the overall number of concurrent resolutions that will be allowed and thus reduce the number of database queries and server processes.


## Maximum results [​](https://openfga.dev/docs/getting-started/running-in-production\#maximum-results "Direct link to Maximum results")

Both the ListObjects and ListUsers endpoints will continue retrieving results until one of the following conditions is met:

- The maximum number of results is found
- The entire pool of possible results has been searched
- The API times out

By default, both ListObjects and ListUsers have a maximum results limit of 1,000. The higher the quantity of potential results in the system, the more time and resource-intensive it becomes to search for a large number of maximum results. This increased load can impact performance, potentially leading to time-outs in some cases. If your use case allows, consider setting a lower max results value via the `OPENFGA_LIST_OBJECTS_MAX_RESULTS` or `OPENFGA_LIST_USERS_MAX_RESULTS` configuration properties. This adjustment can lead to immediate improvements in time and resource efficiency.

## Related Sections [​](https://openfga.dev/docs/getting-started/running-in-production\#related-sections "Direct link to Related Sections")

Check the following sections for more on how to run OpenFGA in production environment.

Data and API Best Practices

Learn the best practices for managing data and invoking APIs in production environment

- [More](https://openfga.dev/docs/getting-started/tuples-api-best-practices)

Migrating Relations

Learn how to migrate relations in a production environment

- [More](https://openfga.dev/docs/modeling/migrating/migrating-relations)

- [Cluster recommendations](https://openfga.dev/docs/getting-started/running-in-production#cluster-recommendations)
- [Database recommendations](https://openfga.dev/docs/getting-started/running-in-production#database-recommendations)
- [Concurrency limits](https://openfga.dev/docs/getting-started/running-in-production#concurrency-limits)
- [Maximum results](https://openfga.dev/docs/getting-started/running-in-production#maximum-results)
- [Related Sections](https://openfga.dev/docs/getting-started/running-in-production#related-sections)

## OpenFGA SDK Client Setup
[Skip to main content](https://openfga.dev/docs/getting-started/setup-sdk-client#__docusaurus_skipToContent_fallback)

On this page

This article explains how to build an OpenFGA client by using the SDKs.

The first step is to ensure that you have created a store by following [these steps](https://openfga.dev/docs/getting-started/create-store).

Next, depending on the authentication scheme you want to use, there are different ways to build the client.

## Using No Authentication [​](https://openfga.dev/docs/getting-started/setup-sdk-client\#using-no-authentication "Direct link to Using No Authentication")

This is a simple setup but it is not recommended for production use.

- Node.js
- Go
- .NET
- Python
- Java
- CLI

```codeBlockLines_e6Vv
const { OpenFgaClient } = require('@openfga/sdk'); // OR import { OpenFgaClient } from '@openfga/sdk';

const openFga = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv
import (
    "os"

    . "github.com/openfga/go-sdk/client"
)

func main() {
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for \`CreateStore\` and \`ListStores\`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
        // .. Handle error
    }
}

```

```codeBlockLines_e6Vv
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace ExampleApp;

class MyProgram {
    static async Task Main() {
        var configuration = new ClientConfiguration() {
            ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL") ?? "http://localhost:8080", // required, e.g. https://api.fga.example
            StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for \`CreateStore\` and \`ListStores\`, required before calling for all other methods
            AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv
import asyncio
import os
import openfga_sdk
from openfga_sdk.client import OpenFgaClient

async def main():
    configuration = openfga_sdk.ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for \`CreateStore\` and \`ListStores\`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models() # call requests
        await fga_client.close() # close when done

asyncio.run(main())

```

```codeBlockLines_e6Vv
import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
    public static void main(String[] args) {
        var config = new ClientConfiguration()
                .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
                .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
                .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

        var fgaClient = new OpenFgaClient(config);
    }
}

```

```codeBlockLines_e6Vv
export FGA_API_URL=https://api.fga.example # optional. Defaults to http://localhost:8080
export FGA_STORE_ID=YOUR_STORE_ID # required for all calls except \`store create\`, \`store list\` and \`model validate\`
export FGA_MODEL_ID=YOUR_MODEL_ID # optional, can be overridden per request, latest is used if this is empty

```

## Using shared key authentication [​](https://openfga.dev/docs/getting-started/setup-sdk-client\#using-shared-key-authentication "Direct link to Using shared key authentication")

If you want to use shared key authentication, you need to generate a random string that will work as secret and set that key when building your OpenFGA server. Then, when building the client, set it as environment variable `FGA_API_TOKEN`.

Warning

If you are going to use this setup in production, you should enable TLS in your OpenFGA server. Please see the [Production Checklist](https://openfga.dev/docs/getting-started/running-in-production).

- Node.js
- Go
- .NET
- Python
- Java
- CLI

```codeBlockLines_e6Vv
const { CredentialsMethod, OpenFgaClient } = require('@openfga/sdk'); // OR import { CredentialsMethod, OpenFgaClient } from '@openfga/sdk';

const openFga = new OpenFgaClient({
    apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
    storeId: process.env.FGA_STORE_ID, // optional, not needed for \`CreateStore\` and \`ListStores\`, required before calling for all other methods
    authorizationModelId: process.env.FGA_MODEL_ID, // optional, can be overridden per request
    credentials: {
        method: CredentialsMethod.ApiToken,
        config: {
            token: process.env.$FGA_API_TOKEN,
        },
    }
});

```

```codeBlockLines_e6Vv
import (
    "os"

    . "github.com/openfga/go-sdk/client"
    "github.com/openfga/go-sdk/credentials"
)

func main() {
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"),   // optional, not needed for \`CreateStore\` and \`ListStores\`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),   // optional, can be overridden per request
        Credentials: &credentials.Credentials{
            Method: credentials.CredentialsMethodApiToken,
            Config: &credentials.Config{
                ApiToken: os.Getenv("OPENFGA_API_TOKEN"), // will be passed as the "Authorization: Bearer ${ApiToken}" request header
            },
        },
    })

    if err != nil {
        // .. Handle error
    }
}

```

```codeBlockLines_e6Vv
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Configuration;
using Environment = System.Environment;

namespace ExampleApp;

class MyProgram {
    static async Task Main() {
        var configuration = new ClientConfiguration() {
            ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL") ?? "http://localhost:8080", // required, e.g. https://api.fga.example
            StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for \`CreateStore\` and \`ListStores\`, required before calling for all other methods
            AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // optional, can be overridden per request
            Credentials = new Credentials() {
                Method = CredentialsMethod.ApiToken,
                Config = new CredentialsConfig() {
                    ApiToken = Environment.GetEnvironmentVariable("FGA_API_TOKEN")
                },
            },
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv
import asyncio
import os
import openfga_sdk
from openfga_sdk.client import OpenFgaClient
from openfga_sdk.credentials import Credentials, CredentialConfiguration

async def main():

    credentials = Credentials(
        method='api_token',
        configuration=CredentialConfiguration(
            api_token=os.environ.get('FGA_API_TOKEN')
        )
    )
    configuration = openfga_sdk.ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for \`CreateStore\` and \`ListStores\`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
        credentials = credentials,
    )

    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models() # call requests
        await fga_client.close() # close when done

asyncio.run(main())

```

```codeBlockLines_e6Vv
import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ApiToken;
import dev.openfga.sdk.api.configuration.ClientConfiguration;
import dev.openfga.sdk.api.configuration.Credentials;

public class Example {
    public static void main(String[] args) {
        var config = new ClientConfiguration()
                .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
                .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
                .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")) // Optional, can be overridden per request
                .credentials(new Credentials(
                    new ApiToken(System.getenv("FGA_API_TOKEN")) // will be passed as the "Authorization: Bearer ${ApiToken}" request header
                ));

        var fgaClient = new OpenFgaClient(config);
    }
}

```

```codeBlockLines_e6Vv
export FGA_API_URL=https://api.fga.example # optional. Defaults to http://localhost:8080
export FGA_STORE_ID=YOUR_STORE_ID # required for all calls except \`store create\`, \`store list\` and \`model validate\`
export FGA_MODEL_ID=YOUR_MODEL_ID # optional, can be overridden per request, latest is used if this is empty
export FGA_API_TOKEN=YOUR_API_TOKEN

```

## Using client credentials flow [​](https://openfga.dev/docs/getting-started/setup-sdk-client\#using-client-credentials-flow "Direct link to Using client credentials flow")

Note

The OpenFGA server does not support the client credentials flow, however if you or your OpenFGA provider have implemented a client credentials wrapper on top, follow the instructions here to have the OpenFGA client handle the token exchange for you.

- Node.js
- Go
- .NET
- Python
- Java
- CLI

```codeBlockLines_e6Vv
const { CredentialsMethod, OpenFgaClient } = require('@openfga/sdk'); // OR import { CredentialsMethod, OpenFgaClient } from '@openfga/sdk';

const openFga = new OpenFgaClient({
    apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
    storeId: process.env.FGA_STORE_ID, // optional, not needed for \`CreateStore\` and \`ListStores\`, required before calling for all other methods
    authorizationModelId: process.env.FGA_MODEL_ID, // optional, can be overridden per request
    credentials: {
        method: CredentialsMethod.ClientCredentials,
        config: {
          apiTokenIssuer: process.env.FGA_API_TOKEN_ISSUER,
          apiAudience: process.env.FGA_API_AUDIENCE,
          clientId: process.env.FGA_CLIENT_ID,
          clientSecret: process.env.FGA_CLIENT_SECRET,
        },
    }
});

```

```codeBlockLines_e6Vv
import (
    "os"

    . "github.com/openfga/go-sdk/client"
    "github.com/openfga/go-sdk/credentials"
)

func main() {
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"),   // optional, not needed for \`CreateStore\` and \`ListStores\`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),   // optional, can be overridden per request
        Credentials: &credentials.Credentials{
            Method: credentials.CredentialsMethodClientCredentials,
            Config: &credentials.Config{
                ClientCredentialsClientId:       os.Getenv("FGA_CLIENT_ID"),
                ClientCredentialsClientSecret:   os.Getenv("FGA_CLIENT_SECRET"),
                ClientCredentialsApiAudience:    os.Getenv("FGA_API_AUDIENCE"),
                ClientCredentialsApiTokenIssuer: os.Getenv("FGA_API_TOKEN_ISSUER"),
            },
        },
    })

    if err != nil {
        // .. Handle error
    }
}

```

```codeBlockLines_e6Vv
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Configuration;
using Environment = System.Environment;

namespace ExampleApp;

class MyProgram {
    static async Task Main() {
        var configuration = new ClientConfiguration() {
            ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL") ?? "http://localhost:8080", // required, e.g. https://api.fga.example
            StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for \`CreateStore\` and \`ListStores\`, required before calling for all other methods
            AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // optional, can be overridden per request
            Credentials = new Credentials() {
                Method = CredentialsMethod.ClientCredentials,
                Config = new CredentialsConfig() {
                    ApiTokenIssuer = Environment.GetEnvironmentVariable("FGA_API_TOKEN_ISSUER"),
                    ApiAudience = Environment.GetEnvironmentVariable("FGA_API_AUDIENCE"),
                    ClientId = Environment.GetEnvironmentVariable("FGA_CLIENT_ID"),
                    ClientSecret = Environment.GetEnvironmentVariable("FGA_CLIENT_SECRET"),
                }
            }
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv
import asyncio
import os
import openfga_sdk
from openfga_sdk.client import OpenFgaClient
from openfga_sdk.credentials import Credentials, CredentialConfiguration

async def main():

    credentials = Credentials(
        method='client_credentials',
        configuration=CredentialConfiguration(
            api_issuer= os.environ.get('FGA_API_TOKEN_ISSUER'),
            api_audience= os.environ.get('FGA_API_AUDIENCE'),
            client_id= os.environ.get('FGA_CLIENT_ID'),
            client_secret= os.environ.get('FGA_CLIENT_SECRET'),
        )
    )
    configuration = openfga_sdk.ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for \`CreateStore\` and \`ListStores\`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
        credentials = credentials,
    )

    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models() # call requests
        await fga_client.close() # close when done

asyncio.run(main())

```

```codeBlockLines_e6Vv
import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;
import dev.openfga.sdk.api.configuration.ClientCredentials;
import dev.openfga.sdk.api.configuration.Credentials;

public class Example {
    public static void main(String[] args) {
        var config = new ClientConfiguration()
                .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
                .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
                .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")) // Optional, can be overridden per request
                .credentials(new Credentials(
                    new ClientCredentials()
                            .apiTokenIssuer(System.getenv("FGA_API_TOKEN_ISSUER"))
                            .apiAudience(System.getenv("FGA_API_AUDIENCE"))
                            .clientId(System.getenv("FGA_CLIENT_ID"))
                            .clientSecret(System.getenv("FGA_CLIENT_SECRET"))
                ));

        var fgaClient = new OpenFgaClient(config);
    }
}

```

```codeBlockLines_e6Vv
export FGA_API_URL=https://api.fga.example # optional. Defaults to http://localhost:8080
export FGA_STORE_ID=YOUR_STORE_ID # required for all calls except \`store create\`, \`store list\` and \`model validate\`
export FGA_MODEL_ID=YOUR_MODEL_ID # optional, can be overridden per request, latest is used if this is empty
export FGA_API_TOKEN_ISSUER=YOUR_API_TOKEN_ISSUER
export FGA_API_AUDIENCE=YOUR_API_AUDIENCE
export FGA_CLIENT_ID=YOUR_CLIENT_ID
export FGA_CLIENT_SECRET=YOUR_CLIENT_SECRET

```

- [Using No Authentication](https://openfga.dev/docs/getting-started/setup-sdk-client#using-no-authentication)
- [Using shared key authentication](https://openfga.dev/docs/getting-started/setup-sdk-client#using-shared-key-authentication)
- [Using client credentials flow](https://openfga.dev/docs/getting-started/setup-sdk-client#using-client-credentials-flow)

## OpenFGA at KubeCon
[Skip to main content](https://openfga.dev/blog/tags/kubecon#__docusaurus_skipToContent_fallback)

As you'd expect, the OpenFGA team will be at KubeCon NA 2023 in Chicago, IL!

We'll have a packed agenda for the week:

- [Jonathan Whitaker](https://www.linkedin.com/in/jonathan-whitaker-5a8b2484/) and [Lucas Käldström](https://www.linkedin.com/in/luxas/) will be presenting in [Could\_Native Rejects](https://cloud-native.rejekts.io/) on how to use OpenFGA to manage and extend authorization in Kubernetes. Learn more [here](https://cfp.cloud-native.rejekts.io/cloud-native-rejekts-na-chicago-2023/speaker/XB7EUR/).

- [Maria Ines Parnisari](https://www.linkedin.com/in/miparnisari/) and [Andres Aguiar](https://www.linkedin.com/in/aaguiar/) will be presenting in [AppDeveloperCon](https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/co-located-events/appdevelopercon/) about modernizing authorization for cloud native applications using OpenFGA. Learn more [here](https://colocatedeventsna2023.sched.com/event/1Rj2j/modernizing-authorization-for-cloud-native-applications-using-openfga-andres-aguiar-maria-ines-parnisari-okta).

- We'll host a Project Meeting on Monday 9.30 AM in the Hudson room at the [Hilton Garden Inn](https://maps.app.goo.gl/77FwgGdpsWK5jWHd6). We'll share how the product is being used, demo the latests features like our new CLI, the VS Code Extension, Conditional Relationships, the Java SDK... and more!

- We'll be in the CNCF Project Pavilion during the afternoons.

- We'll host our [OpenFGA community meeting](https://github.com/openfga/community/blob/main/community-meetings.md) directly from KubeCon on Thursday 9th at 3PM UTC (8AM PST/11AM EST).


If you want to meet with the team outside of these events, please pick any spot that works for you in our [calendar](https://calendar.app.google/GonEwLboKvPkG8pL6).

See you in Chicago!

## OpenFGA Docker Setup
[Skip to main content](https://openfga.dev/docs/getting-started/setup-openfga/docker#__docusaurus_skipToContent_fallback)

On this page

This article explains how to run your own OpenFGA server using Docker. To learn the different ways to configure OpenFGA check [Configuring OpenFGA](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga).

## Step by step [​](https://openfga.dev/docs/getting-started/setup-openfga/docker\#step-by-step "Direct link to Step by step")

If you want to run OpenFGA locally as a Docker container, follow these steps:

1. [Install Docker](https://docs.docker.com/get-docker/) (if not already installed).
2. Run `docker pull openfga/openfga` to get the latest docker image.
3. Run `docker run -p 8080:8080 -p 8081:8081 -p 3000:3000 openfga/openfga run`.

This will start an HTTP server and gRPC server with the default configuration options. Port 8080 is used to serve the HTTP API, 8081 is used to serve the gRPC API, and 3000 is used for the [Playground](https://openfga.dev/docs/getting-started/setup-openfga/playground).

## Using Postgres [​](https://openfga.dev/docs/getting-started/setup-openfga/docker\#using-postgres "Direct link to Using Postgres")

- Docker
- Docker Compose

To run OpenFGA and Postgres in containers, you can create a new network to make communication between containers simpler:

```codeBlockLines_e6Vv
docker network create openfga

```

You can then start Postgres in the network you created above:

```codeBlockLines_e6Vv
docker run -d --name postgres --network=openfga -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=password postgres:14

```

You should now have Postgres running in a container in the `openfga` network. However, it will not have the tables required for running OpenFGA. You can use the `migrate` command to create the tables. Using the OpenFGA container, this will look like:

```codeBlockLines_e6Vv
docker run --rm --network=openfga openfga/openfga migrate \
    --datastore-engine postgres \
    --datastore-uri "postgres://postgres:password@postgres:5432/postgres?sslmode=disable"

```

Finally, start OpenFGA:

```codeBlockLines_e6Vv
docker run --name openfga --network=openfga -p 3000:3000 -p 8080:8080 -p 8081:8081 openfga/openfga run \
    --datastore-engine postgres \
    --datastore-uri 'postgres://postgres:password@postgres:5432/postgres?sslmode=disable'

```

Copy the below code block into a local file named: `docker-compose.yaml`

```codeBlockLines_e6Vv
version: '3.8'

networks:
  openfga:

services:
  postgres:
    image: postgres:14
    container_name: postgres
    networks:
      - openfga
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  migrate:
    depends_on:
      postgres:
        condition: service_healthy
    image: openfga/openfga:latest
    container_name: migrate
    command: migrate
    environment:
      - OPENFGA_DATASTORE_ENGINE=postgres
      - OPENFGA_DATASTORE_URI=postgres://postgres:password@postgres:5432/postgres?sslmode=disable
    networks:
      - openfga

  openfga:
    depends_on:
      migrate:
        condition: service_completed_successfully
    image: openfga/openfga:latest
    container_name: openfga
    environment:
      - OPENFGA_DATASTORE_ENGINE=postgres
      - OPENFGA_DATASTORE_URI=postgres://postgres:password@postgres:5432/postgres?sslmode=disable
      - OPENFGA_LOG_FORMAT=json
    command: run
    networks:
      - openfga
    ports:
      # Needed for the http server
      - "8080:8080"
      # Needed for the grpc server (if used)
      - "8081:8081"
      # Needed for the playground (Do not enable in prod!)
      - "3000:3000"

```

In a terminal, navigate to that directory and run:

```codeBlockLines_e6Vv
docker-compose up

```

This will start the Postgres database, run `openfga migrate` to configure the database and finally start the OpenFGA server.

## Using MySQL [​](https://openfga.dev/docs/getting-started/setup-openfga/docker\#using-mysql "Direct link to Using MySQL")

- Docker
- Docker Compose

We first make a network:

```codeBlockLines_e6Vv
docker network create openfga

```

Then, start MySQL in the network you created above:

```codeBlockLines_e6Vv
docker run -d --name mysql --network=openfga -e MYSQL_ROOT_PASSWORD=secret -e MYSQL_DATABASE=openfga mysql:8

```

You should now have MySQL running in a container in the `openfga` network. But we still have to migrate all the tables to be able to run OpenFGA. You can use the `migrate` command to create the tables. Using the OpenFGA container, this will look like:

```codeBlockLines_e6Vv
docker run --rm --network=openfga openfga/openfga migrate \
    --datastore-engine mysql \
    --datastore-uri 'root:secret@tcp(mysql:3306)/openfga?parseTime=true'

```

Finally, start OpenFGA:

```codeBlockLines_e6Vv
docker run --name openfga --network=openfga -p 3000:3000 -p 8080:8080 -p 8081:8081 openfga/openfga run \
    --datastore-engine mysql \
    --datastore-uri 'root:secret@tcp(mysql:3306)/openfga?parseTime=true'

```

Copy the below code block into a local file named: `docker-compose.yaml`

```codeBlockLines_e6Vv
version: '3.8'

networks:
  openfga:

services:
  mysql:
    image: mysql:8
    container_name: mysql
    networks:
      - openfga
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=secret
      - MYSQL_DATABASE=openfga
    healthcheck:
      test: ["CMD", 'mysqladmin', 'ping', '-h', 'localhost', '-u', 'root', '-p$$MYSQL_ROOT_PASSWORD' ]
      timeout: 20s
      retries: 5

  migrate:
    depends_on:
        mysql:
            condition: service_healthy
    image: openfga/openfga:latest
    container_name: migrate
    command: migrate
    environment:
      - OPENFGA_DATASTORE_ENGINE=mysql
      - OPENFGA_DATASTORE_URI=root:secret@tcp(mysql:3306)/openfga?parseTime=true
    networks:
      - openfga

  openfga:
    depends_on:
      migrate:
        condition: service_completed_successfully
    image: openfga/openfga:latest
    container_name: openfga
    environment:
      - OPENFGA_DATASTORE_ENGINE=mysql
      - OPENFGA_DATASTORE_URI=root:secret@tcp(mysql:3306)/openfga?parseTime=true
      - OPENFGA_LOG_FORMAT=json
    command: run
    networks:
      - openfga
    ports:
      # Needed for the http server
      - "8080:8080"
      # Needed for the grpc server (if used)
      - "8081:8081"
      # Needed for the playground (Do not enable in prod!)
      - "3000:3000"

```

In a terminal, navigate to that directory and run:

```codeBlockLines_e6Vv
docker-compose up

```

This will start the MySQL database, run `openfga migrate` to configure the database and finally start the OpenFGA server.

## Using SQLite [​](https://openfga.dev/docs/getting-started/setup-openfga/docker\#using-sqlite "Direct link to Using SQLite")

- Docker
- Docker Compose

We first make a network:

```codeBlockLines_e6Vv
docker network create openfga

```

Then, create a volume to hold the openfga database:

```codeBlockLines_e6Vv
docker volume create openfga

```

Next you have to migrate all the tables to be able to run OpenFGA. You can use the `migrate` command to create the tables. Using the OpenFGA container, this will look like:

```codeBlockLines_e6Vv
docker run --rm --network=openfga \
    -v openfga:/home/nonroot \
    -u nonroot \
    openfga/openfga migrate \
    --datastore-engine sqlite \
    --datastore-uri 'file:/home/nonroot/openfga.db'

```

Finally, start OpenFGA:

```codeBlockLines_e6Vv
docker run --name openfga --network=openfga \
    -p 3000:3000 -p 8080:8080 -p 8081:8081 \
    -v openfga:/home/nonroot \
    -u nonroot \
    openfga/openfga run \
    --datastore-engine sqlite \
    --datastore-uri 'file:/home/nonroot/openfga.db'

```

Copy the below code block into a local file named: `docker-compose.yaml`

```codeBlockLines_e6Vv
version: '3.8'

networks:
  openfga:

volumes:
  openfga:

services:
  migrate:
    image: openfga/openfga:latest
    container_name: migrate
    command: migrate
    user: nonroot
    environment:
      - OPENFGA_DATASTORE_ENGINE=sqlite
      - OPENFGA_DATASTORE_URI=file:/home/nonroot/openfga.db
    networks:
      - openfga
    volumes:
      - openfga:/home/nonroot

  openfga:
    depends_on:
      migrate:
        condition: service_completed_successfully
    image: openfga/openfga:latest
    container_name: openfga
    user: nonroot
    environment:
      - OPENFGA_DATASTORE_ENGINE=sqlite
      - OPENFGA_DATASTORE_URI=file:/home/nonroot/openfga.db
      - OPENFGA_LOG_FORMAT=json
    command: run
    networks:
      - openfga
    volumes:
      - openfga:/home/nonroot
    ports:
      # Needed for the http server
      - "8080:8080"
      # Needed for the grpc server (if used)
      - "8081:8081"
      # Needed for the playground (Do not enable in prod!)
      - "3000:3000"

```

In a terminal, navigate to that directory and run:

```codeBlockLines_e6Vv
docker-compose up

```

This will create a new `openfga` volume to store the SQLite database, run `openfga migrate` to configure the database and finally start the OpenFGA server.

## Pre-shared key authentication [​](https://openfga.dev/docs/getting-started/setup-openfga/docker\#pre-shared-key-authentication "Direct link to Pre-shared key authentication")

To configure with pre-shared authentication and enabling TLS in http server with Docker.

1. Copy the certificate and key files to your Docker container.
2. Run with the following command:

```codeBlockLines_e6Vv
docker run --name openfga --network=openfga -p 3000:3000 -p 8080:8080 -p 8081:8081 openfga/openfga run \
    --authn-method=preshared \
    --authn-preshared-keys="key1,key2" \
    --http-tls-enabled=true \
    --http-tls-cert="/Users/myuser/key/server.crt" \
    --http-tls-key="/Users/myuser/key/server.key"

```

## OIDC authentication [​](https://openfga.dev/docs/getting-started/setup-openfga/docker\#oidc-authentication "Direct link to OIDC authentication")

To configure with OIDC authentication and enabling TLS in http server with Docker.

1. Copy the certificate and key files to your docker container.
2. Run the following command

```codeBlockLines_e6Vv
docker run --name openfga --network=openfga -p 3000:3000 -p 8080:8080 -p 8081:8081 openfga/openfga run \
    --authn-method=oidc \
    --authn-oidc-issuer="oidc-issuer" \
    --authn-oidc-audience="oidc-audience" \
    --http-tls-enabled=true \
    --http-tls-cert="/Users/myuser/key/server.crt" \
    --http-tls-key="/Users/myuser/key/server.key"

```

## Enabling profiling [​](https://openfga.dev/docs/getting-started/setup-openfga/docker\#enabling-profiling "Direct link to Enabling profiling")

If you are enabling profiling, make sure you enable the corresponding port in docker. The default port is `3001`, but if you need to serve the profiler on a different port, you can do so by specifying the `--profiler-addr` flag. For example:

```codeBlockLines_e6Vv
docker run -p 8080:8080 -p 8081:8081 -p 3000:3000 -p 3002:3002 openfga/openfga run --profiler-enabled --profiler-addr :3002

```

## Related sections [​](https://openfga.dev/docs/getting-started/setup-openfga/docker\#related-sections "Direct link to Related sections")

Check the following sections for more on how to use OpenFGA.

Production Best Practices

Learn the best practices of running OpenFGA in a production environment

- [More](https://openfga.dev/docs/getting-started/running-in-production)

- [Step by step](https://openfga.dev/docs/getting-started/setup-openfga/docker#step-by-step)
- [Using Postgres](https://openfga.dev/docs/getting-started/setup-openfga/docker#using-postgres)
- [Using MySQL](https://openfga.dev/docs/getting-started/setup-openfga/docker#using-mysql)
- [Using SQLite](https://openfga.dev/docs/getting-started/setup-openfga/docker#using-sqlite)
- [Pre-shared key authentication](https://openfga.dev/docs/getting-started/setup-openfga/docker#pre-shared-key-authentication)
- [OIDC authentication](https://openfga.dev/docs/getting-started/setup-openfga/docker#oidc-authentication)
- [Enabling profiling](https://openfga.dev/docs/getting-started/setup-openfga/docker#enabling-profiling)
- [Related sections](https://openfga.dev/docs/getting-started/setup-openfga/docker#related-sections)

## Contextual Tuples Overview
[Skip to main content](https://openfga.dev/docs/modeling/token-claims-contextual-tuples#__docusaurus_skipToContent_fallback)

On this page

Contextual Tuples allow authorization checks that depend on dynamic or contextual relationships that have not been written to the OpenFGA store, enabling some Attribute Based Access Control (ABAC) use cases.

To enable more ABAC use-cases that rely on specific attributes and conditions, you can also use OpenFGA\`s [conditions](https://openfga.dev/docs/modeling/conditions).

## Before You Start [​](https://openfga.dev/docs/modeling/token-claims-contextual-tuples\#before-you-start "Direct link to Before You Start")

To follow this guide, familiarize yourself with the following [OpenFGA Concepts](https://openfga.dev/docs/concepts):

- A [Relation](https://openfga.dev/docs/concepts#what-is-a-relation): is a string defined in the type definition of an authorization model that defines the possibility of a relationship between an object of the same type as the type definition and a user in the system.
- A [Check Request](https://openfga.dev/docs/concepts#what-is-a-check-request): is a call to the OpenFGA check endpoint that returns whether the user has a certain relationship with an object.
- A [Relationship Tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple): a grouping consisting of a user, a relation and an object stored in OpenFGA

## User Directories, Identity Tokens, And Relationships [​](https://openfga.dev/docs/modeling/token-claims-contextual-tuples\#user-directories-identity-tokens-and-relationships "Direct link to User Directories, Identity Tokens, And Relationships")

User directories store user information that's accessed when making authorization decisions, like the group the user belongs to, their roles, or their department. The natural way to use those relationships in a Relationship-Based Access Control system like OpenFGA is to create tuples for each relation. However, implementing a synchronization mechanism to keep the user directory data up to date with tuples in the store can be challenging.

When applications implement authentication using an OIDC authorization service, they receive an ID Token or an Access token, with certain claims that can be customized based on the application's needs. Instead of writing tuples to the OpenFGA, you can use the content of the token in Contextual Tuples to make authorization checks, understanding that, if those relationships change while the token has not expired, users will still get access to the resources the content of the token entitled them to.

## Example [​](https://openfga.dev/docs/modeling/token-claims-contextual-tuples\#example "Direct link to Example")

In this example, the application uses the following authorization model, in which documents can be viewed by members of a group:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type group
  relations
    define member: [user]

type document
  relations
    define viewer: [group#member]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "metadata": {\
        "relations": {\
          "member": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      },\
      "relations": {\
        "member": {\
          "this": {}\
        }\
      },\
      "type": "group"\
    },\
    {\
      "metadata": {\
        "relations": {\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "relation": "member",\
                "type": "group"\
              }\
            ]\
          }\
        }\
      },\
      "relations": {\
        "viewer": {\
          "this": {}\
        }\
      },\
      "type": "document"\
    }\
  ]
}

```

When a group is added as a viewer of a document, the application writes tuples like those below:

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // Members of the marketing group can view the product-launch document\
      {"_description":"Members of the marketing group can view the product-launch document","user":"group:marketing#member","relation":"viewer","object":"document:product-launch"},\
      // Members of the everyone group can view the welcome document\
      {"_description":"Members of the everyone group can view the welcome document","user":"group:everyone#member","relation":"viewer","object":"document:welcome"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             // Members of the marketing group can view the product-launch document
             User: "group:marketing#member",
             Relation: "viewer",
             Object: "document:product-launch",
        },         {
             // Members of the everyone group can view the welcome document
             User: "group:everyone#member",
             Relation: "viewer",
             Object: "document:welcome",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
    // Members of the marketing group can view the product-launch document
       new() {
                  User = "group:marketing#member",
                  Relation = "viewer",
                  Object = "document:product-launch"
              },
    // Members of the everyone group can view the welcome document
       new() {
                  User = "group:everyone#member",
                  Relation = "viewer",
                  Object = "document:welcome"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    # Members of the marketing group can view the product-launch document\
                    user="group:marketing#member",\
                    relation="viewer",\
                    object="document:product-launch",\
                ),\
                ClientTuple(\
                    # Members of the everyone group can view the welcome document\
                    user="group:everyone#member",\
                    relation="viewer",\
                    object="document:welcome",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                // Members of the marketing group can view the product-launch document
                new ClientTupleKey()
                        .user("group:marketing#member")
                        .relation("viewer")
                        ._object("document:product-launch"),
                // Members of the everyone group can view the welcome document
                new ClientTupleKey()
                        .user("group:everyone#member")
                        .relation("viewer")
                        ._object("document:welcome")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"_description":"Members of the marketing group can view the product-launch document","user":"group:marketing#member","relation":"viewer","object":"document:product-launch"},{"_description":"Members of the everyone group can view the welcome document","user":"group:everyone#member","relation":"viewer","object":"document:welcome"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA group:marketing#member viewer document:product-launch
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA group:everyone#member viewer document:welcome

```

```codeBlockLines_e6Vv
write([\
    // Members of the marketing group can view the product-launch document\
    {\
      "user":"group:marketing#member",\
      "relation":"viewer",\
      "object":"document:product-launch"\
    },\
    // Members of the everyone group can view the welcome document\
    {\
      "user":"group:everyone#member",\
      "relation":"viewer",\
      "object":"document:welcome"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

Let's assume that the Access Token the application receives has a list of the groups the user belongs to:

```codeBlockLines_e6Vv
{
  "iss": "https://id.company.com",
  "sub": "6b0b14af-59dc-4ff3-a46f-ad351f428726",
  "name": "John Doe",
  "iat": 1516239022,
  "exp": 1516239022,
  "azp" : "yz54KAoW1KGFAUU982CEUqZgxGIdrpgg",
  "groups": ["marketing", "everyone"]
}

```

When making a authorization check, the application uses the `groups` claim in the token and adds contextual tuple for each group, indicating that the user is a member of that group:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:6b0b14af-59dc-4ff3-a46f-ad351f428726',
    relation: 'viewer',
    object: 'document:product-launch',
    contextualTuples: [\
      {"_description":"user 6b0b14af-59dc-4ff3-a46f-ad351f428726 is a member of the marketing group","user":"user:6b0b14af-59dc-4ff3-a46f-ad351f428726","relation":"member","object":"group:marketing"},{"_description":"user 6b0b14af-59dc-4ff3-a46f-ad351f428726 is a member of the everyone group","user":"user:6b0b14af-59dc-4ff3-a46f-ad351f428726","relation":"member","object":"group:everyone"}\
    ],
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:6b0b14af-59dc-4ff3-a46f-ad351f428726",
    Relation: "viewer",
    Object:   "document:product-launch",
    ContextualTuples: []ClientTupleKey{
        {
            User:     "user:6b0b14af-59dc-4ff3-a46f-ad351f428726",
            Relation: "member",
            Object:   "group:marketing",
        },
        {
            User:     "user:6b0b14af-59dc-4ff3-a46f-ad351f428726",
            Relation: "member",
            Object:   "group:everyone",
        },
    },
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:6b0b14af-59dc-4ff3-a46f-ad351f428726",
    Relation = "viewer",
    Object = "document:product-launch",,
    ContextualTuples = new List<ClientTupleKey>({
    new(user: "user:6b0b14af-59dc-4ff3-a46f-ad351f428726", relation: "member", _object: "group:marketing"),
    new(user: "user:6b0b14af-59dc-4ff3-a46f-ad351f428726", relation: "member", _object: "group:everyone")
})

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:6b0b14af-59dc-4ff3-a46f-ad351f428726",
    relation="viewer",
    object="document:product-launch",
    contextual_tuples=[\
        ClientTuple(user="user:6b0b14af-59dc-4ff3-a46f-ad351f428726", relation="member", object="group:marketing"),\
                ClientTuple(user="user:6b0b14af-59dc-4ff3-a46f-ad351f428726", relation="member", object="group:everyone")\
    ],
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:6b0b14af-59dc-4ff3-a46f-ad351f428726")
        .relation("viewer")
        ._object("document:product-launch")
        .contextualTuples(
                List.of(
                        new ClientTupleKey()
                                .user("user:6b0b14af-59dc-4ff3-a46f-ad351f428726")
                                .relation("member")
                                ._object("group:marketing"),
                        new ClientTupleKey()
                                .user("user:6b0b14af-59dc-4ff3-a46f-ad351f428726")
                                .relation("member")
                                ._object("group:everyone")
                ));

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:6b0b14af-59dc-4ff3-a46f-ad351f428726 viewer document:product-launch --contextual-tuple "user:6b0b14af-59dc-4ff3-a46f-ad351f428726 member group:marketing"  --contextual-tuple "user:6b0b14af-59dc-4ff3-a46f-ad351f428726 member group:everyone"

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:6b0b14af-59dc-4ff3-a46f-ad351f428726","relation":"viewer","object":"document:product-launch"},"contextual_tuples":{"tuple_keys":[{"user":"user:6b0b14af-59dc-4ff3-a46f-ad351f428726","relation":"member","object":"group:marketing"},{"user":"user:6b0b14af-59dc-4ff3-a46f-ad351f428726","relation":"member","object":"group:everyone"}]}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:6b0b14af-59dc-4ff3-a46f-ad351f428726", // check if the user `user:6b0b14af-59dc-4ff3-a46f-ad351f428726`
  relation = "viewer", // has an `viewer` relation
  object = "document:product-launch", // with the object `document:product-launch`
  contextual_tuples = [ // Assuming the following is true\
    {user = "user:6b0b14af-59dc-4ff3-a46f-ad351f428726", relation = "member", object = "group:marketing"},\
    {user = "user:6b0b14af-59dc-4ff3-a46f-ad351f428726", relation = "member", object = "group:everyone"}\
  ], authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:6b0b14af-59dc-4ff3-a46f-ad351f428726 related to document:product-launch as viewer?

# Note: Contextual Tuples are not supported on the playground

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

The authorization check returns `allowed = true`, as there's a stored tuple saying that members of the `marketing` group are viewers of the `product-launch` document, and there's a contextual tuple indicating that the user is a member of the `marketing` group.

Warning

Contextual tuples:

- Do not persist in the store.

- Are only supported on the [Check API endpoint](https://openfga.dev/api/service#Relationship%20Queries/Check), [ListObjects API endpoint](https://openfga.dev/api/service#Relationship%20Queries/ListObjects) and [ListUsers API endpoint](https://openfga.dev/api/service#Relationship%20Queries/ListUsers). They are not supported on read, expand, or other endpoints.

- If you use the [Read Changes API endpoint](https://openfga.dev/api/service#Relationship%20Tuples/ReadChanges) to build a permission aware search index, it may be difficult to account for contextual tuples.


## Related Sections [​](https://openfga.dev/docs/modeling/token-claims-contextual-tuples\#related-sections "Direct link to Related Sections")

Check the following sections for more on how user contextual tuples can be used.

Contextual and Time-Based Authorization

Learn how to authorize access that depends on dynamic or contextual criteria.

- [More](https://openfga.dev/docs/modeling/contextual-time-based-authorization)

Authorization Through Organization Context

Learn to model and authorize when a user belongs to multiple organizations.

- [More](https://openfga.dev/docs/modeling/organization-context-authorization)

Conditions

Learn to model requiring dynamic attributes.

- [More](https://openfga.dev/docs/modeling/conditions)

OpenFGA API

Details on the Check API in the OpenFGA reference guide.

- [More](https://openfga.dev/api/service#Relationship%20Queries/Check)

- [Before You Start](https://openfga.dev/docs/modeling/token-claims-contextual-tuples#before-you-start)
- [User Directories, Identity Tokens, And Relationships](https://openfga.dev/docs/modeling/token-claims-contextual-tuples#user-directories-identity-tokens-and-relationships)
- [Example](https://openfga.dev/docs/modeling/token-claims-contextual-tuples#example)
- [Related Sections](https://openfga.dev/docs/modeling/token-claims-contextual-tuples#related-sections)

## Contextual Authorization Guide
[Skip to main content](https://openfga.dev/docs/modeling/contextual-time-based-authorization#__docusaurus_skipToContent_fallback)

On this page

This section explores some methods available to you to tackle some use-cases where the expected authorization check may depend on certain dynamic or contextual data (such as time, location, ip address, weather) that have not been written to the OpenFGA store.

When to use

Contextual Tuples should be used when modeling cases where a user's access to an object depends on the context of their request. For example:

- An employee’s ability to access a document when they are connected to the company VPN or the api call is originating from an internal IP address.
- A support engineer is only able to access a user's account during office hours.
- If a user belongs to multiple organizations, they are only able to access a resource if they set a specific organization in their current context.

## Before you start [​](https://openfga.dev/docs/modeling/contextual-time-based-authorization\#before-you-start "Direct link to Before you start")

To follow this guide, you should be familiar with some [OpenFGA Concepts](https://openfga.dev/docs/concepts).

### OpenFGA concepts [​](https://openfga.dev/docs/modeling/contextual-time-based-authorization\#-concepts "Direct link to -concepts")

- A [Relation](https://openfga.dev/docs/concepts#what-is-a-relation): Defined in the type definition of an authorization model, a relation is a string that defines the possibility of a relationship between an object of the same type as the type definition and a user in the system.
- A [Check Request](https://openfga.dev/docs/concepts#what-is-a-check-request): is a call to the OpenFGA check endpoint that returns whether the user has a certain relationship with an object.
- A [Relationship Tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple): a grouping consisting of a user, a relation and an object stored in OpenFGA
- A [Contextual Tuple](https://openfga.dev/docs/concepts#what-are-contextual-tuples): a tuple that can be added to a Check request, and only exists within the context of that particular request.

You also need to be familiar with:

- **Modeling Object-to-Object Relationships**: You need to know how to create relationships between objects and how that might affect a user's relationships to those objects. [Learn more →](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships)
- **Modeling Multiple Restrictions**: You need to know how to model requiring multiple authorizations before allowing users to perform certain actions. [Learn more →](https://openfga.dev/docs/modeling/multiple-restrictions)

### Scenario [​](https://openfga.dev/docs/modeling/contextual-time-based-authorization\#scenario "Direct link to Scenario")

For the scope of this guide, we are going to consider the following scenario.

Consider you are building the authorization model for WeBank Inc.

In order for an Account Manager at WeBank Inc. to be able to access a customer's account and its transactions, they would need to be:

- An account manager at the same branch as the customer's account
- Connected via the branch's internal network or through the branch's VPN
- Connected during this particular branch's office hours

We will start with the following Authorization Model

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type branch
  relations
    define account_manager: [user]

type account
  relations
    define branch: [branch]
    define account_manager: account_manager from branch
    define customer: [user]
    define viewer: customer or account_manager
    define can_view: viewer

type transaction
  relations
    define account: [account]
    define can_view: viewer from account

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "branch",\
      "relations": {\
        "account_manager": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "account_manager": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "account",\
      "relations": {\
        "branch": {\
          "this": {}\
        },\
        "account_manager": {\
          "tupleToUserset": {\
            "tupleset": {\
              "object": "",\
              "relation": "branch"\
            },\
            "computedUserset": {\
              "object": "",\
              "relation": "account_manager"\
            }\
          }\
        },\
        "customer": {\
          "this": {}\
        },\
        "viewer": {\
          "union": {\
            "child": [\
              {\
                "computedUserset": {\
                  "object": "",\
                  "relation": "customer"\
                }\
              },\
              {\
                "computedUserset": {\
                  "object": "",\
                  "relation": "account_manager"\
                }\
              }\
            ]\
          }\
        },\
        "can_view": {\
          "computedUserset": {\
            "object": "",\
            "relation": "viewer"\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "branch": {\
            "directly_related_user_types": [\
              {\
                "type": "branch"\
              }\
            ]\
          },\
          "customer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "transaction",\
      "relations": {\
        "account": {\
          "this": {}\
        },\
        "can_view": {\
          "tupleToUserset": {\
            "tupleset": {\
              "object": "",\
              "relation": "account"\
            },\
            "computedUserset": {\
              "object": "",\
              "relation": "viewer"\
            }\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "account": {\
            "directly_related_user_types": [\
              {\
                "type": "account"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

We are considering the case that:

- Anne is the Account Manager at the West-Side branch
- Caroline is the customer for checking account number 526
- The West-Side branch is the branch that the checking account number 526 has been created at
- Checking account number 526 has a transaction, we'll call it transaction A
- The West-Side branch’s office hours is from 8am-3pm UTC

The above state translates to the following relationship tuples:

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // Anne is the Account Manager at the West-Side branch\
      {"_description":"Anne is the Account Manager at the West-Side branch","user":"user:anne","relation":"account_manager","object":"branch:west-side"},\
      // Caroline is the customer for checking account number 526\
      {"_description":"Caroline is the customer for checking account number 526","user":"user:caroline","relation":"customer","object":"account:checking-526"},\
      // The West-Side branch is the branch that the Checking account number 526 has been created at\
      {"_description":"The West-Side branch is the branch that the Checking account number 526 has been created at","user":"branch:west-side","relation":"branch","object":"account:checking-526"},\
      // Checking account number 526 is the account for transaction A\
      {"_description":"Checking account number 526 is the account for transaction A","user":"account:checking-526","relation":"account","object":"transaction:A"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             // Anne is the Account Manager at the West-Side branch
             User: "user:anne",
             Relation: "account_manager",
             Object: "branch:west-side",
        },         {
             // Caroline is the customer for checking account number 526
             User: "user:caroline",
             Relation: "customer",
             Object: "account:checking-526",
        },         {
             // The West-Side branch is the branch that the Checking account number 526 has been created at
             User: "branch:west-side",
             Relation: "branch",
             Object: "account:checking-526",
        },         {
             // Checking account number 526 is the account for transaction A
             User: "account:checking-526",
             Relation: "account",
             Object: "transaction:A",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
    // Anne is the Account Manager at the West-Side branch
       new() {
                  User = "user:anne",
                  Relation = "account_manager",
                  Object = "branch:west-side"
              },
    // Caroline is the customer for checking account number 526
       new() {
                  User = "user:caroline",
                  Relation = "customer",
                  Object = "account:checking-526"
              },
    // The West-Side branch is the branch that the Checking account number 526 has been created at
       new() {
                  User = "branch:west-side",
                  Relation = "branch",
                  Object = "account:checking-526"
              },
    // Checking account number 526 is the account for transaction A
       new() {
                  User = "account:checking-526",
                  Relation = "account",
                  Object = "transaction:A"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    # Anne is the Account Manager at the West-Side branch\
                    user="user:anne",\
                    relation="account_manager",\
                    object="branch:west-side",\
                ),\
                ClientTuple(\
                    # Caroline is the customer for checking account number 526\
                    user="user:caroline",\
                    relation="customer",\
                    object="account:checking-526",\
                ),\
                ClientTuple(\
                    # The West-Side branch is the branch that the Checking account number 526 has been created at\
                    user="branch:west-side",\
                    relation="branch",\
                    object="account:checking-526",\
                ),\
                ClientTuple(\
                    # Checking account number 526 is the account for transaction A\
                    user="account:checking-526",\
                    relation="account",\
                    object="transaction:A",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                // Anne is the Account Manager at the West-Side branch
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("account_manager")
                        ._object("branch:west-side"),
                // Caroline is the customer for checking account number 526
                new ClientTupleKey()
                        .user("user:caroline")
                        .relation("customer")
                        ._object("account:checking-526"),
                // The West-Side branch is the branch that the Checking account number 526 has been created at
                new ClientTupleKey()
                        .user("branch:west-side")
                        .relation("branch")
                        ._object("account:checking-526"),
                // Checking account number 526 is the account for transaction A
                new ClientTupleKey()
                        .user("account:checking-526")
                        .relation("account")
                        ._object("transaction:A")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"_description":"Anne is the Account Manager at the West-Side branch","user":"user:anne","relation":"account_manager","object":"branch:west-side"},{"_description":"Caroline is the customer for checking account number 526","user":"user:caroline","relation":"customer","object":"account:checking-526"},{"_description":"The West-Side branch is the branch that the Checking account number 526 has been created at","user":"branch:west-side","relation":"branch","object":"account:checking-526"},{"_description":"Checking account number 526 is the account for transaction A","user":"account:checking-526","relation":"account","object":"transaction:A"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne account_manager branch:west-side
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:caroline customer account:checking-526
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA branch:west-side branch account:checking-526
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA account:checking-526 account transaction:A

```

```codeBlockLines_e6Vv
write([\
    // Anne is the Account Manager at the West-Side branch\
    {\
      "user":"user:anne",\
      "relation":"account_manager",\
      "object":"branch:west-side"\
    },\
    // Caroline is the customer for checking account number 526\
    {\
      "user":"user:caroline",\
      "relation":"customer",\
      "object":"account:checking-526"\
    },\
    // The West-Side branch is the branch that the Checking account number 526 has been created at\
    {\
      "user":"branch:west-side",\
      "relation":"branch",\
      "object":"account:checking-526"\
    },\
    // Checking account number 526 is the account for transaction A\
    {\
      "user":"account:checking-526",\
      "relation":"account",\
      "object":"transaction:A"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

### Requirements [​](https://openfga.dev/docs/modeling/contextual-time-based-authorization\#requirements "Direct link to Requirements")

By the end of this guide we would like to validate that:

- If Anne is at the branch, and it is 12pm UTC, Anne should be able to view transaction A
- If Anne is connecting remotely at 12pm UTC but is not connected to the VPN, Anne should not be able to view transaction A
- If Anne is connecting remotely and is connected to the VPN
  - at 12pm UTC, should be able to view transaction A
  - at 6pm UTC, should not be able to view transaction A

## Step by step [​](https://openfga.dev/docs/modeling/contextual-time-based-authorization\#step-by-step "Direct link to Step by step")

In order to solve for the requirements above, we will break the problem down to three steps:

1. [Understand relationships without contextual tuples](https://openfga.dev/docs/modeling/contextual-time-based-authorization#understand-relationships-without-contextual-data). We will want to ensure that

- the customer can view a transaction tied to their account
- the account manager can view a transaction whose account is at the same branch

2. Extend the Authorization Model to [take time and ip address into consideration](https://openfga.dev/docs/modeling/contextual-time-based-authorization#take-time-and-ip-address-into-consideration)
3. [Use contextual tuples for context related checks](https://openfga.dev/docs/modeling/contextual-time-based-authorization#use-contextual-tuples-for-context-related-checks).

### Understand relationships without contextual data [​](https://openfga.dev/docs/modeling/contextual-time-based-authorization\#understand-relationships-without-contextual-data "Direct link to Understand relationships without contextual data")

With the Authorization Model and relationship tuples shown above, OpenFGA has all the information needed to

- Ensure that the customer can view a transaction tied to their account
- Ensure that the account manager can view a transaction whose account is at the same branch

We can verify that using the following checks

Anne can view transaction:A because she is an account manager of an account that is at the same branch.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'can_view',
    object: 'transaction:A',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "can_view",
    Object:   "transaction:A",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "can_view",
    Object = "transaction:A",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="can_view",
    object="transaction:A",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("can_view")
        ._object("transaction:A");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne can_view transaction:A

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"can_view","object":"transaction:A"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "can_view", // has an `can_view` relation
  object = "transaction:A", // with the object `transaction:A`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to transaction:A as can_view?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

Caroline can view transaction:A because she is a customer and the transaction is tied to her account.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:caroline',
    relation: 'can_view',
    object: 'transaction:A',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:caroline",
    Relation: "can_view",
    Object:   "transaction:A",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:caroline",
    Relation = "can_view",
    Object = "transaction:A",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:caroline",
    relation="can_view",
    object="transaction:A",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:caroline")
        .relation("can_view")
        ._object("transaction:A");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:caroline can_view transaction:A

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:caroline","relation":"can_view","object":"transaction:A"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:caroline", // check if the user `user:caroline`
  relation = "can_view", // has an `can_view` relation
  object = "transaction:A", // with the object `transaction:A`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:caroline related to transaction:A as can_view?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

Additionally, we will check that Mary, an account manager at a different branch _cannot_ view transaction A.

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // Mary is an account manager at the East-Side branch\
      {"_description":"Mary is an account manager at the East-Side branch","user":"user:mary","relation":"account_manager","object":"branch:east-side"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             // Mary is an account manager at the East-Side branch
             User: "user:mary",
             Relation: "account_manager",
             Object: "branch:east-side",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
    // Mary is an account manager at the East-Side branch
       new() {
                  User = "user:mary",
                  Relation = "account_manager",
                  Object = "branch:east-side"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    # Mary is an account manager at the East-Side branch\
                    user="user:mary",\
                    relation="account_manager",\
                    object="branch:east-side",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                // Mary is an account manager at the East-Side branch
                new ClientTupleKey()
                        .user("user:mary")
                        .relation("account_manager")
                        ._object("branch:east-side")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"_description":"Mary is an account manager at the East-Side branch","user":"user:mary","relation":"account_manager","object":"branch:east-side"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:mary account_manager branch:east-side

```

```codeBlockLines_e6Vv
write([\
    // Mary is an account manager at the East-Side branch\
    {\
      "user":"user:mary",\
      "relation":"account_manager",\
      "object":"branch:east-side"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:mary',
    relation: 'can_view',
    object: 'transaction:A',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:mary",
    Relation: "can_view",
    Object:   "transaction:A",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:mary",
    Relation = "can_view",
    Object = "transaction:A",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:mary",
    relation="can_view",
    object="transaction:A",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:mary")
        .relation("can_view")
        ._object("transaction:A");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:mary can_view transaction:A

# Response: {"allowed":false}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:mary","relation":"can_view","object":"transaction:A"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:mary", // check if the user `user:mary`
  relation = "can_view", // has an `can_view` relation
  object = "transaction:A", // with the object `transaction:A`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:mary related to transaction:A as can_view?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

Note that so far, we have not prevented Anne from viewing the transaction outside office hours, let's see if we can do better.

### Take time and IP address into consideration [​](https://openfga.dev/docs/modeling/contextual-time-based-authorization\#take-time-and-ip-address-into-consideration "Direct link to Take time and IP address into consideration")

##### Extend the authorization model [​](https://openfga.dev/docs/modeling/contextual-time-based-authorization\#extend-the-authorization-model "Direct link to Extend the authorization model")

In order to add time and ip address to our authorization model, we will add appropriate types for them. We will have a "timeslot" and an "ip-address-range" as types, and each can have users related to it as a user.

- DSL
- JSON

```codeBlockLines_e6Vv

type timeslot
  relations
    define user: [user]

```

```codeBlockLines_e6Vv
{
  "type": "timeslot",
  "relations": {
    "user": {
      "this": {}
    }
  },
  "metadata": {
    "relations": {
      "user": {
        "directly_related_user_types": [\
          {\
            "type": "user"\
          }\
        ]
      }
    }
  }
}

```

- DSL
- JSON

```codeBlockLines_e6Vv

type ip-address-range
  relations
    define user: [user]

```

```codeBlockLines_e6Vv
{
  "type": "ip-address-range",
  "relations": {
    "user": {
      "this": {}
    }
  },
  "metadata": {
    "relations": {
      "user": {
        "directly_related_user_types": [\
          {\
            "type": "user"\
          }\
        ]
      }
    }
  }
}

```

We'll also need to introduce some new relations, and modify some others.

1. On the "branch" type:

- Add "approved\_timeslot" relation to mark than a certain timeslot is approved to view transactions for accounts in this branch
- Add "approved\_ip\_address\_range" relation to mark than an ip address range is approved to view transactions for accounts in this branch
- Add "approved\_context" relation to combine the two authorizations above ( `user from approved_timeslot and user from approved_ip_address_range`), and indicate that the user is in an approved context

The branch type definition then becomes:

- DSL
- JSON

```codeBlockLines_e6Vv

type branch
  relations
    define account_manager: [user]
    define approved_ip_address_range: [ip-address-range]
    define approved_timeslot: [timeslot]
    define approved_context: user from approved_timeslot and user from approved_ip_address_range

```

```codeBlockLines_e6Vv
{
  "type": "branch",
  "relations": {
    "account_manager": {
      "this": {}
    },
    "approved_ip_address_range": {
      "this": {}
    },
    "approved_timeslot": {
      "this": {}
    },
    "approved_context": {
      "intersection": {
        "child": [\
          {\
            "tupleToUserset": {\
              "tupleset": {\
                "object": "",\
                "relation": "approved_timeslot"\
              },\
              "computedUserset": {\
                "object": "",\
                "relation": "user"\
              }\
            }\
          },\
          {\
            "tupleToUserset": {\
              "tupleset": {\
                "object": "",\
                "relation": "approved_ip_address_range"\
              },\
              "computedUserset": {\
                "object": "",\
                "relation": "user"\
              }\
            }\
          }\
        ]
      }
    }
  },
  "metadata": {
    "relations": {
      "account_manager": {
        "directly_related_user_types": [\
          {\
            "type": "user"\
          }\
        ]
      },
      "approved_ip_address_range": {
        "directly_related_user_types": [\
          {\
            "type": "ip-address-range"\
          }\
        ]
      },
      "approved_timeslot": {
        "directly_related_user_types": [\
          {\
            "type": "timeslot"\
          }\
        ]
      }
    }
  }
}

```

2. On the "account" type:

- Add "account\_manager\_viewer" relation to combine the "account\_manager" relationship and the new "approved\_context" relation from the branch
- Update the "viewer" relation definition to `customer or account_manager_viewer` where "customer" can view without being subjected to contextual authorization, while "account\_manager\_viewer" needs to be within the branch allowed context to view

The account type definition then becomes:

- DSL
- JSON

```codeBlockLines_e6Vv

type account
  relations
    define branch: [branch]
    define account_manager: account_manager from branch
    define customer: [user]
    define account_manager_viewer: account_manager and approved_context from branch
    define viewer: customer or account_manager_viewer
    define can_view: viewer

```

```codeBlockLines_e6Vv
{
  "type": "account",
  "relations": {
    "branch": {
      "this": {}
    },
    "account_manager": {
      "tupleToUserset": {
        "tupleset": {
          "object": "",
          "relation": "branch"
        },
        "computedUserset": {
          "object": "",
          "relation": "account_manager"
        }
      }
    },
    "customer": {
      "this": {}
    },
    "account_manager_viewer": {
      "intersection": {
        "child": [\
          {\
            "computedUserset": {\
              "object": "",\
              "relation": "account_manager"\
            }\
          },\
          {\
            "tupleToUserset": {\
              "tupleset": {\
                "object": "",\
                "relation": "branch"\
              },\
              "computedUserset": {\
                "object": "",\
                "relation": "approved_context"\
              }\
            }\
          }\
        ]
      }
    },
    "viewer": {
      "union": {
        "child": [\
          {\
            "computedUserset": {\
              "object": "",\
              "relation": "customer"\
            }\
          },\
          {\
            "computedUserset": {\
              "object": "",\
              "relation": "account_manager_viewer"\
            }\
          }\
        ]
      }
    },
    "can_view": {
      "computedUserset": {
        "object": "",
        "relation": "viewer"
      }
    }
  },
  "metadata": {
    "relations": {
      "branch": {
        "directly_related_user_types": [\
          {\
            "type": "branch"\
          }\
        ]
      },
      "customer": {
        "directly_related_user_types": [\
          {\
            "type": "user"\
          }\
        ]
      }
    }
  }
}

```

note

On the "transaction" type:

- Nothing will need to be done, as it will inherit the updated "viewer" relation definition from "account"

##### Add the required tuples to mark that Anne is in an approved context [​](https://openfga.dev/docs/modeling/contextual-time-based-authorization\#add-the-required-tuples-to-mark-that-anne-is-in-an-approved-context "Direct link to Add the required tuples to mark that Anne is in an approved context")

Now that we have updated our authorization model to take time and ip address into consideration, you will notice that Anne has lost access because nothing indicates that Anne is connecting from an approved ip address and time. You can verify that by issuing the following check:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'can_view',
    object: 'transaction:A',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "can_view",
    Object:   "transaction:A",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "can_view",
    Object = "transaction:A",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="can_view",
    object="transaction:A",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("can_view")
        ._object("transaction:A");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne can_view transaction:A

# Response: {"allowed":false}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"can_view","object":"transaction:A"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "can_view", // has an `can_view` relation
  object = "transaction:A", // with the object `transaction:A`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:anne related to transaction:A as can_view?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

We need to add relationship tuples to mark some approved timeslots and ip address ranges:

note

- Here we added the time slots in increments of 1 hour periods, but this is not a requirement.
- We did not add all the office hours to keep this guide shorter.

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // 11am to 12pm is within the office hours of the West-Side branch\
      {"_description":"11am to 12pm is within the office hours of the West-Side branch","user":"timeslot:11_12","relation":"approved_timeslot","object":"branch:west-side"},\
      // 12pm to 1pm is within the office hours of the West-Side branch\
      {"_description":"12pm to 1pm is within the office hours of the West-Side branch","user":"timeslot:12_13","relation":"approved_timeslot","object":"branch:west-side"},\
      // The office VPN w/ the 10.0.0.0/16 address range is approved for the West-Side branch\
      {"_description":"The office VPN w/ the 10.0.0.0/16 address range is approved for the West-Side branch","user":"ip-address-range:10.0.0.0/16","relation":"approved_ip_address_range","object":"branch:west-side"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             // 11am to 12pm is within the office hours of the West-Side branch
             User: "timeslot:11_12",
             Relation: "approved_timeslot",
             Object: "branch:west-side",
        },         {
             // 12pm to 1pm is within the office hours of the West-Side branch
             User: "timeslot:12_13",
             Relation: "approved_timeslot",
             Object: "branch:west-side",
        },         {
             // The office VPN w/ the 10.0.0.0/16 address range is approved for the West-Side branch
             User: "ip-address-range:10.0.0.0/16",
             Relation: "approved_ip_address_range",
             Object: "branch:west-side",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
    // 11am to 12pm is within the office hours of the West-Side branch
       new() {
                  User = "timeslot:11_12",
                  Relation = "approved_timeslot",
                  Object = "branch:west-side"
              },
    // 12pm to 1pm is within the office hours of the West-Side branch
       new() {
                  User = "timeslot:12_13",
                  Relation = "approved_timeslot",
                  Object = "branch:west-side"
              },
    // The office VPN w/ the 10.0.0.0/16 address range is approved for the West-Side branch
       new() {
                  User = "ip-address-range:10.0.0.0/16",
                  Relation = "approved_ip_address_range",
                  Object = "branch:west-side"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    # 11am to 12pm is within the office hours of the West-Side branch\
                    user="timeslot:11_12",\
                    relation="approved_timeslot",\
                    object="branch:west-side",\
                ),\
                ClientTuple(\
                    # 12pm to 1pm is within the office hours of the West-Side branch\
                    user="timeslot:12_13",\
                    relation="approved_timeslot",\
                    object="branch:west-side",\
                ),\
                ClientTuple(\
                    # The office VPN w/ the 10.0.0.0/16 address range is approved for the West-Side branch\
                    user="ip-address-range:10.0.0.0/16",\
                    relation="approved_ip_address_range",\
                    object="branch:west-side",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                // 11am to 12pm is within the office hours of the West-Side branch
                new ClientTupleKey()
                        .user("timeslot:11_12")
                        .relation("approved_timeslot")
                        ._object("branch:west-side"),
                // 12pm to 1pm is within the office hours of the West-Side branch
                new ClientTupleKey()
                        .user("timeslot:12_13")
                        .relation("approved_timeslot")
                        ._object("branch:west-side"),
                // The office VPN w/ the 10.0.0.0/16 address range is approved for the West-Side branch
                new ClientTupleKey()
                        .user("ip-address-range:10.0.0.0/16")
                        .relation("approved_ip_address_range")
                        ._object("branch:west-side")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"_description":"11am to 12pm is within the office hours of the West-Side branch","user":"timeslot:11_12","relation":"approved_timeslot","object":"branch:west-side"},{"_description":"12pm to 1pm is within the office hours of the West-Side branch","user":"timeslot:12_13","relation":"approved_timeslot","object":"branch:west-side"},{"_description":"The office VPN w/ the 10.0.0.0/16 address range is approved for the West-Side branch","user":"ip-address-range:10.0.0.0/16","relation":"approved_ip_address_range","object":"branch:west-side"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA timeslot:11_12 approved_timeslot branch:west-side
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA timeslot:12_13 approved_timeslot branch:west-side
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA ip-address-range:10.0.0.0/16 approved_ip_address_range branch:west-side

```

```codeBlockLines_e6Vv
write([\
    // 11am to 12pm is within the office hours of the West-Side branch\
    {\
      "user":"timeslot:11_12",\
      "relation":"approved_timeslot",\
      "object":"branch:west-side"\
    },\
    // 12pm to 1pm is within the office hours of the West-Side branch\
    {\
      "user":"timeslot:12_13",\
      "relation":"approved_timeslot",\
      "object":"branch:west-side"\
    },\
    // The office VPN w/ the 10.0.0.0/16 address range is approved for the West-Side branch\
    {\
      "user":"ip-address-range:10.0.0.0/16",\
      "relation":"approved_ip_address_range",\
      "object":"branch:west-side"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

Now that we have added the allowed timeslots and ip address ranges we need to add the following relationship tuples to give Anne access.

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // Anne is connecting from within the 10.0.0.0/16 ip address range\
      {"_description":"Anne is connecting from within the 10.0.0.0/16 ip address range","user":"user:anne","relation":"user","object":"ip-address-range:10.0.0.0/16"},\
      // Anne is connecting between 12pm and 1pm\
      {"_description":"Anne is connecting between 12pm and 1pm","user":"user:anne","relation":"user","object":"timeslot:12_13"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             // Anne is connecting from within the 10.0.0.0/16 ip address range
             User: "user:anne",
             Relation: "user",
             Object: "ip-address-range:10.0.0.0/16",
        },         {
             // Anne is connecting between 12pm and 1pm
             User: "user:anne",
             Relation: "user",
             Object: "timeslot:12_13",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
    // Anne is connecting from within the 10.0.0.0/16 ip address range
       new() {
                  User = "user:anne",
                  Relation = "user",
                  Object = "ip-address-range:10.0.0.0/16"
              },
    // Anne is connecting between 12pm and 1pm
       new() {
                  User = "user:anne",
                  Relation = "user",
                  Object = "timeslot:12_13"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    # Anne is connecting from within the 10.0.0.0/16 ip address range\
                    user="user:anne",\
                    relation="user",\
                    object="ip-address-range:10.0.0.0/16",\
                ),\
                ClientTuple(\
                    # Anne is connecting between 12pm and 1pm\
                    user="user:anne",\
                    relation="user",\
                    object="timeslot:12_13",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                // Anne is connecting from within the 10.0.0.0/16 ip address range
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("user")
                        ._object("ip-address-range:10.0.0.0/16"),
                // Anne is connecting between 12pm and 1pm
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("user")
                        ._object("timeslot:12_13")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"_description":"Anne is connecting from within the 10.0.0.0/16 ip address range","user":"user:anne","relation":"user","object":"ip-address-range:10.0.0.0/16"},{"_description":"Anne is connecting between 12pm and 1pm","user":"user:anne","relation":"user","object":"timeslot:12_13"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne user ip-address-range:10.0.0.0/16
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne user timeslot:12_13

```

```codeBlockLines_e6Vv
write([\
    // Anne is connecting from within the 10.0.0.0/16 ip address range\
    {\
      "user":"user:anne",\
      "relation":"user",\
      "object":"ip-address-range:10.0.0.0/16"\
    },\
    // Anne is connecting between 12pm and 1pm\
    {\
      "user":"user:anne",\
      "relation":"user",\
      "object":"timeslot:12_13"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

If we have the above two tuples in the system, when checking whether Anne can view transaction A we should get a response stating that Anne can view it.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'can_view',
    object: 'transaction:A',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "can_view",
    Object:   "transaction:A",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "can_view",
    Object = "transaction:A",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="can_view",
    object="transaction:A",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("can_view")
        ._object("transaction:A");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne can_view transaction:A

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"can_view","object":"transaction:A"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "can_view", // has an `can_view` relation
  object = "transaction:A", // with the object `transaction:A`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to transaction:A as can_view?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

### Use contextual tuples for context related checks [​](https://openfga.dev/docs/modeling/contextual-time-based-authorization\#use-contextual-tuples-for-context-related-checks "Direct link to Use contextual tuples for context related checks")

Now that we know we can authorize based on present state, we have a different problem to solve. We are storing the tuples in the state in order for OpenFGA to evaluate them, which means that:

- For the case of the IP Address, we are not able to truly authorize based on the context of the request. E.g. if Anne was trying to connect from the phone and from the PC at the same time, and only the PC was connected to the VPN, how would OpenFGA know to deny one and allow the other if the data is stored in the state?
- On every check call we have to first write the correct tuples, then call the Check api, then clean up those tuples. This causes a substantial increase in latency as well as incorrect answers for requests happening in parallel (they could write/delete each other's tuples).

How do we solve this? How do we tie the above two tuples to the context of the request instead of the system state?

First, we will need to undo adding the stored relationship tuples where Anne is connecting from within the 10.0.0.0/16 ip address range and Anne connecting between 12pm and 1pm

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  deletes: [\
      // Remove stored tuples where Anne is connecting from within the 10.0.0.0/16 ip address range\
      { user: 'user:anne', relation: 'user', object: 'ip-address-range:10.0.0.0/16'},\
      // Remove stored tuples where Anne is connecting between 12pm and 1pm\
      { user: 'user:anne', relation: 'user', object: 'timeslot:12_13'}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Deletes: []ClientTupleKeyWithoutCondition{
        {
             // Remove stored tuples where Anne is connecting from within the 10.0.0.0/16 ip address range
             User: "user:anne",
             Relation: "user",
             Object: "ip-address-range:10.0.0.0/16",
        },         {
             // Remove stored tuples where Anne is connecting between 12pm and 1pm
             User: "user:anne",
             Relation: "user",
             Object: "timeslot:12_13",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Deletes = new List<ClientTupleKeyWithoutCondition>() {
    // Remove stored tuples where Anne is connecting from within the 10.0.0.0/16 ip address range
    new() { User = "user:anne", Relation = "user", Object = "ip-address-range:10.0.0.0/16" },
    // Remove stored tuples where Anne is connecting between 12pm and 1pm
    new() { User = "user:anne", Relation = "user", Object = "timeslot:12_13" }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        deletes=[\
                ClientTuple(\
                    # Remove stored tuples where Anne is connecting from within the 10.0.0.0/16 ip address range\
                    user="user:anne",\
                    relation="user",\
                    object="ip-address-range:10.0.0.0/16",\
                ),\
                ClientTuple(\
                    # Remove stored tuples where Anne is connecting between 12pm and 1pm\
                    user="user:anne",\
                    relation="user",\
                    object="timeslot:12_13",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .deletes(List.of(
                // Remove stored tuples where Anne is connecting from within the 10.0.0.0/16 ip address range
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("user")
                        ._object("ip-address-range:10.0.0.0/16"),
                // Remove stored tuples where Anne is connecting between 12pm and 1pm
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("user")
                        ._object("timeslot:12_13")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"deletes": { "tuple_keys" : [{"_description":"Remove stored tuples where Anne is connecting from within the 10.0.0.0/16 ip address range","user":"user:anne","relation":"user","object":"ip-address-range:10.0.0.0/16"},{"_description":"Remove stored tuples where Anne is connecting between 12pm and 1pm","user":"user:anne","relation":"user","object":"timeslot:12_13"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv

fga tuple delete --store-id=${FGA_STORE_ID} user:anne user ip-address-range:10.0.0.0/16
fga tuple delete --store-id=${FGA_STORE_ID} user:anne user timeslot:12_13

```

```codeBlockLines_e6Vv

delete([\
    // Remove stored tuples where Anne is connecting from within the 10.0.0.0/16 ip address range\
    {\
      "user":"user:anne",\
      "relation":"user",\
      "object":"ip-address-range:10.0.0.0/16"\
    },\
    // Remove stored tuples where Anne is connecting between 12pm and 1pm\
    {\
      "user":"user:anne",\
      "relation":"user",\
      "object":"timeslot:12_13"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

For Check calls, OpenFGA has a concept called " [Contextual Tuples](https://openfga.dev/docs/concepts#what-are-contextual-tuples)". Contextual Tuples are tuples that do **not** exist in the system state and are not written beforehand to OpenFGA. They are tuples that are sent alongside the Check request and will be treated as _if_ they already exist in the state for the context of that particular Check call.

When Anne is connecting from an allowed ip address range and timeslot, OpenFGA will return `{"allowed":true}`:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'can_view',
    object: 'transaction:A',
    contextualTuples: [\
      {"_description":"Anne is connecting from within the 10.0.0.0/16 ip address range","user":"user:anne","relation":"user","object":"ip-address-range:10.0.0.0/16"},{"_description":"Anne is connecting between 12pm and 1pm","user":"user:anne","relation":"user","object":"timeslot:12_13"}\
    ],
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "can_view",
    Object:   "transaction:A",
    ContextualTuples: []ClientTupleKey{
        {
            User:     "user:anne",
            Relation: "user",
            Object:   "ip-address-range:10.0.0.0/16",
        },
        {
            User:     "user:anne",
            Relation: "user",
            Object:   "timeslot:12_13",
        },
    },
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "can_view",
    Object = "transaction:A",,
    ContextualTuples = new List<ClientTupleKey>({
    new(user: "user:anne", relation: "user", _object: "ip-address-range:10.0.0.0/16"),
    new(user: "user:anne", relation: "user", _object: "timeslot:12_13")
})

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="can_view",
    object="transaction:A",
    contextual_tuples=[\
        ClientTuple(user="user:anne", relation="user", object="ip-address-range:10.0.0.0/16"),\
                ClientTuple(user="user:anne", relation="user", object="timeslot:12_13")\
    ],
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("can_view")
        ._object("transaction:A")
        .contextualTuples(
                List.of(
                        new ClientTupleKey()
                                .user("user:anne")
                                .relation("user")
                                ._object("ip-address-range:10.0.0.0/16"),
                        new ClientTupleKey()
                                .user("user:anne")
                                .relation("user")
                                ._object("timeslot:12_13")
                ));

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne can_view transaction:A --contextual-tuple "user:anne user ip-address-range:10.0.0.0/16"  --contextual-tuple "user:anne user timeslot:12_13"

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"can_view","object":"transaction:A"},"contextual_tuples":{"tuple_keys":[{"user":"user:anne","relation":"user","object":"ip-address-range:10.0.0.0/16"},{"user":"user:anne","relation":"user","object":"timeslot:12_13"}]}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "can_view", // has an `can_view` relation
  object = "transaction:A", // with the object `transaction:A`
  contextual_tuples = [ // Assuming the following is true\
    {user = "user:anne", relation = "user", object = "ip-address-range:10.0.0.0/16"},\
    {user = "user:anne", relation = "user", object = "timeslot:12_13"}\
  ], authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to transaction:A as can_view?

# Note: Contextual Tuples are not supported on the playground

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

When Anne is connecting from a denied ip address range or timeslot, OpenFGA will return `{"allowed":false}`:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'can_view',
    object: 'transaction:A',
    contextualTuples: [\
      {"_description":"Anne is connecting from within the 10.0.0.0/16 ip address range","user":"user:anne","relation":"user","object":"ip-address-range:10.0.0.0/16"},{"_description":"Anne is connecting between 6pm and 7pm","user":"user:anne","relation":"user","object":"timeslot:18_19"}\
    ],
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "can_view",
    Object:   "transaction:A",
    ContextualTuples: []ClientTupleKey{
        {
            User:     "user:anne",
            Relation: "user",
            Object:   "ip-address-range:10.0.0.0/16",
        },
        {
            User:     "user:anne",
            Relation: "user",
            Object:   "timeslot:18_19",
        },
    },
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "can_view",
    Object = "transaction:A",,
    ContextualTuples = new List<ClientTupleKey>({
    new(user: "user:anne", relation: "user", _object: "ip-address-range:10.0.0.0/16"),
    new(user: "user:anne", relation: "user", _object: "timeslot:18_19")
})

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="can_view",
    object="transaction:A",
    contextual_tuples=[\
        ClientTuple(user="user:anne", relation="user", object="ip-address-range:10.0.0.0/16"),\
                ClientTuple(user="user:anne", relation="user", object="timeslot:18_19")\
    ],
)

response = await fga_client.check(body, options)

# response.allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("can_view")
        ._object("transaction:A")
        .contextualTuples(
                List.of(
                        new ClientTupleKey()
                                .user("user:anne")
                                .relation("user")
                                ._object("ip-address-range:10.0.0.0/16"),
                        new ClientTupleKey()
                                .user("user:anne")
                                .relation("user")
                                ._object("timeslot:18_19")
                ));

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne can_view transaction:A --contextual-tuple "user:anne user ip-address-range:10.0.0.0/16"  --contextual-tuple "user:anne user timeslot:18_19"

# Response: {"allowed":false}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"can_view","object":"transaction:A"},"contextual_tuples":{"tuple_keys":[{"user":"user:anne","relation":"user","object":"ip-address-range:10.0.0.0/16"},{"user":"user:anne","relation":"user","object":"timeslot:18_19"}]}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "can_view", // has an `can_view` relation
  object = "transaction:A", // with the object `transaction:A`
  contextual_tuples = [ // Assuming the following is true\
    {user = "user:anne", relation = "user", object = "ip-address-range:10.0.0.0/16"},\
    {user = "user:anne", relation = "user", object = "timeslot:18_19"}\
  ], authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:anne related to transaction:A as can_view?

# Note: Contextual Tuples are not supported on the playground

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

## Summary [​](https://openfga.dev/docs/modeling/contextual-time-based-authorization\#summary "Direct link to Summary")

Final version of the Authorization Model and Relationship tuples

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type branch
  relations
    define account_manager: [user]
    define approved_ip_address_range: [ip-address-range]
    define approved_timeslot: [timeslot]
    define approved_context: user from approved_timeslot and user from approved_ip_address_range

type account
  relations
    define branch: [branch]
    define account_manager: account_manager from branch
    define customer: [user]
    define account_manager_viewer: account_manager and approved_context from branch
    define viewer: customer or account_manager_viewer
    define can_view: viewer

type transaction
  relations
    define account: [account]
    define can_view: viewer from account

type timeslot
  relations
    define user: [user]

type ip-address-range
  relations
    define user: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "branch",\
      "relations": {\
        "account_manager": {\
          "this": {}\
        },\
        "approved_ip_address_range": {\
          "this": {}\
        },\
        "approved_timeslot": {\
          "this": {}\
        },\
        "approved_context": {\
          "intersection": {\
            "child": [\
              {\
                "tupleToUserset": {\
                  "tupleset": {\
                    "object": "",\
                    "relation": "approved_timeslot"\
                  },\
                  "computedUserset": {\
                    "object": "",\
                    "relation": "user"\
                  }\
                }\
              },\
              {\
                "tupleToUserset": {\
                  "tupleset": {\
                    "object": "",\
                    "relation": "approved_ip_address_range"\
                  },\
                  "computedUserset": {\
                    "object": "",\
                    "relation": "user"\
                  }\
                }\
              }\
            ]\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "account_manager": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "approved_ip_address_range": {\
            "directly_related_user_types": [\
              {\
                "type": "ip-address-range"\
              }\
            ]\
          },\
          "approved_timeslot": {\
            "directly_related_user_types": [\
              {\
                "type": "timeslot"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "account",\
      "relations": {\
        "branch": {\
          "this": {}\
        },\
        "account_manager": {\
          "tupleToUserset": {\
            "tupleset": {\
              "object": "",\
              "relation": "branch"\
            },\
            "computedUserset": {\
              "object": "",\
              "relation": "account_manager"\
            }\
          }\
        },\
        "customer": {\
          "this": {}\
        },\
        "account_manager_viewer": {\
          "intersection": {\
            "child": [\
              {\
                "computedUserset": {\
                  "object": "",\
                  "relation": "account_manager"\
                }\
              },\
              {\
                "tupleToUserset": {\
                  "tupleset": {\
                    "object": "",\
                    "relation": "branch"\
                  },\
                  "computedUserset": {\
                    "object": "",\
                    "relation": "approved_context"\
                  }\
                }\
              }\
            ]\
          }\
        },\
        "viewer": {\
          "union": {\
            "child": [\
              {\
                "computedUserset": {\
                  "object": "",\
                  "relation": "customer"\
                }\
              },\
              {\
                "computedUserset": {\
                  "object": "",\
                  "relation": "account_manager_viewer"\
                }\
              }\
            ]\
          }\
        },\
        "can_view": {\
          "computedUserset": {\
            "object": "",\
            "relation": "viewer"\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "branch": {\
            "directly_related_user_types": [\
              {\
                "type": "branch"\
              }\
            ]\
          },\
          "customer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "transaction",\
      "relations": {\
        "account": {\
          "this": {}\
        },\
        "can_view": {\
          "tupleToUserset": {\
            "tupleset": {\
              "object": "",\
              "relation": "account"\
            },\
            "computedUserset": {\
              "object": "",\
              "relation": "viewer"\
            }\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "account": {\
            "directly_related_user_types": [\
              {\
                "type": "account"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "timeslot",\
      "relations": {\
        "user": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "user": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "ip-address-range",\
      "relations": {\
        "user": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "user": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // Anne is the Account Manager at the West-Side branch\
      {"_description":"Anne is the Account Manager at the West-Side branch","user":"user:anne","relation":"account_manager","object":"branch:west-side"},\
      // Caroline is the customer for checking account number 526\
      {"_description":"Caroline is the customer for checking account number 526","user":"user:caroline","relation":"customer","object":"account:checking-526"},\
      // The West-Side branch is the branch that the Checking account number 526 has been created at\
      {"_description":"The West-Side branch is the branch that the Checking account number 526 has been created at","user":"branch:west-side","relation":"branch","object":"account:checking-526"},\
      // Checking account number 526 is the account for transaction A\
      {"_description":"Checking account number 526 is the account for transaction A","user":"account:checking-526","relation":"account","object":"transaction:A"},\
      // 8am to 9am is within the office hours of the West-Side branch\
      {"_description":"8am to 9am is within the office hours of the West-Side branch","user":"timeslot:8_9","relation":"approved_timeslot","object":"branch:west-side"},\
      // 9am to 10am is within the office hours of the West-Side branch\
      {"_description":"9am to 10am is within the office hours of the West-Side branch","user":"timeslot:9_10","relation":"approved_timeslot","object":"branch:west-side"},\
      // 10am to 11am is within the office hours of the West-Side branch\
      {"_description":"10am to 11am is within the office hours of the West-Side branch","user":"timeslot:10_11","relation":"approved_timeslot","object":"branch:west-side"},\
      // 11am to 12pm is within the office hours of the West-Side branch\
      {"_description":"11am to 12pm is within the office hours of the West-Side branch","user":"timeslot:11_12","relation":"approved_timeslot","object":"branch:west-side"},\
      // 12pm to 1pm is within the office hours of the West-Side branch\
      {"_description":"12pm to 1pm is within the office hours of the West-Side branch","user":"timeslot:12_13","relation":"approved_timeslot","object":"branch:west-side"},\
      // 1pm to 2pm is within the office hours of the West-Side branch\
      {"_description":"1pm to 2pm is within the office hours of the West-Side branch","user":"timeslot:13_14","relation":"approved_timeslot","object":"branch:west-side"},\
      // 2pm to 3pm is within the office hours of the West-Side branch\
      {"_description":"2pm to 3pm is within the office hours of the West-Side branch","user":"timeslot:14_15","relation":"approved_timeslot","object":"branch:west-side"},\
      // The office VPN w/ the 10.0.0.0/16 address range is approved for the West-Side branch\
      {"_description":"The office VPN w/ the 10.0.0.0/16 address range is approved for the West-Side branch","user":"ip-address-range:10.0.0.0/16","relation":"approved_ip_address_range","object":"branch:west-side"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             // Anne is the Account Manager at the West-Side branch
             User: "user:anne",
             Relation: "account_manager",
             Object: "branch:west-side",
        },         {
             // Caroline is the customer for checking account number 526
             User: "user:caroline",
             Relation: "customer",
             Object: "account:checking-526",
        },         {
             // The West-Side branch is the branch that the Checking account number 526 has been created at
             User: "branch:west-side",
             Relation: "branch",
             Object: "account:checking-526",
        },         {
             // Checking account number 526 is the account for transaction A
             User: "account:checking-526",
             Relation: "account",
             Object: "transaction:A",
        },         {
             // 8am to 9am is within the office hours of the West-Side branch
             User: "timeslot:8_9",
             Relation: "approved_timeslot",
             Object: "branch:west-side",
        },         {
             // 9am to 10am is within the office hours of the West-Side branch
             User: "timeslot:9_10",
             Relation: "approved_timeslot",
             Object: "branch:west-side",
        },         {
             // 10am to 11am is within the office hours of the West-Side branch
             User: "timeslot:10_11",
             Relation: "approved_timeslot",
             Object: "branch:west-side",
        },         {
             // 11am to 12pm is within the office hours of the West-Side branch
             User: "timeslot:11_12",
             Relation: "approved_timeslot",
             Object: "branch:west-side",
        },         {
             // 12pm to 1pm is within the office hours of the West-Side branch
             User: "timeslot:12_13",
             Relation: "approved_timeslot",
             Object: "branch:west-side",
        },         {
             // 1pm to 2pm is within the office hours of the West-Side branch
             User: "timeslot:13_14",
             Relation: "approved_timeslot",
             Object: "branch:west-side",
        },         {
             // 2pm to 3pm is within the office hours of the West-Side branch
             User: "timeslot:14_15",
             Relation: "approved_timeslot",
             Object: "branch:west-side",
        },         {
             // The office VPN w/ the 10.0.0.0/16 address range is approved for the West-Side branch
             User: "ip-address-range:10.0.0.0/16",
             Relation: "approved_ip_address_range",
             Object: "branch:west-side",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
    // Anne is the Account Manager at the West-Side branch
       new() {
                  User = "user:anne",
                  Relation = "account_manager",
                  Object = "branch:west-side"
              },
    // Caroline is the customer for checking account number 526
       new() {
                  User = "user:caroline",
                  Relation = "customer",
                  Object = "account:checking-526"
              },
    // The West-Side branch is the branch that the Checking account number 526 has been created at
       new() {
                  User = "branch:west-side",
                  Relation = "branch",
                  Object = "account:checking-526"
              },
    // Checking account number 526 is the account for transaction A
       new() {
                  User = "account:checking-526",
                  Relation = "account",
                  Object = "transaction:A"
              },
    // 8am to 9am is within the office hours of the West-Side branch
       new() {
                  User = "timeslot:8_9",
                  Relation = "approved_timeslot",
                  Object = "branch:west-side"
              },
    // 9am to 10am is within the office hours of the West-Side branch
       new() {
                  User = "timeslot:9_10",
                  Relation = "approved_timeslot",
                  Object = "branch:west-side"
              },
    // 10am to 11am is within the office hours of the West-Side branch
       new() {
                  User = "timeslot:10_11",
                  Relation = "approved_timeslot",
                  Object = "branch:west-side"
              },
    // 11am to 12pm is within the office hours of the West-Side branch
       new() {
                  User = "timeslot:11_12",
                  Relation = "approved_timeslot",
                  Object = "branch:west-side"
              },
    // 12pm to 1pm is within the office hours of the West-Side branch
       new() {
                  User = "timeslot:12_13",
                  Relation = "approved_timeslot",
                  Object = "branch:west-side"
              },
    // 1pm to 2pm is within the office hours of the West-Side branch
       new() {
                  User = "timeslot:13_14",
                  Relation = "approved_timeslot",
                  Object = "branch:west-side"
              },
    // 2pm to 3pm is within the office hours of the West-Side branch
       new() {
                  User = "timeslot:14_15",
                  Relation = "approved_timeslot",
                  Object = "branch:west-side"
              },
    // The office VPN w/ the 10.0.0.0/16 address range is approved for the West-Side branch
       new() {
                  User = "ip-address-range:10.0.0.0/16",
                  Relation = "approved_ip_address_range",
                  Object = "branch:west-side"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    # Anne is the Account Manager at the West-Side branch\
                    user="user:anne",\
                    relation="account_manager",\
                    object="branch:west-side",\
                ),\
                ClientTuple(\
                    # Caroline is the customer for checking account number 526\
                    user="user:caroline",\
                    relation="customer",\
                    object="account:checking-526",\
                ),\
                ClientTuple(\
                    # The West-Side branch is the branch that the Checking account number 526 has been created at\
                    user="branch:west-side",\
                    relation="branch",\
                    object="account:checking-526",\
                ),\
                ClientTuple(\
                    # Checking account number 526 is the account for transaction A\
                    user="account:checking-526",\
                    relation="account",\
                    object="transaction:A",\
                ),\
                ClientTuple(\
                    # 8am to 9am is within the office hours of the West-Side branch\
                    user="timeslot:8_9",\
                    relation="approved_timeslot",\
                    object="branch:west-side",\
                ),\
                ClientTuple(\
                    # 9am to 10am is within the office hours of the West-Side branch\
                    user="timeslot:9_10",\
                    relation="approved_timeslot",\
                    object="branch:west-side",\
                ),\
                ClientTuple(\
                    # 10am to 11am is within the office hours of the West-Side branch\
                    user="timeslot:10_11",\
                    relation="approved_timeslot",\
                    object="branch:west-side",\
                ),\
                ClientTuple(\
                    # 11am to 12pm is within the office hours of the West-Side branch\
                    user="timeslot:11_12",\
                    relation="approved_timeslot",\
                    object="branch:west-side",\
                ),\
                ClientTuple(\
                    # 12pm to 1pm is within the office hours of the West-Side branch\
                    user="timeslot:12_13",\
                    relation="approved_timeslot",\
                    object="branch:west-side",\
                ),\
                ClientTuple(\
                    # 1pm to 2pm is within the office hours of the West-Side branch\
                    user="timeslot:13_14",\
                    relation="approved_timeslot",\
                    object="branch:west-side",\
                ),\
                ClientTuple(\
                    # 2pm to 3pm is within the office hours of the West-Side branch\
                    user="timeslot:14_15",\
                    relation="approved_timeslot",\
                    object="branch:west-side",\
                ),\
                ClientTuple(\
                    # The office VPN w/ the 10.0.0.0/16 address range is approved for the West-Side branch\
                    user="ip-address-range:10.0.0.0/16",\
                    relation="approved_ip_address_range",\
                    object="branch:west-side",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                // Anne is the Account Manager at the West-Side branch
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("account_manager")
                        ._object("branch:west-side"),
                // Caroline is the customer for checking account number 526
                new ClientTupleKey()
                        .user("user:caroline")
                        .relation("customer")
                        ._object("account:checking-526"),
                // The West-Side branch is the branch that the Checking account number 526 has been created at
                new ClientTupleKey()
                        .user("branch:west-side")
                        .relation("branch")
                        ._object("account:checking-526"),
                // Checking account number 526 is the account for transaction A
                new ClientTupleKey()
                        .user("account:checking-526")
                        .relation("account")
                        ._object("transaction:A"),
                // 8am to 9am is within the office hours of the West-Side branch
                new ClientTupleKey()
                        .user("timeslot:8_9")
                        .relation("approved_timeslot")
                        ._object("branch:west-side"),
                // 9am to 10am is within the office hours of the West-Side branch
                new ClientTupleKey()
                        .user("timeslot:9_10")
                        .relation("approved_timeslot")
                        ._object("branch:west-side"),
                // 10am to 11am is within the office hours of the West-Side branch
                new ClientTupleKey()
                        .user("timeslot:10_11")
                        .relation("approved_timeslot")
                        ._object("branch:west-side"),
                // 11am to 12pm is within the office hours of the West-Side branch
                new ClientTupleKey()
                        .user("timeslot:11_12")
                        .relation("approved_timeslot")
                        ._object("branch:west-side"),
                // 12pm to 1pm is within the office hours of the West-Side branch
                new ClientTupleKey()
                        .user("timeslot:12_13")
                        .relation("approved_timeslot")
                        ._object("branch:west-side"),
                // 1pm to 2pm is within the office hours of the West-Side branch
                new ClientTupleKey()
                        .user("timeslot:13_14")
                        .relation("approved_timeslot")
                        ._object("branch:west-side"),
                // 2pm to 3pm is within the office hours of the West-Side branch
                new ClientTupleKey()
                        .user("timeslot:14_15")
                        .relation("approved_timeslot")
                        ._object("branch:west-side"),
                // The office VPN w/ the 10.0.0.0/16 address range is approved for the West-Side branch
                new ClientTupleKey()
                        .user("ip-address-range:10.0.0.0/16")
                        .relation("approved_ip_address_range")
                        ._object("branch:west-side")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"_description":"Anne is the Account Manager at the West-Side branch","user":"user:anne","relation":"account_manager","object":"branch:west-side"},{"_description":"Caroline is the customer for checking account number 526","user":"user:caroline","relation":"customer","object":"account:checking-526"},{"_description":"The West-Side branch is the branch that the Checking account number 526 has been created at","user":"branch:west-side","relation":"branch","object":"account:checking-526"},{"_description":"Checking account number 526 is the account for transaction A","user":"account:checking-526","relation":"account","object":"transaction:A"},{"_description":"8am to 9am is within the office hours of the West-Side branch","user":"timeslot:8_9","relation":"approved_timeslot","object":"branch:west-side"},{"_description":"9am to 10am is within the office hours of the West-Side branch","user":"timeslot:9_10","relation":"approved_timeslot","object":"branch:west-side"},{"_description":"10am to 11am is within the office hours of the West-Side branch","user":"timeslot:10_11","relation":"approved_timeslot","object":"branch:west-side"},{"_description":"11am to 12pm is within the office hours of the West-Side branch","user":"timeslot:11_12","relation":"approved_timeslot","object":"branch:west-side"},{"_description":"12pm to 1pm is within the office hours of the West-Side branch","user":"timeslot:12_13","relation":"approved_timeslot","object":"branch:west-side"},{"_description":"1pm to 2pm is within the office hours of the West-Side branch","user":"timeslot:13_14","relation":"approved_timeslot","object":"branch:west-side"},{"_description":"2pm to 3pm is within the office hours of the West-Side branch","user":"timeslot:14_15","relation":"approved_timeslot","object":"branch:west-side"},{"_description":"The office VPN w/ the 10.0.0.0/16 address range is approved for the West-Side branch","user":"ip-address-range:10.0.0.0/16","relation":"approved_ip_address_range","object":"branch:west-side"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne account_manager branch:west-side
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:caroline customer account:checking-526
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA branch:west-side branch account:checking-526
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA account:checking-526 account transaction:A
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA timeslot:8_9 approved_timeslot branch:west-side
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA timeslot:9_10 approved_timeslot branch:west-side
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA timeslot:10_11 approved_timeslot branch:west-side
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA timeslot:11_12 approved_timeslot branch:west-side
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA timeslot:12_13 approved_timeslot branch:west-side
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA timeslot:13_14 approved_timeslot branch:west-side
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA timeslot:14_15 approved_timeslot branch:west-side
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA ip-address-range:10.0.0.0/16 approved_ip_address_range branch:west-side

```

```codeBlockLines_e6Vv
write([\
    // Anne is the Account Manager at the West-Side branch\
    {\
      "user":"user:anne",\
      "relation":"account_manager",\
      "object":"branch:west-side"\
    },\
    // Caroline is the customer for checking account number 526\
    {\
      "user":"user:caroline",\
      "relation":"customer",\
      "object":"account:checking-526"\
    },\
    // The West-Side branch is the branch that the Checking account number 526 has been created at\
    {\
      "user":"branch:west-side",\
      "relation":"branch",\
      "object":"account:checking-526"\
    },\
    // Checking account number 526 is the account for transaction A\
    {\
      "user":"account:checking-526",\
      "relation":"account",\
      "object":"transaction:A"\
    },\
    // 8am to 9am is within the office hours of the West-Side branch\
    {\
      "user":"timeslot:8_9",\
      "relation":"approved_timeslot",\
      "object":"branch:west-side"\
    },\
    // 9am to 10am is within the office hours of the West-Side branch\
    {\
      "user":"timeslot:9_10",\
      "relation":"approved_timeslot",\
      "object":"branch:west-side"\
    },\
    // 10am to 11am is within the office hours of the West-Side branch\
    {\
      "user":"timeslot:10_11",\
      "relation":"approved_timeslot",\
      "object":"branch:west-side"\
    },\
    // 11am to 12pm is within the office hours of the West-Side branch\
    {\
      "user":"timeslot:11_12",\
      "relation":"approved_timeslot",\
      "object":"branch:west-side"\
    },\
    // 12pm to 1pm is within the office hours of the West-Side branch\
    {\
      "user":"timeslot:12_13",\
      "relation":"approved_timeslot",\
      "object":"branch:west-side"\
    },\
    // 1pm to 2pm is within the office hours of the West-Side branch\
    {\
      "user":"timeslot:13_14",\
      "relation":"approved_timeslot",\
      "object":"branch:west-side"\
    },\
    // 2pm to 3pm is within the office hours of the West-Side branch\
    {\
      "user":"timeslot:14_15",\
      "relation":"approved_timeslot",\
      "object":"branch:west-side"\
    },\
    // The office VPN w/ the 10.0.0.0/16 address range is approved for the West-Side branch\
    {\
      "user":"ip-address-range:10.0.0.0/16",\
      "relation":"approved_ip_address_range",\
      "object":"branch:west-side"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

Warning

Contextual tuples:

- Are not persisted in the store.
- Are only supported on the [Check API endpoint](https://openfga.dev/api/service#Relationship%20Queries/Check) and [ListObjects API endpoint](https://openfga.dev/api/service#Relationship%20Queries/ListObjects). They are not supported on read, expand and other endpoints.
- If you are using the [Read Changes API endpoint](https://openfga.dev/api/service#Relationship%20Tuples/ReadChanges) to build a permission aware search index, note that it will not be trivial to take contextual tuples into account.

### Taking it a step further: Banks as a service authorization [​](https://openfga.dev/docs/modeling/contextual-time-based-authorization\#taking-it-a-step-further-banks-as-a-service-authorization "Direct link to Taking it a step further: Banks as a service authorization")

In order to keep this guide concise, we assumed you were modeling for a single bank. What if you were offering a multi-tenant service where each bank is a single tenant?

In that case, we can extend the model like so:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type bank
  relations
    define admin: [user]

type branch
  relations
    define bank: [bank]
    define account_manager: [user]
    define approved_ip_address_range: [ip-address-range]
    define approved_timeslot: [timeslot]
    define approved_context: user from approved_timeslot and user from approved_ip_address_range

type account
  relations
    define branch: [branch]
    define account_manager: account_manager from branch
    define customer: [user]
    define account_manager_viewer: account_manager and approved_context from branch
    define viewer: customer or account_manager_viewer
    define can_view: viewer

type transaction
  relations
    define account: [account]
    define can_view: viewer from account

type timeslot
  relations
    define user: [user]

type ip-address-range
  relations
    define user: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "bank",\
      "relations": {\
        "admin": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "admin": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "branch",\
      "relations": {\
        "bank": {\
          "this": {}\
        },\
        "account_manager": {\
          "this": {}\
        },\
        "approved_ip_address_range": {\
          "this": {}\
        },\
        "approved_timeslot": {\
          "this": {}\
        },\
        "approved_context": {\
          "intersection": {\
            "child": [\
              {\
                "tupleToUserset": {\
                  "tupleset": {\
                    "object": "",\
                    "relation": "approved_timeslot"\
                  },\
                  "computedUserset": {\
                    "object": "",\
                    "relation": "user"\
                  }\
                }\
              },\
              {\
                "tupleToUserset": {\
                  "tupleset": {\
                    "object": "",\
                    "relation": "approved_ip_address_range"\
                  },\
                  "computedUserset": {\
                    "object": "",\
                    "relation": "user"\
                  }\
                }\
              }\
            ]\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "bank": {\
            "directly_related_user_types": [\
              {\
                "type": "bank"\
              }\
            ]\
          },\
          "account_manager": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "approved_ip_address_range": {\
            "directly_related_user_types": [\
              {\
                "type": "ip-address-range"\
              }\
            ]\
          },\
          "approved_timeslot": {\
            "directly_related_user_types": [\
              {\
                "type": "timeslot"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "account",\
      "relations": {\
        "branch": {\
          "this": {}\
        },\
        "account_manager": {\
          "tupleToUserset": {\
            "tupleset": {\
              "object": "",\
              "relation": "branch"\
            },\
            "computedUserset": {\
              "object": "",\
              "relation": "account_manager"\
            }\
          }\
        },\
        "customer": {\
          "this": {}\
        },\
        "account_manager_viewer": {\
          "intersection": {\
            "child": [\
              {\
                "computedUserset": {\
                  "object": "",\
                  "relation": "account_manager"\
                }\
              },\
              {\
                "tupleToUserset": {\
                  "tupleset": {\
                    "object": "",\
                    "relation": "branch"\
                  },\
                  "computedUserset": {\
                    "object": "",\
                    "relation": "approved_context"\
                  }\
                }\
              }\
            ]\
          }\
        },\
        "viewer": {\
          "union": {\
            "child": [\
              {\
                "computedUserset": {\
                  "object": "",\
                  "relation": "customer"\
                }\
              },\
              {\
                "computedUserset": {\
                  "object": "",\
                  "relation": "account_manager_viewer"\
                }\
              }\
            ]\
          }\
        },\
        "can_view": {\
          "computedUserset": {\
            "object": "",\
            "relation": "viewer"\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "branch": {\
            "directly_related_user_types": [\
              {\
                "type": "branch"\
              }\
            ]\
          },\
          "customer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "transaction",\
      "relations": {\
        "account": {\
          "this": {}\
        },\
        "can_view": {\
          "tupleToUserset": {\
            "tupleset": {\
              "object": "",\
              "relation": "account"\
            },\
            "computedUserset": {\
              "object": "",\
              "relation": "viewer"\
            }\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "account": {\
            "directly_related_user_types": [\
              {\
                "type": "account"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "timeslot",\
      "relations": {\
        "user": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "user": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "ip-address-range",\
      "relations": {\
        "user": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "user": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

## Related Sections [​](https://openfga.dev/docs/modeling/contextual-time-based-authorization\#related-sections "Direct link to Related Sections")

Check the following sections for more on how user groups can be used.

Object to Object Relationships

Learn how objects can relate to one another and how that can affect user's access.

- [More](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships)

Modeling with Multiple Restrictions

Learn how to model requiring multiple relationships before users are authorized to perform certain actions.

- [More](https://openfga.dev/docs/modeling/multiple-restrictions)

OpenFGA API

Details on the Check API in the OpenFGA reference guide.

- [More](https://openfga.dev/api/service#Relationship%20Queries/Check)

- [Before you start](https://openfga.dev/docs/modeling/contextual-time-based-authorization#before-you-start)
  - [concepts](https://openfga.dev/docs/modeling/contextual-time-based-authorization#-concepts)
  - [Scenario](https://openfga.dev/docs/modeling/contextual-time-based-authorization#scenario)
  - [Requirements](https://openfga.dev/docs/modeling/contextual-time-based-authorization#requirements)
- [Step by step](https://openfga.dev/docs/modeling/contextual-time-based-authorization#step-by-step)
  - [Understand relationships without contextual data](https://openfga.dev/docs/modeling/contextual-time-based-authorization#understand-relationships-without-contextual-data)
  - [Take time and IP address into consideration](https://openfga.dev/docs/modeling/contextual-time-based-authorization#take-time-and-ip-address-into-consideration)
  - [Use contextual tuples for context related checks](https://openfga.dev/docs/modeling/contextual-time-based-authorization#use-contextual-tuples-for-context-related-checks)
- [Summary](https://openfga.dev/docs/modeling/contextual-time-based-authorization#summary)
  - [Taking it a step further: Banks as a service authorization](https://openfga.dev/docs/modeling/contextual-time-based-authorization#taking-it-a-step-further-banks-as-a-service-authorization)
- [Related Sections](https://openfga.dev/docs/modeling/contextual-time-based-authorization#related-sections)

## List Users API
[Skip to main content](https://openfga.dev/docs/getting-started/perform-list-users#__docusaurus_skipToContent_fallback)

On this page

This section will illustrate how to perform a [list users](https://openfga.dev/docs/concepts#what-is-a-list-users-request) request. The List Users call allows you to retrieve a list of [users](https://openfga.dev/docs/concepts#what-is-a-user) that have a specific [relationship](https://openfga.dev/docs/concepts#what-is-a-relationship) with a given [object](https://openfga.dev/docs/concepts#what-is-an-object). This can be used in scenarios such as retrieving users who have access to a resource or managing members in a group.

## Before You Start [​](https://openfga.dev/docs/getting-started/perform-list-users\#before-you-start "Direct link to Before You Start")

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk).
3. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model) and [updated the _relationship tuples_](https://openfga.dev/docs/getting-started/update-tuples).
4. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk).
3. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model) and [updated the _relationship tuples_](https://openfga.dev/docs/getting-started/update-tuples).
4. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk).
3. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model) and [updated the _relationship tuples_](https://openfga.dev/docs/getting-started/update-tuples).
4. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk).
3. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model) and [updated the _relationship tuples_](https://openfga.dev/docs/getting-started/update-tuples).
4. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk).
3. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model) and [updated the _relationship tuples_](https://openfga.dev/docs/getting-started/update-tuples).
4. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model).
3. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [configured the _authorization model_](https://openfga.dev/docs/getting-started/configure-model) and [updated the _relationship tuples_](https://openfga.dev/docs/getting-started/update-tuples).
3. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

## Step by step [​](https://openfga.dev/docs/getting-started/perform-list-users\#step-by-step "Direct link to Step by step")

Consider the following model which includes a `user` that can have a `reader` relationship with a `document`:

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define reader: [user]

```

Assume that you want to list all users of type `user` that have a `reader` relationship with `document:planning`:

### 01\. Configure the OpenFGA API client [​](https://openfga.dev/docs/getting-started/perform-list-users\#01-configure-the--api-client "Direct link to 01-configure-the--api-client")

Before calling the List Users API, you will need to configure the API client.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl

```codeBlockLines_e6Vv
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

To obtain the [access token](https://auth0.com/docs/get-started/authentication-and-authorization-flow/call-your-api-using-the-client-credentials-flow):

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

### 02\. Calling List Users API [​](https://openfga.dev/docs/getting-started/perform-list-users\#02-calling-list-users-api "Direct link to 02. Calling List Users API")

To return all users of type `user` that have have the `reader` relationship with `document:planning`:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl

```codeBlockLines_e6Vv
const response = await fgaClient.listUsers({
  object: {
    type: "document",
    id: "planning"
  },
  user_filters: [{\
    type: "user"\
  }],
  relation: "reader",
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA",
});
// response.users = [{"object":{"type":"user","id":"anne"}},{"object":{"type":"user","id":"beth"}}]

```

```codeBlockLines_e6Vv
options := ClientListUsersOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

userFilters := []openfga.UserTypeFilter{{ Type:"user" }}

body := ClientListUsersRequest{
    Object:       openfga.Object{
        Type:    "document",
        Id:      "planning",
    },
    Relation:     "reader",
    UserFilters:   userFilters,
}

data, err := fgaClient.ListUsers(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data.Users = [{"object":{"type":"user","id":"anne"}}, {"object":{"type":"user","id":"beth"}}]

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientListUsersRequest {
    Object = new FgaObject {
      Type = "document",
      Id = "planning"
    },
    Relation = "reader",
    UserFilters = new List<UserTypeFilter> {
      new() {
        Type = "user"
      }
    }

};

var response = await fgaClient.ListUsers(body, options);

// response.Users = [{"object":{"type":"user","id":"anne"}},{"object":{"type":"user","id":"beth"}}]

```

```codeBlockLines_e6Vv

  options = {
      "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
  }

  userFilters = [\
      UserTypeFilter(type="user")\
  ]

  body = ClientListUsersRequest(
      object=FgaObject(type="document",id="planning"),
      relation="reader",
      user_filters=userFilters,
  )

  response = await fga_client.list_users(body, options)

  # response.users = [{"object":{"type":"user","id":"anne"}},{"object":{"type":"user","id":"beth"}}]

```

```codeBlockLines_e6Vv
var options = new ClientListUsersOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var userFilters = new ArrayList<UserTypeFilter>() {
  {
      add(new UserTypeFilter().type("user"));
  }
};

var body = new ClientListUsersRequest()
        ._object(new FgaObject().type("document").id("planning"))
        .relation("reader")
        .userFilters(userFilters);

var response = fgaClient.listUsers(body, options).get();

// response.getUsers() = [{"object":{"type":"user","id":"anne"}},{"object":{"type":"user","id":"beth"}}]

```

```codeBlockLines_e6Vv
fga query list-users --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA --object document:planning --relation reader --user-filter user

# Response: {"users": [{"object":{"type":"user","id":"anne"}}, {"object":{"type":"user","id":"beth"}}]}

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/list-users \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{
        "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA",
        "object": {
          "type": "document",
          "id": "planning",
        },
        "relation": "reader",
        "user_filters": [\
          {\
            "type": "user"\
          }\
        ]
    }'

# Response: {"users": [{"object":{"type":"user","id":"anne"}}, {"object":{"type":"user","id":"beth"}}]}

```

The result `user:anne` and `user:beth` are the `user` objects that have the `reader` relationship with `document:planning`.

Warning

The performance characteristics of the List Users endpoint vary drastically depending on the model complexity, number of tuples, and the relations it needs to evaluate. Relations with 'and' or 'but not' are particularly expensive to evaluate.

## Usersets [​](https://openfga.dev/docs/getting-started/perform-list-users\#usersets "Direct link to Usersets")

In the above example, only specific subjects of the `user` type were returned. However, groups of users, known as [usersets](https://openfga.dev/docs/modeling/building-blocks/usersets), can also be returned from the List Users API. This is done by specifying a `relation` field in the `user_filters` request object. Usersets will only expand to the underlying subjects if that `type` is specified as the user filter object.

Below is an example where usersets can be returned:

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type group
  relations
    define member: [ user ]

type document
  relations
    define viewer: [ group#member ]

```

With the tuples:

| user | relation | object |
| --- | --- | --- |
| group:engineering#member | viewer | document:1 |
| group:product#member | viewer | document:1 |
| user:will | member | group:engineering |

Then calling the List Users API for `document:1` with relation `viewer` of type `group#member` will yield the below response. Note that the `user:will` is not returned, despite being a member of `group:engineering#member` because the `user_filters` does not target the `user` type.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl

```codeBlockLines_e6Vv
const response = await fgaClient.listUsers({
  object: {
    type: "document",
    id: "1"
  },
  user_filters: [{\
    type: "group",\
    relation: "member"\
  }],
  relation: "viewer",
}, {
  authorizationModelId: "01HXHK5D1Z6SCG1SV7M3BVZVCV",
});
// response.users = [{"userset":{"id":"engineering","relation":"member","type":"group"}},{"userset":{"id":"product","relation":"member","type":"group"}}]

```

```codeBlockLines_e6Vv
options := ClientListUsersOptions{
    AuthorizationModelId: PtrString("01HXHK5D1Z6SCG1SV7M3BVZVCV"),
}

userFilters := []openfga.UserTypeFilter{{ Type:"group",Relation:"member" }}

body := ClientListUsersRequest{
    Object:       openfga.Object{
        Type:    "document",
        Id:      "1",
    },
    Relation:     "viewer",
    UserFilters:   userFilters,
}

data, err := fgaClient.ListUsers(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data.Users = [{"userset":{"id":"engineering","relation":"member","type":"group"}}, {"userset":{"id":"product","relation":"member","type":"group"}}]

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HXHK5D1Z6SCG1SV7M3BVZVCV",
};
var body = new ClientListUsersRequest {
    Object = new FgaObject {
      Type = "document",
      Id = "1"
    },
    Relation = "viewer",
    UserFilters = new List<UserTypeFilter> {
      new() {
        Type = "group"
        Relation = "member"

      }
    }

};

var response = await fgaClient.ListUsers(body, options);

// response.Users = [{"userset":{"id":"engineering","relation":"member","type":"group"}},{"userset":{"id":"product","relation":"member","type":"group"}}]

```

```codeBlockLines_e6Vv

  options = {
      "authorization_model_id": "01HXHK5D1Z6SCG1SV7M3BVZVCV"
  }

  userFilters = [\
      UserTypeFilter(type="group",relation="member")\
  ]

  body = ClientListUsersRequest(
      object=FgaObject(type="document",id="1"),
      relation="viewer",
      user_filters=userFilters,
  )

  response = await fga_client.list_users(body, options)

  # response.users = [{"userset":{"id":"engineering","relation":"member","type":"group"}},{"userset":{"id":"product","relation":"member","type":"group"}}]

```

```codeBlockLines_e6Vv
var options = new ClientListUsersOptions()
        .authorizationModelId("01HXHK5D1Z6SCG1SV7M3BVZVCV");

var userFilters = new ArrayList<UserTypeFilter>() {
  {
      add(new UserTypeFilter().type("group").relation("member"));
  }
};

var body = new ClientListUsersRequest()
        ._object(new FgaObject().type("document").id("1"))
        .relation("viewer")
        .userFilters(userFilters);

var response = fgaClient.listUsers(body, options).get();

// response.getUsers() = [{"userset":{"id":"engineering","relation":"member","type":"group"}},{"userset":{"id":"product","relation":"member","type":"group"}}]

```

```codeBlockLines_e6Vv
fga query list-users --store-id=${FGA_STORE_ID} --model-id=01HXHK5D1Z6SCG1SV7M3BVZVCV --object document:1 --relation viewer --user-filter group#member

# Response: {"users": [{"userset":{"id":"engineering","relation":"member","type":"group"}}, {"userset":{"id":"product","relation":"member","type":"group"}}]}

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/list-users \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{
        "authorization_model_id": "01HXHK5D1Z6SCG1SV7M3BVZVCV",
        "object": {
          "type": "document",
          "id": "1",
        },
        "relation": "viewer",
        "user_filters": [\
          {\
            "type": "group",\
            "relation": "member"\
          }\
        ]
    }'

# Response: {"users": [{"userset":{"id":"engineering","relation":"member","type":"group"}}, {"userset":{"id":"product","relation":"member","type":"group"}}]}

```

## Type-bound public access [​](https://openfga.dev/docs/getting-started/perform-list-users\#type-bound-public-access "Direct link to Type-bound public access")

The List Users API supports tuples expressing public access via the wildcard syntax (e.g. `user:*`). Wildcard tuples that satisfy the query criteria will be returned with the `wildcard` root object property that will specify the type. A typed-bound public access result indicates that the object has a public relation but it doesn't necessarily indicate that all users of that type have that relation, it is possible that exclusions via the `but not` syntax exists. The API will not expand wildcard results further to any ID'd user object. Further, specific users that have been granted access will be returned in addition to any public access for that user's type.

caution

A List Users response with a type-bound public access result (e.g. `user:*`) doesn't necessarily indicate that all users of that type have access, it is possible that exclusions exist. It is recommended to [perform a Check](https://openfga.dev/docs/getting-started/perform-check) on specific users to ensure they have access to the target object.

Example response with type-bound public access:

```codeBlockLines_e6Vv
{
  "users": [\
    {\
      "wildcard": {\
        "type": "user"\
      }\
    },\
    {\
      "object": {\
        "type": "user",\
        "id": "anne"\
      }\
    }\
  ]
}

```

## Related Sections [​](https://openfga.dev/docs/getting-started/perform-list-users\#related-sections "Direct link to Related Sections")

Take a look at the following section for more on how to perform list users in your system

OpenFGA List Users API

Read the List Users API documentation and see how it works.

- [More](https://openfga.dev/api/service#Relationship%20Queries/ListUsers)

- [Before You Start](https://openfga.dev/docs/getting-started/perform-list-users#before-you-start)
- [Step by step](https://openfga.dev/docs/getting-started/perform-list-users#step-by-step)
  - [01\. Configure the  API client](https://openfga.dev/docs/getting-started/perform-list-users#01-configure-the--api-client)
  - [02\. Calling List Users API](https://openfga.dev/docs/getting-started/perform-list-users#02-calling-list-users-api)
- [Usersets](https://openfga.dev/docs/getting-started/perform-list-users#usersets)
- [Type-bound public access](https://openfga.dev/docs/getting-started/perform-list-users#type-bound-public-access)
- [Related Sections](https://openfga.dev/docs/getting-started/perform-list-users#related-sections)

## OpenFGA Kubernetes Setup
[Skip to main content](https://openfga.dev/docs/getting-started/setup-openfga/kubernetes#__docusaurus_skipToContent_fallback)

To deploy OpenFGA into a Kubernetes environment you can use the official [OpenFGA Helm chart](https://artifacthub.io/packages/helm/openfga/openfga). Please refer to the official documentation on Artifact Hub for the Helm chart for more instructions.

## OpenFGA Access Control
[Skip to main content](https://openfga.dev/docs/getting-started/setup-openfga/access-control#__docusaurus_skipToContent_fallback)

On this page

In OpenFGA [v1.7.0](https://github.com/openfga/openfga/releases/tag/v1.7.0), we introduced an experimental built-in access control feature that allows you to control access to your OpenFGA server. It relies on a control store with its own model and tuples to authorize requests to the OpenFGA server itself.

Currently, there is no provided way to initialize that access control store and model, nor is there a way to bootstrap the client IDs that are supposed to be admins.

Warning

The built-in access control feature in OpenFGA is experimental and is not recommended for production use. We are looking for feedback on this, so if you do try it, please reach out on our [openfga Slack channel](https://openfga.dev/docs/community) in the CNCF community.

Read the following steps to enable access control.

## Requirements [​](https://openfga.dev/docs/getting-started/setup-openfga/access-control\#requirements "Direct link to Requirements")

- OIDC Provider: You need to have an OIDC provider [set up and configured](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga#oidc) in your OpenFGA server set up to use access control.
- A Client ID ready to be used: You need to have the initial (admin) client ID that you want to manage access to your OpenFGA server.
- The FGA CLI: While the CLI is not strictly required, you need to follow the steps below. You can install it by following the instructions [here](https://openfga.dev/docs/getting-started/cli). If you do not want to use the CLI, you can call the API with the equivalent SDK or REST calls.

## 01\. Ensure the server is running (with access control disabled) [​](https://openfga.dev/docs/getting-started/setup-openfga/access-control\#01-ensure-the-server-is-running-with-access-control-disabled "Direct link to 01. Ensure the server is running (with access control disabled)")

This is important. If you enable access control before setting up the store and model and grant your initial client ID access, you will lock yourself out of the server, and you will have to turn it back off.

## 02\. Create the access control store and model [​](https://openfga.dev/docs/getting-started/setup-openfga/access-control\#02-create-the-access-control-store-and-model "Direct link to 02. Create the access control store and model")

We will be using the following model to enable access control.

Customizing your access control model

You may choose to modify this model to suit your needs, however, keep in mind that configuring the model may not be supported in the future and you may be responsible for your own migrations at that point.

The required types and relations that need to be defined are marked in the model below.

```codeBlockLines_e6Vv
model
  schema 1.1

type system # required
  relations
    define admin: [application] # required
    define can_call_create_stores: admin # required
    define can_call_list_stores: [application, application:*] or admin # required

type application # required

type store # required
  relations
    define system: [system] # required
    define admin: [application] or admin from system # required
    define model_writer: [application] or admin
    define reader: [application] or admin
    define writer: [application] or admin
    define can_call_delete_store: admin # required
    define can_call_get_store: reader or writer or model_writer # required
    define can_call_check: reader # required
    define can_call_expand: reader # required
    define can_call_list_objects: reader # required
    define can_call_list_users: reader # required
    define can_call_read: reader # required
    define can_call_read_assertions: reader or model_writer # required
    define can_call_read_authorization_models: reader or model_writer # required
    define can_call_read_changes: reader # required
    define can_call_write: writer # required
    define can_call_write_assertions: model_writer # required
    define can_call_write_authorization_models: model_writer # required

type module # required
  relations
    define store: [store] # required
    define writer: [application]
    define can_call_write: writer or writer from store # required

```

1. Place the model above in a file called `model.fga`.
2. Run the following command to create the store and model:




```codeBlockLines_e6Vv
fga store create --name root-access-control --model ./model.fga

```








This prints a store ID and model ID. You will need these IDs in the following steps.
3. Grant your initial client ID access. You can do so by writing a tuple to the access control store you just created. The tuple should be of the type `application` and should have the `client_id` field set to the client ID of the client you want to grant access to. You can use the FGA CLI to do this:




```codeBlockLines_e6Vv
    fga tuple write --store-id "${ACCESS_CONTROL_STORE_ID}" "application:${FGA_ADMIN_CLIENT_ID}" admin "system:fga"

```








Replace `${ACCESS_CONTROL_STORE_ID}` with the store ID you received in the previous step; replace `${FGA_ADMIN_CLIENT_ID}` with the client ID you want to grant access to.

## 03\. Enable access control [​](https://openfga.dev/docs/getting-started/setup-openfga/access-control\#03-enable-access-control "Direct link to 03. Enable access control")

### i. Enable access control in the server [​](https://openfga.dev/docs/getting-started/setup-openfga/access-control\#i-enable-access-control-in-the-server "Direct link to i. Enable access control in the server")

1. Enable the experimental support for access control by setting the environment variable `OPENFGA_EXPERIMENTALS` to `enable-access-control`.
2. Enable the access control feature by setting the environment variable `OPENFGA_ACCESS_CONTROL_ENABLED` to `true`.
3. Set the environment variable `OPENFGA_ACCESS_CONTROL_STORE_ID` to the store ID you received in the previous step.
4. Set the environment variable `OPENFGA_ACCESS_CONTROL_MODEL_ID` to the model ID you received in the previous step.

### ii. Customize what claim you want the API to use (optional) [​](https://openfga.dev/docs/getting-started/setup-openfga/access-control\#ii-customize-what-claim-you-want-the-api-to-use-optional "Direct link to ii. Customize what claim you want the API to use (optional)")

By default, the API will use the following claims (in order) in the OIDC token to identify the client. If you want to use a different claim, you can set the environment variable `OPENFGA_AUTHN_OIDC_CLIENT_ID_CLAIMS` to the claim(s) you want to use.

If the claims are not set in the configuration, the following claims are used as default (in order):

1. `azp`: following [the OpenID standard](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)
2. `client_id` following [RFC9068](https://www.rfc-editor.org/rfc/rfc9068.html#name-data-structure)

That means that if the `azp` claim is present in the token, it will be used to identify the client. If not, the `client_id` claim will be used instead.

For example, you can set the environment variable `OPENFGA_AUTHN_OIDC_CLIENT_ID_CLAIMS` to `user_id,employee_id,client_id` to allow the OpenFGA server to authorize based on:

1. Use the `user_id` claim if present in the token.
2. If not try to use the `employee_id` claim if present.
3. If not try to use the `client_id` claim.

## iii. Restart the server [​](https://openfga.dev/docs/getting-started/setup-openfga/access-control\#iii-restart-the-server "Direct link to iii. Restart the server")

You now need to restart the OpenFGA server in order for the configuration changes above to take effect. Congrats, you now have access control enabled! 🎉🎉

## 04\. Grant access to a store [​](https://openfga.dev/docs/getting-started/setup-openfga/access-control\#04-grant-access-to-a-store "Direct link to 04. Grant access to a store")

You can now use the admin client ID to manage access to your OpenFGA server. We will call it `FGA_ADMIN_CLIENT_ID` in the following examples to differentiate it from the client ID (called `FGA_CLIENT_ID`) you are granting access to.

We will also use `ACCESS_CONTROL_STORE_ID` as the store ID of the access control store, and `STORE_ID` as the store ID you are granting the client access to.

1. Grant access to a store (based on the model above, your choices are `admin`, `model_writer`, `writer` and `reader`).





```codeBlockLines_e6Vv
fga tuple write --store-id "${ACCESS_CONTROL_STORE_ID}" "application:${FGA_CLIENT_ID}" model_writer "store:${STORE_ID}" --client-id "${FGA_ADMIN_CLIENT_ID}" --client-secret ... --api-token-issuer ... --api-audience ...

```

2. Grant access to writing tuples of a certain module in a store.

In order to grant access to only write to relations in certain modules, you must have a model with modules. Refer to the [modular models documentation](https://openfga.dev/docs/modeling/modular-models) for more on that feature.

If you want to grant access to a module in a store, you must namespace the module ID with the store ID, so the object of the tuple will be of the form `module:<store-id>|<module-name>`.





```codeBlockLines_e6Vv
fga tuple write --store-id "${ACCESS_CONTROL_STORE_ID}" "application:${FGA_CLIENT_ID}" writer "module:${STORE_ID}|<module-name>" --client-id "${FGA_ADMIN_CLIENT_ID}" --client-secret ... --api-token-issuer ... --api-audience ...

```


Note

If you are calling `Write` with a credential that only has access to certain modules and not the store, you will not be able to send tuples for more than 1 module in a certain request or you will get the following error: `the principal cannot write tuples of more than 1 module(s) in a single request`

## Related Sections [​](https://openfga.dev/docs/getting-started/setup-openfga/access-control\#related-sections "Direct link to Related Sections")

Check the following sections for more on how to use OpenFGA.

Setup OpenFGA

Learn how to setup and configure an OpenFGA server

- [More](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga)

Setup OIDC

Learn how to setup and configure an OpenFGA server

- [More](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga#oidc)

Production Best Practices

Learn the best practices of running OpenFGA in a production environment

- [More](https://openfga.dev/docs/getting-started/running-in-production)

- [Requirements](https://openfga.dev/docs/getting-started/setup-openfga/access-control#requirements)
- [01\. Ensure the server is running (with access control disabled)](https://openfga.dev/docs/getting-started/setup-openfga/access-control#01-ensure-the-server-is-running-with-access-control-disabled)
- [02\. Create the access control store and model](https://openfga.dev/docs/getting-started/setup-openfga/access-control#02-create-the-access-control-store-and-model)
- [03\. Enable access control](https://openfga.dev/docs/getting-started/setup-openfga/access-control#03-enable-access-control)
  - [i. Enable access control in the server](https://openfga.dev/docs/getting-started/setup-openfga/access-control#i-enable-access-control-in-the-server)
  - [ii. Customize what claim you want the API to use (optional)](https://openfga.dev/docs/getting-started/setup-openfga/access-control#ii-customize-what-claim-you-want-the-api-to-use-optional)
- [iii. Restart the server](https://openfga.dev/docs/getting-started/setup-openfga/access-control#iii-restart-the-server)
- [04\. Grant access to a store](https://openfga.dev/docs/getting-started/setup-openfga/access-control#04-grant-access-to-a-store)
- [Related Sections](https://openfga.dev/docs/getting-started/setup-openfga/access-control#related-sections)

## Google Drive Permissions
[Skip to main content](https://openfga.dev/docs/modeling/advanced/gdrive#__docusaurus_skipToContent_fallback)

On this page

This tutorial explains how to represent [Google Drive](https://www.google.com/intl/en-GB/drive/) permissions model with [OpenFGA](https://openfga.dev/docs/fga).

What you will learn

- Indicate [relationships](https://openfga.dev/docs/concepts#what-is-a-relationship) between a group of **[users](https://openfga.dev/docs/concepts#what-is-a-user)** and an **[object](https://openfga.dev/docs/concepts#what-is-an-object)**. See [Modeling User Groups](https://openfga.dev/docs/modeling/user-groups) for more.


Used here to indicate that all users within a domain can access a document (sharing a document within an organization).
- Model **concentric relationship** to have a certain [relation](https://openfga.dev/docs/concepts#what-is-a-relation) on an object imply another relation on the same object. See [Modeling Concepts: Concentric Relationships](https://openfga.dev/docs/modeling/building-blocks/concentric-relationships) for more.


Used here is to indicate that writers are also commenters and viewers.
- Using [**the union operator**](https://openfga.dev/docs/configuration-language#the-union-operator) condition to indicate that a user might have a certain relation with an object if they match any of the criteria indicated.


Used here to indicate that a user can be a viewer on a document, or can have the viewer relationship implied through commenter.
- Using the **[type bound public access](https://openfga.dev/docs/concepts#what-is-type-bound-public-access)** in a [relationship tuple's](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple) user field to indicate that everyone has a certain relation with an object. See [Modeling Public Access](https://openfga.dev/docs/modeling/public-access) for more.


Used here to [share documents publicly](https://openfga.dev/docs/modeling/advanced/gdrive#04-sharing-files-and-folders-publicly).
- Model [**parent-child objects**](https://openfga.dev/docs/modeling/parent-child) to indicate that a user having a relationship with a certain object implies having a relationship with another object in OpenFGA.


Used here is to indicate that a writer on a folder is a writer on all documents inside that folder.

## Before you start [​](https://openfga.dev/docs/modeling/advanced/gdrive\#before-you-start "Direct link to Before you start")

In order to understand this guide correctly you must be familiar with some OpenFGA concepts and know how to develop the things that we will list below.

### OpenFGA concepts [​](https://openfga.dev/docs/modeling/advanced/gdrive\#-concepts "Direct link to -concepts")

It would be helpful to have an understanding of some concepts of OpenFGA before you start.

#### Modeling concentric relationships [​](https://openfga.dev/docs/modeling/advanced/gdrive\#modeling-concentric-relationships "Direct link to Modeling concentric relationships")

You need to know how to update the authorization model to allow having nested relations such as all writers are readers. [Learn more →](https://openfga.dev/docs/modeling/building-blocks/concentric-relationships)

#### Modeling object-to-object relationships [​](https://openfga.dev/docs/modeling/advanced/gdrive\#modeling-object-to-object-relationships "Direct link to Modeling object-to-object relationships")

You need to know how to create relationships between objects and how that might affect a user's relationships to those objects. [Learn more →](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships)

Used here to indicate that users who have access to view a folder have access to view all documents inside it.

#### Modeling public access [​](https://openfga.dev/docs/modeling/advanced/gdrive\#modeling-public-access "Direct link to Modeling public access")

You need to know how to add a relationship tuple to indicate that a resource is publicly available. [Learn more →](https://openfga.dev/docs/modeling/public-access)

#### Concepts & configuration language [​](https://openfga.dev/docs/modeling/advanced/gdrive\#concepts--configuration-language "Direct link to Concepts & configuration language")

- The [OpenFGA Concepts](https://openfga.dev/docs/concepts)
- [Configuration Language](https://openfga.dev/docs/configuration-language)

## What you will be modeling [​](https://openfga.dev/docs/modeling/advanced/gdrive\#what-you-will-be-modeling "Direct link to What you will be modeling")

Google Drive is a system to store, share, and collaborate on files and folders. [Source](https://www.google.com/drive/)

In this tutorial, you will build a subset of the Google Drive permission model (detailed below) in OpenFGA, using some scenarios to validate the model.

> Note: For brevity, this tutorial will not model all of Google Drive's permissions. Instead, it will focus on modeling for the scenarios outlined below

### Requirements [​](https://openfga.dev/docs/modeling/advanced/gdrive\#requirements "Direct link to Requirements")

Google Drive's permission model is represented in [their documentation](https://developers.google.com/drive/api/v3/ref-roles).

In this tutorial, you will be focusing on a subset of these permissions.

Requirements:

- Users can be owners, editors, commenters and viewers of documents
- Documents can be shared with all users in a domain
- Folders can contain documents and users with a certain permission on a folder have that same permission to a document in that folder
- Documents and folders can be shared publicly

### Defined scenarios [​](https://openfga.dev/docs/modeling/advanced/gdrive\#defined-scenarios "Direct link to Defined scenarios")

There will be the following users:

- Anne, who is in the xyz domain
- Beth, who is in the xyz domain
- Charles, who is in the xyz domain
- Diane, who is NOT in the xyz domain
- Erik, who is NOT in the xyz domain

There will be:

- a 2021-budget document, owned by Anne, shared for commenting with Beth and viewable by all members of the xyz domain.
- a 2021-planning folder, viewable by Diane and contains the 2021-budget document
- a 2021-public-roadmap document, owned by Anne, available for members xyz domain to comment on and is publicly viewable

## Modeling Google Drive's permissions [​](https://openfga.dev/docs/modeling/advanced/gdrive\#modeling-google-drives-permissions "Direct link to Modeling Google Drive's permissions")

### 01\. Individual permissions [​](https://openfga.dev/docs/modeling/advanced/gdrive\#01-individual-permissions "Direct link to 01. Individual permissions")

To keep thing simple and focus on OpenFGA features rather than Google Drive complexity we will model only four [roles](https://developers.google.com/drive/api/v3/ref-roles) (Viewer, Commenter, Writer, Owner).

At the end of this section we want to have the following permissions represented:

![Image showing permissions](https://openfga.dev/assets/images/gdrive-gdrive1-22dac26c1f55a55daeb65acff88ee193.svg)

To represent permissions in OpenFGA we use [relations](https://openfga.dev/docs/concepts#what-is-a-relation). For document permissions we need to create the following [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model):

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define owner: [user]
    define writer: [user]
    define commenter: [user]
    define viewer: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "document",\
      "relations": {\
        "owner": {\
          "this": {}\
        },\
        "writer": {\
          "this": {}\
        },\
        "commenter": {\
          "this": {}\
        },\
        "viewer": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "owner": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "writer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "commenter": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

The OpenFGA service determines if a [user](https://openfga.dev/docs/concepts#what-is-a-user) has access to an [object](https://openfga.dev/docs/concepts#what-is-an-object) by [checking](https://openfga.dev/docs/concepts#what-is-a-check-request) if the user has a relation to that object. Let us examine one of those relations in detail:

- DSL
- JSON

```codeBlockLines_e6Vv

type document
  relations
    define viewer: [user]

```

```codeBlockLines_e6Vv
{
  "type": "document",
  "relations": {
    "viewer": {
      "this": {}
    }
  },
  "metadata": {
    "relations": {
      "viewer": {
        "directly_related_user_types": [\
          {\
            "type": "user"\
          }\
        ]
      }
    }
  }
}

```

info

The snippet above indicates that objects of type document have users related to them as "viewer" if those users belong to the userset of all users related to the document as "viewer".

This means that a user can be [directly related](https://openfga.dev/docs/concepts#what-are-direct-and-implied-relationships) as a viewer to an object of type "document"

If we want to say `beth` is a commenter of **document:2021-budget** we create this relationship tuple:

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"user:beth","relation":"commenter","object":"document:2021-budget"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             User: "user:beth",
             Relation: "commenter",
             Object: "document:2021-budget",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
       new() {
                  User = "user:beth",
                  Relation = "commenter",
                  Object = "document:2021-budget"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    user="user:beth",\
                    relation="commenter",\
                    object="document:2021-budget",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                new ClientTupleKey()
                        .user("user:beth")
                        .relation("commenter")
                        ._object("document:2021-budget")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"user":"user:beth","relation":"commenter","object":"document:2021-budget"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:beth commenter document:2021-budget

```

```codeBlockLines_e6Vv
write([\
    {\
      "user":"user:beth",\
      "relation":"commenter",\
      "object":"document:2021-budget"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

We can now ask OpenFGA "is `beth` a commenter of repository **document:2021-budget**?"

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:beth',
    relation: 'commenter',
    object: 'document:2021-budget',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:beth",
    Relation: "commenter",
    Object:   "document:2021-budget",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:beth",
    Relation = "commenter",
    Object = "document:2021-budget",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:beth",
    relation="commenter",
    object="document:2021-budget",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:beth")
        .relation("commenter")
        ._object("document:2021-budget");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:beth commenter document:2021-budget

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:beth","relation":"commenter","object":"document:2021-budget"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:beth", // check if the user `user:beth`
  relation = "commenter", // has an `commenter` relation
  object = "document:2021-budget", // with the object `document:2021-budget`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:beth related to document:2021-budget as commenter?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

We could also say that `anne` is an owner of the same document:

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"user:anne","relation":"owner","object":"document:2021-budget"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             User: "user:anne",
             Relation: "owner",
             Object: "document:2021-budget",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
       new() {
                  User = "user:anne",
                  Relation = "owner",
                  Object = "document:2021-budget"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    user="user:anne",\
                    relation="owner",\
                    object="document:2021-budget",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("owner")
                        ._object("document:2021-budget")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"user":"user:anne","relation":"owner","object":"document:2021-budget"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne owner document:2021-budget

```

```codeBlockLines_e6Vv
write([\
    {\
      "user":"user:anne",\
      "relation":"owner",\
      "object":"document:2021-budget"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

And [ask](https://openfga.dev/docs/concepts#what-is-a-check-request) some questions to OpenFGA:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'owner',
    object: 'document:2021-budget',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "owner",
    Object:   "document:2021-budget",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "owner",
    Object = "document:2021-budget",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="owner",
    object="document:2021-budget",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("owner")
        ._object("document:2021-budget");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne owner document:2021-budget

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"owner","object":"document:2021-budget"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "owner", // has an `owner` relation
  object = "document:2021-budget", // with the object `document:2021-budget`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to document:2021-budget as owner?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'writer',
    object: 'document:2021-budget',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "writer",
    Object:   "document:2021-budget",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "writer",
    Object = "document:2021-budget",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="writer",
    object="document:2021-budget",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("writer")
        ._object("document:2021-budget");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne writer document:2021-budget

# Response: {"allowed":false}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"writer","object":"document:2021-budget"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "writer", // has an `writer` relation
  object = "document:2021-budget", // with the object `document:2021-budget`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:anne related to document:2021-budget as writer?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

The first reply makes sense but the second one does not. Intuitively, if `anne` was an **owner**, she was also be a **writer**. In fact, Google Drive explains this in [their documentation](https://developers.google.com/drive/api/v3/ref-roles)

![Image showing roles](https://openfga.dev/assets/images/gdrive-roles-ac60dede6567bd76e873d1a81d642532.svg)

To make OpenFGA aware of this "concentric" permission model we need to update our definitions:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define owner: [user]
    define writer: [user] or owner
    define commenter: [user] or writer
    define viewer: [user] or commenter

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "document",\
      "relations": {\
        "owner": {\
          "this": {}\
        },\
        "writer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "owner"\
                }\
              }\
            ]\
          }\
        },\
        "commenter": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "writer"\
                }\
              }\
            ]\
          }\
        },\
        "viewer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "commenter"\
                }\
              }\
            ]\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "owner": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "writer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "commenter": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

info

Let's examine one of those relations in detail:

objects of type document have users related to them as "viewer": if they belong to any of (the union of) the following:

- the userset of all users related to the document as "viewer"
- the userset of all users related to the document as "commenter"

With this update our model now supports nested definitions and now:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'owner',
    object: 'document:2021-budget',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "owner",
    Object:   "document:2021-budget",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "owner",
    Object = "document:2021-budget",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="owner",
    object="document:2021-budget",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("owner")
        ._object("document:2021-budget");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne owner document:2021-budget

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"owner","object":"document:2021-budget"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "owner", // has an `owner` relation
  object = "document:2021-budget", // with the object `document:2021-budget`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to document:2021-budget as owner?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'writer',
    object: 'document:2021-budget',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "writer",
    Object:   "document:2021-budget",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "writer",
    Object = "document:2021-budget",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="writer",
    object="document:2021-budget",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("writer")
        ._object("document:2021-budget");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne writer document:2021-budget

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"writer","object":"document:2021-budget"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "writer", // has an `writer` relation
  object = "document:2021-budget", // with the object `document:2021-budget`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to document:2021-budget as writer?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

### 02\. Organization permissions [​](https://openfga.dev/docs/modeling/advanced/gdrive\#02-organization-permissions "Direct link to 02. Organization permissions")

Google Drive allows you to share a file with everyone in your organization as a viewer, commenter or writer/editor.

![](https://openfga.dev/assets/images/gdrive-org-fe69008225e62f28ff2280708e875f09.svg)

At the end of this section we want to end up with the following permissions represented:

![Image showing permissions](https://openfga.dev/assets/images/gdrive-gdrive2-abe697d20cfce6658d6a09aed7af8d97.svg)

To add support for domains and members all we need to do is add this object to the [OpenFGA](https://openfga.dev/docs/fga) [authorization model](https://openfga.dev/docs/concepts#what-is-a-type-definition). In addition, update the model to allow domain member to be assigned to document:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define owner: [user, domain#member]
    define writer: [user, domain#member] or owner
    define commenter: [user, domain#member] or writer
    define viewer: [user, domain#member] or commenter

type domain
  relations
    define member: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "document",\
      "relations": {\
        "owner": {\
          "this": {}\
        },\
        "writer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "owner"\
                }\
              }\
            ]\
          }\
        },\
        "commenter": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "writer"\
                }\
              }\
            ]\
          }\
        },\
        "viewer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "commenter"\
                }\
              }\
            ]\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "owner": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "domain",\
                "relation": "member"\
              }\
            ]\
          },\
          "writer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "domain",\
                "relation": "member"\
              }\
            ]\
          },\
          "commenter": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "domain",\
                "relation": "member"\
              }\
            ]\
          },\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "domain",\
                "relation": "member"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "domain",\
      "relations": {\
        "member": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "member": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

info

Objects of type "domain" have users related to them as "member" if they belong to the userset of all users related to the domain as "member".

In other words, users can be direct members of a domain.

Let's now create a domain, add members to it and make all members **viewers** of **document:2021-budget**.

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // make anne, beth, charles a member of the xyz domain\
      {"_description":"make anne, beth, charles a member of the xyz domain","user":"user:anne","relation":"member","object":"domain:xyz"},\
      {"user":"user:beth","relation":"member","object":"domain:xyz"},\
      {"user":"user:charles","relation":"member","object":"domain:xyz"},\
      // make members of xyz domain viewers of document:2021-budget\
      {"_description":"make members of xyz domain viewers of document:2021-budget","user":"domain:xyz#member","relation":"viewer","object":"document:2021-budget"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             // make anne, beth, charles a member of the xyz domain
             User: "user:anne",
             Relation: "member",
             Object: "domain:xyz",
        },         {
             User: "user:beth",
             Relation: "member",
             Object: "domain:xyz",
        },         {
             User: "user:charles",
             Relation: "member",
             Object: "domain:xyz",
        },         {
             // make members of xyz domain viewers of document:2021-budget
             User: "domain:xyz#member",
             Relation: "viewer",
             Object: "document:2021-budget",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
    // make anne, beth, charles a member of the xyz domain
       new() {
                  User = "user:anne",
                  Relation = "member",
                  Object = "domain:xyz"
              },
       new() {
                  User = "user:beth",
                  Relation = "member",
                  Object = "domain:xyz"
              },
       new() {
                  User = "user:charles",
                  Relation = "member",
                  Object = "domain:xyz"
              },
    // make members of xyz domain viewers of document:2021-budget
       new() {
                  User = "domain:xyz#member",
                  Relation = "viewer",
                  Object = "document:2021-budget"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    # make anne, beth, charles a member of the xyz domain\
                    user="user:anne",\
                    relation="member",\
                    object="domain:xyz",\
                ),\
                ClientTuple(\
                    user="user:beth",\
                    relation="member",\
                    object="domain:xyz",\
                ),\
                ClientTuple(\
                    user="user:charles",\
                    relation="member",\
                    object="domain:xyz",\
                ),\
                ClientTuple(\
                    # make members of xyz domain viewers of document:2021-budget\
                    user="domain:xyz#member",\
                    relation="viewer",\
                    object="document:2021-budget",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                // make anne, beth, charles a member of the xyz domain
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("member")
                        ._object("domain:xyz"),
                new ClientTupleKey()
                        .user("user:beth")
                        .relation("member")
                        ._object("domain:xyz"),
                new ClientTupleKey()
                        .user("user:charles")
                        .relation("member")
                        ._object("domain:xyz"),
                // make members of xyz domain viewers of document:2021-budget
                new ClientTupleKey()
                        .user("domain:xyz#member")
                        .relation("viewer")
                        ._object("document:2021-budget")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"_description":"make anne, beth, charles a member of the xyz domain","user":"user:anne","relation":"member","object":"domain:xyz"},{"user":"user:beth","relation":"member","object":"domain:xyz"},{"user":"user:charles","relation":"member","object":"domain:xyz"},{"_description":"make members of xyz domain viewers of document:2021-budget","user":"domain:xyz#member","relation":"viewer","object":"document:2021-budget"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne member domain:xyz
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:beth member domain:xyz
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:charles member domain:xyz
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA domain:xyz#member viewer document:2021-budget

```

```codeBlockLines_e6Vv
write([\
    // make anne, beth, charles a member of the xyz domain\
    {\
      "user":"user:anne",\
      "relation":"member",\
      "object":"domain:xyz"\
    },\
    {\
      "user":"user:beth",\
      "relation":"member",\
      "object":"domain:xyz"\
    },\
    {\
      "user":"user:charles",\
      "relation":"member",\
      "object":"domain:xyz"\
    },\
    // make members of xyz domain viewers of document:2021-budget\
    {\
      "user":"domain:xyz#member",\
      "relation":"viewer",\
      "object":"document:2021-budget"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

The last relationship tuple introduces a new **OpenFGA** concept. A **[userset](https://openfga.dev/docs/concepts#what-is-a-user)**. When the value of a user is formatted like this **objectType:objectId#relation**, OpenFGA will automatically expand the userset into all its individual user identifiers:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:charles',
    relation: 'viewer',
    object: 'document:2021-budget',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:charles",
    Relation: "viewer",
    Object:   "document:2021-budget",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:charles",
    Relation = "viewer",
    Object = "document:2021-budget",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:charles",
    relation="viewer",
    object="document:2021-budget",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:charles")
        .relation("viewer")
        ._object("document:2021-budget");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:charles viewer document:2021-budget

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:charles","relation":"viewer","object":"document:2021-budget"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:charles", // check if the user `user:charles`
  relation = "viewer", // has an `viewer` relation
  object = "document:2021-budget", // with the object `document:2021-budget`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:charles related to document:2021-budget as viewer?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

### 03\. Folder permission propagation [​](https://openfga.dev/docs/modeling/advanced/gdrive\#03-folder-permission-propagation "Direct link to 03. Folder permission propagation")

[Permission propagation](https://developers.google.com/drive/api/v3/manage-sharing#permission_propagation) happens between folders and files: if you are a viewer in a folder, you can view its documents. This applies even when you are not explicitly a viewer in a document.
![Image](https://pbs.twimg.com/media/Eme_FlYW4AEAYfi?format=jpg&name=large)

At the end of this section we want to end up with the following permissions represented. Note that a folder is an object in the **document** type, as we do not need a separate type:

![Image showing permissions](https://openfga.dev/assets/images/gdrive-gdrive3-e82c9d5308de7d3b5e7b74b59d87044f.svg)

We need to add the notion that a **document** can be the **parent** of another **document**. We know how to do that:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define parent: [document]
    define owner: [user, domain#member]
    define writer: [user, domain#member] or owner
    define commenter: [user, domain#member] or writer
    define viewer: [user, domain#member] or commenter

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "document",\
      "relations": {\
        "parent": {\
          "this": {}\
        },\
        "owner": {\
          "this": {}\
        },\
        "writer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "owner"\
                }\
              }\
            ]\
          }\
        },\
        "commenter": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "writer"\
                }\
              }\
            ]\
          }\
        },\
        "viewer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "commenter"\
                }\
              }\
            ]\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "parent": {\
            "directly_related_user_types": [\
              {\
                "type": "document"\
              }\
            ]\
          },\
          "owner": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "domain",\
                "relation": "member"\
              }\
            ]\
          },\
          "writer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "domain",\
                "relation": "member"\
              }\
            ]\
          },\
          "commenter": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "domain",\
                "relation": "member"\
              }\
            ]\
          },\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "domain",\
                "relation": "member"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

info

Notice the newly added "parent" relation in the configuration above.

We can indicate this relation by adding the following relationship tuples

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // Diane is a viewer of document:2021-planning\
      {"_description":"Diane is a viewer of document:2021-planning","user":"user:diane","relation":"viewer","object":"document:2021-planning"},\
      // document:2021-planning is a parent of document:2021-budget\
      {"_description":"document:2021-planning is a parent of document:2021-budget","user":"document:2021-planning","relation":"parent","object":"document:2021-budget"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             // Diane is a viewer of document:2021-planning
             User: "user:diane",
             Relation: "viewer",
             Object: "document:2021-planning",
        },         {
             // document:2021-planning is a parent of document:2021-budget
             User: "document:2021-planning",
             Relation: "parent",
             Object: "document:2021-budget",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
    // Diane is a viewer of document:2021-planning
       new() {
                  User = "user:diane",
                  Relation = "viewer",
                  Object = "document:2021-planning"
              },
    // document:2021-planning is a parent of document:2021-budget
       new() {
                  User = "document:2021-planning",
                  Relation = "parent",
                  Object = "document:2021-budget"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    # Diane is a viewer of document:2021-planning\
                    user="user:diane",\
                    relation="viewer",\
                    object="document:2021-planning",\
                ),\
                ClientTuple(\
                    # document:2021-planning is a parent of document:2021-budget\
                    user="document:2021-planning",\
                    relation="parent",\
                    object="document:2021-budget",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                // Diane is a viewer of document:2021-planning
                new ClientTupleKey()
                        .user("user:diane")
                        .relation("viewer")
                        ._object("document:2021-planning"),
                // document:2021-planning is a parent of document:2021-budget
                new ClientTupleKey()
                        .user("document:2021-planning")
                        .relation("parent")
                        ._object("document:2021-budget")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"_description":"Diane is a viewer of document:2021-planning","user":"user:diane","relation":"viewer","object":"document:2021-planning"},{"_description":"document:2021-planning is a parent of document:2021-budget","user":"document:2021-planning","relation":"parent","object":"document:2021-budget"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:diane viewer document:2021-planning
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA document:2021-planning parent document:2021-budget

```

```codeBlockLines_e6Vv
write([\
    // Diane is a viewer of document:2021-planning\
    {\
      "user":"user:diane",\
      "relation":"viewer",\
      "object":"document:2021-planning"\
    },\
    // document:2021-planning is a parent of document:2021-budget\
    {\
      "user":"document:2021-planning",\
      "relation":"parent",\
      "object":"document:2021-budget"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

What we still lack is the ability to propagate permissions from parent to children. We want to say that a user is a viewer of a document if either:

- \[done\] they have a viewer relationship (directly or through domain membership)
- \[pending\] they have a viewer relationship with the parent document

We need a way to consider the parent viewers, not just direct viewers of the document when getting a check for:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:diane',
    relation: 'viewer',
    object: 'document:2021-budget',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = undefined

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:diane",
    Relation: "viewer",
    Object:   "document:2021-budget",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: undefined }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:diane",
    Relation = "viewer",
    Object = "document:2021-budget",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = undefined

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:diane",
    relation="viewer",
    object="document:2021-budget",
)

response = await fga_client.check(body, options)

# response.allowed = undefined

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:diane")
        .relation("viewer")
        ._object("document:2021-budget");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = undefined

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:diane viewer document:2021-budget

# Response: {"allowed":undefined}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:diane","relation":"viewer","object":"document:2021-budget"}}'

# Response: {"allowed":undefined}

```

```codeBlockLines_e6Vv
check(
  user = "user:diane", // check if the user `user:diane`
  relation = "viewer", // has an `viewer` relation
  object = "document:2021-budget", // with the object `document:2021-budget`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: undefined

```

```codeBlockLines_e6Vv
is user:diane related to document:2021-budget as viewer?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

More details on this technique can be found in the section [Modeling Parent-Child Objects](https://openfga.dev/docs/modeling/parent-child).

We express it like this:

- DSL
- JSON

```codeBlockLines_e6Vv

type document
  relations
    define viewer: [user, domain#member] or commenter or viewer from parent

```

```codeBlockLines_e6Vv
{
  "type": "document",
  "relations": {
    "viewer": {
      "union": {
        "child": [\
          {\
            "this": {}\
          },\
          {\
            "computedUserset": {\
              "relation": "commenter"\
            }\
          },\
          {\
            "tupleToUserset": {\
              "tupleset": {\
                "relation": "parent"\
              },\
              "computedUserset": {\
                "relation": "viewer"\
              }\
            }\
          }\
        ]
      }
    }
  },
  "metadata": {
    "relations": {
      "viewer": {
        "directly_related_user_types": [\
          {\
            "type": "user"\
          },\
          {\
            "type": "domain",\
            "relation": "member"\
          }\
        ]
      }
    }
  }
}

```

info

The users with a viewer relationship to a certain object of type "document" are any of:

- the "viewers": the set of users who are [directly related](https://openfga.dev/docs/concepts#what-are-direct-and-implied-relationships) to the document as a "viewer"
- the "commenters": the set of users who are related to the object as "commenter"
- the "viewers of the parents": from the objects who are related to the doc as parent, return the sets of users who are related to those objects as "viewer"

What the added section is doing is:

1. read all relationship tuples related to document:2021-budget as parent which returns:

`[{ "object": "document:2021-budget", "relation": "parent", "user": "document:2021-planning" }]`

2. for each relationship tuple read, return all usersets that match the following, returning tuples of shape:

`{ "object": "document:2021-planning", "viewer", "user": ??? }`

including: `{ "object": "document:2021-planning", "viewer", "user": "user:diane" }`

The updated authorization model looks like this:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define owner: [user, domain#member] or owner from parent
    define writer: [user, domain#member] or owner or writer from parent
    define commenter: [user, domain#member] or writer or commenter from parent
    define viewer: [user, domain#member] or commenter or viewer from parent
    define parent: [document]

type domain
  relations
    define member: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "document",\
      "relations": {\
        "owner": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "tupleToUserset": {\
                  "computedUserset": {\
                    "relation": "owner"\
                  },\
                  "tupleset": {\
                    "relation": "parent"\
                  }\
                }\
              }\
            ]\
          }\
        },\
        "writer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "owner"\
                }\
              },\
              {\
                "tupleToUserset": {\
                  "computedUserset": {\
                    "relation": "writer"\
                  },\
                  "tupleset": {\
                    "relation": "parent"\
                  }\
                }\
              }\
            ]\
          }\
        },\
        "commenter": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "writer"\
                }\
              },\
              {\
                "tupleToUserset": {\
                  "computedUserset": {\
                    "relation": "commenter"\
                  },\
                  "tupleset": {\
                    "relation": "parent"\
                  }\
                }\
              }\
            ]\
          }\
        },\
        "viewer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "commenter"\
                }\
              },\
              {\
                "tupleToUserset": {\
                  "computedUserset": {\
                    "relation": "viewer"\
                  },\
                  "tupleset": {\
                    "relation": "parent"\
                  }\
                }\
              }\
            ]\
          }\
        },\
        "parent": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "parent": {\
            "directly_related_user_types": [\
              {\
                "type": "document"\
              }\
            ]\
          },\
          "owner": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "domain",\
                "relation": "member"\
              }\
            ]\
          },\
          "writer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "domain",\
                "relation": "member"\
              }\
            ]\
          },\
          "commenter": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "domain",\
                "relation": "member"\
              }\
            ]\
          },\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "domain",\
                "relation": "member"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "domain",\
      "relations": {\
        "member": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "member": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

### 04\. Sharing files and folders publicly [​](https://openfga.dev/docs/modeling/advanced/gdrive\#04-sharing-files-and-folders-publicly "Direct link to 04. Sharing files and folders publicly")

Google Drive has a feature which allows [sharing a file or folder publicly](https://support.google.com/a/users/answer/9308873?hl=en), and specifying the permissions a public user might have (writer/commenter/viewer).

Assume that `Anne` has created a new document: `2021-public-roadmap`, has shared it with commenter permissions to the `xyz.com`, and has shared it as view only with the public at large.

![Image showing requirements](https://openfga.dev/assets/images/gdrive-gdrive4-9b75eafa345dde22742988b225671a69.svg)

Here's where another OpenFGA feature, [type bound public access](https://openfga.dev/docs/concepts#what-is-type-bound-public-access) (as in everyone), would come in handy.

First, we will need to update our model to allow for public access with type `user` for viewer relation.

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define owner: [user, domain#member] or owner from parent
    define writer: [user, domain#member] or owner or writer from parent
    define commenter: [user, domain#member] or writer or commenter from parent
    define viewer: [user, user:*, domain#member] or commenter or viewer from parent
    define parent: [document]

type domain
  relations
    define member: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "document",\
      "relations": {\
        "owner": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "tupleToUserset": {\
                  "computedUserset": {\
                    "relation": "owner"\
                  },\
                  "tupleset": {\
                    "relation": "parent"\
                  }\
                }\
              }\
            ]\
          }\
        },\
        "writer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "owner"\
                }\
              },\
              {\
                "tupleToUserset": {\
                  "computedUserset": {\
                    "relation": "writer"\
                  },\
                  "tupleset": {\
                    "relation": "parent"\
                  }\
                }\
              }\
            ]\
          }\
        },\
        "commenter": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "writer"\
                }\
              },\
              {\
                "tupleToUserset": {\
                  "computedUserset": {\
                    "relation": "commenter"\
                  },\
                  "tupleset": {\
                    "relation": "parent"\
                  }\
                }\
              }\
            ]\
          }\
        },\
        "viewer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "commenter"\
                }\
              },\
              {\
                "tupleToUserset": {\
                  "computedUserset": {\
                    "relation": "viewer"\
                  },\
                  "tupleset": {\
                    "relation": "parent"\
                  }\
                }\
              }\
            ]\
          }\
        },\
        "parent": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "parent": {\
            "directly_related_user_types": [\
              {\
                "type": "document"\
              }\
            ]\
          },\
          "owner": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "domain",\
                "relation": "member"\
              }\
            ]\
          },\
          "writer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "domain",\
                "relation": "member"\
              }\
            ]\
          },\
          "commenter": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "domain",\
                "relation": "member"\
              }\
            ]\
          },\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "user",\
                "wildcard": {}\
              },\
              {\
                "type": "domain",\
                "relation": "member"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "domain",\
      "relations": {\
        "member": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "member": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

To mark Anne as the owner, the domain members as commenters and the public as viewers, we need to add the following relationship tuples:

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // Anne is the owner of document:2021-public-roadmap\
      {"_description":"Anne is the owner of document:2021-public-roadmap","user":"user:anne","relation":"owner","object":"document:2021-public-roadmap"},\
      // Members of the domain:xyz can comment on document:2021-public-roadmap\
      {"_description":"Members of the domain:xyz can comment on document:2021-public-roadmap","user":"domain:xyz#member","relation":"commenter","object":"document:2021-public-roadmap"},\
      // Everyone with type `user` can view document:2021-public-roadmap\
      {"_description":"Everyone with type `user` can view document:2021-public-roadmap","user":"user:*","relation":"viewer","object":"document:2021-public-roadmap"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             // Anne is the owner of document:2021-public-roadmap
             User: "user:anne",
             Relation: "owner",
             Object: "document:2021-public-roadmap",
        },         {
             // Members of the domain:xyz can comment on document:2021-public-roadmap
             User: "domain:xyz#member",
             Relation: "commenter",
             Object: "document:2021-public-roadmap",
        },         {
             // Everyone with type `user` can view document:2021-public-roadmap
             User: "user:*",
             Relation: "viewer",
             Object: "document:2021-public-roadmap",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
    // Anne is the owner of document:2021-public-roadmap
       new() {
                  User = "user:anne",
                  Relation = "owner",
                  Object = "document:2021-public-roadmap"
              },
    // Members of the domain:xyz can comment on document:2021-public-roadmap
       new() {
                  User = "domain:xyz#member",
                  Relation = "commenter",
                  Object = "document:2021-public-roadmap"
              },
    // Everyone with type `user` can view document:2021-public-roadmap
       new() {
                  User = "user:*",
                  Relation = "viewer",
                  Object = "document:2021-public-roadmap"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    # Anne is the owner of document:2021-public-roadmap\
                    user="user:anne",\
                    relation="owner",\
                    object="document:2021-public-roadmap",\
                ),\
                ClientTuple(\
                    # Members of the domain:xyz can comment on document:2021-public-roadmap\
                    user="domain:xyz#member",\
                    relation="commenter",\
                    object="document:2021-public-roadmap",\
                ),\
                ClientTuple(\
                    # Everyone with type `user` can view document:2021-public-roadmap\
                    user="user:*",\
                    relation="viewer",\
                    object="document:2021-public-roadmap",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                // Anne is the owner of document:2021-public-roadmap
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("owner")
                        ._object("document:2021-public-roadmap"),
                // Members of the domain:xyz can comment on document:2021-public-roadmap
                new ClientTupleKey()
                        .user("domain:xyz#member")
                        .relation("commenter")
                        ._object("document:2021-public-roadmap"),
                // Everyone with type `user` can view document:2021-public-roadmap
                new ClientTupleKey()
                        .user("user:*")
                        .relation("viewer")
                        ._object("document:2021-public-roadmap")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"_description":"Anne is the owner of document:2021-public-roadmap","user":"user:anne","relation":"owner","object":"document:2021-public-roadmap"},{"_description":"Members of the domain:xyz can comment on document:2021-public-roadmap","user":"domain:xyz#member","relation":"commenter","object":"document:2021-public-roadmap"},{"_description":"Everyone with type `user` can view document:2021-public-roadmap","user":"user:*","relation":"viewer","object":"document:2021-public-roadmap"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne owner document:2021-public-roadmap
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA domain:xyz#member commenter document:2021-public-roadmap
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:* viewer document:2021-public-roadmap

```

```codeBlockLines_e6Vv
write([\
    // Anne is the owner of document:2021-public-roadmap\
    {\
      "user":"user:anne",\
      "relation":"owner",\
      "object":"document:2021-public-roadmap"\
    },\
    // Members of the domain:xyz can comment on document:2021-public-roadmap\
    {\
      "user":"domain:xyz#member",\
      "relation":"commenter",\
      "object":"document:2021-public-roadmap"\
    },\
    // Everyone with type `user` can view document:2021-public-roadmap\
    {\
      "user":"user:*",\
      "relation":"viewer",\
      "object":"document:2021-public-roadmap"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

Anne is an owner of the document

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'owner',
    object: 'document:2021-public-roadmap',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "owner",
    Object:   "document:2021-public-roadmap",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "owner",
    Object = "document:2021-public-roadmap",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="owner",
    object="document:2021-public-roadmap",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("owner")
        ._object("document:2021-public-roadmap");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne owner document:2021-public-roadmap

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"owner","object":"document:2021-public-roadmap"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "owner", // has an `owner` relation
  object = "document:2021-public-roadmap", // with the object `document:2021-public-roadmap`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to document:2021-public-roadmap as owner?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

Beth is a member of the xyz.com domain, and so can comment but cannot write

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:beth',
    relation: 'writer',
    object: 'document:2021-public-roadmap',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:beth",
    Relation: "writer",
    Object:   "document:2021-public-roadmap",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:beth",
    Relation = "writer",
    Object = "document:2021-public-roadmap",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:beth",
    relation="writer",
    object="document:2021-public-roadmap",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:beth")
        .relation("writer")
        ._object("document:2021-public-roadmap");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:beth writer document:2021-public-roadmap

# Response: {"allowed":false}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:beth","relation":"writer","object":"document:2021-public-roadmap"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:beth", // check if the user `user:beth`
  relation = "writer", // has an `writer` relation
  object = "document:2021-public-roadmap", // with the object `document:2021-public-roadmap`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:beth related to document:2021-public-roadmap as writer?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:beth',
    relation: 'commenter',
    object: 'document:2021-public-roadmap',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:beth",
    Relation: "commenter",
    Object:   "document:2021-public-roadmap",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:beth",
    Relation = "commenter",
    Object = "document:2021-public-roadmap",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:beth",
    relation="commenter",
    object="document:2021-public-roadmap",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:beth")
        .relation("commenter")
        ._object("document:2021-public-roadmap");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:beth commenter document:2021-public-roadmap

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:beth","relation":"commenter","object":"document:2021-public-roadmap"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:beth", // check if the user `user:beth`
  relation = "commenter", // has an `commenter` relation
  object = "document:2021-public-roadmap", // with the object `document:2021-public-roadmap`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:beth related to document:2021-public-roadmap as commenter?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

Erik is NOT a member of the xyz.com domain, and so can only view the document

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:erik',
    relation: 'writer',
    object: 'document:2021-public-roadmap',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:erik",
    Relation: "writer",
    Object:   "document:2021-public-roadmap",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:erik",
    Relation = "writer",
    Object = "document:2021-public-roadmap",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:erik",
    relation="writer",
    object="document:2021-public-roadmap",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:erik")
        .relation("writer")
        ._object("document:2021-public-roadmap");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:erik writer document:2021-public-roadmap

# Response: {"allowed":false}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:erik","relation":"writer","object":"document:2021-public-roadmap"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:erik", // check if the user `user:erik`
  relation = "writer", // has an `writer` relation
  object = "document:2021-public-roadmap", // with the object `document:2021-public-roadmap`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:erik related to document:2021-public-roadmap as writer?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:erik',
    relation: 'viewer',
    object: 'document:2021-public-roadmap',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:erik",
    Relation: "viewer",
    Object:   "document:2021-public-roadmap",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:erik",
    Relation = "viewer",
    Object = "document:2021-public-roadmap",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:erik",
    relation="viewer",
    object="document:2021-public-roadmap",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:erik")
        .relation("viewer")
        ._object("document:2021-public-roadmap");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:erik viewer document:2021-public-roadmap

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:erik","relation":"viewer","object":"document:2021-public-roadmap"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:erik", // check if the user `user:erik`
  relation = "viewer", // has an `viewer` relation
  object = "document:2021-public-roadmap", // with the object `document:2021-public-roadmap`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:erik related to document:2021-public-roadmap as viewer?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

## Related Sections [​](https://openfga.dev/docs/modeling/advanced/gdrive\#related-sections "Direct link to Related Sections")

Take a look at the following sections for more information.

Search with permissions

Give your users search results with objects that they have access to

- [More](https://openfga.dev/docs/interacting/search-with-permissions)

- [Before you start](https://openfga.dev/docs/modeling/advanced/gdrive#before-you-start)
  - [concepts](https://openfga.dev/docs/modeling/advanced/gdrive#-concepts)
- [What you will be modeling](https://openfga.dev/docs/modeling/advanced/gdrive#what-you-will-be-modeling)
  - [Requirements](https://openfga.dev/docs/modeling/advanced/gdrive#requirements)
  - [Defined scenarios](https://openfga.dev/docs/modeling/advanced/gdrive#defined-scenarios)
- [Modeling Google Drive's permissions](https://openfga.dev/docs/modeling/advanced/gdrive#modeling-google-drives-permissions)
  - [01\. Individual permissions](https://openfga.dev/docs/modeling/advanced/gdrive#01-individual-permissions)
  - [02\. Organization permissions](https://openfga.dev/docs/modeling/advanced/gdrive#02-organization-permissions)
  - [03\. Folder permission propagation](https://openfga.dev/docs/modeling/advanced/gdrive#03-folder-permission-propagation)
  - [04\. Sharing files and folders publicly](https://openfga.dev/docs/modeling/advanced/gdrive#04-sharing-files-and-folders-publicly)
- [Related Sections](https://openfga.dev/docs/modeling/advanced/gdrive#related-sections)

## Conditional Relationship Tuples
[Skip to main content](https://openfga.dev/blog/conditional-tuples-announcement#__docusaurus_skipToContent_fallback)

Relationship Tuples are the facts that the OpenFGA evaluates to determine whether a user is permitted to access a resource.

The way tuples are considered when making authorization decisions in OpenFGA is guided by an authorization model, which employs concepts from Relationship-Based Access Control (ReBAC) to establish authorization policies. For instance, you might declare that users are allowed to view a document if they have permission to view its parent folder.

Although ReBAC offers a highly flexible method for structuring permissions, it encounters difficulties with defining permissions based on attributes that are not easily represented as relationships. Attributes such as “parent folder,” “department,” “region,” and “country” can be conceptualized as relationships between two entities. However, attributes like “IP address,” “time of day,” “team size limit,” or “maximum amount for a bank transfer” cannot be easily handled.

In our ongoing efforts to expand OpenFGA’s capacity for articulating a broader range of authorization policies, we are introducing **Conditional Relationship Tuples**. These allow for the specification of conditions under which a particular tuple is relevant when evaluating an authorization query.

Consider the following example, where we utilize Conditional Tuples to grant access for a user over a specified time duration. We stipulate that a user may be granted either unconditional access or access constrained to a certain time period:

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define viewer: [user, user with non_expired_grant]

condition non_expired_grant(current_time: timestamp, grant_time: timestamp, grant_duration: duration) {
  current_time < grant_time + grant_duration
}

```

If we write the following tuples:

| user | relation | object | condition |
| --- | --- | --- | --- |
| user:bob | viewer | document:1 |  |
| user:anne | viewer | document:1 | `name` : `non_expired_grant`, `context` : { `grant_time` : `2023-01-01T00:00:00Z`, `grant_duration` : `1h` } |

You'll get the following results for the [Check](https://openfga.dev/api/service#/Relationship%20Queries/Check) operations below:

| user | relation | object | context | result |
| --- | --- | --- | --- | --- |
| user:bob | viewer | document:1 |  | `allowed` : `true` |
| user:anne | viewer | document:1 | `current_time` : `2023-01-01T00:10:00Z` | `allowed` : `true` |
| user:anne | viewer | document:1 | `current_time` : `2023-01-01T02:00:00Z` | `allowed` : `false` |
| user:anne | viewer | document:1 |  | `error` : "failed to evaluate relationship condition 'non\_expired\_grant': context is missing parameters '\[current\_time\]' |

You'll get the following results for the [ListObjects](https://openfga.dev/api/service#/Relationship%20Queries/ListObjects) operations below:

| user | relation | object | context | result |
| --- | --- | --- | --- | --- |
| user:anne | viewer | document:1 | `current_time` : `2023-01-01T00:10:00Z` | `objects`: `[ "document:1"]` |
| user:anne | viewer | document:1 |  | `error`: "failed to evaluate relationship condition 'non\_expired\_grant': tuple 'document:1#viewer@user:anne' is missing context parameters '\[current\_time\]' |

Note that:

- `user:bob` will always get `allowed:true` as we have assigned as viewer unconditionally.
- `user:anne` will get `allowed:true` if the `current_time` is before the `grant_time` \+ `grant_duration` and `allowed:false` otherwise.
- If you don't provide the `current_time` in the context, the Check and ListObjects operations will fail.

## Use Cases [​](https://openfga.dev/blog/conditional-tuples-announcement\#use-cases "Direct link to Use Cases")

The [OpenFGA Sample Stores repository](https://github.com/openfga/sample-stores) has several examples that take advantage of this new feature:

- [Granting access during a specific period of time (the use case explained above)](https://github.com/openfga/sample-stores/tree/main/stores/temporal-access).
- [Allow access based on the user’s IP Address](https://github.com/openfga/sample-stores/tree/main/stores/ip-based-access).
- [Granting access based on group membership and resource attributes](https://github.com/openfga/sample-stores/tree/main/stores/groups-resource-attributes).
- [Allow access to specific features based on usage](https://github.com/openfga/sample-stores/tree/main/stores/advanced-entitlements).
- [Determine if a user can make a bank transfer based .on the transaction amount](https://github.com/openfga/sample-stores/tree/main/stores/banking).
- [Data types and operations supported in conditions](https://github.com/openfga/sample-stores/tree/main/stores/condition-data-types).

## How to use it? [​](https://openfga.dev/blog/conditional-tuples-announcement\#how-to-use-it "Direct link to How to use it?")

Conditional Relationship Tuples are included in OpenFGA 1.4.0-rc1 version. You can run it by pulling it from docker:

```codeBlockLines_e6Vv
docker pull openfga/openfga:v1.4.0-rc1
docker run -p 8080:8080 -p 8081:8081 -p 3000:3000 openfga/openfga:v1.4.0-rc1 run`

```

OpenFGA has a rich ecosystem of developer tools. The following have been updated to support Conditional Relationship Tuples:

- [Visual Studio Code integration](https://github.com/openfga/vscode-ext) which provides syntax highlighting and model validations for conditions.

- Beta versions of the [Javascript SDK](https://www.npmjs.com/package/@openfga/sdk/v/0.3.0-beta.1) and the [Go SDK](https://github.com/openfga/go-sdk/releases/tag/v0.3.0-beta.1), which allows using the additional parameters.

- The [OpenFGA CLI](https://github.com/openfga/cli) allows validating models and runing tests that use conditional tuples. You can use it to test the new features by pointing to a `“.fga.yaml”` file that [defines the tests you want to run](https://github.com/openfga/cli#run-tests-on-an-authorization-model), without having to deploy OpenFGA.


## What’s Next? [​](https://openfga.dev/blog/conditional-tuples-announcement\#whats-next "Direct link to What’s Next?")

We’ll address some limitations of the current implementation:

- The [Expand API](https://openfga.dev/api/service#/Relationship%20Queries/Expand) does not consider conditions.
- The Visual Studio Code integration is not validating the expressions in conditions.
- The Playground does not let you add context for tuples and assertions. You should use the VS Code Extension + the FGA CLI to test your models for now.

We'll also improve ListObjects scenarios when it's called with missing context. For example, consider the following model that enables access only to documents with a specific status:

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define can_access: [user with docs_in_draft_status]

condition docs_in_draft_status(status: string) {
  status == "draft"
}

```

If you want to list all the documents a user can view, you'll need to know the status of all of those documents. Given you don't know the documents the user has access too, you can't send the status of those as a parameter to ListObjects.

Our goal is to return a structure that you can use to filter documents on your side, similar to:
`(document.id = ‘1’ and document.status = ‘draft’) or (document.id = ‘2’ and.status = draft)`

This won’t scale to a large number of documents, but would be useful in some scenarios.

## Reach out! [​](https://openfga.dev/blog/conditional-tuples-announcement\#reach-out "Direct link to Reach out!")

We want to learn how you use this feature and how we can improve it!

Please reach out through our [community channels](https://openfga.dev/community) with any questions or feedback.

- [Use Cases](https://openfga.dev/blog/conditional-tuples-announcement#use-cases)
- [How to use it?](https://openfga.dev/blog/conditional-tuples-announcement#how-to-use-it)
- [What’s Next?](https://openfga.dev/blog/conditional-tuples-announcement#whats-next)
- [Reach out!](https://openfga.dev/blog/conditional-tuples-announcement#reach-out)

## GitHub Permissions Modeling
[Skip to main content](https://openfga.dev/docs/modeling/advanced/github#__docusaurus_skipToContent_fallback)

On this page

This tutorial explains how to model GitHub's Organization permission model using [OpenFGA](https://openfga.dev/docs/fga). [This article](https://docs.github.com/en/free-pro-team@latest/github/setting-up-and-managing-organizations-and-teams/managing-access-to-your-organizations-repositories) from the GitHub docs has links to all other articles we are going to be exploring in this document.

What you will learn

- Indicate [relationships](https://openfga.dev/docs/concepts#what-is-a-relationship) between a group of **[users](https://openfga.dev/docs/concepts#what-is-a-user)** and an **[object](https://openfga.dev/docs/concepts#what-is-an-object)**. See [Modeling User Groups](https://openfga.dev/docs/modeling/user-groups) for more details.


Used here to indicate that all members of an organization are repository admins on the organization.
- Modeling **concentric relationship** to have a certain [relation](https://openfga.dev/docs/concepts#what-is-a-relation) on an object imply another relation on the same object. See [Modeling Concepts: Concentric Relationships](https://openfga.dev/docs/modeling/building-blocks/concentric-relationships) for more.


Used here to indicate that maintainers of a repository are also writers of that repository.
- Using [**the union operator**](https://openfga.dev/docs/configuration-language#the-union-operator) condition to indicate that a user might have a certain relation with an object if they match any of the criteria indicated.


Used here to indicate that a user can be a reader on a repository, or can have the reader relationship implied through triager.
- Model [**parent-child objects**](https://openfga.dev/docs/modeling/parent-child) to indicate that a user having a relationship with a certain object implies having a relationship with another object in OpenFGA.


Used here to indicate that a repository admin on a GitHub organization, is an admin on all repositories that organization owns.

## Before you start [​](https://openfga.dev/docs/modeling/advanced/github\#before-you-start "Direct link to Before you start")

In order to understand this guide correctly you must be familiar with some OpenFGA concepts and know how to develop the things that we will list below.

### OpenFGA concepts [​](https://openfga.dev/docs/modeling/advanced/github\#-concepts "Direct link to -concepts")

It would be helpful to have an understanding of some concepts of OpenFGA before you start.

#### Modeling concentric relationships [​](https://openfga.dev/docs/modeling/advanced/github\#modeling-concentric-relationships "Direct link to Modeling concentric relationships")

You need to know how to update the authorization model to allow having nested relations such as all writers are readers. [Learn more →](https://openfga.dev/docs/modeling/building-blocks/concentric-relationships)

#### Modeling object-to-object relationships [​](https://openfga.dev/docs/modeling/advanced/github\#modeling-object-to-object-relationships "Direct link to Modeling object-to-object relationships")

You need to know how to create relationships between objects and how that might affect a user's relationships to those objects. [Learn more →](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships)

Used here to indicate that users who have repo admin access on an organization, have admin access to all repositories owned by that organization.

#### Concepts & configuration language [​](https://openfga.dev/docs/modeling/advanced/github\#concepts--configuration-language "Direct link to Concepts & configuration language")

- Some [OpenFGA Concepts](https://openfga.dev/docs/concepts)
- [Configuration Language](https://openfga.dev/docs/configuration-language)

## What you will be modeling [​](https://openfga.dev/docs/modeling/advanced/github\#what-you-will-be-modeling "Direct link to What you will be modeling")

GitHub is a system to develop and collaborate on code.

In this tutorial, you will build a subset of the GitHub permission model (detailed below) in OpenFGA, using some scenarios to validate the model.

> Note: For brevity, this tutorial will not model all of GitHub's permissions. Instead, it will focus on modeling for the scenarios outlined below

### Requirements [​](https://openfga.dev/docs/modeling/advanced/github\#requirements "Direct link to Requirements")

GitHub's permission model is represented in [their documentation](https://docs.github.com/en/organizations/managing-access-to-your-organizations-repositories/repository-roles-for-an-organization#repository-roles-for-organizations).

In this tutorial, you will be focusing on a subset of these permissions.

Requirements:

- Users can be admins, maintainers, writers, triagers or readers of repositories (each level inherits all access of the level lower than it. e.g. admins inherit maintainer access and so forth)
- Teams can have members
- Organizations can have members
- Organizations can own repositories
- Users can have repository admin access on organizations, and thus have admin access to all repositories owned by that organization

### Defined scenarios [​](https://openfga.dev/docs/modeling/advanced/github\#defined-scenarios "Direct link to Defined scenarios")

There will be the following users:

- Anne
- Beth
- Charles, a member of the contoso/engineering team
- Diane, a member of the contoso/protocols team
- Erik, a member of the contoso org

And these requirements:

- members of the contoso/protocols team are members of the contoso/engineering team
- members of the contoso org are repo\_admins on the org
- repo admins on the org are admins on all the repos the org owns

There will be a:

- contoso/tooling repository, owned by the contoso org and of which Beth is a writer and Anne is a reader and members of the contoso/engineering team are admins

## Modeling GitHub's permissions [​](https://openfga.dev/docs/modeling/advanced/github\#modeling-githubs-permissions "Direct link to Modeling GitHub's permissions")

### 01\. Permissions For Individuals In An Org [​](https://openfga.dev/docs/modeling/advanced/github\#01-permissions-for-individuals-in-an-org "Direct link to 01. Permissions For Individuals In An Org")

GitHub has [5 different permission levels for repositories](https://docs.github.com/en/free-pro-team@latest/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization):

![Image showing github permission levels](https://openfga.dev/assets/images/github-permission-level-1059e9392f2d7126e8376f141d5bad84.svg)

At the end of this section we want to end up with the following permissions represented:

![Image showing permissions](https://openfga.dev/assets/images/github-01-14b7cc249174f7311e651e9541c4527b.svg)

To represent permissions in OpenFGA we use [relations](https://openfga.dev/docs/concepts#what-is-a-relation). For repository permissions we need to create the following [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model):

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type repo
  relations
    define reader: [user]
    define triager: [user]
    define writer: [user]
    define maintainer: [user]
    define admin: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "repo",\
      "relations": {\
        "reader": {\
          "this": {}\
        },\
        "triager": {\
          "this": {}\
        },\
        "writer": {\
          "this": {}\
        },\
        "maintainer": {\
          "this": {}\
        },\
        "admin": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "reader": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "triager": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "writer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "maintainer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "admin": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

The OpenFGA service determines if a [user](https://openfga.dev/docs/concepts#what-is-a-user) has access to an [object](https://openfga.dev/docs/concepts#what-is-an-object) by [checking](https://openfga.dev/docs/concepts#what-is-a-check-request) if the user has a relation to that object. Let us examine one of those relations in detail:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type repo
  relations
    define reader: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "repo",\
      "relations": {\
        "reader": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "reader": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

info

Objects of type "repo" have users related to them as "reader" if those users belong to the userset of all users related to the repo as "reader"

If we want to say `anne` is a reader of repository **repo:contoso/tooling** we create this [relationship tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple):

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"user:anne","relation":"reader","object":"repo:contoso/tooling"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             User: "user:anne",
             Relation: "reader",
             Object: "repo:contoso/tooling",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
       new() {
                  User = "user:anne",
                  Relation = "reader",
                  Object = "repo:contoso/tooling"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    user="user:anne",\
                    relation="reader",\
                    object="repo:contoso/tooling",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("reader")
                        ._object("repo:contoso/tooling")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"user":"user:anne","relation":"reader","object":"repo:contoso/tooling"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne reader repo:contoso/tooling

```

```codeBlockLines_e6Vv
write([\
    {\
      "user":"user:anne",\
      "relation":"reader",\
      "object":"repo:contoso/tooling"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

We can now [ask](https://openfga.dev/docs/concepts#what-is-a-check-request) OpenFGA "is `anne` a reader of repository **repo:contoso/tooling**?"

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'reader',
    object: 'repo:contoso/tooling',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "reader",
    Object:   "repo:contoso/tooling",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "reader",
    Object = "repo:contoso/tooling",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="reader",
    object="repo:contoso/tooling",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("reader")
        ._object("repo:contoso/tooling");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne reader repo:contoso/tooling

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"reader","object":"repo:contoso/tooling"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "reader", // has an `reader` relation
  object = "repo:contoso/tooling", // with the object `repo:contoso/tooling`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to repo:contoso/tooling as reader?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

We could also say that `beth` is a writer of the same repository:

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"user:beth","relation":"writer","object":"repo:contoso/tooling"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             User: "user:beth",
             Relation: "writer",
             Object: "repo:contoso/tooling",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
       new() {
                  User = "user:beth",
                  Relation = "writer",
                  Object = "repo:contoso/tooling"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    user="user:beth",\
                    relation="writer",\
                    object="repo:contoso/tooling",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                new ClientTupleKey()
                        .user("user:beth")
                        .relation("writer")
                        ._object("repo:contoso/tooling")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"user":"user:beth","relation":"writer","object":"repo:contoso/tooling"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:beth writer repo:contoso/tooling

```

```codeBlockLines_e6Vv
write([\
    {\
      "user":"user:beth",\
      "relation":"writer",\
      "object":"repo:contoso/tooling"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

And ask some questions to OpenFGA:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:beth',
    relation: 'writer',
    object: 'repo:contoso/tooling',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:beth",
    Relation: "writer",
    Object:   "repo:contoso/tooling",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:beth",
    Relation = "writer",
    Object = "repo:contoso/tooling",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:beth",
    relation="writer",
    object="repo:contoso/tooling",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:beth")
        .relation("writer")
        ._object("repo:contoso/tooling");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:beth writer repo:contoso/tooling

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:beth","relation":"writer","object":"repo:contoso/tooling"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:beth", // check if the user `user:beth`
  relation = "writer", // has an `writer` relation
  object = "repo:contoso/tooling", // with the object `repo:contoso/tooling`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:beth related to repo:contoso/tooling as writer?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:beth',
    relation: 'reader',
    object: 'repo:contoso/tooling',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:beth",
    Relation: "reader",
    Object:   "repo:contoso/tooling",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:beth",
    Relation = "reader",
    Object = "repo:contoso/tooling",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:beth",
    relation="reader",
    object="repo:contoso/tooling",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:beth")
        .relation("reader")
        ._object("repo:contoso/tooling");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:beth reader repo:contoso/tooling

# Response: {"allowed":false}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:beth","relation":"reader","object":"repo:contoso/tooling"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:beth", // check if the user `user:beth`
  relation = "reader", // has an `reader` relation
  object = "repo:contoso/tooling", // with the object `repo:contoso/tooling`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:beth related to repo:contoso/tooling as reader?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

The first reply makes sense but the second one does not. Intuitively, if `beth` was writer, she was also be a reader. In fact, GitHub explains this in [their documentation](https://docs.github.com/en/free-pro-team@latest/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#repository-access-for-each-permission-level)![Showing various GitHub repo access level](https://openfga.dev/assets/images/github-repo-access-level-6c53de1088cef314d5d1de14a8634727.svg)

To make OpenFGA aware of this "concentric" permission model we need to update our definitions:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type repo
  relations
    define reader: [user] or triager
    define triager: [user] or writer
    define writer: [user] or maintainer
    define maintainer: [user] or admin
    define admin: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "repo",\
      "relations": {\
        "reader": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "triager"\
                }\
              }\
            ]\
          }\
        },\
        "triager": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "writer"\
                }\
              }\
            ]\
          }\
        },\
        "writer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "maintainer"\
                }\
              }\
            ]\
          }\
        },\
        "maintainer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "admin"\
                }\
              }\
            ]\
          }\
        },\
        "admin": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "reader": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "triager": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "writer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "maintainer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "admin": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

Let us examine one of those relations in detail:

- DSL
- JSON

```codeBlockLines_e6Vv

type repo
  relations
    define reader: [user] or triager

```

```codeBlockLines_e6Vv
{
  "type": "repo",
  "relations": {
    "reader": {
      "union": {
        "child": [\
          {\
            "this": {}\
          },\
          {\
            "computedUserset": {\
              "relation": "triager"\
            }\
          }\
        ]
      }
    }
  },
  "metadata": {
    "relations": {
      "reader": {
        "directly_related_user_types": [\
          {\
            "type": "user"\
          }\
        ]
      }
    }
  }
}

```

info

The users with a reader relationship to a certain object of type "repo" are any of:

- the "readers": the set of users who are [directly related](https://openfga.dev/docs/concepts#what-are-direct-and-implied-relationships) to the repo as a "reader"
- the "triagers": the set of users who are related to the object as "triager"

With this simple update our model now supports nested definitions and now:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:beth',
    relation: 'writer',
    object: 'repo:contoso/tooling',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:beth",
    Relation: "writer",
    Object:   "repo:contoso/tooling",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:beth",
    Relation = "writer",
    Object = "repo:contoso/tooling",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:beth",
    relation="writer",
    object="repo:contoso/tooling",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:beth")
        .relation("writer")
        ._object("repo:contoso/tooling");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:beth writer repo:contoso/tooling

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:beth","relation":"writer","object":"repo:contoso/tooling"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:beth", // check if the user `user:beth`
  relation = "writer", // has an `writer` relation
  object = "repo:contoso/tooling", // with the object `repo:contoso/tooling`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:beth related to repo:contoso/tooling as writer?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:beth',
    relation: 'reader',
    object: 'repo:contoso/tooling',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:beth",
    Relation: "reader",
    Object:   "repo:contoso/tooling",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:beth",
    Relation = "reader",
    Object = "repo:contoso/tooling",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:beth",
    relation="reader",
    object="repo:contoso/tooling",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:beth")
        .relation("reader")
        ._object("repo:contoso/tooling");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:beth reader repo:contoso/tooling

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:beth","relation":"reader","object":"repo:contoso/tooling"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:beth", // check if the user `user:beth`
  relation = "reader", // has an `reader` relation
  object = "repo:contoso/tooling", // with the object `repo:contoso/tooling`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:beth related to repo:contoso/tooling as reader?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

### 02\. Permissions for teams in an org [​](https://openfga.dev/docs/modeling/advanced/github\#02-permissions-for-teams-in-an-org "Direct link to 02. Permissions for teams in an org")

GitHub also supports [creating teams in an organization](https://docs.github.com/en/free-pro-team@latest/github/setting-up-and-managing-organizations-and-teams/creating-a-team), [adding members to a team](https://docs.github.com/en/free-pro-team@latest/github/setting-up-and-managing-organizations-and-teams/adding-organization-members-to-a-team) and [granting teams permissions, rather than individuals](https://docs.github.com/en/free-pro-team@latest/github/setting-up-and-managing-organizations-and-teams/managing-team-access-to-an-organization-repository).

At the end of this section we want to end up with the following permissions represented:

![Image showing permissions](https://openfga.dev/assets/images/github-02-2eaa2dc691d0378f661d8ce52dfab5d4.svg)

To add support for teams and memberships all we need to do is add this object to the OpenFGA [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model):

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type team
  relations
    define member: [user, team#member]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "team",\
      "relations": {\
        "member": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "member": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "team",\
                "relation": "member"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

In addition, the repo's relations should have team member as a directly related user types.

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type repo
  relations
    define reader: [user, team#member] or triager
    define triager: [user, team#member] or writer
    define writer: [user, team#member] or maintainer
    define maintainer: [user, team#member] or admin
    define admin: [user, team#member]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "repo",\
      "relations": {\
        "reader": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "triager"\
                }\
              }\
            ]\
          }\
        },\
        "triager": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "writer"\
                }\
              }\
            ]\
          }\
        },\
        "writer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "maintainer"\
                }\
              }\
            ]\
          }\
        },\
        "maintainer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "admin"\
                }\
              }\
            ]\
          }\
        },\
        "admin": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "reader": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "team",\
                "relation": "member"\
              }\
            ]\
          },\
          "triager": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "team",\
                "relation": "member"\
              }\
            ]\
          },\
          "writer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "team",\
                "relation": "member"\
              }\
            ]\
          },\
          "maintainer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "team",\
                "relation": "member"\
              }\
            ]\
          },\
          "admin": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "team",\
                "relation": "member"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

Let us now create a team, add a member to it and make it an admin of **repo:contoso/tooling** by adding the following [relationship tuples](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple):

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // make charles a member of the contoso/engineering team\
      {"_description":"make charles a member of the contoso/engineering team","user":"user:charles","relation":"member","object":"team:contoso/engineering"},\
      // make members of contoso/engineering team admins of contoso/tooling\
      {"_description":"make members of contoso/engineering team admins of contoso/tooling","user":"team:contoso/engineering#member","relation":"admin","object":"repo:contoso/tooling"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             // make charles a member of the contoso/engineering team
             User: "user:charles",
             Relation: "member",
             Object: "team:contoso/engineering",
        },         {
             // make members of contoso/engineering team admins of contoso/tooling
             User: "team:contoso/engineering#member",
             Relation: "admin",
             Object: "repo:contoso/tooling",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
    // make charles a member of the contoso/engineering team
       new() {
                  User = "user:charles",
                  Relation = "member",
                  Object = "team:contoso/engineering"
              },
    // make members of contoso/engineering team admins of contoso/tooling
       new() {
                  User = "team:contoso/engineering#member",
                  Relation = "admin",
                  Object = "repo:contoso/tooling"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    # make charles a member of the contoso/engineering team\
                    user="user:charles",\
                    relation="member",\
                    object="team:contoso/engineering",\
                ),\
                ClientTuple(\
                    # make members of contoso/engineering team admins of contoso/tooling\
                    user="team:contoso/engineering#member",\
                    relation="admin",\
                    object="repo:contoso/tooling",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                // make charles a member of the contoso/engineering team
                new ClientTupleKey()
                        .user("user:charles")
                        .relation("member")
                        ._object("team:contoso/engineering"),
                // make members of contoso/engineering team admins of contoso/tooling
                new ClientTupleKey()
                        .user("team:contoso/engineering#member")
                        .relation("admin")
                        ._object("repo:contoso/tooling")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"_description":"make charles a member of the contoso/engineering team","user":"user:charles","relation":"member","object":"team:contoso/engineering"},{"_description":"make members of contoso/engineering team admins of contoso/tooling","user":"team:contoso/engineering#member","relation":"admin","object":"repo:contoso/tooling"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:charles member team:contoso/engineering
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA team:contoso/engineering#member admin repo:contoso/tooling

```

```codeBlockLines_e6Vv
write([\
    // make charles a member of the contoso/engineering team\
    {\
      "user":"user:charles",\
      "relation":"member",\
      "object":"team:contoso/engineering"\
    },\
    // make members of contoso/engineering team admins of contoso/tooling\
    {\
      "user":"team:contoso/engineering#member",\
      "relation":"admin",\
      "object":"repo:contoso/tooling"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

The last relationship tuple introduces a new **OpenFGA** concept. A **[userset](https://openfga.dev/docs/concepts#what-is-a-user)**. When the value of a user is formatted like this **type:objectId#relation**, OpenFGA will automatically expand the userset into all its individual user identifiers:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:charles',
    relation: 'admin',
    object: 'repo:contoso/tooling',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:charles",
    Relation: "admin",
    Object:   "repo:contoso/tooling",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:charles",
    Relation = "admin",
    Object = "repo:contoso/tooling",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:charles",
    relation="admin",
    object="repo:contoso/tooling",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:charles")
        .relation("admin")
        ._object("repo:contoso/tooling");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:charles admin repo:contoso/tooling

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:charles","relation":"admin","object":"repo:contoso/tooling"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:charles", // check if the user `user:charles`
  relation = "admin", // has an `admin` relation
  object = "repo:contoso/tooling", // with the object `repo:contoso/tooling`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:charles related to repo:contoso/tooling as admin?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

### 03\. Permissions for child teams in an org [​](https://openfga.dev/docs/modeling/advanced/github\#03-permissions-for-child-teams-in-an-org "Direct link to 03. Permissions for child teams in an org")

GitHub also supports team nesting, [known as "child teams"](https://docs.github.com/en/free-pro-team@latest/github/setting-up-and-managing-organizations-and-teams/requesting-to-add-a-child-team). **Child teams inherit the access permissions of the parent team.**
Let's say we have a **protocols** team that is part of the **engineering**. The simplest way to achieve the aforementioned requirement is just adding this [relationship tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple):

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"team:contoso/protocols#member","relation":"member","object":"team:contoso/engineering"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             User: "team:contoso/protocols#member",
             Relation: "member",
             Object: "team:contoso/engineering",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
       new() {
                  User = "team:contoso/protocols#member",
                  Relation = "member",
                  Object = "team:contoso/engineering"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    user="team:contoso/protocols#member",\
                    relation="member",\
                    object="team:contoso/engineering",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                new ClientTupleKey()
                        .user("team:contoso/protocols#member")
                        .relation("member")
                        ._object("team:contoso/engineering")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"user":"team:contoso/protocols#member","relation":"member","object":"team:contoso/engineering"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA team:contoso/protocols#member member team:contoso/engineering

```

```codeBlockLines_e6Vv
write([\
    {\
      "user":"team:contoso/protocols#member",\
      "relation":"member",\
      "object":"team:contoso/engineering"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

which says that members of protocols are members of engineering.

> **Note:** this is enough and valid for our current requirements, and for other read cases allows determining members of the direct team vs sub teams as the latter come from **team:contoso/protocols#member**. If the #member relation should not be followed for use cases a different approach could be taken.

We can now add a member to the protocols team and check that they are admins of the tooling repository.

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // make diane a member of the contoso/protocols team\
      {"_description":"make diane a member of the contoso/protocols team","user":"user:diane","relation":"member","object":"team:contoso/protocols"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             // make diane a member of the contoso/protocols team
             User: "user:diane",
             Relation: "member",
             Object: "team:contoso/protocols",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
    // make diane a member of the contoso/protocols team
       new() {
                  User = "user:diane",
                  Relation = "member",
                  Object = "team:contoso/protocols"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    # make diane a member of the contoso/protocols team\
                    user="user:diane",\
                    relation="member",\
                    object="team:contoso/protocols",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                // make diane a member of the contoso/protocols team
                new ClientTupleKey()
                        .user("user:diane")
                        .relation("member")
                        ._object("team:contoso/protocols")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"_description":"make diane a member of the contoso/protocols team","user":"user:diane","relation":"member","object":"team:contoso/protocols"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:diane member team:contoso/protocols

```

```codeBlockLines_e6Vv
write([\
    // make diane a member of the contoso/protocols team\
    {\
      "user":"user:diane",\
      "relation":"member",\
      "object":"team:contoso/protocols"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:diane',
    relation: 'admin',
    object: 'repo:contoso/tooling',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:diane",
    Relation: "admin",
    Object:   "repo:contoso/tooling",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:diane",
    Relation = "admin",
    Object = "repo:contoso/tooling",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:diane",
    relation="admin",
    object="repo:contoso/tooling",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:diane")
        .relation("admin")
        ._object("repo:contoso/tooling");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:diane admin repo:contoso/tooling

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:diane","relation":"admin","object":"repo:contoso/tooling"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:diane", // check if the user `user:diane`
  relation = "admin", // has an `admin` relation
  object = "repo:contoso/tooling", // with the object `repo:contoso/tooling`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:diane related to repo:contoso/tooling as admin?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

At the end of this section ended with the following permissions represented:

![Image showing permissions](https://openfga.dev/assets/images/github-03-7afa9c606e43a97e744eda1e1f201b02.svg)

### 04\. Base permissions for org members [​](https://openfga.dev/docs/modeling/advanced/github\#04-base-permissions-for-org-members "Direct link to 04. Base permissions for org members")

In GitHub, ["you can set base permissions that apply to all members of an organization when accessing any of the organization's repositories"](https://docs.github.com/en/free-pro-team@latest/github/setting-up-and-managing-organizations-and-teams/setting-base-permissions-for-an-organization). For our purposes this means that if:

- User `erik` is a member of an organization `contoso`
- _and_ `contoso` has a repository `tooling`
- _and_ `contoso` has configured base permission to be "write"

then `erik` has write permissions to tooling.

Let us model that!

At the end of this section we want to end up with the following permissions represented:

![](https://openfga.dev/assets/images/github-04-6a9b8175f0c09f9ce3b843911c620693.svg)

We need to introduce the notion of organization as a type, user organization membership and repository ownership as a relation. - It is worth calling that before this addition we were able to represent almost the entire GitHub repo permissions without adding the notion of organization to OpenFGA. Identifiers for users, repositories and teams were all that was necessary.
Let us add support for organizations and membership. Hopefully this feels familiar by now:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type organization
  relations
    define member: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "organization",\
      "relations": {\
        "member": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "member": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

And support for repositories having owners:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type repo
  relations
    define reader: [user, team#member] or triager
    define triager: [user, team#member] or writer
    define writer: [user, team#member] or maintainer
    define maintainer: [user, team#member] or admin
    define admin: [user, team#member]
    define owner: [organization]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "repo",\
      "relations": {\
        "reader": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "triager"\
                }\
              }\
            ]\
          }\
        },\
        "triager": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "writer"\
                }\
              }\
            ]\
          }\
        },\
        "writer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "maintainer"\
                }\
              }\
            ]\
          }\
        },\
        "maintainer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "admin"\
                }\
              }\
            ]\
          }\
        },\
        "admin": {\
          "this": {}\
        },\
        "owner": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "reader": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "team",\
                "relation": "member"\
              }\
            ]\
          },\
          "triager": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "team",\
                "relation": "member"\
              }\
            ]\
          },\
          "writer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "team",\
                "relation": "member"\
              }\
            ]\
          },\
          "maintainer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "team",\
                "relation": "member"\
              }\
            ]\
          },\
          "admin": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "team",\
                "relation": "member"\
              }\
            ]\
          },\
          "owner": {\
            "directly_related_user_types": [\
              {\
                "type": "organization"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

info

Note the added "owner" relation, indicating that organizations can own repositories.

We can now make Erik a member of contoso and make contoso own **contoso/tooling**:

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"user:erik","relation":"member","object":"organization:contoso"},\
      {"user":"organization:contoso","relation":"owner","object":"repo:contoso/tooling"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             User: "user:erik",
             Relation: "member",
             Object: "organization:contoso",
        },         {
             User: "organization:contoso",
             Relation: "owner",
             Object: "repo:contoso/tooling",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
       new() {
                  User = "user:erik",
                  Relation = "member",
                  Object = "organization:contoso"
              },
       new() {
                  User = "organization:contoso",
                  Relation = "owner",
                  Object = "repo:contoso/tooling"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    user="user:erik",\
                    relation="member",\
                    object="organization:contoso",\
                ),\
                ClientTuple(\
                    user="organization:contoso",\
                    relation="owner",\
                    object="repo:contoso/tooling",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                new ClientTupleKey()
                        .user("user:erik")
                        .relation("member")
                        ._object("organization:contoso"),
                new ClientTupleKey()
                        .user("organization:contoso")
                        .relation("owner")
                        ._object("repo:contoso/tooling")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"user":"user:erik","relation":"member","object":"organization:contoso"},{"user":"organization:contoso","relation":"owner","object":"repo:contoso/tooling"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:erik member organization:contoso
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA organization:contoso owner repo:contoso/tooling

```

```codeBlockLines_e6Vv
write([\
    {\
      "user":"user:erik",\
      "relation":"member",\
      "object":"organization:contoso"\
    },\
    {\
      "user":"organization:contoso",\
      "relation":"owner",\
      "object":"repo:contoso/tooling"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

What we still lack is the ability to create "default permissions" for the organization and have those be considered when determining if a user has a particular relation to a repository. Let's start with the simplest case **admin**. We want to say that a user is an admin of a repo if either:

- \[done\] they have a repo admin relation (directly or through team membership)
- \[pending\] their organization is configured with **repo\_admin** as the base permission

We need a way to consider the organization members, not just direct relations to the repo when getting a check for:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:erik',
    relation: 'admin',
    object: 'repo:contoso/tooling',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = undefined

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:erik",
    Relation: "admin",
    Object:   "repo:contoso/tooling",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: undefined }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:erik",
    Relation = "admin",
    Object = "repo:contoso/tooling",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = undefined

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:erik",
    relation="admin",
    object="repo:contoso/tooling",
)

response = await fga_client.check(body, options)

# response.allowed = undefined

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:erik")
        .relation("admin")
        ._object("repo:contoso/tooling");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = undefined

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:erik admin repo:contoso/tooling

# Response: {"allowed":undefined}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:erik","relation":"admin","object":"repo:contoso/tooling"}}'

# Response: {"allowed":undefined}

```

```codeBlockLines_e6Vv
check(
  user = "user:erik", // check if the user `user:erik`
  relation = "admin", // has an `admin` relation
  object = "repo:contoso/tooling", // with the object `repo:contoso/tooling`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: undefined

```

```codeBlockLines_e6Vv
is user:erik related to repo:contoso/tooling as admin?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

More details on this technique can be found in the section [Modeling Parent-Child Objects](https://openfga.dev/docs/modeling/parent-child).

We express it like this:

- DSL
- JSON

```codeBlockLines_e6Vv

type repo
  relations
    define admin: [user, team#member, organization#member] or repo_admin from owner

```

```codeBlockLines_e6Vv
{
  "type_definitions": [\
    {\
      "type": "repo",\
      "relations": {\
        "admin": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "tupleToUserset": {\
                  "tupleset": {\
                    "relation": "owner"\
                  },\
                  "computedUserset": {\
                    "relation": "repo_admin"\
                  }\
                }\
              }\
            ]\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "admin": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "team",\
                "relation": "member"\
              },\
              {\
                "type": "organization",\
                "relation": "member"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

info

The users with an admin relationship to a certain object of type "repo" are any of:

- the "admins": the set of users who are [directly related](https://openfga.dev/docs/concepts#what-are-direct-and-implied-relationships) to the repo as an "admin"
- the "repository admins of the org that owns the repo": from the objects who are related to the doc as owner, return the sets of users who are related to those objects as "repo\_admin"

What the added section is doing is:

1. read all relationship tuples related to repo:contoso/tooling as owner which returns:

`[{ "object": "repo:contoso/tooling", "relation": "owner", "user": "organization:contoso" }]`

2. for each relationship tuple read, return all usersets that match the following, returning tuples of shape:

`{ "object": "organization:contoso", "relation": "repo_admin", "user": ??? }`

What should the **users** in those relationship tuples with **???** be?

- Well:
  - If the base permission for org contoso is repo\_admin then it should be **organization:contoso#member**.
  - If the base permission for org contoso is NOT repo\_admin, then it should be empty (no relationship tuple).
- Whenever the value of this dropdown changes:
![Selecting new permission level from base permissions drop-down](https://openfga.dev/assets/images/github-org-base-permissions-drop-down-2952b06603835375e74da4bf2f8278f4.png)  - Delete the previous relationship tuple and create a new one:


- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"organization:contoso#member","relation":"repo_admin","object":"organization:contoso"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             User: "organization:contoso#member",
             Relation: "repo_admin",
             Object: "organization:contoso",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
       new() {
                  User = "organization:contoso#member",
                  Relation = "repo_admin",
                  Object = "organization:contoso"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    user="organization:contoso#member",\
                    relation="repo_admin",\
                    object="organization:contoso",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                new ClientTupleKey()
                        .user("organization:contoso#member")
                        .relation("repo_admin")
                        ._object("organization:contoso")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"user":"organization:contoso#member","relation":"repo_admin","object":"organization:contoso"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA organization:contoso#member repo_admin organization:contoso

```

```codeBlockLines_e6Vv
write([\
    {\
      "user":"organization:contoso#member",\
      "relation":"repo_admin",\
      "object":"organization:contoso"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

The updated authorization model looks like this:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type repo
  relations
    define admin: [user, team#member, organization#member] or repo_admin from owner
    define maintainer: [user, team#member, organization#member] or admin
    define writer: [user, team#member, organization#member] or maintainer or writer from owner
    define triager: [user, team#member, organization#member] or writer
    define reader: [user, team#member, organization#member] or triager or reader from owner
    define owner: [organization]

type organization
  relations
    define owner: [organization]
    define repo_admin: [user, team#member, organization#member]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "repo",\
      "relations": {\
        "admin": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "tupleToUserset": {\
                  "computedUserset": {\
                    "relation": "repo_admin"\
                  },\
                  "tupleset": {\
                    "relation": "owner"\
                  }\
                }\
              }\
            ]\
          }\
        },\
        "maintainer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "admin"\
                }\
              }\
            ]\
          }\
        },\
        "writer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "maintainer"\
                }\
              },\
              {\
                "tupleToUserset": {\
                  "computedUserset": {\
                    "relation": "writer"\
                  },\
                  "tupleset": {\
                    "relation": "owner"\
                  }\
                }\
              }\
            ]\
          }\
        },\
        "triager": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "writer"\
                }\
              }\
            ]\
          }\
        },\
        "reader": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "triager"\
                }\
              },\
              {\
                "tupleToUserset": {\
                  "computedUserset": {\
                    "relation": "reader"\
                  },\
                  "tupleset": {\
                    "relation": "owner"\
                  }\
                }\
              }\
            ]\
          }\
        },\
        "owner": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "reader": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "team",\
                "relation": "member"\
              },\
              {\
                "type": "organization",\
                "relation": "member"\
              }\
            ]\
          },\
          "triager": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "team",\
                "relation": "member"\
              },\
              {\
                "type": "organization",\
                "relation": "member"\
              }\
            ]\
          },\
          "writer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "team",\
                "relation": "member"\
              },\
              {\
                "type": "organization",\
                "relation": "member"\
              }\
            ]\
          },\
          "maintainer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "team",\
                "relation": "member"\
              },\
              {\
                "type": "organization",\
                "relation": "member"\
              }\
            ]\
          },\
          "admin": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "team",\
                "relation": "member"\
              },\
              {\
                "type": "organization",\
                "relation": "member"\
              }\
            ]\
          },\
          "owner": {\
            "directly_related_user_types": [\
              {\
                "type": "organization"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "organization",\
      "relations": {\
        "owner": {\
          "this": {}\
        },\
        "repo_admin": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "owner": {\
            "directly_related_user_types": [\
              {\
                "type": "organization"\
              }\
            ]\
          },\
          "repo_admin": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "team",\
                "relation": "member"\
              },\
              {\
                "type": "organization",\
                "relation": "member"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

## Summary [​](https://openfga.dev/docs/modeling/advanced/github\#summary "Direct link to Summary")

GitHub has a number of other permissions. You have [organization billing managers, users that can manage specific apps, etc](https://docs.github.com/en/free-pro-team@latest/github/setting-up-and-managing-organizations-and-teams/permission-levels-for-an-organization). We might explore those in the future, but hopefully this blog post has shown you how you could represent those cases using OpenFGA.

- [Before you start](https://openfga.dev/docs/modeling/advanced/github#before-you-start)
  - [concepts](https://openfga.dev/docs/modeling/advanced/github#-concepts)
- [What you will be modeling](https://openfga.dev/docs/modeling/advanced/github#what-you-will-be-modeling)
  - [Requirements](https://openfga.dev/docs/modeling/advanced/github#requirements)
  - [Defined scenarios](https://openfga.dev/docs/modeling/advanced/github#defined-scenarios)
- [Modeling GitHub's permissions](https://openfga.dev/docs/modeling/advanced/github#modeling-githubs-permissions)
  - [01\. Permissions For Individuals In An Org](https://openfga.dev/docs/modeling/advanced/github#01-permissions-for-individuals-in-an-org)
  - [02\. Permissions for teams in an org](https://openfga.dev/docs/modeling/advanced/github#02-permissions-for-teams-in-an-org)
  - [03\. Permissions for child teams in an org](https://openfga.dev/docs/modeling/advanced/github#03-permissions-for-child-teams-in-an-org)
  - [04\. Base permissions for org members](https://openfga.dev/docs/modeling/advanced/github#04-base-permissions-for-org-members)
- [Summary](https://openfga.dev/docs/modeling/advanced/github#summary)

## OpenFGA CLI Guide
[Skip to main content](https://openfga.dev/docs/getting-started/cli#__docusaurus_skipToContent_fallback)

On this page

The OpenFGA Command Line Interface (CLI) enables you to interact with an FGA store, where you can manage tasks, create stores, and update FGA models, among other actions. For more information on FGA stores, see [What Is A Store](https://openfga.dev/docs/concepts#what-is-a-store).

For instructions on installing it, visit the [OpenFGA CLI Github repository](https://github.com/openfga/cli).

## Configuration [​](https://openfga.dev/docs/getting-started/cli\#configuration "Direct link to Configuration")

The CLI is configured to use a specific FGA server in one of three ways:

- Using CLI flags.
- Using environment variables.
- Storing configuration values in a .fga.yaml located in the user’s root directory.

The API Url setting needs to point to the OpenFGA server:

| Name | Flag | Environment | ~/.fga.yaml | Default Value |
| --- | --- | --- | --- | --- |
| API Url | --api-url | FGA\_API\_URL | api-url | `http://localhost:8080` |

If you use [pre-shared key authentication](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga#pre-shared-key-authentication), provide the following parameters which appends the pre-shared key in the HTTP request header:

| Name | Flag | Environment | ~/.fga.yaml |
| --- | --- | --- | --- |
| API Token | --api-token | FGA\_API\_TOKEN | api-token |

If you use [OIDC authentication](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga#oidc), configure the following parameters based on the OIDC server that’s used to issue tokens:

| Name | Flag | Environment | ~/.fga.yaml |
| --- | --- | --- | --- |
| Client ID | --client-id | FGA\_CLIENT\_ID | client-id |
| Client Secret | --client-secret | FGA\_CLIENT\_SECRET | client-secret |
| Scopes | --api-scopes | FGA\_API\_SCOPES | api-scopes |
| Token Issuer | --api-token-issuer | FGA\_API\_TOKEN\_ISSUER | api-token-issuer |
| Token Audience | --api-audience | FGA\_API\_AUDIENCE | api-audience |

A default store Id and authorization model Id can also be configured:

| Name | Flag | Environment | ~/.fga.yaml |
| --- | --- | --- | --- |
| Store ID | --store-id | FGA\_STORE\_ID | store-id |
| Authorization Model ID | --model-id | FGA\_MODEL\_ID | model-id |

All of the examples in this document assume the CLI is properly configured and that the Store ID is set either in an environment variable or the `~/.fga.yaml` file.

## Basic operations [​](https://openfga.dev/docs/getting-started/cli\#basic-operations "Direct link to Basic operations")

The CLI commands below show you how to create a store and run your application’s most common operations, including how to write a model and write/delete/read tuples, and run queries.

```codeBlockLines_e6Vv

# Create a store with a model
$ fga store create --model docs.fga
{
  "store": {
    "created_at":"2024-02-09T23:20:28.637533296Z",
    "id":"01HP82R96XEJX1Q9YWA9XRQ4PM",
    "name":"docs",
    "updated_at":"2024-02-09T23:20:28.637533296Z"
  },
  "model": {
    "authorization_model_id":"01HP82R97B448K89R45PW7NXD8"
  }
}

# Keep the returned store id in an environment variable
$ export FGA_STORE_ID=01HP82R96XEJX1Q9YWA9XRQ4PM

# Get the latest model
$ fga model get
model
  schema 1.1

type user

type organization
  relations
    define admin: [user with non_expired_grant]
    define member: [user]

type document
  relations
    define editor: admin from organization
    define organization: [organization]
    define viewer: editor or member from organization

condition non_expired_grant(current_time: timestamp, grant_duration: duration, grant_time: timestamp) {
  current_time < grant_time + grant_duration

}

# Write a tuple
$ fga tuple write user:anne member organization:acme
{
  "successful": [\
    {\
      "object":"organization:acme",\
      "relation":"member",\
      "user":"user:anne"\
    }\
  ]
}

# Read all tuples. It returns the one added above
$ fga tuple read
{
  "continuation_token":"",
  "tuples": [\
    {\
      "key": {\
        "object":"organization:acme",\
        "relation":"member",\
        "user":"user:anne"\
      },\
      "timestamp":"2024-02-09T23:05:43.586Z"\
    }\
  ]
}

# Write another tuple, adding a document for the acme organization
$ fga tuple write organization:acme organization document:readme
{
  "successful": [\
    {\
      "object":"document:readme",\
      "relation":"organization",\
      "user":"organization:acme"\
    }\
  ]
}

# Check if anne can view the document.
# Anne can view it as she's a member of organization:acme, which is the organization that owns the document
$ fga query check user:anne viewer document:readme
{
  "allowed":true,
  "resolution":""
}

# List all the documents user:anne can view
$ fga query list-objects user:anne viewer document
{
  "objects": [\
    "document:readme"\
  ]
}

# List all the relations that user:anne has with document:readme
$ fga query list-relations user:anne document:readme
{
  "relations": [\
    "viewer"\
  ]
}

# Delete user:anne as a member of organization:acme
$ fga tuple delete user:anne member organization:acme
{}

# Verify that user:anne is no longer a viewer of document:readme
$ fga query check user:anne viewer document:readme
{
  "allowed":false,
  "resolution":""
}

```

## Work with authorization model versions [​](https://openfga.dev/docs/getting-started/cli\#work-with-authorization-model-versions "Direct link to Work with authorization model versions")

OpenFGA models are [immutable](https://openfga.dev/docs/getting-started/immutable-models);
each time a model is written to a store, a new version of the model is created.

All OpenFGA API endpoints receive an optional authorization model ID that points to a specific version of the model and defaults to the latest model version. Always use a specific model ID and update it each time a new model version is used in production.

The following CLI commands lists the model Ids and find the latest one:

```codeBlockLines_e6Vv
# List all the authorization models
$ fga model list
{
  "authorization_models": [\
    {\
      "id":"01HPJ8JZV091THNTDFE2SFYNNJ",\
      "created_at":"2024-02-13T22:14:50Z"\
    },\
    {\
      "id":"01HPJ808Q8J56QMK4WNT7MG7P7",\
      "created_at":"2024-02-13T22:04:37Z"\
    },\
    {\
      "id":"01HPJ7YKNV0QT0S6CFRJMK231P",\
      "created_at":"2024-02-13T22:03:43Z"\
    }\
  ]
}

# List the last model, displaying just the model ID
$ fga model get --field id
# Model ID: 01HPJ8JZV091THNTDFE2SFYNNJ

# List the last model, displaying just the model ID, in JSON format, to make it simpler to parse
$ fga model get --field id --format json
{
  "id":"01HPJ8JZV091THNTDFE2SFYNNJ"
}

```

When using the CLI, the model ID can be specified as a `--model-id` parameter or as part of the configuration.

## Import tuples [​](https://openfga.dev/docs/getting-started/cli\#import-tuples "Direct link to Import tuples")

To import tuples, use the `fga tuple write` command. It has the following parameters:

| Parameter | Description |
| --- | --- |
| --file | Specifies the file name json, yaml and csv files are supported |
| --max-tuples-per-write (optional, default=1, max=40) | Maximum number of tuples to send in a single write |
| --max-parallel-requests (optional, default=4) | Maximum number of requests to send in parallel. Make it larger if you want to import a large number of tuples faster |
| --hide-imported-tuples (optional, default=false) | Hide successful imports from output, useful when importing large datasets |

The CLI returns a detailed JSON response that includes:

- `successful`: List of successfully written tuples (hidden when using `--hide-imported-tuples`)
- `failed`: List of tuples that failed to write, including the error reason
- `total_count`: Total number of tuples processed in this operation
- `successful_count`: Number of tuples successfully written
- `failed_count`: Number of tuples that failed to write

When using `--hide-imported-tuples`, the successful tuples are not included in the output, making it more practical when importing large datasets. Failed tuples are always shown to help identify and fix any issues. If you specify `--max-tuples-per-write` greater than one, an error in one of the tuples implies none of the tuples get written.

```codeBlockLines_e6Vv
$ fga tuple write --file tuples.yaml

{
  "successful": [\
    {\
      "object":"organization:acme",\
      "relation":"member",\
      "user":"user:anne"\
    }\
  ],
  "failed":null,
  "total_count": 1,
  "successful_count": 1,
  "failed_count": 0
}

$ fga tuple write --file tuples.yaml
{
  "successful":null,
  "failed": [\
      {\
        "tuple_key": {\
          "object":"organization:acme",\
          "relation":"member",\
          "user":"user:anne"\
        },\
      "reason":"Write validation error for POST Write with body {\"code\":\"write_failed_due_to_invalid_input\",\"message\":\"cannot write a tuple which already exists: user: 'user:anne', relation: 'member', object: 'organization:acme': invalid write input\"}\n with error code write_failed_due_to_invalid_input error message: cannot write a tuple which already exists: user: 'user:anne', relation: 'member', object: 'organization:acme': invalid write input"\
    }\
  ],
  "total_count": 1,
  "successful_count": 0,
  "failed_count": 1
}

```

Below are examples of the different file formats the CLI accepts when writing tuples:

### yaml [​](https://openfga.dev/docs/getting-started/cli\#yaml "Direct link to yaml")

```codeBlockLines_e6Vv
- user: user:peter
  relation: admin
  object: organization:acme
  condition:
    name: non_expired_grant
    context:
      grant_time: '2024-02-01T00:00:00Z'
      grant_duration: 1h
- user: user:anne
  relation: member
  object: organization:acme

```

### JSON [​](https://openfga.dev/docs/getting-started/cli\#json "Direct link to JSON")

```codeBlockLines_e6Vv
[\
    {\
        "user": "user:peter",\
        "relation": "admin",\
        "object": "organization:acme",\
        "condition": {\
            "context": {\
                "grant_duration": "1h",\
                "grant_time": "2024-02-01T00:00:00Z"\
            },\
            "name": "non_expired_grant"\
        }\
    },\
    {\
        "user": "user:anne",\
        "relation": "member",\
        "object": "organization:acme"\
    }\
]

```

### CSV [​](https://openfga.dev/docs/getting-started/cli\#csv "Direct link to CSV")

```codeBlockLines_e6Vv
user_type,user_id,user_relation,relation,object_type,object_id,condition_name,condition_context
user,anne,member,,organization,acme,,
user,peter1,admin,,organization,acme,non_expired_grant,"{""grant_duration"": ""1h"", ""grant_time"": ""2024-02-01T00:00:00Z""}"

```

When using the CSV format, you can omit certain headers, and you don’t need to specify the value for those fields.

## Delete Tuples [​](https://openfga.dev/docs/getting-started/cli\#delete-tuples "Direct link to Delete Tuples")

To delete a tuple, specify the user/relation/object you want to delete. To delete a group of tuples, specify a file that contains those tuples.

```codeBlockLines_e6Vv
$ fga tuple delete --file tuples.yaml
{
  "successful": [\
    {\
      "object":"organization:acme",\
      "relation":"admin",\
      "user":"user:peter"\
    },\
    {\
      "object":"organization:acme",\
      "relation":"member",\
      "user":"user:anne"\
    }\
  ],
  "failed":null
}

```

Delete all tuples from a store by reading all the tuples first and then deleting them:

```codeBlockLines_e6Vv
# Reads all the tuples and outputs them in a json format that can be used by 'fga tuple delete' and 'fga tuple write'.

$ fga tuple read --output-format=simple-json --max-pages 0    > tuples.json
$ fga tuple delete --file  tuples.json

```

## Import stores [​](https://openfga.dev/docs/getting-started/cli\#import-stores "Direct link to Import stores")

The CLI can import an [FGA Test file](https://openfga.dev/docs/modeling/testing) in a store. It writes the model included and imports the tuples in the fga test file.

Given the following `.fga.yaml` file:

```codeBlockLines_e6Vv
model: |
  model
    schema 1.1

  type user
  type organization
   relations
     define member : [user]
  }

tuples:
  # Anne is a member of the Acme organization
  - user: user:anne
    relation: member
    object: organization:acme

```

The following command is used to import the file contents in a store:

```codeBlockLines_e6Vv
$ fga store import --file <filename>.fga.yaml

```

Use the `fga model get` command is used to verify that the model was correctly written, and the `fga tuple read` command is used to verify that the tuples were properly imported.

## Related Sections [​](https://openfga.dev/docs/getting-started/cli\#related-sections "Direct link to Related Sections")

Check the following sections for more on how to learn how to write tests.

Testing Models

Learn how to test FGA models using the FGA CLI.

- [More](https://openfga.dev/docs/modeling/testing)

- [Configuration](https://openfga.dev/docs/getting-started/cli#configuration)
- [Basic operations](https://openfga.dev/docs/getting-started/cli#basic-operations)
- [Work with authorization model versions](https://openfga.dev/docs/getting-started/cli#work-with-authorization-model-versions)
- [Import tuples](https://openfga.dev/docs/getting-started/cli#import-tuples)
  - [yaml](https://openfga.dev/docs/getting-started/cli#yaml)
  - [JSON](https://openfga.dev/docs/getting-started/cli#json)
  - [CSV](https://openfga.dev/docs/getting-started/cli#csv)
- [Delete Tuples](https://openfga.dev/docs/getting-started/cli#delete-tuples)
- [Import stores](https://openfga.dev/docs/getting-started/cli#import-stores)
- [Related Sections](https://openfga.dev/docs/getting-started/cli#related-sections)

## OpenFGA Tuples API Best Practices
[Skip to main content](https://openfga.dev/docs/getting-started/tuples-api-best-practices#__docusaurus_skipToContent_fallback)

On this page

The following list outlines some guidelines and best practices for using OpenFGA:

- Do not store Personal Identifiable Information in tuples
- Always specify authorization model ID whenever possible

## Do Not Store Personal Identifiable Information in Tuples [​](https://openfga.dev/docs/getting-started/tuples-api-best-practices\#do-not-store-personal-identifiable-information-in-tuples "Direct link to Do Not Store Personal Identifiable Information in Tuples")

You can use any string for user and object identifiers, however you should not input or assign identifiers that include Personal Data or any other sensitive data, such as data that may be restricted under regulatory requirements.

Note

The documentation and samples uses first names and simple ids to illustrate easy-to-follow examples.

## Always specify authorization model ID whenever possible [​](https://openfga.dev/docs/getting-started/tuples-api-best-practices\#always-specify-authorization-model-id-whenever-possible "Direct link to Always specify authorization model ID whenever possible")

It is strongly recommended that authorization model ID be specified in your Relationship Queries (such as [Check](https://openfga.dev/docs/getting-started/perform-check) and [ListObjects](https://openfga.dev/docs/interacting/relationship-queries#listobjects)) and Relationship Commands (such as [Write](https://openfga.dev/docs/getting-started/update-tuples)).

Specifying authorization model ID in API calls have the following advantages:

1. Better performance as OpenFGA will not need to perform a database query to get the latest authorization model ID.
2. Allows consistent behavior in your production system until you are ready to switch to the new model.

## Related Sections [​](https://openfga.dev/docs/getting-started/tuples-api-best-practices\#related-sections "Direct link to Related Sections")

Check the following sections for more on recommendation for managing relations and model in production environment.

Migrating Relations

Learn how to migrate relations in a production environment

- [More](https://openfga.dev/docs/modeling/migrating/migrating-relations)

- [Do Not Store Personal Identifiable Information in Tuples](https://openfga.dev/docs/getting-started/tuples-api-best-practices#do-not-store-personal-identifiable-information-in-tuples)
- [Always specify authorization model ID whenever possible](https://openfga.dev/docs/getting-started/tuples-api-best-practices#always-specify-authorization-model-id-whenever-possible)
- [Related Sections](https://openfga.dev/docs/getting-started/tuples-api-best-practices#related-sections)

## Modeling Entitlements Tutorial
[Skip to main content](https://openfga.dev/docs/modeling/advanced/entitlements#__docusaurus_skipToContent_fallback)

On this page

This tutorial explains how to model entitlements for a platform like GitHub using OpenFGA.

What you will learn

- How to model an entitlement use case in [OpenFGA](https://openfga.dev/docs/fga)
- How to start with a given set of requirements and scenarios and iterate on the OpenFGA model until those requirements are met

## Before you start [​](https://openfga.dev/docs/modeling/advanced/entitlements\#before-you-start "Direct link to Before you start")

In order to understand this guide correctly you must be familiar with some OpenFGA concepts and know how to develop the things that we will list below.

### OpenFGA concepts [​](https://openfga.dev/docs/modeling/advanced/entitlements\#-concepts "Direct link to -concepts")

It would be helpful to have an understanding of some concepts of OpenFGA before you start.

#### Modeling object-to-object relationships [​](https://openfga.dev/docs/modeling/advanced/entitlements\#modeling-object-to-object-relationships "Direct link to Modeling object-to-object relationships")

You need to know how to create relationships between objects and how that might affect a user's relationships to those objects. [Learn more →](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships)

Used here to indicate that members of an org are subscriber members of the plan the org is subscriber to, and subscriber members of a plan get access to all the plan's features.

#### Direct relationships [​](https://openfga.dev/docs/modeling/advanced/entitlements\#direct-relationships "Direct link to Direct relationships")

You need to know how to disallow granting direct relation to an object and requiring the user to have a relation with another object that would imply a relation with the first one. [Learn more →](https://openfga.dev/docs/modeling/building-blocks/direct-relationships)

Used here to indicate that "access" to a feature cannot be directly granted to a user, but is implied through the users organization subscribing to a plan that offers that feature.

#### Concepts & configuration language [​](https://openfga.dev/docs/modeling/advanced/entitlements\#concepts--configuration-language "Direct link to Concepts & configuration language")

- Some [OpenFGA Concepts](https://openfga.dev/docs/concepts)
- [Configuration Language](https://openfga.dev/docs/configuration-language)

## What you will be modeling [​](https://openfga.dev/docs/modeling/advanced/entitlements\#what-you-will-be-modeling "Direct link to What you will be modeling")

In many product offerings, the features are behind multiple tiers. In this tutorial, you will build an authorization model for a subset of [GitHub's entitlements](https://github.com/pricing) (detailed below) using OpenFGA. You will use some scenarios to validate the model.

![GitHub Pricing Plan](https://openfga.dev/assets/images/entitlements-image-pricing-github-2276507856dd07b091bcecc2376dde05.svg)

At their core, entitlements is just asking: does a user X have access to feature Y? In GitHub's case for example, they have a concept called "Draft Pull Requests". Once the user loads the Pull Request page, the frontend needs to know whether it can show the "Draft Pull Request" option, as in it needs to know: "Does the current user have access to feature Draft Pull Request?".

![GitHub PR Page with Draft Pull Request](https://openfga.dev/assets/images/entitlements-image-github-draft-pr-2ee031c09e3924b41681861e56aab2e7.svg)![GitHub PR Page without Draft Pull Request](https://openfga.dev/assets/images/entitlements-image-github-no-draft-pr-785626465cfe1b8183918ee6bd3aefb1.svg)

> Note: For brevity, this tutorial will not model all of GitHub entitlements. Instead, it will focus on modeling for the scenarios outlined below

### Requirements [​](https://openfga.dev/docs/modeling/advanced/entitlements\#requirements "Direct link to Requirements")

You will model an entitlement system similar to GitHub's, focusing on a few scenarios.

GitHub has 3 plans: "Free", "Team" and "Enterprise", with each of them offering several features. The higher-priced plans include all the features of the lower priced plans. You will be focusing on a subset of the features offered.

A summary of GitHub's entitlement system:

- Free
  - Issues
- Team
  - _Everything from the free plan_
  - Draft Pull Requests
- Enterprise
  - _Everything from the team plan_
  - SAML Single Sign-On

### Defined scenarios [​](https://openfga.dev/docs/modeling/advanced/entitlements\#defined-scenarios "Direct link to Defined scenarios")

Use the following scenarios to be able to validate whether the model of the requirements is correct.

- Take these three organizations
  - Alpha Beta Gamma ( `alpha`), a **subscriber** on the **free** plan
  - Bayer Water Supplies ( `bayer`), a **subscriber** on the **team** plan
  - Cups and Dishes ( `cups`), a **subscriber** on the **enterprise** plan
- Take these three users
  - **Anne**, **member** of **Alpha Beta Gamma**
  - **Beth**, **member** of **Bayer Water Supplies**
  - **Charles**, **member** of **Cups and Dishes**

![Image showing requirements](https://openfga.dev/assets/images/entitlements-requirements-fdd4048edc4d4b3b78785f4c0671e0b1.svg)

By the end of this tutorial, you should be able to query OpenFGA with queries like:

- **Anne** has access to **Issues** (expecting `yes`)
- **Anne** has access to **Draft Pull Requests** (expecting ` no`)
- **Anne** has access to **Single Sign-on** (expecting ` no`)
- **Beth** has access to **Issues** (expecting `yes`)
- **Beth** has access to **Draft Pull Requests** (expecting `yes`)
- **Beth** has access to **Single Sign-on** (expecting ` no`)
- **Charles** has access to **Issues** (expecting `yes`)
- **Charles** has access to **Draft Pull Requests** (expecting `yes`)
- **Charles** has access to **Single Sign-on** (expecting `yes`)

## Modeling entitlements for GitHub [​](https://openfga.dev/docs/modeling/advanced/entitlements\#modeling-entitlements-for-github "Direct link to Modeling entitlements for GitHub")

### 01\. Building The Initial Authorization Model And Relationship Tuples [​](https://openfga.dev/docs/modeling/advanced/entitlements\#01-building-the-initial-authorization-model-and-relationship-tuples "Direct link to 01. Building The Initial Authorization Model And Relationship Tuples")

In this tutorial you are going to take a different approach to previous tutorials. You will start with a simple [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model), add [relationship tuples](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple) to represent some sample scenarios, and iterate until those scenarios return the results you expect.

In the scenarios outlined above, you have `organizations`, `plans` and `features`.

Similar to the example above, start with a basic listing of the types and their relations:

- A `feature` has a `plan` associated to it, we'll call the relation between them `associated_plan`
- A `plan` has an organization as a `subscriber` to it
- An `organization` has users as `members`

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type feature
  relations
    define associated_plan: [plan]

type plan
  relations
    define subscriber: [organization]

type organization
  relations
    define member: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "feature",\
      "relations": {\
        "associated_plan": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "associated_plan": {\
            "directly_related_user_types": [\
              {\
                "type": "plan"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "plan",\
      "relations": {\
        "subscriber": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "subscriber": {\
            "directly_related_user_types": [\
              {\
                "type": "organization"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "organization",\
      "relations": {\
        "member": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "member": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

### 02\. Populating the relationship tuples [​](https://openfga.dev/docs/modeling/advanced/entitlements\#02-populating-the-relationship-tuples "Direct link to 02. Populating the relationship tuples")

Now you can add the relationship tuples to represent these relationships mentioned in the [requirements](https://openfga.dev/docs/modeling/advanced/entitlements#requirements) and [scenarios](https://openfga.dev/docs/modeling/advanced/entitlements#defined-scenarios) sections:

The relations between the features and plans are as follows:

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // the free plan is the associated plan of the issues feature\
      {"_description":"the free plan is the associated plan of the issues feature","user":"plan:free","relation":"associated_plan","object":"feature:issues"},\
      // the team plan is the associated plan of the issues feature\
      {"_description":"the team plan is the associated plan of the issues feature","user":"plan:team","relation":"associated_plan","object":"feature:issues"},\
      // the team plan is the associated plan of the draft pull requests feature\
      {"_description":"the team plan is the associated plan of the draft pull requests feature","user":"plan:team","relation":"associated_plan","object":"feature:draft_prs"},\
      // the enterprise plan is the associated plan of the issues feature\
      {"_description":"the enterprise plan is the associated plan of the issues feature","user":"plan:enterprise","relation":"associated_plan","object":"feature:issues"},\
      // the enterprise plan is the associated plan of the draft pull requests feature\
      {"_description":"the enterprise plan is the associated plan of the draft pull requests feature","user":"plan:enterprise","relation":"associated_plan","object":"feature:draft_prs"},\
      // the enterprise plan is the associated plan of the SAML Single Sign-on feature\
      {"_description":"the enterprise plan is the associated plan of the SAML Single Sign-on feature","user":"plan:enterprise","relation":"associated_plan","object":"feature:sso"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             // the free plan is the associated plan of the issues feature
             User: "plan:free",
             Relation: "associated_plan",
             Object: "feature:issues",
        },         {
             // the team plan is the associated plan of the issues feature
             User: "plan:team",
             Relation: "associated_plan",
             Object: "feature:issues",
        },         {
             // the team plan is the associated plan of the draft pull requests feature
             User: "plan:team",
             Relation: "associated_plan",
             Object: "feature:draft_prs",
        },         {
             // the enterprise plan is the associated plan of the issues feature
             User: "plan:enterprise",
             Relation: "associated_plan",
             Object: "feature:issues",
        },         {
             // the enterprise plan is the associated plan of the draft pull requests feature
             User: "plan:enterprise",
             Relation: "associated_plan",
             Object: "feature:draft_prs",
        },         {
             // the enterprise plan is the associated plan of the SAML Single Sign-on feature
             User: "plan:enterprise",
             Relation: "associated_plan",
             Object: "feature:sso",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
    // the free plan is the associated plan of the issues feature
       new() {
                  User = "plan:free",
                  Relation = "associated_plan",
                  Object = "feature:issues"
              },
    // the team plan is the associated plan of the issues feature
       new() {
                  User = "plan:team",
                  Relation = "associated_plan",
                  Object = "feature:issues"
              },
    // the team plan is the associated plan of the draft pull requests feature
       new() {
                  User = "plan:team",
                  Relation = "associated_plan",
                  Object = "feature:draft_prs"
              },
    // the enterprise plan is the associated plan of the issues feature
       new() {
                  User = "plan:enterprise",
                  Relation = "associated_plan",
                  Object = "feature:issues"
              },
    // the enterprise plan is the associated plan of the draft pull requests feature
       new() {
                  User = "plan:enterprise",
                  Relation = "associated_plan",
                  Object = "feature:draft_prs"
              },
    // the enterprise plan is the associated plan of the SAML Single Sign-on feature
       new() {
                  User = "plan:enterprise",
                  Relation = "associated_plan",
                  Object = "feature:sso"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    # the free plan is the associated plan of the issues feature\
                    user="plan:free",\
                    relation="associated_plan",\
                    object="feature:issues",\
                ),\
                ClientTuple(\
                    # the team plan is the associated plan of the issues feature\
                    user="plan:team",\
                    relation="associated_plan",\
                    object="feature:issues",\
                ),\
                ClientTuple(\
                    # the team plan is the associated plan of the draft pull requests feature\
                    user="plan:team",\
                    relation="associated_plan",\
                    object="feature:draft_prs",\
                ),\
                ClientTuple(\
                    # the enterprise plan is the associated plan of the issues feature\
                    user="plan:enterprise",\
                    relation="associated_plan",\
                    object="feature:issues",\
                ),\
                ClientTuple(\
                    # the enterprise plan is the associated plan of the draft pull requests feature\
                    user="plan:enterprise",\
                    relation="associated_plan",\
                    object="feature:draft_prs",\
                ),\
                ClientTuple(\
                    # the enterprise plan is the associated plan of the SAML Single Sign-on feature\
                    user="plan:enterprise",\
                    relation="associated_plan",\
                    object="feature:sso",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                // the free plan is the associated plan of the issues feature
                new ClientTupleKey()
                        .user("plan:free")
                        .relation("associated_plan")
                        ._object("feature:issues"),
                // the team plan is the associated plan of the issues feature
                new ClientTupleKey()
                        .user("plan:team")
                        .relation("associated_plan")
                        ._object("feature:issues"),
                // the team plan is the associated plan of the draft pull requests feature
                new ClientTupleKey()
                        .user("plan:team")
                        .relation("associated_plan")
                        ._object("feature:draft_prs"),
                // the enterprise plan is the associated plan of the issues feature
                new ClientTupleKey()
                        .user("plan:enterprise")
                        .relation("associated_plan")
                        ._object("feature:issues"),
                // the enterprise plan is the associated plan of the draft pull requests feature
                new ClientTupleKey()
                        .user("plan:enterprise")
                        .relation("associated_plan")
                        ._object("feature:draft_prs"),
                // the enterprise plan is the associated plan of the SAML Single Sign-on feature
                new ClientTupleKey()
                        .user("plan:enterprise")
                        .relation("associated_plan")
                        ._object("feature:sso")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"_description":"the free plan is the associated plan of the issues feature","user":"plan:free","relation":"associated_plan","object":"feature:issues"},{"_description":"the team plan is the associated plan of the issues feature","user":"plan:team","relation":"associated_plan","object":"feature:issues"},{"_description":"the team plan is the associated plan of the draft pull requests feature","user":"plan:team","relation":"associated_plan","object":"feature:draft_prs"},{"_description":"the enterprise plan is the associated plan of the issues feature","user":"plan:enterprise","relation":"associated_plan","object":"feature:issues"},{"_description":"the enterprise plan is the associated plan of the draft pull requests feature","user":"plan:enterprise","relation":"associated_plan","object":"feature:draft_prs"},{"_description":"the enterprise plan is the associated plan of the SAML Single Sign-on feature","user":"plan:enterprise","relation":"associated_plan","object":"feature:sso"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA plan:free associated_plan feature:issues
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA plan:team associated_plan feature:issues
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA plan:team associated_plan feature:draft_prs
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA plan:enterprise associated_plan feature:issues
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA plan:enterprise associated_plan feature:draft_prs
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA plan:enterprise associated_plan feature:sso

```

```codeBlockLines_e6Vv
write([\
    // the free plan is the associated plan of the issues feature\
    {\
      "user":"plan:free",\
      "relation":"associated_plan",\
      "object":"feature:issues"\
    },\
    // the team plan is the associated plan of the issues feature\
    {\
      "user":"plan:team",\
      "relation":"associated_plan",\
      "object":"feature:issues"\
    },\
    // the team plan is the associated plan of the draft pull requests feature\
    {\
      "user":"plan:team",\
      "relation":"associated_plan",\
      "object":"feature:draft_prs"\
    },\
    // the enterprise plan is the associated plan of the issues feature\
    {\
      "user":"plan:enterprise",\
      "relation":"associated_plan",\
      "object":"feature:issues"\
    },\
    // the enterprise plan is the associated plan of the draft pull requests feature\
    {\
      "user":"plan:enterprise",\
      "relation":"associated_plan",\
      "object":"feature:draft_prs"\
    },\
    // the enterprise plan is the associated plan of the SAML Single Sign-on feature\
    {\
      "user":"plan:enterprise",\
      "relation":"associated_plan",\
      "object":"feature:sso"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

The relations between the plans and the organizations are as follows:

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // the Alpha Beta Gamma organization is a subscriber of the free plan\
      {"_description":"the Alpha Beta Gamma organization is a subscriber of the free plan","user":"organization:alpha","relation":"subscriber","object":"plan:free"},\
      // the Bayer Water Supplies organization is a subscriber of the team plan\
      {"_description":"the Bayer Water Supplies organization is a subscriber of the team plan","user":"organization:bayer","relation":"subscriber","object":"plan:team"},\
      // the Cups and Dishes organization is a subscriber of the enterprise plan\
      {"_description":"the Cups and Dishes organization is a subscriber of the enterprise plan","user":"organization:cups","relation":"subscriber","object":"plan:enterprise"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             // the Alpha Beta Gamma organization is a subscriber of the free plan
             User: "organization:alpha",
             Relation: "subscriber",
             Object: "plan:free",
        },         {
             // the Bayer Water Supplies organization is a subscriber of the team plan
             User: "organization:bayer",
             Relation: "subscriber",
             Object: "plan:team",
        },         {
             // the Cups and Dishes organization is a subscriber of the enterprise plan
             User: "organization:cups",
             Relation: "subscriber",
             Object: "plan:enterprise",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
    // the Alpha Beta Gamma organization is a subscriber of the free plan
       new() {
                  User = "organization:alpha",
                  Relation = "subscriber",
                  Object = "plan:free"
              },
    // the Bayer Water Supplies organization is a subscriber of the team plan
       new() {
                  User = "organization:bayer",
                  Relation = "subscriber",
                  Object = "plan:team"
              },
    // the Cups and Dishes organization is a subscriber of the enterprise plan
       new() {
                  User = "organization:cups",
                  Relation = "subscriber",
                  Object = "plan:enterprise"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    # the Alpha Beta Gamma organization is a subscriber of the free plan\
                    user="organization:alpha",\
                    relation="subscriber",\
                    object="plan:free",\
                ),\
                ClientTuple(\
                    # the Bayer Water Supplies organization is a subscriber of the team plan\
                    user="organization:bayer",\
                    relation="subscriber",\
                    object="plan:team",\
                ),\
                ClientTuple(\
                    # the Cups and Dishes organization is a subscriber of the enterprise plan\
                    user="organization:cups",\
                    relation="subscriber",\
                    object="plan:enterprise",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                // the Alpha Beta Gamma organization is a subscriber of the free plan
                new ClientTupleKey()
                        .user("organization:alpha")
                        .relation("subscriber")
                        ._object("plan:free"),
                // the Bayer Water Supplies organization is a subscriber of the team plan
                new ClientTupleKey()
                        .user("organization:bayer")
                        .relation("subscriber")
                        ._object("plan:team"),
                // the Cups and Dishes organization is a subscriber of the enterprise plan
                new ClientTupleKey()
                        .user("organization:cups")
                        .relation("subscriber")
                        ._object("plan:enterprise")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"_description":"the Alpha Beta Gamma organization is a subscriber of the free plan","user":"organization:alpha","relation":"subscriber","object":"plan:free"},{"_description":"the Bayer Water Supplies organization is a subscriber of the team plan","user":"organization:bayer","relation":"subscriber","object":"plan:team"},{"_description":"the Cups and Dishes organization is a subscriber of the enterprise plan","user":"organization:cups","relation":"subscriber","object":"plan:enterprise"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA organization:alpha subscriber plan:free
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA organization:bayer subscriber plan:team
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA organization:cups subscriber plan:enterprise

```

```codeBlockLines_e6Vv
write([\
    // the Alpha Beta Gamma organization is a subscriber of the free plan\
    {\
      "user":"organization:alpha",\
      "relation":"subscriber",\
      "object":"plan:free"\
    },\
    // the Bayer Water Supplies organization is a subscriber of the team plan\
    {\
      "user":"organization:bayer",\
      "relation":"subscriber",\
      "object":"plan:team"\
    },\
    // the Cups and Dishes organization is a subscriber of the enterprise plan\
    {\
      "user":"organization:cups",\
      "relation":"subscriber",\
      "object":"plan:enterprise"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

The relations between the organizations and the users are as follows:

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // anne is a member of the Alpha Beta Gamma organization\
      {"_description":"anne is a member of the Alpha Beta Gamma organization","user":"user:anne","relation":"member","object":"organization:alpha"},\
      // beth is a member of the Bayer Water Supplies\
      {"_description":"beth is a member of the Bayer Water Supplies","user":"user:beth","relation":"member","object":"organization:bayer"},\
      // charles is a member of the Cups and Dishes organization\
      {"_description":"charles is a member of the Cups and Dishes organization","user":"user:charles","relation":"member","object":"organization:cups"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             // anne is a member of the Alpha Beta Gamma organization
             User: "user:anne",
             Relation: "member",
             Object: "organization:alpha",
        },         {
             // beth is a member of the Bayer Water Supplies
             User: "user:beth",
             Relation: "member",
             Object: "organization:bayer",
        },         {
             // charles is a member of the Cups and Dishes organization
             User: "user:charles",
             Relation: "member",
             Object: "organization:cups",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
    // anne is a member of the Alpha Beta Gamma organization
       new() {
                  User = "user:anne",
                  Relation = "member",
                  Object = "organization:alpha"
              },
    // beth is a member of the Bayer Water Supplies
       new() {
                  User = "user:beth",
                  Relation = "member",
                  Object = "organization:bayer"
              },
    // charles is a member of the Cups and Dishes organization
       new() {
                  User = "user:charles",
                  Relation = "member",
                  Object = "organization:cups"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    # anne is a member of the Alpha Beta Gamma organization\
                    user="user:anne",\
                    relation="member",\
                    object="organization:alpha",\
                ),\
                ClientTuple(\
                    # beth is a member of the Bayer Water Supplies\
                    user="user:beth",\
                    relation="member",\
                    object="organization:bayer",\
                ),\
                ClientTuple(\
                    # charles is a member of the Cups and Dishes organization\
                    user="user:charles",\
                    relation="member",\
                    object="organization:cups",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                // anne is a member of the Alpha Beta Gamma organization
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("member")
                        ._object("organization:alpha"),
                // beth is a member of the Bayer Water Supplies
                new ClientTupleKey()
                        .user("user:beth")
                        .relation("member")
                        ._object("organization:bayer"),
                // charles is a member of the Cups and Dishes organization
                new ClientTupleKey()
                        .user("user:charles")
                        .relation("member")
                        ._object("organization:cups")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"_description":"anne is a member of the Alpha Beta Gamma organization","user":"user:anne","relation":"member","object":"organization:alpha"},{"_description":"beth is a member of the Bayer Water Supplies","user":"user:beth","relation":"member","object":"organization:bayer"},{"_description":"charles is a member of the Cups and Dishes organization","user":"user:charles","relation":"member","object":"organization:cups"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne member organization:alpha
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:beth member organization:bayer
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:charles member organization:cups

```

```codeBlockLines_e6Vv
write([\
    // anne is a member of the Alpha Beta Gamma organization\
    {\
      "user":"user:anne",\
      "relation":"member",\
      "object":"organization:alpha"\
    },\
    // beth is a member of the Bayer Water Supplies\
    {\
      "user":"user:beth",\
      "relation":"member",\
      "object":"organization:bayer"\
    },\
    // charles is a member of the Cups and Dishes organization\
    {\
      "user":"user:charles",\
      "relation":"member",\
      "object":"organization:cups"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

So far you have given OpenFGA a representation of the current state of your system's relationships. You will keep iterating and updating the authorization model until the results of the queries match what you expect.

caution

In production, it is highly recommended to use unique, immutable identifiers. Names are used in this article to make it easier to read and follow.
For example, the relationship tuple indicating that _anne is a member of organization:alpha_ could be written as:

- user: user:2b4840f2-7c9c-42c8-9329-911002051524
- relation: member
- object: project:52e529c6-c571-4d5c-b78a-bc574cf98b54

#### Verification [​](https://openfga.dev/docs/modeling/advanced/entitlements\#verification "Direct link to Verification")

Now that you have some data, you can start using it to ask is ${USER} related to ${OBJECT} as ${RELATION}?

First, you will [check](https://openfga.dev/docs/concepts#what-is-a-check-request) if `anne` is a member of `organization:alpha`. This is one of the relationship tuples you previously added, you will make sure OpenFGA can detect a relation in this case.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'member',
    object: 'organization:alpha',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "member",
    Object:   "organization:alpha",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "member",
    Object = "organization:alpha",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="member",
    object="organization:alpha",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("member")
        ._object("organization:alpha");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne member organization:alpha

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"member","object":"organization:alpha"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "member", // has an `member` relation
  object = "organization:alpha", // with the object `organization:alpha`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to organization:alpha as member?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

Querying for relationship tuples that you fed into OpenFGA earlier should work, try a few before proceeding to make sure everything is working well.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'member',
    object: 'organization:bayer',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "member",
    Object:   "organization:bayer",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "member",
    Object = "organization:bayer",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="member",
    object="organization:bayer",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("member")
        ._object("organization:bayer");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne member organization:bayer

# Response: {"allowed":false}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"member","object":"organization:bayer"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "member", // has an `member` relation
  object = "organization:bayer", // with the object `organization:bayer`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:anne related to organization:bayer as member?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'organization:bayer',
    relation: 'subscriber',
    object: 'plan:team',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "organization:bayer",
    Relation: "subscriber",
    Object:   "plan:team",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "organization:bayer",
    Relation = "subscriber",
    Object = "plan:team",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="organization:bayer",
    relation="subscriber",
    object="plan:team",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("organization:bayer")
        .relation("subscriber")
        ._object("plan:team");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA organization:bayer subscriber plan:team

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"organization:bayer","relation":"subscriber","object":"plan:team"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "organization:bayer", // check if the user `organization:bayer`
  relation = "subscriber", // has an `subscriber` relation
  object = "plan:team", // with the object `plan:team`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is organization:bayer related to plan:team as subscriber?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'plan:free',
    relation: 'associated_plan',
    object: 'feature:issues',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "plan:free",
    Relation: "associated_plan",
    Object:   "feature:issues",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "plan:free",
    Relation = "associated_plan",
    Object = "feature:issues",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="plan:free",
    relation="associated_plan",
    object="feature:issues",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("plan:free")
        .relation("associated_plan")
        ._object("feature:issues");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA plan:free associated_plan feature:issues

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"plan:free","relation":"associated_plan","object":"feature:issues"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "plan:free", // check if the user `plan:free`
  relation = "associated_plan", // has an `associated_plan` relation
  object = "feature:issues", // with the object `feature:issues`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is plan:free related to feature:issues as associated_plan?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

### 03\. Updating the authorization model [​](https://openfga.dev/docs/modeling/advanced/entitlements\#03-updating-the-authorization-model "Direct link to 03. Updating the authorization model")

You are working towards OpenFGA returning the correct answer when you query whether `anne` has `access` to `feature:issues`. It won't work yet, but you will keep updating your configuration to reach that goal.

To start, try to run that query on `is anne related to feature:issues as access?`

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'access',
    object: 'feature:issues',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = undefined

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "access",
    Object:   "feature:issues",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: undefined }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "access",
    Object = "feature:issues",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = undefined

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="access",
    object="feature:issues",
)

response = await fga_client.check(body, options)

# response.allowed = undefined

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("access")
        ._object("feature:issues");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = undefined

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne access feature:issues

# Response: {"allowed":undefined}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"access","object":"feature:issues"}}'

# Response: {"allowed":undefined}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "access", // has an `access` relation
  object = "feature:issues", // with the object `feature:issues`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: undefined

```

```codeBlockLines_e6Vv
is user:anne related to feature:issues as access?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

The OpenFGA service is returning that the query tuple is invalid. That is because you are asking for relation as `access`, but that relation is not in the configuration of the `feature` type!

Add it now. Like so:

- DSL
- JSON

```codeBlockLines_e6Vv

type feature
  relations
    define associated_plan: [plan]
    define access: [user]

```

```codeBlockLines_e6Vv
{
  "type": "feature",
  "relations": {
    "associated_plan": {
      "this": {}
    },
    "access": {
      "this": {}
    }
  },
  "metadata": {
    "relations": {
      "associated_plan": {
        "directly_related_user_types": [\
          {\
            "type": "plan"\
          }\
        ]
      },
      "access": {
        "directly_related_user_types": [\
          {\
            "type": "user"\
          }\
        ]
      }
    }
  }
}

```

info

`access` [relation](https://openfga.dev/docs/concepts#what-is-a-relation) was added to the configuration of the `feature` [type](https://openfga.dev/docs/concepts#what-is-a-type).

note

In this tutorial, you will find the phrases [direct relationship and implied relationship](https://openfga.dev/docs/concepts#what-are-direct-and-implied-relationships).

A _direct relationship_ R between user X and object Y means the relationship tuple (user=X, relation=R, object=Y) exists, and the OpenFGA authorization model for that relation allows this direct relationship (by use of [direct relationship type restrictions](https://openfga.dev/docs/configuration-language#direct-relationship-type-restrictions)).

An _implied relationship_ R exists between user X and object Y if user X is related to an object Z that is in direct or implied relationship with object Y, and the OpenFGA authorization model allows it.

The resulting updated configuration would be:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type feature
  relations
    define associated_plan: [plan]
    define access: [user]

type plan
  relations
    define subscriber: [organization]

type organization
  relations
    define member: []

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "feature",\
      "relations": {\
        "associated_plan": {\
          "this": {}\
        },\
        "access": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "associated_plan": {\
            "directly_related_user_types": [\
              {\
                "type": "plan"\
              }\
            ]\
          },\
          "access": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "plan",\
      "relations": {\
        "subscriber": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "subscriber": {\
            "directly_related_user_types": [\
              {\
                "type": "organization"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "organization",\
      "relations": {\
        "member": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "subscriber": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

#### Adding modeling pattern of parent-child objects [​](https://openfga.dev/docs/modeling/advanced/entitlements\#adding-modeling-pattern-of-parent-child-objects "Direct link to Adding modeling pattern of parent-child objects")

Now we can ask the following query: `is anne related to feature:issues as access?` again.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'access',
    object: 'feature:issues',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "access",
    Object:   "feature:issues",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "access",
    Object = "feature:issues",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="access",
    object="feature:issues",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("access")
        ._object("feature:issues");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne access feature:issues

# Response: {"allowed":false}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"access","object":"feature:issues"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "access", // has an `access` relation
  object = "feature:issues", // with the object `feature:issues`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:anne related to feature:issues as access?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

So far so good. OpenFGA understood your query, but said that no [relation](https://openfga.dev/docs/concepts#what-is-a-relation) exists. That is because according to the configuration provided so far, there is no `access` relation between `anne` and `feature:issues`.

We can also try to query `is organization:alpha related to feature:issues as access?` and we see that there is no relationship.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'organization:alpha',
    relation: 'access',
    object: 'feature:issues',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "organization:alpha",
    Relation: "access",
    Object:   "feature:issues",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "organization:alpha",
    Relation = "access",
    Object = "feature:issues",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="organization:alpha",
    relation="access",
    object="feature:issues",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("organization:alpha")
        .relation("access")
        ._object("feature:issues");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA organization:alpha access feature:issues

# Response: {"allowed":false}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"organization:alpha","relation":"access","object":"feature:issues"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "organization:alpha", // check if the user `organization:alpha`
  relation = "access", // has an `access` relation
  object = "feature:issues", // with the object `feature:issues`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is organization:alpha related to feature:issues as access?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

If you have already completed some of the other tutorials you might have encountered the modeling pattern of [parent-child objects](https://openfga.dev/docs/modeling/parent-child) which is modeled as such:

- DSL
- JSON

```codeBlockLines_e6Vv

type resource
  relations
    define viewer: all_objects_viewer from parent

```

```codeBlockLines_e6Vv
{
  "type": "resource",
  "relations": {
    "viewer": {
      "tupleToUserset": {
        "tupleset": {
          "relation": "parent"
        },
        "computedUserset": {
          "relation": "all_objects_viewer"
        }
      }
    }
  }
}

```

info

With this, when asked to check a user's `viewer` relationship with the object, OpenFGA will:

1. Read all relationship tuples of users related to this particular object as relation `parent`
2. For each relationship tuple, return all _usersets_ that have `all_objects_viewer` relation to the objects in those relationship tuples
3. If the user is in any of those _usersets_, return yes, as the user is a `viewer` on this object.
In other words, users related as `all_objects_viewer` to any of this object's `parents` are related as `viewer` to this object.

If you want to give all subscribers on a plan access to a feature, you can do it like so:

- DSL
- JSON

```codeBlockLines_e6Vv

type feature
  relations
    define associated_plan: [plan]
    define access: [user] or subscriber from associated_plan

```

```codeBlockLines_e6Vv
{
  "type": "feature",
  "relations": {
    "associated_plan": {
      "this": {}
    },
    "access": {
      "union": {
        "child": [\
          {\
            "this": {}\
          },\
          {\
            "tupleToUserset": {\
              "tupleset": {\
                "relation": "associated_plan"\
              },\
              "computedUserset": {\
                "relation": "subscriber"\
              }\
            }\
          }\
        ]
      }
    }
  },
  "metadata": {
    "relations": {
      "associated_plan": {
        "directly_related_user_types": [\
          {\
            "type": "plan"\
          }\
        ]
      },
      "access": {
        "directly_related_user_types": [\
          {\
            "type": "user"\
          }\
        ]
      }
    }
  }
}

```

info

Users related to `feature` as `access` are the union of (any of):

- the set of users with a direct `access` relation
- the set of users related to the `associated_plan` as `subscriber` (the feature's associated plans' subscribers)

So everyone who has direct access, as well as the subscribers of the associated plan

That would mean that in order for an object to have an `access` relation to a feature y, there needs to be either:

- a [direct relationship](https://openfga.dev/docs/concepts#what-are-direct-and-implied-relationships) via a relationship tuple:
e.g. `{ "user": "user:x", "relation": "access", "object": "feature:y" }`
- a subscriber relationship with another object related to x associated\_plan:
e.g. `{ "user": "user:x", "relation": "subscriber", "object": "plan:z" } { "user": "plan:z", "relation": "associated_plan", "object": "feature:y" }`

That brings you close. That will allow you to grant organizations access to the feature (as organizations have a subscriber relation with the plan).

#### Adding Subscriber Relationship With Another Object Related To x associated\_plan [​](https://openfga.dev/docs/modeling/advanced/entitlements\#adding-subscriber-relationship-with-another-object-related-to-x-associated_plan "Direct link to Adding Subscriber Relationship With Another Object Related To x associated_plan")

One way forward would be to add a direct `access` relation between a user and a feature e.g. `{ "user": "anne", "relation": "access", "object": "feature:y" }` whenever the organization anne is subscribed to a plan, or the organization anne is in subscribes to a new plan.
But there are several downsides to this:

- Your application layer now needs to worry about computing this relationship. Instead of letting OpenFGA figure this all out, the app layer needs to do the checks whenever a user is being added or removed
- If an organization changes its subscription, your application layer has to loop through all the users and update their `access` relationships to features accordingly

Later in this tutorial, you will remove the possibility of having a direct `access` relation completely, but for now you will make sure the changes to the store you have made so far are working.

Replace all the existing code you had previously with the updated authorization model from the below snippet.

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type feature
  relations
    define associated_plan: [plan]
    define access: [user] or subscriber from associated_plan

type plan
  relations
    define subscriber: [organization]

type organization
  relations
    define member: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "feature",\
      "relations": {\
        "associated_plan": {\
          "this": {}\
        },\
        "access": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "tupleToUserset": {\
                  "tupleset": {\
                    "relation": "associated_plan"\
                  },\
                  "computedUserset": {\
                    "relation": "subscriber"\
                  }\
                }\
              }\
            ]\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "associated_plan": {\
            "directly_related_user_types": [\
              {\
                "type": "plan"\
              }\
            ]\
          },\
          "access": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "plan",\
      "relations": {\
        "subscriber": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "subscriber": {\
            "directly_related_user_types": [\
              {\
                "type": "organization"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "organization",\
      "relations": {\
        "member": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "member": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

Now we can ask following query: `is organization:alpha related to feature:issues as access?` again.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'organization:alpha',
    relation: 'access',
    object: 'feature:issues',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "organization:alpha",
    Relation: "access",
    Object:   "feature:issues",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "organization:alpha",
    Relation = "access",
    Object = "feature:issues",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="organization:alpha",
    relation="access",
    object="feature:issues",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("organization:alpha")
        .relation("access")
        ._object("feature:issues");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA organization:alpha access feature:issues

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"organization:alpha","relation":"access","object":"feature:issues"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "organization:alpha", // check if the user `organization:alpha`
  relation = "access", // has an `access` relation
  object = "feature:issues", // with the object `feature:issues`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is organization:alpha related to feature:issues as access?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

You will notice that OpenFGA now did find a relation, as `organization:alpha` is a `subscriber` to `plan:free` which has an `associated_plan` relation to `feature:issues`. From that and the authorization model you updated above, OpenFGA deduced that `organization:alpha` has an implied `access` relation to `feature:issues`.

That is good, but you want to be able to ask `is anne related to feature:issues as access?`, not `is organization:alpha related to feature:issues as access?`. As in, you want the subscriber members to have access to the feature, not the subscriber itself.

In order to do that, you will add a relation on the plan, that indicates that all members of an organization subscribed to it, have a `subscriber_member` relation to the plan. And you can modify the change you did above to give implied access to the `subscriber_member` instead of the subscriber. Like so:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type feature
  relations
    define associated_plan: [plan]
    define access: [user] or subscriber_member from associated_plan

type plan
  relations
    define subscriber: [organization]
    define subscriber_member: member from subscriber

type organization
  relations
    define member: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "feature",\
      "relations": {\
        "associated_plan": {\
          "this": {}\
        },\
        "access": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "tupleToUserset": {\
                  "tupleset": {\
                    "relation": "associated_plan"\
                  },\
                  "computedUserset": {\
                    "relation": "subscriber_member"\
                  }\
                }\
              }\
            ]\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "associated_plan": {\
            "directly_related_user_types": [\
              {\
                "type": "plan"\
              }\
            ]\
          },\
          "access": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "plan",\
      "relations": {\
        "subscriber": {\
          "this": {}\
        },\
        "subscriber_member": {\
          "tupleToUserset": {\
            "tupleset": {\
              "relation": "subscriber"\
            },\
            "computedUserset": {\
              "relation": "member"\
            }\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "subscriber": {\
            "directly_related_user_types": [\
              {\
                "type": "organization"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "organization",\
      "relations": {\
        "member": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "member": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

info

Notice that `subscriber` has been updated to `subscriber_member` in the `access` relation of the `feature` type.

Under the `plan` type, in order for someone to have a `subscriber_member` relation to the plan, they have to be related as a `member` to the object related as a `subscriber` to the plan (as in they have to be a member of on of the plan's subscribers).

Now ask the following query: `is anne related to feature:issues as access?`

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'access',
    object: 'feature:issues',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "access",
    Object:   "feature:issues",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "access",
    Object = "feature:issues",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="access",
    object="feature:issues",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("access")
        ._object("feature:issues");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne access feature:issues

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"access","object":"feature:issues"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "access", // has an `access` relation
  object = "feature:issues", // with the object `feature:issues`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to feature:issues as access?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

#### Disallow direct relationship [​](https://openfga.dev/docs/modeling/advanced/entitlements\#disallow-direct-relationship "Direct link to Disallow direct relationship")

So far, with just a OpenFGA authorization model, and the initial relationship tuples indicating the relations you know, you configured OpenFGA to give you the correct response.

Earlier on, the idea of not allowing a direct `access` relation between a user and a `feature` was discussed, e.g. adding a relationship tuple like `{ "user": "user:anne", "relation": "access", "object": "feature:y" }`. You will remove it now.

To disallow a direct relationship, you need to remove the direct relationship type restriction. The following snippet:

- DSL
- JSON

```codeBlockLines_e6Vv

type feature
  relations
    define associated_plan: [plan]
    define access: [user] or subscriber_member from associated_plan

```

```codeBlockLines_e6Vv
{
  "type": "feature",
  "relations": {
    "associated_plan": {
      "this": {}
    },
    "access": {
      "union": {
        "child": [\
          {\
            "this": {}\
          },\
          {\
            "tupleToUserset": {\
              "tupleset": {\
                "relation": "associated_plan"\
              },\
              "computedUserset": {\
                "relation": "subscriber_member"\
              }\
            }\
          }\
        ]
      }
    }
  },
  "metadata": {
    "relations": {
      "associated_plan": {
        "directly_related_user_types": [\
          {\
            "type": "plan"\
          }\
        ]
      },
      "access": {
        "directly_related_user_types": [\
          {\
            "type": "user"\
          }\
        ]
      }
    }
  }
}

```

becomes

- DSL
- JSON

```codeBlockLines_e6Vv

type feature
  relations
    define associated_plan: [plan]
    define access: subscriber_member from associated_plan

```

```codeBlockLines_e6Vv
{
  "type": "feature",
  "relations": {
    "associated_plan": {
      "this": {}
    },
    "access": {
      "tupleToUserset": {
        "tupleset": {
          "relation": "associated_plan"
        },
        "computedUserset": {
          "relation": "subscriber_member"
        }
      }
    }
  },
  "metadata": {
    "relations": {
      "associated_plan": {
        "directly_related_user_types": [\
          {\
            "type": "plan"\
          }\
        ]
      }
    }
  }
}

```

With this change, even if your app layer added the following relationship tuple:

- `{ "user": "user:anne", "relation": "access", "object": feature:issues }`

a subsequent check for `is anne related to feature:issues as access?` would return no relation. The only way for a relation to exist is if the following three relationship tuples do:

- `{ "user": "user:anne", "relation": "member", "object": "organization:z" }`
- `{ "user": "organization:z", "relation": "subscriber", "object": "plan:y" }`
- `{ "user": "plan:y", "relation": "associated_plan", "object": "feature:issues" }`

#### Verification [​](https://openfga.dev/docs/modeling/advanced/entitlements\#verification-1 "Direct link to Verification")

Ensure that your authorization model matches the one below

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type feature
  relations
    define associated_plan: [plan]
    define access: subscriber_member from associated_plan

type plan
  relations
    define subscriber: [organization]
    define subscriber_member: member from subscriber

type organization
  relations
    define member: [user]

```

```codeBlockLines_e6Vv
{
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "feature",\
      "relations": {\
        "associated_plan": {\
          "this": {}\
        },\
        "access": {\
          "tupleToUserset": {\
            "tupleset": {\
              "relation": "associated_plan"\
            },\
            "computedUserset": {\
              "relation": "subscriber_member"\
            }\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "associated_plan": {\
            "directly_related_user_types": [\
              {\
                "type": "plan"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "plan",\
      "relations": {\
        "subscriber": {\
          "this": {}\
        },\
        "subscriber_member": {\
          "tupleToUserset": {\
            "tupleset": {\
              "relation": "subscriber"\
            },\
            "computedUserset": {\
              "relation": "member"\
            }\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "subscriber": {\
            "directly_related_user_types": [\
              {\
                "type": "organization"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "organization",\
      "relations": {\
        "member": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "member": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

You will now verify that the configuration is correct by running checks for all the scenarios mentioned at the beginning of the tutorial:

- **Anne** has access to **Issues** (expecting `yes`)
- **Anne** has access to **Draft Pull Requests** (expecting ` no`)
- **Anne** has access to **Single Sign-on** (expecting ` no`)
- **Beth** has access to **Issues** (expecting `yes`)
- **Beth** has access to **Draft Pull Requests** (expecting `yes`)
- **Beth** has access to **Single Sign-on** (expecting ` no`)
- **Charles** has access to **Issues** (expecting `yes`)
- **Charles** has access to **Draft Pull Requests** (expecting `yes`)
- **Charles** has access to **Single Sign-on** (expecting `yes`)

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'access',
    object: 'feature:issues',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "access",
    Object:   "feature:issues",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "access",
    Object = "feature:issues",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="access",
    object="feature:issues",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("access")
        ._object("feature:issues");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne access feature:issues

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"access","object":"feature:issues"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "access", // has an `access` relation
  object = "feature:issues", // with the object `feature:issues`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to feature:issues as access?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

Try to verify for the other user, object and relation combinations as listed below.

| User | Object | Relation | Query | Relation? |
| --- | --- | --- | --- | --- |
| `anne` | `feature:issues` | `access` | `is anne related to feature:issues as access?` | Yes |
| `anne` | `feature:draft_prs` | `access` | `is anne related to feature:draft_prs as access?` | No |
| `anne` | `feature:sso` | `access` | `is anne related to feature:sso as access?` | No |
| `beth` | `feature:issues` | `access` | `is beth related to feature:issues as access?` | Yes |
| `beth` | `feature:draft_prs` | `access` | `is beth related to feature:draft_prs as access?` | Yes |
| `beth` | `feature:sso` | `access` | `is beth related to feature:sso as access?` | No |
| `charles` | `feature:issues` | `access` | `is charles related to feature:issues as access?` | Yes |
| `charles` | `feature:draft_prs` | `access` | `is charles related to feature:draft_prs as access?` | Yes |
| `charles` | `feature:sso` | `access` | `is charles related to feature:sso as access?` | Yes |

## Summary [​](https://openfga.dev/docs/modeling/advanced/entitlements\#summary "Direct link to Summary")

In this tutorial, you learned:

- to model entitlements for a system in OpenFGA
- how to start with a set of requirements and scenarios and iterate on the OpenFGA authorization model until the checks match the expected scenarios
- how to model [**parent-child relationships**](https://openfga.dev/docs/modeling/parent-child) to indicate that a user having a relationship with a certain object implies having a relationship with another object in OpenFGA
- how to use [**the union operator**](https://openfga.dev/docs/configuration-language#the-union-operator) condition to indicate multiple possible paths for a relationship between two objects to be computed
- using [**direct relationship type restrictions**](https://openfga.dev/docs/configuration-language#direct-relationship-type-restrictions) in a OpenFGA authorization model, and how to block direct relationships by removing it

Upcoming tutorials will dive deeper into OpenFGA, introducing concepts that will improve on the model you built today, and tackling different permission systems, with other relations and requirements that need to be met.

- [Before you start](https://openfga.dev/docs/modeling/advanced/entitlements#before-you-start)
  - [concepts](https://openfga.dev/docs/modeling/advanced/entitlements#-concepts)
- [What you will be modeling](https://openfga.dev/docs/modeling/advanced/entitlements#what-you-will-be-modeling)
  - [Requirements](https://openfga.dev/docs/modeling/advanced/entitlements#requirements)
  - [Defined scenarios](https://openfga.dev/docs/modeling/advanced/entitlements#defined-scenarios)
- [Modeling entitlements for GitHub](https://openfga.dev/docs/modeling/advanced/entitlements#modeling-entitlements-for-github)
  - [01\. Building The Initial Authorization Model And Relationship Tuples](https://openfga.dev/docs/modeling/advanced/entitlements#01-building-the-initial-authorization-model-and-relationship-tuples)
  - [02\. Populating the relationship tuples](https://openfga.dev/docs/modeling/advanced/entitlements#02-populating-the-relationship-tuples)
  - [03\. Updating the authorization model](https://openfga.dev/docs/modeling/advanced/entitlements#03-updating-the-authorization-model)
- [Summary](https://openfga.dev/docs/modeling/advanced/entitlements#summary)

## Modular Authorization Models
[Skip to main content](https://openfga.dev/docs/modeling/modular-models#__docusaurus_skipToContent_fallback)

On this page

Authorization is application-specific. In an organization with multiple teams building different applications or modules, each team should be able to define and evolve their authorization policies independently.

Modular models allows splitting your authorization model across multiple files and modules, improving upon some of the challenges that may be faced when maintaining an authorization model within a company, such as:

- A model can grow large and difficult to understand.
- As more teams begin to contribute to a model, the ownership boundaries may not be clear and code review processes might not scale.

With modular models, a single model can be split across multiple files in a project and organized in a way that makes sense for the project or teams collaborating on it. For example, modular models allows ownership for reviews to be expressed using a feature like [GitHub's](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners), [GitLab's](https://docs.gitlab.com/ee/user/project/codeowners/) or [Gitea's](https://docs.gitea.com/usage/code-owners) code owners.

## Key Concepts [​](https://openfga.dev/docs/modeling/modular-models\#key-concepts "Direct link to Key Concepts")

### `fga.mod` [​](https://openfga.dev/docs/modeling/modular-models\#fgamod "Direct link to fgamod")

The `fga.mod` file is the project file for modular models. It specifies the schema version for the final combined model and lists the individual files that make up the modular model.

| Property | Description |
| --- | --- |
| `schema` | The schema version to be used for the combined model |
| `contents` | The individual files that make up the modular model |

### Modules [​](https://openfga.dev/docs/modeling/modular-models\#modules "Direct link to Modules")

OpenFGA modules define the types and relations for a specific application module or service.

Modules are declared using the `module` keyword in the DSL, and a module can be written across multiple files. A single file cannot have more than one module.

### Type Extensions [​](https://openfga.dev/docs/modeling/modular-models\#type-extensions "Direct link to Type Extensions")

As teams implement features, they might find that core types they are dependent upon might not contain all the relations they need. However, it might not make sense for these relations to be owned by the owner of that type if they aren't needed across the system.

Modular models solves that problem by allowing individual types to be extended within other modules to to share those relations.

The following are requirements for type extension:

- The extended type must exist
- A single type can only be extended once per file
- The relations added must not already exist, or be part of another type extension

## Example [​](https://openfga.dev/docs/modeling/modular-models\#example "Direct link to Example")

The following example shows how an authorization model for a SaaS compny with a issue tracking and wiki software can implement modular models.

### Core [​](https://openfga.dev/docs/modeling/modular-models\#core "Direct link to Core")

If there is a core set of types owned by a team that manages the overall identity for the company, the following provides the basics: users, organizations and groups that can be used by each product area.

```codeBlockLines_e6Vv
module core

type user

type organization
  relations
    define member: [user]
    define admin: [user]

type group
  relations
    define member: [user]

```

### Issue tracking [​](https://openfga.dev/docs/modeling/modular-models\#issue-tracking "Direct link to Issue tracking")

The issue tracking software separates out the project- and issue-related types into separate files. Below, we also extend the `organization` type to add a relation specific to the issue tracking feature: the ability to authorize who can create a project.

```codeBlockLines_e6Vv
module issue-tracker

extend type organization
  relations
    define can_create_project: admin

type project
  relations
    define organization: [organization]
    define viewer: member from organization

```

```codeBlockLines_e6Vv
module issue-tracker

type ticket
  relations
    define project: [project]
    define owner: [user]

```

### Wiki [​](https://openfga.dev/docs/modeling/modular-models\#wiki "Direct link to Wiki")

The wiki model is managed in one file until it grows. We can also extend the `organization` type again to add a relation tracking who can create a space.

```codeBlockLines_e6Vv
module wiki

extend type organization
  relations
    define can_create_space: admin

type space
  relations
    define organization: [organization]
    define can_view_pages: member from organization

type page
  relations
    define space: [space]
    define owner: [user]

```

### `fga.mod` [​](https://openfga.dev/docs/modeling/modular-models\#fgamod-1 "Direct link to fgamod-1")

To deploy this model, create the `fga.mod` manifest file, set a schema version, and list the individual module files that comprise the model.

```codeBlockLines_e6Vv
schema: '1.2'
contents:
  - core.fga
  - issue-tracker/projects.fga
  - issue-tracker/tickets.fga
  - wiki.fga

```

### Putting it all together [​](https://openfga.dev/docs/modeling/modular-models\#putting-it-all-together "Direct link to Putting it all together")

With individual parts of the modular model in place, write the model to OpenFGA and run tests against it. Below is an example of what to run in the CLI:

```codeBlockLines_e6Vv
fga model write --store-id=$FGA_STORE_ID --file fga.mod

```

This model can now be queried and have tuples written to it, just like a singular file authorization model.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"user:anne","relation":"admin","object":"organization:acme"},\
      {"user":"organization:acme","relation":"organization","object":"space:acme"},\
      {"user":"organization:acme","relation":"organization","object":"project:acme"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             User: "user:anne",
             Relation: "admin",
             Object: "organization:acme",
        },         {
             User: "organization:acme",
             Relation: "organization",
             Object: "space:acme",
        },         {
             User: "organization:acme",
             Relation: "organization",
             Object: "project:acme",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
       new() {
                  User = "user:anne",
                  Relation = "admin",
                  Object = "organization:acme"
              },
       new() {
                  User = "organization:acme",
                  Relation = "organization",
                  Object = "space:acme"
              },
       new() {
                  User = "organization:acme",
                  Relation = "organization",
                  Object = "project:acme"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    user="user:anne",\
                    relation="admin",\
                    object="organization:acme",\
                ),\
                ClientTuple(\
                    user="organization:acme",\
                    relation="organization",\
                    object="space:acme",\
                ),\
                ClientTuple(\
                    user="organization:acme",\
                    relation="organization",\
                    object="project:acme",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("admin")
                        ._object("organization:acme"),
                new ClientTupleKey()
                        .user("organization:acme")
                        .relation("organization")
                        ._object("space:acme"),
                new ClientTupleKey()
                        .user("organization:acme")
                        .relation("organization")
                        ._object("project:acme")
        ));

var response = fgaClient.write(body, options).get();

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne admin organization:acme
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA organization:acme organization space:acme
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA organization:acme organization project:acme

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"user":"user:anne","relation":"admin","object":"organization:acme"},{"user":"organization:acme","relation":"organization","object":"space:acme"},{"user":"organization:acme","relation":"organization","object":"project:acme"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'can_create_space',
    object: 'organization:acme',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "can_create_space",
    Object:   "organization:acme",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "can_create_space",
    Object = "organization:acme",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="can_create_space",
    object="organization:acme",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("can_create_space")
        ._object("organization:acme");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne can_create_space organization:acme

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"can_create_space","object":"organization:acme"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "can_create_space", // has an `can_create_space` relation
  object = "organization:acme", // with the object `organization:acme`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to organization:acme as can_create_space?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

### Viewing the model [​](https://openfga.dev/docs/modeling/modular-models\#viewing-the-model "Direct link to Viewing the model")

When using the CLI to view the combined model DSL with `fga model get --store-id=$FGA_STORE_ID`, the DSL is annotated with comments defining the source module and file for types, relations and conditions.

For example, the `organization` type shows that the type is defined in the `core.fga` file as part of the `core` module, the `can_create_project` relation is defined in `issue-tracker/projects.fga` as part of the `issuer-tracker` module, and the `can_create_space` relation is defined in the `wiki.fga` file as part of the `wiki` module.

```codeBlockLines_e6Vv
type organization # module: core, file: core.fga
  relations
    define admin: [user]
    define member: [user] or admin
    define can_create_project: admin # extended by: module: issue-tracker, file: issue-tracker/projects.fga
    define can_create_space: admin # extended by: module: wiki, file: wiki.fga

```

- [Key Concepts](https://openfga.dev/docs/modeling/modular-models#key-concepts)
  - [`fga.mod`](https://openfga.dev/docs/modeling/modular-models#fgamod)
  - [Modules](https://openfga.dev/docs/modeling/modular-models#modules)
  - [Type Extensions](https://openfga.dev/docs/modeling/modular-models#type-extensions)
- [Example](https://openfga.dev/docs/modeling/modular-models#example)
  - [Core](https://openfga.dev/docs/modeling/modular-models#core)
  - [Issue tracking](https://openfga.dev/docs/modeling/modular-models#issue-tracking)
  - [Wiki](https://openfga.dev/docs/modeling/modular-models#wiki)
  - [`fga.mod`](https://openfga.dev/docs/modeling/modular-models#fgamod-1)
  - [Putting it all together](https://openfga.dev/docs/modeling/modular-models#putting-it-all-together)
  - [Viewing the model](https://openfga.dev/docs/modeling/modular-models#viewing-the-model)

## Modeling Slack Permissions
[Skip to main content](https://openfga.dev/docs/modeling/advanced/slack#__docusaurus_skipToContent_fallback)

On this page

This tutorial explains how to model permissions for a communication platform like Slack using OpenFGA.

What you will learn

- How to indicate relationships between a group of **[users](https://openfga.dev/docs/concepts#what-is-a-user)** and an **[object](https://openfga.dev/docs/concepts#what-is-an-object)**.


Used here to indicate that all members of a slack workspace can write in a certain channel.


See [Modeling User Groups](https://openfga.dev/docs/modeling/user-groups) for more.
- How to Model **concentric relationship** to have a certain [relation](https://openfga.dev/docs/concepts#what-is-a-relation) on an object imply another relation on the same object.


Used here to indicate that legacy admins have all the permissions of the more granular channels admin.


See [Modeling Concentric Relationships](https://openfga.dev/docs/modeling/building-blocks/concentric-relationships) for more.
- How to use [**the union operator**](https://openfga.dev/docs/configuration-language#the-union-operator) condition to indicate that a user might have a certain relation with an object if they match any of the criteria indicated.

## Before you start [​](https://openfga.dev/docs/modeling/advanced/slack\#before-you-start "Direct link to Before you start")

In order to understand this guide correctly you must be familiar with some OpenFGA concepts and know how to develop the things that we will list below.

### OpenFGA concepts [​](https://openfga.dev/docs/modeling/advanced/slack\#-concepts "Direct link to -concepts")

It would be helpful to have an understanding of some concepts of OpenFGA before you start.

#### Direct access [​](https://openfga.dev/docs/modeling/advanced/slack\#direct-access "Direct link to Direct access")

You need to know how to create an authorization model and create a relationship tuple to grant a user access to an object. [Learn more →](https://openfga.dev/docs/modeling/direct-access)

#### Modeling concentric relationships [​](https://openfga.dev/docs/modeling/advanced/slack\#modeling-concentric-relationships "Direct link to Modeling concentric relationships")

You need to know how to update the authorization model to allow having nested relations such as all writers are readers. [Learn more →](https://openfga.dev/docs/modeling/building-blocks/concentric-relationships)

#### Concepts & configuration language [​](https://openfga.dev/docs/modeling/advanced/slack\#concepts--configuration-language "Direct link to Concepts & configuration language")

- Some [OpenFGA Concepts](https://openfga.dev/docs/concepts)
- [Configuration Language](https://openfga.dev/docs/configuration-language)

## What you will be modeling [​](https://openfga.dev/docs/modeling/advanced/slack\#what-you-will-be-modeling "Direct link to What you will be modeling")

Slack is a messaging app for businesses that connects people to the information they need. By bringing people together to work as one unified team, Slack transforms the way organizations communicate. (Source: [What is Slack?](https://slack.com/intl/en-ca/help/articles/115004071768-What-is-Slack-))

In this tutorial, you will build a subset of the Slack permission model (detailed below) in OpenFGA, using some scenarios to validate the model.

> As reference, you can refer to Slack's publicly available docs:
>
> - [Role Management at Slack](https://slack.engineering/role-management-at-slack/)
> - [Types of Roles in Slack](https://slack.com/intl/en-ca/help/articles/360018112273-Types-of-roles-in-Slack)
> - [Permissions by Role in Slack](https://slack.com/intl/en-ca/help/articles/201314026-Permissions-by-role-in-Slack)
> - [Manage a Workspace on Enterprise Grid](https://slack.com/intl/en-ca/help/articles/115005225987-Manage-a-workspace-on-Enterprise-Grid)
> - [Manage channel posting permissions](https://slack.com/intl/en-ca/help/articles/360004635551-Manage-channel-posting-permissions-)

> Note: For brevity, this tutorial will not model all of Slack's permissions. Instead, it will focus on modeling the scenarios outlined below.

### Requirements [​](https://openfga.dev/docs/modeling/advanced/slack\#requirements "Direct link to Requirements")

This tutorial will focus on the following sections (this is a partial list of Slack's roles):

Workspace Roles:

- **Guest**: This type of user is limited in their ability to use Slack, and is only permitted to see one or multiple delegated channels.
- **Member**: This is the base type of user that does not have any particular administrative abilities, but has basic access to the organization's Slack workspaces. When an administrative change needs to be made, these users need the support of admins and owners to make the changes.
- **Legacy Admin**: This type of user is the basic administrator of any organization, and can make a wide variety of administrative changes across Slack, such as renaming channels, archiving channels, setting up preferences and policies, inviting new users, and installing applications. Users with this role perform the majority of administrative tasks across a team.

System Roles:

- **Channels Admin**: This type of user has the permission to archive channels, rename channels, create private channels, and convert public channels into private channels.

Channel Settings:

- **Visibility**:
  - **Public**: Visible to all members and open to join
  - **Private**: Visible to admins and invited members
- [**Posting Permissions**](https://slack.com/intl/en-ca/help/articles/360004635551-Manage-channel-posting-permissions-):
  - **Open**: Anyone can post
  - **Limited**: Only allowed members can post

### Defined scenarios [​](https://openfga.dev/docs/modeling/advanced/slack\#defined-scenarios "Direct link to Defined scenarios")

Use the following scenarios to be able to validate whether the model of the requirements is correct.

There will be the following users:

- Amy
- Bob
- Catherine
- David
- Emily

These users will interact in the following scenarios:

- You will assume there is a Slack workspace called Sandcastle
- Amy is a legacy admin of the Sandcastle workspace
- Bob is a member of the Sandcastle workspace with a channels admin role (Read more about system roles at Slack [here](https://slack.engineering/role-management-at-slack/))
- Catherine and Emily are normal members of the Sandcastle workspace, they can view all public channels, as well as channels they have been invited to
- David is a guest user with only view and write access to #proj-marketing-campaign, one of the public channels in the Sandcastle workspace
- Bob and Emily are in a private channel #marketing-internal in the Sandcastle workspace which only they can view and post to
- All members of the Sandcastle workspace can view the general channel, but only Amy and Emily can post to it

![Image showing requirements](https://openfga.dev/assets/images/slack-01-b6e717f5e865abef206372fda13e528e.svg)

caution

In production, it is highly recommended to use unique, immutable identifiers. Names are used in this article to make it easier to read and follow.

## Modeling workspaces & channels [​](https://openfga.dev/docs/modeling/advanced/slack\#modeling-workspaces--channels "Direct link to Modeling workspaces & channels")

The goal by the end of this post is to ask OpenFGA: Does person X have permission to perform action Y on channel Z? In response, you want to either get a confirmation that person X can indeed do that, or a rejection that they cannot. E.g. does David have access to view #general?

The OpenFGA is based on [Zanzibar](https://zanzibar.academy/), a Relation Based Access Control system. This means it relies on [objects](https://openfga.dev/docs/concepts#what-is-an-object) and [user](https://openfga.dev/docs/concepts#what-is-a-user) [relations](https://openfga.dev/docs/concepts#what-is-a-relation) to perform authorization [checks](https://openfga.dev/docs/concepts#what-is-a-check-request).

Setting aside the permissions, you will start with the roles and learn how to express the requirements in terms of relations you can feed into OpenFGA.

The requirements stated:

- **Amy** is a **legacy admin** of the **Sandcastle workspace**
- **Bob** is a **channels admin** of the **Sandcastle workspace**
- **Catherine** and **Emily** are a normal **members** of the **Sandcastle workspace**
- **David** is a **guest** user

Here is how you would express than in OpenFGA's [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model): You have a [type](https://openfga.dev/docs/concepts#what-is-a-type) called "workspace", and users can be related to it as a legacy\_admin, channels\_admin, member and guest

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type workspace
  relations
    define legacy_admin: [user]
    define channels_admin: [user]
    define member: [user]
    define guest: [user]

```

info

**Objects** of type `workspace` have users related to them as:

- Legacy Admin ( `legacy_admin`)
- Channels Admin ( `channels_admin`)
- Member ( `member`)
- Guest ( `guest`)

[Direct relationship type restrictions](https://openfga.dev/docs/configuration-language#direct-relationship-type-restrictions) indicate that a user can have a [direct relationship](https://openfga.dev/docs/concepts#what-are-direct-and-implied-relationships) with an object of the type the relation specifies.

### 01\. Individual permissions [​](https://openfga.dev/docs/modeling/advanced/slack\#01-individual-permissions "Direct link to 01. Individual permissions")

To keep things simple and focus on OpenFGA rather than Slack complexity, we will model only four roles (legacy\_admin, channels\_admin, member, guest).

At the end of this section we want to have the following permissions represented

| User | Relation | Object |
| --- | --- | --- |
| amy | legacy\_admin | workspace:sandcastle |
| bob | channels\_admin | workspace:sandcastle |
| catherine | member | workspace:sandcastle |
| david | guest | workspace:sandcastle |
| emily | member | workspace:sandcastle |

To represent permissions in OpenFGA we use [relations](https://openfga.dev/docs/concepts#what-is-a-relation). For workspace permissions we need to create the following [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model):

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type workspace
  relations
    define legacy_admin: [user]
    define channels_admin: [user]
    define member: [user]
    define guest: [user]

```

The OpenFGA service determines if a [user](https://openfga.dev/docs/concepts#what-is-a-user) has access to an [object](https://openfga.dev/docs/concepts#what-is-an-object) by [checking](https://openfga.dev/docs/concepts#what-is-a-check-request) if the user has a relation to that object. Let us examine one of those relations in detail:

- DSL
- JSON

```codeBlockLines_e6Vv

type workspace
  relations
    define member: [user]

```

info

The snippet above indicates that objects of type workspace have users related to them as "member" if those users belong to the userset of all users related to the workspace as "member".

This means that a user can be [directly related](https://openfga.dev/docs/concepts#what-are-direct-and-implied-relationships) as a member to an object of type "workspace"

If we want to say `amy` is a `legacy_admin` of `workspace:sandcastle` we create this relationship tuple

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // Amy is a Legacy Admin in the Sandcastle workspace\
      {"_description":"Amy is a Legacy Admin in the Sandcastle workspace","user":"user:amy","relation":"legacy_admin","object":"workspace:sandcastle"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

We can now ask OpenFGA "is `amy` a legacy\_admin of **workspace:sandcastle**?"

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:amy',
    relation: 'legacy_admin',
    object: 'workspace:sandcastle',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

We can also say that `catherine` is a `member` of `workspace:sandcastle`:

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // Catherine is a Member in the Sandcastle workspace\
      {"_description":"Catherine is a Member in the Sandcastle workspace","user":"user:catherine","relation":"member","object":"workspace:sandcastle"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

And verify by [asking](https://openfga.dev/docs/concepts#what-is-a-check-request) OpenFGA

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:catherine',
    relation: 'member',
    object: 'workspace:sandcastle',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Catherine, on the other hand, is not a legacy\_admin of workspace:sandcastle.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:catherine',
    relation: 'legacy_admin',
    object: 'workspace:sandcastle',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

Repeat this process for the other relationships

```codeBlockLines_e6Vv
[\
  {\
    // Bob is a Channels Admin in the Sandcastle workspace\
    user: 'user:bob',\
    relation: 'channels_admin',\
    object: 'workspace:sandcastle',\
  },\
  {\
    // David is a guest in the Sandcastle workspace\
    user: 'user:david',\
    relation: 'guest',\
    object: 'workspace:sandcastle',\
  },\
  {\
    // Emily is a Member in the Sandcastle workspace\
    user: 'user:emily',\
    relation: 'member',\
    object: 'workspace:sandcastle',\
  },\
]

```

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // Bob is a Channels Admin in the Sandcastle workspace\
      {"_description":"Bob is a Channels Admin in the Sandcastle workspace","user":"user:bob","relation":"channels_admin","object":"workspace:sandcastle"},\
      // David is a guest in the Sandcastle workspace\
      {"_description":"David is a guest in the Sandcastle workspace","user":"user:david","relation":"guest","object":"workspace:sandcastle"},\
      // Emily is a Member in the Sandcastle workspace\
      {"_description":"Emily is a Member in the Sandcastle workspace","user":"user:emily","relation":"member","object":"workspace:sandcastle"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

#### Verification [​](https://openfga.dev/docs/modeling/advanced/slack\#verification "Direct link to Verification")

To verify, we can issue [check request](https://openfga.dev/docs/concepts#what-is-a-check-request) to verify it is working as expected.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:amy',
    relation: 'legacy_admin',
    object: 'workspace:sandcastle',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Let's try to verify the followings:

| User | Object | Relation | Query | Relation? |
| --- | --- | --- | --- | --- |
| `amy` | `workspace:sandcastle` | `legacy_admin` | `is amy related to workspace:sandcastle as legacy_admin?` | Yes |
| `david` | `workspace:sandcastle` | `legacy_admin` | `is david related to workspace:sandcastle as legacy_admin?` | No |
| `amy` | `workspace:sandcastle` | `guest` | `is amy related to workspace:sandcastle as guest?` | No |
| `david` | `workspace:sandcastle` | `guest` | `is david related to workspace:sandcastle as guest?` | Yes |
| `amy` | `workspace:sandcastle` | `member` | `is amy related to workspace:sandcastle as member?` | No |
| `david` | `workspace:sandcastle` | `member` | `is david related to workspace:sandcastle as member?` | No |

### 02\. Updating The `workspace` Authorization Model With Implied Relations [​](https://openfga.dev/docs/modeling/advanced/slack\#02-updating-the-workspace-authorization-model-with-implied-relations "Direct link to 02-updating-the-workspace-authorization-model-with-implied-relations")

Some of the queries that you ran earlier, while returning the correct response, do not match reality. One of which is:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:amy',
    relation: 'member',
    object: 'workspace:sandcastle',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

As you saw before, running this query will return `amy is not a member of workspace:sandcastle`, which is correct based on the data you have given OpenFGA so far. But in reality, Amy, who is a `legacy_admin` already has an [implied](https://openfga.dev/docs/concepts#what-are-direct-and-implied-relationships) `channels_admin` and `member` relations. In fact anyone (other than a guest) is a `member` of the workspace.

To change this behavior, we will update our system with a [**concentric relationship**](https://openfga.dev/docs/modeling/building-blocks/concentric-relationships) model.

With the following updated [authorization model](https://openfga.dev/docs/concepts#what-is-a-type-definition), you are informing OpenFGA that any user who is related to a workspace as `legacy_admin`, is also related as a `channels_admin` and a `member` .

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type workspace
  relations
    define legacy_admin: [user]
    define channels_admin: [user] or legacy_admin
    define member: [user] or channels_admin or legacy_admin
    define guest: [user]

```

We can then verify `amy` is a `member` of `workspace:sandcastle`.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:amy',
    relation: 'member',
    object: 'workspace:sandcastle',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

We can check for other users and relationships.

| User | Object | Relation | Query | Relation? |
| --- | --- | --- | --- | --- |
| `amy` | `workspace:sandcastle` | `legacy_admin` | `is amy related to workspace:sandcastle as legacy_admin?` | Yes |
| `david` | `workspace:sandcastle` | `legacy_admin` | `is david related to workspace:sandcastle as legacy_admin?` | No |
| `amy` | `workspace:sandcastle` | `guest` | `is amy related to workspace:sandcastle as guest?` | No |
| `david` | `workspace:sandcastle` | `guest` | `is david related to workspace:sandcastle as guest?` | Yes |
| `amy` | `workspace:sandcastle` | `member` | `is amy related to workspace:sandcastle as member?` | Yes |
| `david` | `workspace:sandcastle` | `member` | `is david related to workspace:sandcastle as member?` | No |

### 03\. Updating the authorization model to include channels [​](https://openfga.dev/docs/modeling/advanced/slack\#03-updating-the-authorization-model-to-include-channels "Direct link to 03. Updating the authorization model to include channels")

So far, you have modeled the users' [relations](https://openfga.dev/docs/concepts#what-is-a-relation) to the workspace itself. In this task you will expand the model to include the relations concerning the channels.

By the end of it, you will run some queries to check whether a user can view or write to a certain channel. Queries such as:

- `is david related to channel:general as viewer?` (expected answer: No relation, as David is a guest user with only a relation to #proj-marketing-campaign)
- `is david related to channel:proj_marketing_campaign as viewer?` (expected answer: There is a relation, as there is a relation between David and #proj-marketing-campaign as a writer)
- `is bob related to channel:general as viewer?` (expected answer: There is a relation, as Bob is a member of the Sandcastle workspace, and all members of the workspace have a viewer relation to #general)

The requirements are:

- **Amy**, **Bob**, **Catherine** and **Emily**, are normal members of the Sandcastle workspace, they can **view** all **public channels**, in this case: #general and #proj-marketing-campaign
- **David**, a guest user, has only **view** and **write** access to the **#proj-marketing-campaign channel**
- **Bob** and **Emily** are the only ones with either **view** or **write** access to the **#marketing-internal channel**
- **Amy** and **Emily** are the only ones with **write** access to the **#general channel**

The possible relations to channels are:

- Workspace includes the channel, consider the relation that of a **parent workspace**
- A user can be a **viewer** and/or **writer** on a channel

The authorization model already has a section describing the workspace, what remains is describing the channel. That can be done by adding the following section to the configuration above:

- DSL
- JSON

```codeBlockLines_e6Vv

type channel
  relations
    define parent_workspace: [workspace]
    define writer: [user, workspace#legacy_admin, workspace#channels_admin, workspace#member, workspace#guest]
    define viewer: [user, workspace#legacy_admin, workspace#channels_admin, workspace#member, workspace#guest]

```

info

The configuration snippet above describes a channel that can have the following relations:

- workspaces related to it as `parent_workspace`
- users related to it as `writer`
- users related to it as `viewer`

#### Implied relation [​](https://openfga.dev/docs/modeling/advanced/slack\#implied-relation "Direct link to Implied relation")

There is an [implied relation](https://openfga.dev/docs/concepts#what-are-direct-and-implied-relationships) that anyone who can write to a channel can also read from it, so the authorization model can be modified to be:

- DSL
- JSON

```codeBlockLines_e6Vv

type channel
  relations
    define parent_workspace: [workspace]
    define writer: [user, workspace#legacy_admin, workspace#channels_admin, workspace#member, workspace#guest]
    define viewer: [user, workspace#legacy_admin, workspace#channels_admin, workspace#member, workspace#guest] or writer

```

info

Note that the channel type definition has been updated to indicate that viewer is the union of:

- the set of users with a [direct](https://openfga.dev/docs/concepts#what-are-direct-and-implied-relationships) viewer relation to this object
- the set of users with writer relations to this object

As a result, the authorization model is:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type workspace
  relations
    define legacy_admin: [user]
    define channels_admin: [user] or legacy_admin
    define member: [user] or channels_admin or legacy_admin
    define guest: [user]

type channel
  relations
    define parent_workspace: [workspace]
    define writer: [user, workspace#legacy_admin, workspace#channels_admin, workspace#member, workspace#guest]
    define viewer: [user, workspace#legacy_admin, workspace#channels_admin, workspace#member, workspace#guest] or writer

```

#### Updating relationship tuples [​](https://openfga.dev/docs/modeling/advanced/slack\#updating-relationship-tuples "Direct link to Updating relationship tuples")

What remains is to add the [relationship tuples](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple) to indicate the relation between the users, workspace and the channels.

The Sandcastle workspace is a parent workspace of the #general, #marketing-internal and #proj-marketing-campaign channels.

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"workspace:sandcastle","relation":"parent_workspace","object":"channel:general"},\
      {"user":"workspace:sandcastle","relation":"parent_workspace","object":"channel:marketing_internal"},\
      {"user":"workspace:sandcastle","relation":"parent_workspace","object":"channel:proj_marketing_campaign"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

##### `\#general` channel [​](https://openfga.dev/docs/modeling/advanced/slack\#general-channel "Direct link to general-channel")

The `#general` channel is a public channel visible to all the members of the workspace. In OpenFGA, you represent this relation in the form of the following relationship tuple:

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // The set of users related to `workspace:sandcastle` as member are also related to `channel:general` as `viewer`\
      {"_description":"The set of users related to `workspace:sandcastle` as member are also related to `channel:general` as `viewer`","user":"workspace:sandcastle#member","relation":"viewer","object":"channel:general"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

info

This indicates The set of users related to `workspace:sandcastle` as member are also related to `channel:general` as `viewer`

And to indicate that Amy and Emily can write to it:

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // Due to the configuration update you added earlier, writer relation is enough to imply a viewer relation\
      {"_description":"Due to the configuration update you added earlier, writer relation is enough to imply a viewer relation","user":"user:amy","relation":"writer","object":"channel:general"},\
      {"user":"user:emily","relation":"writer","object":"channel:general"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

##### `\#marketing-internal` channel [​](https://openfga.dev/docs/modeling/advanced/slack\#marketing-internal-channel "Direct link to marketing-internal-channel")

The `#marketing-internal` is visible to only Bob and Emily. They can view and write in it.

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"user:bob","relation":"writer","object":"channel:marketing_internal"},\
      {"user":"user:emily","relation":"writer","object":"channel:marketing_internal"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

##### `\#proj-marketing-campaign` channel [​](https://openfga.dev/docs/modeling/advanced/slack\#proj-marketing-campaign-channel "Direct link to proj-marketing-campaign-channel")

The `#proj-marketing-campaign` is public to all members of the Sandcastle workspace. They can view and write in it.

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"workspace:sandcastle#member","relation":"writer","object":"channel:proj_marketing_campaign"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

David is a guest user who can also view and write to #proj-marketing-campaign

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"user:david","relation":"writer","object":"channel:proj_marketing_campaign"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

#### Verification [​](https://openfga.dev/docs/modeling/advanced/slack\#verification-1 "Direct link to Verification")

Now that you have added the necessary relationship tuples, you will check to make sure that your configuration is valid.

First, we want to ensure david is not related to channel:general as viewer.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:david',
    relation: 'viewer',
    object: 'channel:general',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

David should be related to channel:proj\_marketing\_campaign as viewer.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:david',
    relation: 'viewer',
    object: 'channel:proj_marketing_campaign',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Repeat this for the following relations

| User | Object | Relation | Query | Relation? |
| --- | --- | --- | --- | --- |
| `amy` | `workspace:sandcastle` | `legacy_admin` | `is amy related to workspace:sandcastle as legacy_admin?` | Yes |
| `amy` | `workspace:sandcastle` | `member` | `is amy related to workspace:sandcastle as member?` | Yes |
| `amy` | `workspace:sandcastle` | `channels_admin` | `is amy related to workspace:sandcastle as channels_admin?` | Yes |
| `amy` | `channel:general` | `writer` | `is amy related to channel:general as writer?` | Yes |
| `amy` | `channel:general` | `viewer` | `is amy related to channel:general as viewer?` | Yes |
| `amy` | `channel:marketing_internal` | `writer` | `is amy related to channel:marketing_internal as writer?` | No |
| `amy` | `channel:marketing_internal` | `viewer` | `is amy related to channel:marketing_internal as viewer?` | No |
| `emily` | `channel:marketing_internal` | `writer` | `is emily related to channel:marketing_internal as writer?` | Yes |
| `emily` | `channel:marketing_internal` | `viewer` | `is emily related to channel:marketing_internal as viewer?` | Yes |
| `david` | `workspace:sandcastle` | `guest` | `is david related to workspace:sandcastle as guest?` | Yes |
| `david` | `workspace:sandcastle` | `member` | `is david related to workspace:sandcastle as member?` | No |
| `david` | `channel:general` | `viewer` | `is david related to channel:general as viewer?` | No |
| `david` | `channel:marketing_internal` | `viewer` | `is david related to channel:marketing_internal as viewer?` | No |
| `david` | `channel:proj_marketing_campaign` | `viewer` | `is david related to channel:proj_marketing_campaign as viewer?` | Yes |

## Summary [​](https://openfga.dev/docs/modeling/advanced/slack\#summary "Direct link to Summary")

- Have a basic understanding of [authorization](https://openfga.dev/docs/authorization-concepts#authentication-and-authorization) and [OpenFGA Concepts](https://openfga.dev/docs/concepts).
- Understand how to model authorization for a communication platform like Slack using [OpenFGA](https://openfga.dev/docs/fga).

In this tutorial, you:

- were introduced to [fine grain authentication](https://openfga.dev/docs/authorization-concepts#what-is-fine-grained-authorization) and [OpenFGA](https://openfga.dev/docs/fga).
- learned how to build and test an OpenFGA authorization model for a communication platforms like Slack.

Upcoming tutorials will dive deeper into OpenFGA, introducing concepts that will improve on the model you built today, and tackling different permission systems, with other relations and requirements that need to be met.

If you are interested in learning more about Authorization and Role Management at Slack, check out the Okta Fine Grained Authorization (FGA) team's chat with the Slack engineering team.

Role Management @ Slack - YouTube

Damian Schenkelman

69 subscribers

[Role Management @ Slack](https://www.youtube.com/watch?v=-iVBsagaK5Y)

Damian Schenkelman

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

If playback doesn't begin shortly, try restarting your device.

More videos

## More videos

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

[Watch on](https://www.youtube.com/watch?v=-iVBsagaK5Y&embeds_referring_euri=https%3A%2F%2Fopenfga.dev%2F)

0:00

0:00 / 1:12:30•Live

•

[Watch on YouTube](https://www.youtube.com/watch?v=-iVBsagaK5Y "Watch on YouTube")

### Exercises for you [​](https://openfga.dev/docs/modeling/advanced/slack\#exercises-for-you "Direct link to Exercises for you")

- Try adding more relationship tuples to represent other users and channels being added. Then run queries to make sure that the authorization model remains valid.
- Update the configuration to model more Slack permissions (workspace owners, Slack orgs), then add the relationship tuples necessary and run some queries to validate your configuration.

- [Before you start](https://openfga.dev/docs/modeling/advanced/slack#before-you-start)
  - [concepts](https://openfga.dev/docs/modeling/advanced/slack#-concepts)
- [What you will be modeling](https://openfga.dev/docs/modeling/advanced/slack#what-you-will-be-modeling)
  - [Requirements](https://openfga.dev/docs/modeling/advanced/slack#requirements)
  - [Defined scenarios](https://openfga.dev/docs/modeling/advanced/slack#defined-scenarios)
- [Modeling workspaces & channels](https://openfga.dev/docs/modeling/advanced/slack#modeling-workspaces--channels)
  - [01\. Individual permissions](https://openfga.dev/docs/modeling/advanced/slack#01-individual-permissions)
  - [02\. Updating The `workspace` Authorization Model With Implied Relations](https://openfga.dev/docs/modeling/advanced/slack#02-updating-the-workspace-authorization-model-with-implied-relations)
  - [03\. Updating the authorization model to include channels](https://openfga.dev/docs/modeling/advanced/slack#03-updating-the-authorization-model-to-include-channels)
- [Summary](https://openfga.dev/docs/modeling/advanced/slack#summary)
  - [Exercises for you](https://openfga.dev/docs/modeling/advanced/slack#exercises-for-you)

## OpenFGA ReBAC Guide
[Skip to main content](https://openfga.dev/docs/modeling/getting-started#__docusaurus_skipToContent_fallback)

On this page

Creating a [Relationship Based Access Control (ReBAC)](https://openfga.dev/docs/authorization-concepts#what-is-relationship-based-access-control) authorization model might feel odd at first. Most of us tend to think about authorization models in terms of roles and permissions. After all, most software works like that. Your existing systems are likely built on a model using roles and permissions.

This guide outlines a process for defining your [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model) with [OpenFGA](https://openfga.dev/docs/fga).

## Introduction To Modeling [​](https://openfga.dev/docs/modeling/getting-started\#introduction-to-modeling "Direct link to Introduction To Modeling")

To define a ReBAC model in OpenFGA we recommend:

- If you have an existing system: forget about how your system works today and start thinking about how you want it to work in the future.
- Thinking about authorization starting from the resources, or objects as OpenFGA calls them.

If that sounds hard, don't worry! We'll guide you through it.

OpenFGA is built to quickly and reliably make [authorization checks](https://openfga.dev/docs/concepts#what-is-a-check-request)
. This means providing an answer to a question: "Can user U perform action A on object O?"

ReBAC systems determine access from a [user's](https://openfga.dev/docs/concepts#what-is-a-user) [relation](https://openfga.dev/docs/concepts#what-is-a-relation) to an [object](https://openfga.dev/docs/concepts#what-is-an-object). Authorization decisions are then yes or no answers to the question: "Does user U have relation R with object O?".

General Authorization Check

"Can user **U** perform an action **A** on object **O**?"

OpenFGA (ReBAC) Authorization Check

"Does user **U** have relation **R** with object **O**?"

In the previous example, a relation R should be defined that implies permission to action A. For example:

General Authorization Check

"Can user **Jane** perform action **view** on object **project sandcastle**?"

OpenFGA (ReBAC) Authorization Check

"Can user **Jane** have relation **view** with object **project sandcastle**?"

We'll provide more detailed examples throughout this article.

When you are modeling, you need to answer a more general question:

Why could user U perform an action A on an object O?

If you can answer that question for all types of objects in your system, then you can codify that into an authorization model.

Let's get started!

* * *

## A Process For Defining Authorization Models [​](https://openfga.dev/docs/modeling/getting-started\#a-process-for-defining-authorization-models "Direct link to A Process For Defining Authorization Models")

Defining an authorization model requires codifying an answer to the question "why could user U perform an action A on an object O?" for all use cases or actions in your system. This is an iterative process. For the purpose of this guide, we'll go through one iteration of this process using a simplified Google Drive like system as an example.

Steps for defining your authorization model:

1. [Pick the most important feature](https://openfga.dev/docs/modeling/getting-started#01-pick-the-most-important-feature)
2. [List the object types](https://openfga.dev/docs/modeling/getting-started#02-list-the-object-types)
3. [List relations for those types](https://openfga.dev/docs/modeling/getting-started#03-list-relations-for-those-types)
4. [Define relations](https://openfga.dev/docs/modeling/getting-started#04-define-relations)
5. [Test the model](https://openfga.dev/docs/modeling/getting-started#05-test-the-model)
6. [Iterate](https://openfga.dev/docs/modeling/getting-started#06-iterate)

![The starting point](https://openfga.dev/assets/images/getting-started-diagram-01-55e7a873e7fdd4aa810922af9606ad0c.svg)

### 01\. Pick The Most Important Feature [​](https://openfga.dev/docs/modeling/getting-started\#01-pick-the-most-important-feature "Direct link to 01. Pick The Most Important Feature")

![Pick the most important feature](https://openfga.dev/assets/images/getting-started-diagram-02-46c38ef0a05b5eac7e8a85c3ca02e20f.svg)

A feature, in the context of this document, is an action or related set of actions your users can perform in your system. We'll introduce an example feature later in this section.

Start with the most important feature. It doesn't have to be the most complex one, but it should be the most important one. You're probably more familiar with the authorization requirements for this feature than other less important use cases.

Important

- Requirement clarity is fundamental when defining an authorization model.
- The scope of the feature is not important at this point. You can always iterate later.

#### Write It In Plain Language [​](https://openfga.dev/docs/modeling/getting-started\#write-it-in-plain-language "Direct link to Write It In Plain Language")

Once you've picked a feature, describe its authorization related scope using simple language. Avoid using the word "roles", as this ties you to an RBAC way of thinking.

info

Roles don't "disappear" in ReBAC systems like OpenFGA. Your users might [have roles on a given object, rather than the entire system](https://openfga.dev/docs/modeling/roles-and-permissions). But starting from the term "role" might lead you down the wrong path. Instead it is better to discover roles while you are modeling.

Your feature description should include the [objects](https://openfga.dev/docs/concepts#what-is-an-object), [users](https://openfga.dev/docs/concepts#what-is-a-user) and [groups of users](https://openfga.dev/docs/concepts#what-is-a-user) participating in the system. Sentences should look like this:

A user {user} can perform action {action} to/on/in {object types} ... IF {conditions}

Let's look at an example of a simplified Google Drive like system. We'll focus on the feature allowing users to create, read,
update, delete, and share documents with other users.

This feature can be described with these sentences:

- A user can create a document in a drive if they are the owner of the drive.
- A user can create a folder in a drive if they are the owner of the drive.
- A user can create a document in a folder if they are the owner of the folder. The folder is the parent of the document.
- A user can create a folder in a folder if they are the owner of the folder. The existing folder is the parent of the new folder.

* * *

- A user can share a document with another user or an organization as either editor or viewer if they are an owner or editor of a document or if they are an owner of the folder/drive that is the parent of the document.

* * *

- A user can share a folder with another user or an organization as a viewer if they are an owner of the folder.

* * *

- A user can view a document if they are an owner, viewer or editor of the document or if they are a viewer or owner of the folder/drive that is the parent of the document.

* * *

- A user can edit a document if they are an owner or editor of the document or if they are an owner of the folder/drive that is the parent of the document.

* * *

- A user can change the owner of a document if they are an owner of the document.

* * *

- A user can change the owner of a folder if they are an owner of the folder.

* * *

- A user can be a member of an organization.

How a user is added as a member to an organization is beyond the scope of the feature we picked to write down.


* * *

- A user can view a folder if they are the owner of the folder, or a viewer or owner of either the parent folder of the folder, or the parent drive of the folder.

### 02\. List The Object Types [​](https://openfga.dev/docs/modeling/getting-started\#02-list-the-object-types "Direct link to 02. List The Object Types")

![List the object types](https://openfga.dev/assets/images/getting-started-diagram-03-3734cdad8827d03f6a76db672f13be46.svg)

Next make a list of the [types](https://openfga.dev/docs/concepts#what-is-a-type) of objects in your system. You might be able to identify the objects in your system from your existing domain/database model.

Find all the objects in the previous step using this template:

A user {user} can perform action {action} to/on/in {object type} ... IF {conditions}

These are all the object types from the previous step (in order of appearance) based on that template:

Document

Folder

Organization

Let's highlight all object types in blue:

- A user can create a document in a drive if they are the owner of the drive.
- A user can create a folder in a drive if they are the owner of the drive.
- A user can create a document in a folder if they are the owner of the folder.
- A user can create a folder in a folder if they are the owner of the folder.

* * *

- A user can share a document with another user or an organization as either editor or viewer if they are an owner or editor of a document or if they are an owner of the folder/drive that is the parent of the document.

* * *

- A user can share a folder with another user or an organization as a viewer if they are an owner of the folder.

* * *

- A user can view a document if they are an owner, viewer or editor of the document or if they are a viewer, owner of the folder/drive that is the parent of the document.

* * *

- A user can edit a document if they are an owner or editor of the document or if they are an owner of the folder/drive that is the parent of the document.

* * *

- A user can change the owner of a document if they are an owner of the document.

* * *

- A user can change the owner of a folder if they are an owner of the folder.

* * *

- A user can be a member of an organization.

How a user is added as a member to an organization is beyond the scope of the feature we picked to write down.


* * *

- A user can view a folder if they are the owner of the folder, or a viewer or owner of either the parent folder of the folder, or the parent drive of the folder.

However, the list of object types is not finished. To complete the list of object types you must also add all the second nouns that appear in conditions as part of expressions of this format: **"{first noun} of a/the {second noun}"**.

... IF {first noun} of a/the {second noun}

Let's highlight those expressions in green:

- A user can create a document in a drive if they are the owner of the drive.
- A user can create a folder in a drive if they are the owner of the drive.
- A user can create a document in a folder if they are the owner of the folder. The folder is the parent of the document.
- A user can create a folder in a folder if they are the owner of the folder. The existing folder is the parent of the new folder .

* * *

- A user can share a document with another user or an organization as either editor or viewer if they are an owner or editor of a document or if they are an owner of the folder/drive that is the parent of the document.

* * *

- A user can share a folder with another user or an organization as a viewer if they are an owner of the folder.

* * *

- A user can view a document if they are an owner, viewer or editor of the document or if they are a viewer or owner of the folder/drive that is the parent of the document.

* * *

- A user can edit a document if they are an owner or editor of the document or if they are an owner of the folder/drive that is the parent of the document.

* * *

- A user can change the owner of a document if they are an owner of the document.

* * *

- A user can change the owner of a folder if they are an owner of the folder.

* * *

- A user can be a member of an organization.

How a user is added as a member to an organization is beyond the scope of the feature we picked to write down.


* * *

- A user can view a folder if they are the owner of the folder, or a viewer or owner of either the parent folder of the folder, or the parent drive of the folder.

The only second noun we didn't have in our object type list is "Drive", so we'll add it to the list.
We will also need to add "User" to the list as it establishes the type of user who can establish relations.

User

Document

Folder

Organization

Drive

Now that we have a list of object types we can start defining them using the [OpenFGA Configuration Language](https://openfga.dev/docs/configuration-language):

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document

type folder

type organization

type drive

```

Caution

You're now in the process of building a version you can use. The model above is not yet a valid authorization model accepted by OpenFGA.

Important

In a few cases other users can be part of determining whether an action can be performed on an object or not. Social media is an example of this "a user can comment on a picture if they are a friend of the user that published it".

In those cases [**User** should also be an object type](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships). Following the last recommendation, we would discover the User type because it is a second noun in an expression: "friend of the user".

### 03\. List Relations For Those Types [​](https://openfga.dev/docs/modeling/getting-started\#03-list-relations-for-those-types "Direct link to 03. List Relations For Those Types")

![List relations for those types](https://openfga.dev/assets/images/getting-started-diagram-04-e8b2110197173b6308a3f797e76aa471.svg)

Each of the previously defined types has a set of relations. [Relations](https://openfga.dev/docs/concepts#what-is-a-relation) are an important component in your model. After all, OpenFGA is a [Relationship Based Access Control (ReBAC)](https://openfga.dev/docs/authorization-concepts#what-is-relationship-based-access-control-rebac) system.

To identify relations for a type in the write-up we can perform an exercise similar to the one we did in [list the type of objects in your system](https://openfga.dev/docs/modeling/getting-started#02-list-the-object-types).

Relations for a type {type} will be all of these:

- any noun that is the {noun} of a "{noun} of a/an/the {type}" expression. **These are typically the Foreign Keys in a database.** We'll highlight these in green.
- any verb or action that is the {action} of a "can {action} (in) a/an {type}" expression. **These are typically the permissions for a type.** We'll highlight these in yellow.

- A user can create a document in a drive if they are the owner of the drive.
- A user can create a folder in a drive if they are the owner of the drive.
- A user can create a document in a folder if they are the owner of the folder. The folder is the parent of the document.
- A user can create a folder in a folder if they are the owner of the folder. The existing folder is the parent of the new folder.

* * *

- A user can share a document with another user or an organization as either editor or viewer if they are an owner or editor of a document or if they are an owner of the folder/drive that is the parent of the document.

* * *

- A user can share a folder with another user or an organization as a viewer if they are an owner of the folder.

* * *

- A user can view a document if they are an owner, viewer or editor of the document or if they are a viewer or owner of the folder/drive that is the parent of the document.

* * *

- A user can edit a document if they are an owner or editor of the document or if they are an owner of the folder/drive that is the parent of the document.

* * *

- A user can change the owner of a document if they are an owner of the document.

* * *

- A user can change the owner of a folder if they are an owner of the folder.

* * *

- A user can be a member of an organization.

How a user is added as a member to an organization is beyond the scope of the feature we picked to write down.


* * *

- A user can view a folder if they are the owner of the folder, or a viewer or owner of either the parent folder of the folder, or the parent drive of the folder.

The resulting list is:

Document

- parent
- can\_share
- owner
- editor
- can\_write
- can\_view
- viewer
- can\_change\_owner

Folder

- can\_create\_document
- owner
- can\_create\_folder
- can\_view
- viewer
- parent

Organization

- member

Drive

- can\_create\_document
- owner
- can\_create\_folder

info

In OpenFGA, relations can only have alphanumeric characters, underscores and hyphens. We recommend using underscore (\_) to separate words and removing prepositions. E.g.: "can create a document" can become "can\_create\_document" or "create\_document" if you are into brevity.

Using the [OpenFGA Configuration Language](https://openfga.dev/docs/configuration-language) we can enumerate the relations for each type:

```codeBlockLines_e6Vv
model
  schema 1.1
type user
type document
  relations
    define parent:
    define owner:
    define editor:
    define viewer:
    define can_share:
    define can_view:
    define can_write:
    define can_change_owner:
type folder
  relations
    define owner:
    define parent:
    define viewer:
    define can_create_folder:
    define can_create_document:
    define can_view:
type organization
  relations
    define member:
type drive
  relations
    define owner:
    define can_create_document:
    define can_create_folder:

```

Caution

You're now in the process of building a version you can use. The model above is not yet a valid authorization model accepted by OpenFGA.

### 04\. Define Relations [​](https://openfga.dev/docs/modeling/getting-started\#04-define-relations "Direct link to 04. Define Relations")

![Define relations](https://openfga.dev/assets/images/getting-started-diagram-05-ffffd65d9b3eb843353c35f2f663a0c5.svg)

We will use the [OpenFGA Configuration Language](https://openfga.dev/docs/configuration-language) to create a [relation definition](https://openfga.dev/docs/concepts#what-is-a-relation) for each of the relations we identified. At this stage we will encode the answers to the question we asked at the beginning of the document:.

Why could a user U, perform an action A on an object O?

We are going to go over each type and each of its relations and create a definition for it.

#### Type: Organization [​](https://openfga.dev/docs/modeling/getting-started\#type-organization "Direct link to Type: Organization")

We recommend starting from objects that represent groups/containers of users. For features in most systems these are easy to define and help reason about the other types. Examples of type names for these are "team", "group", "organization", etc.

##### Relation: Member [​](https://openfga.dev/docs/modeling/getting-started\#relation-member "Direct link to Relation: Member")

The member relation is used to tell OpenFGA about the members of an organization.

Important

Relation names in OpenFGA are arbitrary strings. There are no reserved relation names. You can use "member" or "part\_of" or anything else to refer to a user that is part of a team/organization.

Remember _"How a user is added as a member to an organization is beyond the scope of this feature."_ For the purposes of this model the relation definition should be:

```codeBlockLines_e6Vv

type organization
  relations
    define member: [user, organization#member]

```

Why? This relation definition states:

- That organizations have members

- That the members of an organization with id {id} are all users described by tuples of the form:

`{ user: {user-id}, relation: "member", object: "organization:{id}" }`


Important

Relation definitions of the form "define {relation}: \[user, organization#member\]" are fairly common. They are used to express that relationships "to the object with that relation" (e.g. "users" of type user or "member of organization") can be assigned by your system and that only the users that have that relation are those with a [direct relationship](https://openfga.dev/docs/modeling/building-blocks/direct-relationships).

You can read more about group membership and types in [Modeling User Groups](https://openfga.dev/docs/modeling/user-groups).

For the direct relationships, we need to figure out the object types that makes sense for the relationship tuples' user. In our organization example, it makes sense for member relations to have user of type

- user
- organization#member (i.e., other organization's member)

However, it will not make sense for organization member's user to be of type document, folder or drive.

We will specify this logic as part of [directly related user type](https://openfga.dev/docs/concepts#what-is-a-directly-related-user-type).

Side note

This also automatically supports nested organizational membership if you want such a feature in your system. You could use relationship tuples like the following one to express that "members of organization A are members of organization B":

```codeBlockLines_e6Vv
{ user: "organization:A#member", relation: "member", object: "organization:B"}

```

If you want to learn more, you can read further about this in [Modeling User Groups](https://openfga.dev/docs/modeling/user-groups) and [Managing Relationships Between Objects](https://openfga.dev/docs/interacting/managing-relationships-between-objects).

##### Complete Type Definition [​](https://openfga.dev/docs/modeling/getting-started\#complete-type-definition "Direct link to Complete Type Definition")

The complete [type definition](https://openfga.dev/docs/concepts#what-is-a-type-definition) for the **organization** type is:

```codeBlockLines_e6Vv

type organization
  relations
    define member: [user, organization#member]

```

#### Type: Document [​](https://openfga.dev/docs/modeling/getting-started\#type-document "Direct link to Type: Document")

After defining your "group" like types, continue with the most important type for the feature: the one that allows the main use case. In this case "document", since the main use case for users is to create, write, read and collaborate on documents.

Defining relations for the main type lets you focus on your core use case, and will likely make other type definitions easier.

##### Relation: Owner [​](https://openfga.dev/docs/modeling/getting-started\#relation-owner "Direct link to Relation: Owner")

The owner relation is used to tell OpenFGA which users are owners of the document.

Important

In the current version, there is no way to state that there is only one owner in the authorization model. The application must limit this [set of users](https://openfga.dev/docs/concepts#what-is-a-user) to just one owner if that is a requirement.

When a document is created, a relationship tuple will be stored in OpenFGA representing this relationship between owner and document. This is an example of a [user to object relationship](https://openfga.dev/docs/modeling/direct-access).

The relation definition then should be:

```codeBlockLines_e6Vv

type document
  relations
    define owner: [user, organization#member]

```

Why? This [relation definition](https://openfga.dev/docs/concepts#what-is-a-relation) states that:

- each document can have one or more owners
- owners of a document are assignable by creating a tuple of the format
`{ user: "{user_id}", relation: "owner", object: "document:{id}" }` for individual users

##### Relation: Editor [​](https://openfga.dev/docs/modeling/getting-started\#relation-editor "Direct link to Relation: Editor")

The editor relation is used to tell OpenFGA which users are editors of the document.

When a user shares a document with another user or set of users as editor, a relationship tuple will be stored in OpenFGA representing this relationship between editor and document. This is an example of a [users to object relationship](https://openfga.dev/docs/modeling/direct-access).

The relation definition then should be:

```codeBlockLines_e6Vv

type document
  relations
    define editor: [user, organization#member]

```

Why? This relation definition states that:

- each document can have editors
- the editor(s) of a document are assignable by creating a tuple with shape
`{ user: "{user_id}", relation: "editor", object: "document:{id}" }` for individual users

This also supports making all members in an organization editors of the document, through a [group to object relationship](https://openfga.dev/docs/modeling/user-groups). A relationship tuple like the following one states that the members of organization A are editors of document 0001.

```codeBlockLines_e6Vv
[{\
  "user": "organization:A#member",\
  "relation": "editor",\
  "object": "document:0001"\
}]

```

You can learn more about this in [Modeling User Groups](https://openfga.dev/docs/modeling/user-groups).

##### Relation: Viewer [​](https://openfga.dev/docs/modeling/getting-started\#relation-viewer "Direct link to Relation: Viewer")

The viewer relation is similar to the document's [editor relation](https://openfga.dev/docs/modeling/getting-started#relation-editor). It will be defined like this:

```codeBlockLines_e6Vv

type document
  relations
    define viewer: [user, organization#member]

```

##### Relation: Parent [​](https://openfga.dev/docs/modeling/getting-started\#relation-parent "Direct link to Relation: Parent")

The parent relation is used to tell OpenFGA which folder or drive is the parent of the document.

Important

Relation names in OpenFGA are arbitrary strings. There are no reserved relation names. You can use "parent", "container" or "ancestor" to refer to a "parent folder".

This relation is different from the others we have seen so far, as it is a relation between two objects (a **folder** and or **drive** that is the parent of the **document**). This is known as an [object to object relationship](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships), of which [parent-child is a particular case](https://openfga.dev/docs/modeling/parent-child).

When a document is created a relationship tuple will be stored in OpenFGA to represent this relationship between parent and document. The relation definition then should be:

```codeBlockLines_e6Vv

type document
  relations
    define parent: [folder, drive]

```

Why? This relation definition states that:

- documents may have a parent
- the parent(s) of a document with id {id} is either a folder or a drive, described by one of these relationship tuples:
  - `{ user: "folder:{id}", relation: "parent", object: "document:{id}" }`
  - `{ user: "drive:{id}", relation: "parent", object: "document:{id}" }`

We can use [direct type restriction](https://openfga.dev/docs/configuration-language#direct-relationship-type-restrictions) to ensure a document's parent can only be an object of type either drive or folder.

Side note

You might have noticed that the "user" in the tuple is an object. This is a special syntax OpenFGA accepts in the "user" parameter to write [object to object relationships](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships). You can read more about writing data to manage object to object relationships in [Managing Relationships Between Objects](https://openfga.dev/docs/interacting/managing-relationships-between-objects).

##### Relation: can\_share [​](https://openfga.dev/docs/modeling/getting-started\#relation-can_share "Direct link to Relation: can_share")

We need to express the following in the [relation definition](https://openfga.dev/docs/concepts#what-is-a-relation):

_A user can share a document with another user or an organization as either editor or viewer if they are an owner or editor of a document or if they are an owner of the folder that is the parent of the document._

We can achieve that with the following definition using [OpenFGA Configuration Language](https://openfga.dev/docs/configuration-language):

```codeBlockLines_e6Vv

type document
  relations
    define can_share: owner or editor or owner from parent

```

There are a few key things here:

- **We don't use a [direct relationship type restriction](https://openfga.dev/docs/configuration-language#direct-relationship-type-restrictions) as part of the definition.** can\_share is a common example of representing a permission that is defined in terms of other relations but is not directly assignable by the system.
- The relation definition contains a [union operator](https://openfga.dev/docs/configuration-language#the-union-operator) separating a list of relations that the user must have with the object in order to "be able to share the document". It is any of:
  - Being an owner of the document
  - Being an editor of the document
  - Being an owner of the parent of the document. Whether the parent is a drive or a folder is not important, as they both have an owner relation.

You can read more about the aforementioned items in [Modeling Roles and Permissions](https://openfga.dev/docs/modeling/roles-and-permissions).

##### Relation: can\_view [​](https://openfga.dev/docs/modeling/getting-started\#relation-can_view "Direct link to Relation: can_view")

We need to express the following in the [relation definition](https://openfga.dev/docs/concepts#what-is-a-relation):

_A user can view a document if they are an owner, viewer or editor of a document or if they are a viewer, owner of the folder/drive that is the parent of the document._

Similar to the [can\_share relation](https://openfga.dev/docs/modeling/getting-started#relation-can_share), we can achieve that with the following definition using [OpenFGA Configuration Language](https://openfga.dev/docs/configuration-language):

```codeBlockLines_e6Vv

type document
  relations
    define can_view: viewer or editor or owner or viewer from parent or owner from parent

```

##### Relation: can\_write [​](https://openfga.dev/docs/modeling/getting-started\#relation-can_write "Direct link to Relation: can_write")

We need to express the following in the [relation definition](https://openfga.dev/docs/concepts#what-is-a-relation):

_A user can write a document if they are an owner or editor of a document or if they are an owner or editor of the folder/drive that is the parent of the document._

Similar to the [can\_share relation](https://openfga.dev/docs/modeling/getting-started#relation-can_share), we can achieve that with the following definition using [OpenFGA Configuration Language](https://openfga.dev/docs/configuration-language):

```codeBlockLines_e6Vv

type document
  relations
    define can_write: editor or owner or owner from parent

```

##### Relation: can\_change\_owner [​](https://openfga.dev/docs/modeling/getting-started\#relation-can_change_owner "Direct link to Relation: can_change_owner")

We need to express the following in the [relation definition](https://openfga.dev/docs/concepts#what-is-a-relation):

_A user can change the owner of a document if they are an owner of the document._

Similar to the [can\_share relation](https://openfga.dev/docs/modeling/getting-started#relation-can_share), we can achieve that with the following definition using [OpenFGA Configuration Language](https://openfga.dev/docs/configuration-language):

```codeBlockLines_e6Vv

type document
  relations
    define can_change_owner: owner

```

##### Complete Type Definition [​](https://openfga.dev/docs/modeling/getting-started\#complete-type-definition-1 "Direct link to Complete Type Definition")

The complete [type definition](https://openfga.dev/docs/concepts#what-is-a-type-definition) for the document type is:

```codeBlockLines_e6Vv
model
  schema 1.1

type document
  relations
    define owner: [user, organization#member]
    define editor: [user, organization#member]
    define viewer: [user, organization#member]
    define parent: [folder]
    define can_share: owner or editor or owner from parent
    define can_view: viewer or editor or owner or viewer from parent or editor from parent or owner from parent
    define can_write: editor or owner or owner from parent
    define can_change_owner: owner

```

Combining the type definitions for document and organization, we have

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type organization
  relations
    define member: [user, organization#member]

type document
  relations
    define owner: [user, organization#member]
    define editor: [user, organization#member]
    define viewer: [user, organization#member]
    define parent: [folder]
    define can_share: owner or editor or owner from parent
    define can_view: viewer or editor or owner or viewer from parent or editor from parent or owner from parent
    define can_write: editor or owner or owner from parent
    define can_change_owner: owner

```

note

The OpenFGA authorization model API and SDK only accepts JSON in its input. To convert from DSL to JSON, you may use the [FGA CLI](https://github.com/openfga/cli) to run `fga model transform`.

### 05\. Test The Model [​](https://openfga.dev/docs/modeling/getting-started\#05-test-the-model "Direct link to 05. Test The Model")

![Test the model](https://openfga.dev/assets/images/getting-started-diagram-06-8eb4b8f4a925670b0ff05fa86c4b890e.svg)

Once you have defined your group like types and the most important type for your feature you want to ensure everything is working as expected. This means testing the model.

How? Remember from the introduction that **OpenFGA's** main job is to answer the question:

Can user U, perform an action A on an object O?

The OpenFGA service does that by checking if a user has a particular relationship to an object, based on your authorization model and relationship tuples.

General Authorization Check

"Can user **U** perform action **A** on object **O**?"

OpenFGA (ReBAC) Authorization Check

"Can user **U** have relation **R** with object **O**?"

What we want is to ensure that given our current authorization model and some sample relationship tuples, we get the expected results for those questions.

So we'll write some relationship tuples and assertions. An OpenFGA assertion takes one of these forms:

1. user U **has** relation R with object O
2. user U **does not have** relation R with object O

Much like automated tests and assertions work for programming languages, you can use assertions to prevent regressions while you change your tuples and authorization model. Essentially, assertions help you ensure things work like you expect them to work as you iterate.

#### Write Relationship Tuples [​](https://openfga.dev/docs/modeling/getting-started\#write-relationship-tuples "Direct link to Write Relationship Tuples")

The relationship tuples should represent real examples from your system with fake data.

At this point you haven't defined the drive or folder types, so you can only test things based on users or organization members' relationships to documents. Let's imagine an example setup and write the relationship tuples for it:

| System Action | Relationship Tuple |
| --- | --- |
| Anne is a member of the contoso organization | `{ user:"user:anne", relation: "member", object: "organization:contoso"}` |
| Beth is a member of fabrikam organization | `{ user:"user:beth", relation: "member", object: "organization:fabrikam"}` |
| Anne creates document:1, becomes its owner. | `{ user:"user:anne", relation: "owner", object: "document:1"}` |
| Anne shares document:1 with all members of the fabrikam organization as editor. | `{ user:"organization:fabrikam#member", relation: "editor", object: "document:1"}` |
| Beth creates document:2 and becomes its owner. | `{ user:"user:beth", relation: "owner", object: "document:2"}` |
| Beth shares document:2 with all members of the contoso organization as viewer | `{ user:"organization:contoso#member", relation: "viewer", object: "document:2"}` |

Follow these steps to create relationship tuples.

#### Create Assertions [​](https://openfga.dev/docs/modeling/getting-started\#create-assertions "Direct link to Create Assertions")

According to our [written down model](https://openfga.dev/docs/modeling/getting-started#write-it-in-plain-language) and the [relationship tuples](https://openfga.dev/docs/modeling/getting-started#write-relationship-tuples) from the previous step, these assertions should be specified:

Because anne is the owner of document:1:

- user **anne** has relation **can\_share** with document:1
- user **anne** has relation **can\_write** with document:1
- user **anne** has relation **can\_view** with document:1
- user **anne** has relation **can\_change\_owner** with document:1

Because beth is a member of organization:fabrikam and members of organization:fabrikam are writer of document:1:

- user **beth** has relation **can\_share** with document:1
- user **beth** has relation **can\_write** with document:1
- user **beth** has relation **can\_view** with document:1
- user **beth** does not have relation **can\_change\_owner** with document:1

Because beth is the owner of document:2:

- user **beth** has relation **can\_share** with document:2
- user **beth** has relation **can\_write** with document:2
- user **beth** has relation **can\_view** with document:2
- user **beth** has relation **can\_change\_owner** with document:2

Because anne is a member of organization:contoso and members of organization:contoso are viewer of document:2:

- user **anne** does not have relation **can\_share** with document:2
- user **anne** does not have relation **can\_write** with document:2
- user **anne** has relation **can\_view** with document:2
- user **anne** does not have relation **can\_change\_owner** with document:2

Follow these steps to create assertions.

#### Run Assertions [​](https://openfga.dev/docs/modeling/getting-started\#run-assertions "Direct link to Run Assertions")

Run the assertions. They should all pass. If they don't you can use the query view to understand what is causing them to fail, and then update your authorization model and relation tuples accordingly.

Once all the assertions are working, you should continue the iterative process of working on your model.

### 06\. Iterate [​](https://openfga.dev/docs/modeling/getting-started\#06-iterate "Direct link to 06. Iterate")

![Iterate](https://openfga.dev/assets/images/getting-started-diagram-07-110858004c2892e28df4c404a50abce2.svg)

We'll leave the exercise of defining the drive and folder relations, then adding relationship tuples and assertions to you. Once you are finished, check out the complete example to see how you did.

When defining the authorization model for your own system, you would continue iterating on the [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model) with the [next feature](https://openfga.dev/docs/modeling/getting-started#01-pick-the-most-important-feature) and so on.

## Related Sections [​](https://openfga.dev/docs/modeling/getting-started\#related-sections "Direct link to Related Sections")

Check the following sections for more on how to model with OpenFGA.

OpenFGA Concepts

Learn about the OpenFGA Concepts.

- [More](https://openfga.dev/docs/concepts)

Configuration Language

Learn about OpenFGA Configuration Language.

- [More](https://openfga.dev/docs/configuration-language)

Direct Access

Learn about modeling user access to an object.

- [More](https://openfga.dev/docs/modeling/direct-access)

- [Introduction To Modeling](https://openfga.dev/docs/modeling/getting-started#introduction-to-modeling)
- [A Process For Defining Authorization Models](https://openfga.dev/docs/modeling/getting-started#a-process-for-defining-authorization-models)
  - [01\. Pick The Most Important Feature](https://openfga.dev/docs/modeling/getting-started#01-pick-the-most-important-feature)
  - [02\. List The Object Types](https://openfga.dev/docs/modeling/getting-started#02-list-the-object-types)
  - [03\. List Relations For Those Types](https://openfga.dev/docs/modeling/getting-started#03-list-relations-for-those-types)
  - [04\. Define Relations](https://openfga.dev/docs/modeling/getting-started#04-define-relations)
  - [05\. Test The Model](https://openfga.dev/docs/modeling/getting-started#05-test-the-model)
  - [06\. Iterate](https://openfga.dev/docs/modeling/getting-started#06-iterate)
- [Related Sections](https://openfga.dev/docs/modeling/getting-started#related-sections)

## Modular Models Announcement
[Skip to main content](https://openfga.dev/blog/modular-models-announcement#__docusaurus_skipToContent_fallback)

Modular models aims to improve the model authoring experience when multiple teams are maintaining a model, such as:

- A model can grow large and difficult to understand
- As more teams begin to contribute to a model, the ownership boundaries may not be clear and code review processes might not scale

With modular models, a single model can be separated across multiple files allow grouping of types and conditions into modules. This means that a model can be organized more easily in terms of team or organizational structure. Used in conjunction with features such as [GitHub](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners), [GitLab](https://docs.gitlab.com/ee/user/project/codeowners/) or [Gitea's](https://docs.gitea.com/usage/code-owners) code owners, it should become easier to ensure the owners of a portion of your model are correctly assigned to review it.

## How to use it? [​](https://openfga.dev/blog/modular-models-announcement\#how-to-use-it "Direct link to How to use it?")

Modular models is available in the latest version of OpenFGA. To use it you need to:

- Update to the [v0.3.0 release](https://github.com/openfga/cli/releases/tag/v0.3.0) of the CLI
- Update to [v0.2.21](https://github.com/openfga/vscode-ext/releases/tag/v0.2.21) of the VS Code Extension
- Download [v1.5.3](https://github.com/openfga/openfga/releases/tag/v1.5.3) of OpenFGA
- Check out the modular models sample store in the [sample-stores repo](https://github.com/openfga/sample-stores/tree/main/stores/modular)
- Review the [documentation for this feature](https://openfga.dev/docs/modeling/modular-models)
- Check a [demo video in Youtube](https://youtu.be/oeqroL8-wCQ)

## What's next? [​](https://openfga.dev/blog/modular-models-announcement\#whats-next "Direct link to What's next?")

Looking beyond the near term, modular models allows us to implement [additional API authorization options for OpenFGA](https://github.com/openfga/roadmap/issues/30).

## Reach out! [​](https://openfga.dev/blog/modular-models-announcement\#reach-out "Direct link to Reach out!")

We want to learn how you use this feature and how we can improve it!

Please reach out through our [community channels](https://openfga.dev/community) with any questions or feedback.

- [How to use it?](https://openfga.dev/blog/modular-models-announcement#how-to-use-it)
- [What's next?](https://openfga.dev/blog/modular-models-announcement#whats-next)
- [Reach out!](https://openfga.dev/blog/modular-models-announcement#reach-out)

## OpenFGA ListUsers API
[Skip to main content](https://openfga.dev/blog/list-users-announcement#__docusaurus_skipToContent_fallback)

Today we are launching a new API for OpenFGA: ListUsers.

This API will answer the question "what users have relation X with object Y?". This will be useful, for example, in UIs that want to display the list of users that a resource has been shared with, e.g. the "share" dialog in Google Docs.

You can read more about it in the [API docs](https://openfga.dev/api/service#/Relationship%20Queries/ListUsers) and the [product documentation](https://openfga.dev/docs/getting-started/perform-list-users).

## How to use it? [​](https://openfga.dev/blog/list-users-announcement\#how-to-use-it "Direct link to How to use it?")

ListUsers is available in OpenFGA starting with [v1.5.4](https://github.com/openfga/openfga/releases/tag/v1.5.4).

To be able to call this API, you must turn on this flag on the server: `--experimentals enable-list-users`. Be sure to also check out the various configuration flags that were added to control its behavior.

The new functionality is available on the latest versions of the [Java](https://github.com/openfga/java-sdk/), [.NET](https://github.com/openfga/dotnet-sdk/), [Go](https://github.com/openfga/go-sdk/) and [Javascript SDK](https://github.com/openfga/js-sdk/), [CLI](https://github.com/openfga/cli?tab=readme-ov-file#list-users) and [VS Code integration](https://marketplace.visualstudio.com/items?itemName=openfga.openfga-vscode).

We'll be releasing support for the Python SDK soon.

## We want your feedback! [​](https://openfga.dev/blog/list-users-announcement\#we-want-your-feedback "Direct link to We want your feedback!")

We want to learn how you use this API and how we can improve it!

Please reach out through our [community channels](https://openfga.dev/community) with any questions or feedback.

- [How to use it?](https://openfga.dev/blog/list-users-announcement#how-to-use-it)
- [We want your feedback!](https://openfga.dev/blog/list-users-announcement#we-want-your-feedback)

## OpenFGA at KubeCon
[Skip to main content](https://openfga.dev/blog/kubecon-na-2023#__docusaurus_skipToContent_fallback)

As you'd expect, the OpenFGA team will be at KubeCon NA 2023 in Chicago, IL!

We'll have a packed agenda for the week:

- [Jonathan Whitaker](https://www.linkedin.com/in/jonathan-whitaker-5a8b2484/) and [Lucas Käldström](https://www.linkedin.com/in/luxas/) will be presenting in [Could\_Native Rejects](https://cloud-native.rejekts.io/) on how to use OpenFGA to manage and extend authorization in Kubernetes. Learn more [here](https://cfp.cloud-native.rejekts.io/cloud-native-rejekts-na-chicago-2023/speaker/XB7EUR/).

- [Maria Ines Parnisari](https://www.linkedin.com/in/miparnisari/) and [Andres Aguiar](https://www.linkedin.com/in/aaguiar/) will be presenting in [AppDeveloperCon](https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/co-located-events/appdevelopercon/) about modernizing authorization for cloud native applications using OpenFGA. Learn more [here](https://colocatedeventsna2023.sched.com/event/1Rj2j/modernizing-authorization-for-cloud-native-applications-using-openfga-andres-aguiar-maria-ines-parnisari-okta).

- We'll host a Project Meeting on Monday 9.30 AM in the Hudson room at the [Hilton Garden Inn](https://maps.app.goo.gl/77FwgGdpsWK5jWHd6). We'll share how the product is being used, demo the latests features like our new CLI, the VS Code Extension, Conditional Relationships, the Java SDK... and more!

- We'll be in the CNCF Project Pavilion during the afternoons.

- We'll host our [OpenFGA community meeting](https://github.com/openfga/community/blob/main/community-meetings.md) directly from KubeCon on Thursday 9th at 3PM UTC (8AM PST/11AM EST).


If you want to meet with the team outside of these events, please pick any spot that works for you in our [calendar](https://calendar.app.google/GonEwLboKvPkG8pL6).

See you in Chicago!

## Object Relationships Guide
[Skip to main content](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships#__docusaurus_skipToContent_fallback)

On this page

In this guide you'll learn how to model your application with [objects](https://openfga.dev/docs/concepts#what-is-an-object) that are not specifically tied to a user. For example, a `folder` is a `parent` of a `document`.

When to use

This design pattern is helpful in the case where there are relationships between different objects. With OpenFGA, so long as both objects are in a type defined in the [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model), relationship tuples can be added to indicate a relationship between them.

For example:

- `communities` can contain `channels`
- `channels` can contain `posts`
- `channels` can contain `threads`
- `threads` can contain `posts`
- `bookshelf` can have `books`
- `trips` can have `bookings`
- `account` can contain `transactions`
- `buildings` can have `doors`

## Before you start [​](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships\#before-you-start "Direct link to Before you start")

To better follow this guide, make sure you're familiar with some [OpenFGA Concepts](https://openfga.dev/docs/concepts) and know how to develop the things listed below.

You will start with the _[authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model)_ below, it represents a `document` _[type](https://openfga.dev/docs/concepts#what-is-a-type)_ that can have users **[related](https://openfga.dev/docs/concepts#what-is-a-relation)** as `editor`, and `folder` type that can have users related as `viewer`.

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define editor: [user]

type folder
  relations
    define viewer: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "document",\
      "relations": {\
        "editor": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "editor": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "folder",\
      "relations": {\
        "viewer": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

* * *

In addition, you will need to know the following:

### Modeling user groups [​](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships\#modeling-user-groups "Direct link to Modeling user groups")

You need to know how to add users to groups and grant groups access to resources. [Learn more →](https://openfga.dev/docs/modeling/user-groups)

### OpenFGA concepts [​](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships\#-concepts "Direct link to -concepts")

- A [Type](https://openfga.dev/docs/concepts#what-is-a-type): a class of objects that have similar characteristics
- A [User](https://openfga.dev/docs/concepts#what-is-a-user): an entity in the system that can be related to an object
- A [Relation](https://openfga.dev/docs/concepts#what-is-a-relation): is a string defined in the type definition of an authorization model that defines the possibility of a relationship between an object of the same type as the type definition and a user in the system
- An [Object](https://openfga.dev/docs/concepts#what-is-an-object): represents an entity in the system. Users' relationships to it can be define through relationship tuples and the authorization model
- A [Relationship Tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple): a grouping consisting of a user, a relation and an object stored in OpenFGA

## Step by step [​](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships\#step-by-step "Direct link to Step by step")

### 01\. Create parent relations in document [​](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships\#01-create-parent-relations-in-document "Direct link to 01. Create parent relations in document")

To represent that a `folder` can be a `parent` of a `document`, we first need to modify our `document` [type definition](https://openfga.dev/docs/concepts#what-is-a-type-definition) to allow a `parent` [relation](https://openfga.dev/docs/concepts#what-is-a-relation).

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define parent: [folder]
    define editor: [user]

type folder
  relations
    define viewer: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "document",\
      "relations": {\
        "parent": {\
          "this": {}\
        },\
        "editor": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "parent": {\
            "directly_related_user_types": [\
              {\
                "type": "folder"\
              }\
            ]\
          },\
          "editor": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "folder",\
      "relations": {\
        "viewer": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

### 02\. Add Parent Relationship Tuples [​](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships\#02-add-parent-relationship-tuples "Direct link to 02. Add Parent Relationship Tuples")

Once the type definition is updated, we can now create the [relationship](https://openfga.dev/docs/concepts#what-is-a-relationship) between a `folder` as a `parent` of a `document`. To do this, we will create a new **[relationship tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple)** that describes: **folder:budgets** is a `parent` of **document:may\_budget.doc**. In OpenFGA, [users](https://openfga.dev/docs/concepts#what-is-a-user) in the relationship tuples can not only be IDs, but also other objects in the form of `type:object_id`.

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // The user in this case is another object where the type is `folder` and the object_id is `budgets`\
      {"_description":"The user in this case is another object where the type is `folder` and the object_id is `budgets`","user":"folder:budgets","relation":"parent","object":"document:may_budget.doc"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             // The user in this case is another object where the type is `folder` and the object_id is `budgets`
             User: "folder:budgets",
             Relation: "parent",
             Object: "document:may_budget.doc",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
    // The user in this case is another object where the type is `folder` and the object_id is `budgets`
       new() {
                  User = "folder:budgets",
                  Relation = "parent",
                  Object = "document:may_budget.doc"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    # The user in this case is another object where the type is `folder` and the object_id is `budgets`\
                    user="folder:budgets",\
                    relation="parent",\
                    object="document:may_budget.doc",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                // The user in this case is another object where the type is `folder` and the object_id is `budgets`
                new ClientTupleKey()
                        .user("folder:budgets")
                        .relation("parent")
                        ._object("document:may_budget.doc")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"_description":"The user in this case is another object where the type is `folder` and the object_id is `budgets`","user":"folder:budgets","relation":"parent","object":"document:may_budget.doc"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA folder:budgets parent document:may_budget.doc

```

```codeBlockLines_e6Vv
write([\
    // The user in this case is another object where the type is `folder` and the object_id is `budgets`\
    {\
      "user":"folder:budgets",\
      "relation":"parent",\
      "object":"document:may_budget.doc"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

### 03\. Check that parent folders have permissions [​](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships\#03-check-that-parent-folders-have-permissions "Direct link to 03. Check that parent folders have permissions")

Once that relationship tuple is added to OpenFGA, we can [check](https://openfga.dev/docs/concepts#what-is-a-check-request) if the relationship is valid by asking the following: **"is folder:budgets a parent of document:may\_budget.doc?"**

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'folder:budgets',
    relation: 'parent',
    object: 'document:may_budget.doc',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "folder:budgets",
    Relation: "parent",
    Object:   "document:may_budget.doc",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "folder:budgets",
    Relation = "parent",
    Object = "document:may_budget.doc",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="folder:budgets",
    relation="parent",
    object="document:may_budget.doc",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("folder:budgets")
        .relation("parent")
        ._object("document:may_budget.doc");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA folder:budgets parent document:may_budget.doc

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"folder:budgets","relation":"parent","object":"document:may_budget.doc"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "folder:budgets", // check if the user `folder:budgets`
  relation = "parent", // has an `parent` relation
  object = "document:may_budget.doc", // with the object `document:may_budget.doc`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is folder:budgets related to document:may_budget.doc as parent?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

It is important to note that the current authorization model does not imply inheritance of permissions. Even though **folder:budgets** is a `parent` of **document:may\_budget.doc**, **it does not inherit the `editor` relation from `parent` to `document`.** Meaning `editors` on **folder:budgets** are not `editors` on **document:may\_budget.doc**. Further configuration changes are needed to indicate that and will be tackled in a later guide.

caution

When creating relationship tuples for OpenFGA make sure to use unique ids for each object and user within your application domain. We are using first names and simple ids to just illustrate an easy-to-follow example.

## Advanced object to object relationships [​](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships\#advanced-object-to-object-relationships "Direct link to Advanced object to object relationships")

Object to object can be used for more advanced use case, such as [entitlements](https://openfga.dev/docs/modeling/advanced/entitlements). An example use case is to allow subscribers to be entitled to different plans.

### 01\. Create authorization model with object to object relationships [​](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships\#01-create-authorization-model-with-object-to-object-relationships "Direct link to 01. Create authorization model with object to object relationships")

To do this, the authorization model will have two [types](https://openfga.dev/docs/concepts#what-is-a-type) \- feature and plan.

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type feature
  relations
    define associated_plan: [plan]
    define access: [user] or subscriber_member from associated_plan

type plan
  relations
    define subscriber_member: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "feature",\
      "relations": {\
        "associated_plan": {\
          "this": {}\
        },\
        "access": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "tupleToUserset": {\
                  "tupleset": {\
                    "relation": "associated_plan"\
                  },\
                  "computedUserset": {\
                    "relation": "subscriber_member"\
                  }\
                }\
              }\
            ]\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "associated_plan": {\
            "directly_related_user_types": [\
              {\
                "type": "plan"\
              }\
            ]\
          },\
          "access": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "plan",\
      "relations": {\
        "subscriber_member": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "subscriber_member": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

Type `feature` has two relations, associated\_plan and access. Relation `associated_plan` allows associating plans with features while `access` defines who can access the feature. In our case, the access can be achieved either from

- [direct relationship](https://openfga.dev/docs/concepts#what-are-direct-and-implied-relationships) via [direct relationship type restrictions](https://openfga.dev/docs/configuration-language#direct-relationship-type-restrictions).
or `this`
- object to object relationship where a user can access because it is a subscriber\_member of a particular plan AND that plan is associated with the feature.

Here, we define `plan` as the user of object `feature` with relationship `associated_plan` rather than defining `feature` as the user of object `plan` with relationship `feature`. The reason we choose the former is that we want to describe our system in the following [plain language](https://openfga.dev/docs/modeling/getting-started#write-it-in-plain-language):

- A user can access a feature in a plan if they are a subscriber member of a plan that is the associated plan of a feature.

This will give us a flow of user->organization->plan->feature and allows us to answer the question of whether user can access a feature rather than whether user is subscriber of a plan.

### 02\. Adding relationship tuples [​](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships\#02-adding-relationship-tuples "Direct link to 02. Adding relationship tuples")

To realize the relationship, we will need to add the following relationship tuples.

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // make anne as subscriber_member for plan:advanced\
      {"_description":"make anne as subscriber_member for plan:advanced","user":"user:anne","relation":"subscriber_member","object":"plan:advanced"},\
      // The advanced plan is associated with the data preview feature\
      {"_description":"The advanced plan is associated with the data preview feature","user":"plan:advanced","relation":"associated_plan","object":"feature:data_preview"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             // make anne as subscriber_member for plan:advanced
             User: "user:anne",
             Relation: "subscriber_member",
             Object: "plan:advanced",
        },         {
             // The advanced plan is associated with the data preview feature
             User: "plan:advanced",
             Relation: "associated_plan",
             Object: "feature:data_preview",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
    // make anne as subscriber_member for plan:advanced
       new() {
                  User = "user:anne",
                  Relation = "subscriber_member",
                  Object = "plan:advanced"
              },
    // The advanced plan is associated with the data preview feature
       new() {
                  User = "plan:advanced",
                  Relation = "associated_plan",
                  Object = "feature:data_preview"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    # make anne as subscriber_member for plan:advanced\
                    user="user:anne",\
                    relation="subscriber_member",\
                    object="plan:advanced",\
                ),\
                ClientTuple(\
                    # The advanced plan is associated with the data preview feature\
                    user="plan:advanced",\
                    relation="associated_plan",\
                    object="feature:data_preview",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                // make anne as subscriber_member for plan:advanced
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("subscriber_member")
                        ._object("plan:advanced"),
                // The advanced plan is associated with the data preview feature
                new ClientTupleKey()
                        .user("plan:advanced")
                        .relation("associated_plan")
                        ._object("feature:data_preview")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"_description":"make anne as subscriber_member for plan:advanced","user":"user:anne","relation":"subscriber_member","object":"plan:advanced"},{"_description":"The advanced plan is associated with the data preview feature","user":"plan:advanced","relation":"associated_plan","object":"feature:data_preview"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne subscriber_member plan:advanced
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA plan:advanced associated_plan feature:data_preview

```

```codeBlockLines_e6Vv
write([\
    // make anne as subscriber_member for plan:advanced\
    {\
      "user":"user:anne",\
      "relation":"subscriber_member",\
      "object":"plan:advanced"\
    },\
    // The advanced plan is associated with the data preview feature\
    {\
      "user":"plan:advanced",\
      "relation":"associated_plan",\
      "object":"feature:data_preview"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

### 03\. Check to see if access is allowed without direct relationship [​](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships\#03-check-to-see-if-access-is-allowed-without-direct-relationship "Direct link to 03. Check to see if access is allowed without direct relationship")

To validate that the authorization model and relationship tuples are correct, we can ask the question:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'access',
    object: 'feature:data_preview',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "access",
    Object:   "feature:data_preview",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "access",
    Object = "feature:data_preview",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="access",
    object="feature:data_preview",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("access")
        ._object("feature:data_preview");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne access feature:data_preview

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"access","object":"feature:data_preview"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "access", // has an `access` relation
  object = "feature:data_preview", // with the object `feature:data_preview`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to feature:data_preview as access?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

We see that `anne` is allowed to `access` `feature:data_preview` without requiring direct relationship.

### 04\. Disassociating plan from feature [​](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships\#04-disassociating-plan-from-feature "Direct link to 04. Disassociating plan from feature")

At any point in time, `plan:advanced` may be disassociated from `feature:data_preview`.

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  deletes: [\
      // Remove advanced plan from data preview feature\
      { user: 'plan:advanced', relation: 'associated_plan', object: 'feature:data_preview'}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Deletes: []ClientTupleKeyWithoutCondition{
        {
             // Remove advanced plan from data preview feature
             User: "plan:advanced",
             Relation: "associated_plan",
             Object: "feature:data_preview",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Deletes = new List<ClientTupleKeyWithoutCondition>() {
    // Remove advanced plan from data preview feature
    new() { User = "plan:advanced", Relation = "associated_plan", Object = "feature:data_preview" }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        deletes=[\
                ClientTuple(\
                    # Remove advanced plan from data preview feature\
                    user="plan:advanced",\
                    relation="associated_plan",\
                    object="feature:data_preview",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .deletes(List.of(
                // Remove advanced plan from data preview feature
                new ClientTupleKey()
                        .user("plan:advanced")
                        .relation("associated_plan")
                        ._object("feature:data_preview")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"deletes": { "tuple_keys" : [{"_description":"Remove advanced plan from data preview feature","user":"plan:advanced","relation":"associated_plan","object":"feature:data_preview"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv

fga tuple delete --store-id=${FGA_STORE_ID} plan:advanced associated_plan feature:data_preview

```

```codeBlockLines_e6Vv

delete([\
    // Remove advanced plan from data preview feature\
    {\
      "user":"plan:advanced",\
      "relation":"associated_plan",\
      "object":"feature:data_preview"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

When this is the case, `anne` will no longer have `access` to `feature:data_preview` even though she is still a `subscriber_member` of `plan:advanced`.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'access',
    object: 'feature:data_preview',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "access",
    Object:   "feature:data_preview",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "access",
    Object = "feature:data_preview",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="access",
    object="feature:data_preview",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("access")
        ._object("feature:data_preview");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne access feature:data_preview

# Response: {"allowed":false}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"access","object":"feature:data_preview"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "access", // has an `access` relation
  object = "feature:data_preview", // with the object `feature:data_preview`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:anne related to feature:data_preview as access?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'subscriber_member',
    object: 'plan:advanced',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "subscriber_member",
    Object:   "plan:advanced",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "subscriber_member",
    Object = "plan:advanced",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="subscriber_member",
    object="plan:advanced",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("subscriber_member")
        ._object("plan:advanced");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne subscriber_member plan:advanced

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"subscriber_member","object":"plan:advanced"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "subscriber_member", // has an `subscriber_member` relation
  object = "plan:advanced", // with the object `plan:advanced`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to plan:advanced as subscriber_member?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

## Related Sections [​](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships\#related-sections "Direct link to Related Sections")

Check the following sections for more on how object-to-object relationships can be used.

Advanced Modeling Patterns: Entitlements

Learn how to model entitlement access patterns.

- [More](https://openfga.dev/docs/modeling/advanced/entitlements)

Modeling Parent-Child Relationships

Learn how to model parent and child relationships.

- [More](https://openfga.dev/docs/modeling/parent-child)

Modeling User Groups

Learn how to model user groups.

- [More](https://openfga.dev/docs/modeling/user-groups)

- [Before you start](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships#before-you-start)
  - [Modeling user groups](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships#modeling-user-groups)
  - [concepts](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships#-concepts)
- [Step by step](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships#step-by-step)
  - [01\. Create parent relations in document](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships#01-create-parent-relations-in-document)
  - [02\. Add Parent Relationship Tuples](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships#02-add-parent-relationship-tuples)
  - [03\. Check that parent folders have permissions](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships#03-check-that-parent-folders-have-permissions)
- [Advanced object to object relationships](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships#advanced-object-to-object-relationships)
  - [01\. Create authorization model with object to object relationships](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships#01-create-authorization-model-with-object-to-object-relationships)
  - [02\. Adding relationship tuples](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships#02-adding-relationship-tuples)
  - [03\. Check to see if access is allowed without direct relationship](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships#03-check-to-see-if-access-is-allowed-without-direct-relationship)
  - [04\. Disassociating plan from feature](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships#04-disassociating-plan-from-feature)
- [Related Sections](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships#related-sections)

## Migrating Relations Guide
[Skip to main content](https://openfga.dev/docs/modeling/migrating/migrating-relations#__docusaurus_skipToContent_fallback)

On this page

In the lifecycle of software development, you will need to make updates or changes to the [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model). In this guide, you will learn best practices for changing your existing authorization model. With these recommendations, you will minimize downtime and ensure your relationship models stay up to date.

## Before you start [​](https://openfga.dev/docs/modeling/migrating/migrating-relations\#before-you-start "Direct link to Before you start")

This guide assumes you are familiar with the following OpenFGA concepts:

- A [Type](https://openfga.dev/docs/concepts#what-is-a-type): a class of objects that have similar characteristics
- A [User](https://openfga.dev/docs/concepts#what-is-a-user): an entity in the system that can be related to an object
- A [Relation](https://openfga.dev/docs/concepts#what-is-a-relation): is a string defined in the type definition of an authorization model that defines the possibility of a relationship between an object of the same type as the type definition and a user in the system
- An [Object](https://openfga.dev/docs/concepts#what-is-an-object): represents an entity in the system. Users' relationships to it can be defined through relationship tuples and the authorization model
- A [Relationship Tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple): a grouping consisting of a user, a relation and an object stored in OpenFGA
- [Intersection Operator](https://openfga.dev/docs/configuration-language#the-intersection-operator): the intersection operator can be used to indicate a relationship exists if the user is in all the sets of users

## Step by step [​](https://openfga.dev/docs/modeling/migrating/migrating-relations\#step-by-step "Direct link to Step by step")

The document below is an example of a relational authorization model. In this model, you can assign users to the `editor` relation. The `editor` relation has write privileges that regular users do not.

In this scenario, you will migrate the following model:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type document
  relations
    define editor: [user]
    define can_edit: editor

type user

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "document",\
      "relations": {\
        "editor": {\
          "this": {}\
        },\
        "can_edit": {\
          "computedUserset": {\
            "object": "",\
            "relation": "editor"\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "editor": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "user"\
    }\
  ]
}

```

There are existing [relationship tuples](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple) associated with editor relation.

```codeBlockLines_e6Vv
[{\
  "user": "user:anne",\
  "relation": "editor",\
  "object": "document:roadmap"\
}{\
  "user": "user:charles",\
  "relation": "editor",\
  "object": "document:roadmap"\
}]

```

This is the authorization model that you will want to migrate to:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type document
  relations
    define writer: [user]
    define can_write: writer

type user

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "document",\
      "relations": {\
        "writer": {\
          "this": {}\
        },\
        "can_write": {\
          "computedUserset": {\
            "object": "",\
            "relation": "writer"\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "writer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "user"\
    }\
  ]
}

```

* * *

### 01\. Create a backwards compatible model [​](https://openfga.dev/docs/modeling/migrating/migrating-relations\#01-create-a-backwards-compatible-model "Direct link to 01. Create a backwards compatible model")

To avoid service disruption, you will create a backwards compatible model. The backwards compatible model ensures the existing relationship tuple will still work.

In the example below, `user:Anne` still has write privileges to the `document:roadmap` resource.

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type document
  relations
    define editor: [user]
    define writer: [user] or editor
    define can_write: writer
    define can_edit: writer

type user

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "document",\
      "relations": {\
        "editor": {\
          "this": {}\
        },\
        "writer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "editor"\
                }\
              }\
            ]\
          }\
        },\
        "can_write": {\
          "computedUserset": {\
            "object": "",\
            "relation": "writer"\
          }\
        },\
        "can_edit": {\
          "computedUserset": {\
            "object": "",\
            "relation": "writer"\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "editor": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "writer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "user"\
    }\
  ]
}

```

Test the `can_edit` definition. It should produce a value of `true`.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'can_write',
    object: 'document:roadmap',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "can_write",
    Object:   "document:roadmap",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "can_write",
    Object = "document:roadmap",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="can_write",
    object="document:roadmap",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("can_write")
        ._object("document:roadmap");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne can_write document:roadmap

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"can_write","object":"document:roadmap"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "can_write", // has an `can_write` relation
  object = "document:roadmap", // with the object `document:roadmap`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to document:roadmap as can_write?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'can_edit',
    object: 'document:roadmap',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "can_edit",
    Object:   "document:roadmap",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "can_edit",
    Object = "document:roadmap",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="can_edit",
    object="document:roadmap",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("can_edit")
        ._object("document:roadmap");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne can_edit document:roadmap

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"can_edit","object":"document:roadmap"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "can_edit", // has an `can_edit` relation
  object = "document:roadmap", // with the object `document:roadmap`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to document:roadmap as can_edit?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

### 02\. Create a new relationship tuple [​](https://openfga.dev/docs/modeling/migrating/migrating-relations\#02-create-a-new-relationship-tuple "Direct link to 02. Create a new relationship tuple")

Now that you have a backwards compatible model, you can create new relationship tuples with a new relation.

In this example, you will add Bethany to the `writer` relationship.

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // Bethany assigned writer instead of editor\
      {"_description":"Bethany assigned writer instead of editor","user":"user:bethany","relation":"writer","object":"document:roadmap"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             // Bethany assigned writer instead of editor
             User: "user:bethany",
             Relation: "writer",
             Object: "document:roadmap",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
    // Bethany assigned writer instead of editor
       new() {
                  User = "user:bethany",
                  Relation = "writer",
                  Object = "document:roadmap"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    # Bethany assigned writer instead of editor\
                    user="user:bethany",\
                    relation="writer",\
                    object="document:roadmap",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                // Bethany assigned writer instead of editor
                new ClientTupleKey()
                        .user("user:bethany")
                        .relation("writer")
                        ._object("document:roadmap")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"_description":"Bethany assigned writer instead of editor","user":"user:bethany","relation":"writer","object":"document:roadmap"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:bethany writer document:roadmap

```

```codeBlockLines_e6Vv
write([\
    // Bethany assigned writer instead of editor\
    {\
      "user":"user:bethany",\
      "relation":"writer",\
      "object":"document:roadmap"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

Run a check in the API for Bethany to ensure correct access.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:bethany',
    relation: 'can_write',
    object: 'document:roadmap',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:bethany",
    Relation: "can_write",
    Object:   "document:roadmap",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:bethany",
    Relation = "can_write",
    Object = "document:roadmap",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:bethany",
    relation="can_write",
    object="document:roadmap",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:bethany")
        .relation("can_write")
        ._object("document:roadmap");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:bethany can_write document:roadmap

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:bethany","relation":"can_write","object":"document:roadmap"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:bethany", // check if the user `user:bethany`
  relation = "can_write", // has an `can_write` relation
  object = "document:roadmap", // with the object `document:roadmap`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:bethany related to document:roadmap as can_write?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

### 03\. Migrate the existing relationship tuples [​](https://openfga.dev/docs/modeling/migrating/migrating-relations\#03-migrate-the-existing-relationship-tuples "Direct link to 03. Migrate the existing relationship tuples")

Next, migrate the existing relationship tuples. The new relation makes this definition obsolete.

Use the `read` API to look up all relationship tuples.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Execute a read
const { tuples } = await fgaClient.read({

});

// tuples = [{"key": {"user":"user:anne","relation":"editor","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"},{"key": {"user":"user:charles","relation":"editor","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"}]

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv
options := ClientReadOptions{}
body := ClientReadRequest{

}

data, err := fgaClient.Read(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { "tuples": [{"key": {"user":"user:anne","relation":"editor","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"},{"key": {"user":"user:charles","relation":"editor","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"}] }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv
var options = new ClientReadOptions {}
var body = new ClientReadRequest() {

};

var response = await fgaClient.Read(body, options);

// data = { "tuples": [{"key": {"user":"user:anne","relation":"editor","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"},{"key": {"user":"user:charles","relation":"editor","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"}] }

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv

options = {}
body = TupleKey(

)

response = await fga_client.read(body, options)

# response = ReadResponse({"tuples":[{"key": {"user":"user:anne","relation":"editor","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"},{"key": {"user":"user:charles","relation":"editor","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"}]})

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var body = new ClientReadRequest();

var response = fgaClient.read(body).get();

// response = { "tuples": [{"key": {"user":"user:anne","relation":"editor","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"},{"key": {"user":"user:charles","relation":"editor","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"}] }

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple read --store-id=${FGA_STORE_ID}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/read \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" '

# Response: "tuples": {[{"key": {"user":"user:anne","relation":"editor","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"},{"key": {"user":"user:charles","relation":"editor","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"}]}

```

```codeBlockLines_e6Vv
read(
  // read all stored tuples

);

Reply: tuples:[{"key": {"user":"user:anne","relation":"editor","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"},{"key": {"user":"user:charles","relation":"editor","object":"document:planning"}, "timestamp": "2021-10-06T15:32:11.128Z"}]

```

Then filter out the tuples that do not match the object type or relation (in this case, `document` and `editor` respectively), and update the new tuples with the `write` relationship.

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      {"user":"user:anne","relation":"writer","object":"document:roadmap"},\
      {"user":"user:charles","relation":"writer","object":"document:roadmap"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             User: "user:anne",
             Relation: "writer",
             Object: "document:roadmap",
        },         {
             User: "user:charles",
             Relation: "writer",
             Object: "document:roadmap",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
       new() {
                  User = "user:anne",
                  Relation = "writer",
                  Object = "document:roadmap"
              },
       new() {
                  User = "user:charles",
                  Relation = "writer",
                  Object = "document:roadmap"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    user="user:anne",\
                    relation="writer",\
                    object="document:roadmap",\
                ),\
                ClientTuple(\
                    user="user:charles",\
                    relation="writer",\
                    object="document:roadmap",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("writer")
                        ._object("document:roadmap"),
                new ClientTupleKey()
                        .user("user:charles")
                        .relation("writer")
                        ._object("document:roadmap")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"user":"user:anne","relation":"writer","object":"document:roadmap"},{"user":"user:charles","relation":"writer","object":"document:roadmap"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne writer document:roadmap
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:charles writer document:roadmap

```

```codeBlockLines_e6Vv
write([\
    {\
      "user":"user:anne",\
      "relation":"writer",\
      "object":"document:roadmap"\
    },\
    {\
      "user":"user:charles",\
      "relation":"writer",\
      "object":"document:roadmap"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

Finally, remove the old relationship tuples.

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  deletes: [\
      { user: 'user:anne', relation: 'editor', object: 'document:roadmap'},\
      { user: 'user:charles', relation: 'editor', object: 'document:roadmap'}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Deletes: []ClientTupleKeyWithoutCondition{
        {
             User: "user:anne",
             Relation: "editor",
             Object: "document:roadmap",
        },         {
             User: "user:charles",
             Relation: "editor",
             Object: "document:roadmap",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Deletes = new List<ClientTupleKeyWithoutCondition>() {
    new() { User = "user:anne", Relation = "editor", Object = "document:roadmap" },
    new() { User = "user:charles", Relation = "editor", Object = "document:roadmap" }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        deletes=[\
                ClientTuple(\
                    user="user:anne",\
                    relation="editor",\
                    object="document:roadmap",\
                ),\
                ClientTuple(\
                    user="user:charles",\
                    relation="editor",\
                    object="document:roadmap",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .deletes(List.of(
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("editor")
                        ._object("document:roadmap"),
                new ClientTupleKey()
                        .user("user:charles")
                        .relation("editor")
                        ._object("document:roadmap")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"deletes": { "tuple_keys" : [{"user":"user:anne","relation":"editor","object":"document:roadmap"},{"user":"user:charles","relation":"editor","object":"document:roadmap"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv

fga tuple delete --store-id=${FGA_STORE_ID} user:anne editor document:roadmap
fga tuple delete --store-id=${FGA_STORE_ID} user:charles editor document:roadmap

```

```codeBlockLines_e6Vv

delete([\
    {\
      "user":"user:anne",\
      "relation":"editor",\
      "object":"document:roadmap"\
    },\
    {\
      "user":"user:charles",\
      "relation":"editor",\
      "object":"document:roadmap"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

info

Perform a `write` operation before a `delete` operation to ensure Anne still has access.

Confirm the tuples are correct by running a check on the user.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'can_write',
    object: 'document:roadmap',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "can_write",
    Object:   "document:roadmap",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "can_write",
    Object = "document:roadmap",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="can_write",
    object="document:roadmap",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("can_write")
        ._object("document:roadmap");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne can_write document:roadmap

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"can_write","object":"document:roadmap"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "can_write", // has an `can_write` relation
  object = "document:roadmap", // with the object `document:roadmap`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to document:roadmap as can_write?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

The old relationship tuple no longer exists.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'editor',
    object: 'document:roadmap',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "editor",
    Object:   "document:roadmap",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "editor",
    Object = "document:roadmap",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="editor",
    object="document:roadmap",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("editor")
        ._object("document:roadmap");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne editor document:roadmap

# Response: {"allowed":false}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"editor","object":"document:roadmap"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "editor", // has an `editor` relation
  object = "document:roadmap", // with the object `document:roadmap`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:anne related to document:roadmap as editor?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

### 04\. Remove obsolete relationship from the model [​](https://openfga.dev/docs/modeling/migrating/migrating-relations\#04-remove-obsolete-relationship-from-the-model "Direct link to 04. Remove obsolete relationship from the model")

After you remove the previous relationship tuples, update your authorization model to remove the obsolete relation.

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type document
  relations
    define writer: [user]
    define can_write: writer

type user

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "document",\
      "relations": {\
        "writer": {\
          "this": {}\
        },\
        "can_write": {\
          "computedUserset": {\
            "object": "",\
            "relation": "writer"\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "writer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "user"\
    }\
  ]
}

```

Now, the `write` API will only accept the new relation name.

## Related Sections [​](https://openfga.dev/docs/modeling/migrating/migrating-relations\#related-sections "Direct link to Related Sections")

Review the following sections for more information on managing relationship tuples.

Transactional Writes

Learn how to perform transactional write

- [More](https://openfga.dev/docs/interacting/transactional-writes)

Relationship Queries

Understand the differences between check, read, expand and list objects.

- [More](https://openfga.dev/docs/interacting/relationship-queries)

Production Best Practices

Learn the best practices of running OpenFGA in a production environment

- [More](https://openfga.dev/docs/getting-started/running-in-production)

- [Before you start](https://openfga.dev/docs/modeling/migrating/migrating-relations#before-you-start)
- [Step by step](https://openfga.dev/docs/modeling/migrating/migrating-relations#step-by-step)
  - [01\. Create a backwards compatible model](https://openfga.dev/docs/modeling/migrating/migrating-relations#01-create-a-backwards-compatible-model)
  - [02\. Create a new relationship tuple](https://openfga.dev/docs/modeling/migrating/migrating-relations#02-create-a-new-relationship-tuple)
  - [03\. Migrate the existing relationship tuples](https://openfga.dev/docs/modeling/migrating/migrating-relations#03-migrate-the-existing-relationship-tuples)
  - [04\. Remove obsolete relationship from the model](https://openfga.dev/docs/modeling/migrating/migrating-relations#04-remove-obsolete-relationship-from-the-model)
- [Related Sections](https://openfga.dev/docs/modeling/migrating/migrating-relations#related-sections)

## Roles and Permissions
[Skip to main content](https://openfga.dev/docs/modeling/roles-and-permissions#__docusaurus_skipToContent_fallback)

On this page

Roles and permissions can be modeled within [OpenFGA](https://openfga.dev/docs/fga) using an [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model) and [relationship tuples](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple).

- **Roles** are assigned to [users](https://openfga.dev/docs/concepts#what-is-a-user) or a group of users. Any user can have more than one role, like `editor` or `owner`.
- **Permissions** allow users to access certain [objects](https://openfga.dev/docs/concepts#what-is-an-object) based on their specific roles, like `device_renamer` or `channel_archiver`.

For example, the role `viewer` of a `trip` can have permissions to view bookings, while the role `owners` can have permissions to add or view trip bookings.

When to use a Roles and Permissions model

Role and permissions models in OpenFGA can both directly assign roles to users and assign permissions through relations users receive downstream from other relations. For example, you can:

- Grant someone an `admin` role that can `edit` and `read` a `document`
- Grant someone a `security_guard` role that can `live_video_viewer` on a `device`
- Grant someone a `viewer` role that can `view_products` on a `shop`

Implementing a Roles and Permissions model allows existing roles to have finer-grained permissions, allowing your application to check whether a user has access to a certain object without having to explicitly check that specific users role. In addition, you can add new roles/permissions or consolidate roles without affecting your application behavior. For example, if your app's checks are for the fine permissions, like `check('bob', 'booking_adder', 'trip:Europe')` instead of `check('bob', 'owner', 'trip:Europe')`, and you later decide `owners` can no longer add bookings to a `trip`, you can remove the relation within the `trip` type with no code changes in your application and all permissions will automatically honor the change.

## Before you start [​](https://openfga.dev/docs/modeling/roles-and-permissions\#before-you-start "Direct link to Before you start")

Familiarize yourself with the basics of [OpenFGA Concepts](https://openfga.dev/docs/concepts).

Assume that you have the following [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model) and a [type](https://openfga.dev/docs/concepts#what-is-a-type) called `trip` that users can be related to as `viewer` and/or an `owner`.

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type trip
  relations
    define owner: [user]
    define viewer: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "trip",\
      "relations": {\
        "owner": {\
          "this": {}\
        },\
        "viewer": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "owner": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

* * *

In addition, you need to know the following:

### Direct Access [​](https://openfga.dev/docs/modeling/roles-and-permissions\#direct-access "Direct link to Direct Access")

Creating an authorization model and a relationship tuple can grant a user access to an object. To learn more, [read about Direct Access](https://openfga.dev/docs/modeling/direct-access)

### OpenFGA Concepts [​](https://openfga.dev/docs/modeling/roles-and-permissions\#-concepts "Direct link to -concepts")

- A [Type](https://openfga.dev/docs/concepts#what-is-a-type): a class of objects that have similar characteristics
- A [User](https://openfga.dev/docs/concepts#what-is-a-user): an entity in the system that can be related to an object
- A [Relation](https://openfga.dev/docs/concepts#what-is-a-relation): a string defined in the type definition of an authorization model that defines the possibility of a relationship between an object of the same type as the type definition and a user in the system
- An [Object](https://openfga.dev/docs/concepts#what-is-an-object): represents an entity in the system. Users' relationships to it can be define through relationship tuples and the authorization model
- A [Relationship Tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple): a group stored in OpenFGA that consists of a user, a relation, and an object
- A [Relationship](https://openfga.dev/docs/concepts#what-is-a-relationship): OpenFGA will be called to check if there is a relationship between a user and an object, indicating that the access is allowed
- [Union Operator](https://openfga.dev/docs/configuration-language#the-union-operator): can be used to indicate that the user has multiple ways of being related to an object
- [Direct Relationship Type Restrictions](https://openfga.dev/docs/configuration-language#direct-relationship-type-restrictions): can be used to indicate direct relationships between users and objects
- A [Check API Request](https://openfga.dev/docs/concepts#what-is-a-check-request): used to check for relationships between users and objects

## Step by step [​](https://openfga.dev/docs/modeling/roles-and-permissions\#step-by-step "Direct link to Step by step")

The Roles and Permissions example below is a trip booking system that has `owners` and/or `viewers`, both of which can have more granular permissions like adding bookings to a trip or viewing a trip's bookings.

To represent this in an [OpenFGA](https://openfga.dev/docs/fga) environment, you need to:

1. Understand how roles are related to direct relations for the trip booking system
2. Add implied relations to the existing authorization model to define permissions for bookings
3. [Check](https://openfga.dev/docs/concepts#what-is-a-check-request) user roles and their permissions based on relationship
tuples for direct and implied relations

### 01\. Understand how roles work within the trip booking system [​](https://openfga.dev/docs/modeling/roles-and-permissions\#01-understand-how-roles-work-within-the-trip-booking-system "Direct link to 01. Understand how roles work within the trip booking system")

Roles are relations that are directly assigned to users. Below, the stated roles that a given user can be assigned are `owner` and `viewer`.

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type trip
  relations
    define owner: [user]
    define viewer: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "trip",\
      "relations": {\
        "owner": {\
          "this": {}\
        },\
        "viewer": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "owner": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

### 02\. Add permissions for bookings [​](https://openfga.dev/docs/modeling/roles-and-permissions\#02-add-permissions-for-bookings "Direct link to 02. Add permissions for bookings")

Permissions are relations that users get through other relations. To avoid adding a [direct relationship type restriction](https://openfga.dev/docs/configuration-language#direct-relationship-type-restrictions) to the relation in the authorization model while representing permissions, they instead define the relation via other relations in the model, which indicates that it is a permission granted to and implied from a different relation.

To add permissions related to bookings, add new relations to the `trip` object type denoting the various actions a user can take on `trips`, like view, edit, delete, or rename.

To allow `viewers` of a `trip` to have permissions to view bookings and `owners` to have permissions to add/view bookings, you modify the type:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type trip
  relations
    define owner: [user]
    define viewer: [user]
    define booking_adder: owner
    define booking_viewer: viewer or owner

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "trip",\
      "relations": {\
        "owner": {\
          "this": {}\
        },\
        "viewer": {\
          "this": {}\
        },\
        "booking_adder": {\
          "computedUserset": {\
            "relation": "owner"\
          }\
        },\
        "booking_viewer": {\
          "union": {\
            "child": [\
              {\
                "computedUserset": {\
                  "relation": "viewer"\
                }\
              },\
              {\
                "computedUserset": {\
                  "relation": "owner"\
                }\
              }\
            ]\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "owner": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

> Note: both `booking_viewer` and `booking_adder` don't have [direct relationship type restrictions](https://openfga.dev/docs/configuration-language#direct-relationship-type-restrictions), which ensures that the relation can only be assigned through the role and not directly.

### 03\. Check user roles and their permissions [​](https://openfga.dev/docs/modeling/roles-and-permissions\#03-check-user-roles-and-their-permissions "Direct link to 03. Check user roles and their permissions")

Your type definitions reflects the roles and permissions on how bookings can be viewed/added, so you can create [relationship tuples](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple) to assign roles to users, then [check](https://openfga.dev/docs/concepts#what-is-a-check-request) if users have the proper permissions.

Create two relationship tuples:

1. give `bob` the role of `viewer` on `trip` called Europe.
2. give `alice` the role of `owner` on `trip` called Europe.

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // Add bob as viewer on trip:Europe\
      {"_description":"Add bob as viewer on trip:Europe","user":"user:bob","relation":"viewer","object":"trip:Europe"},\
      // Add alice as owner on trip:Europe\
      {"_description":"Add alice as owner on trip:Europe","user":"user:alice","relation":"owner","object":"trip:Europe"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             // Add bob as viewer on trip:Europe
             User: "user:bob",
             Relation: "viewer",
             Object: "trip:Europe",
        },         {
             // Add alice as owner on trip:Europe
             User: "user:alice",
             Relation: "owner",
             Object: "trip:Europe",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
    // Add bob as viewer on trip:Europe
       new() {
                  User = "user:bob",
                  Relation = "viewer",
                  Object = "trip:Europe"
              },
    // Add alice as owner on trip:Europe
       new() {
                  User = "user:alice",
                  Relation = "owner",
                  Object = "trip:Europe"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    # Add bob as viewer on trip:Europe\
                    user="user:bob",\
                    relation="viewer",\
                    object="trip:Europe",\
                ),\
                ClientTuple(\
                    # Add alice as owner on trip:Europe\
                    user="user:alice",\
                    relation="owner",\
                    object="trip:Europe",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                // Add bob as viewer on trip:Europe
                new ClientTupleKey()
                        .user("user:bob")
                        .relation("viewer")
                        ._object("trip:Europe"),
                // Add alice as owner on trip:Europe
                new ClientTupleKey()
                        .user("user:alice")
                        .relation("owner")
                        ._object("trip:Europe")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"_description":"Add bob as viewer on trip:Europe","user":"user:bob","relation":"viewer","object":"trip:Europe"},{"_description":"Add alice as owner on trip:Europe","user":"user:alice","relation":"owner","object":"trip:Europe"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:bob viewer trip:Europe
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:alice owner trip:Europe

```

```codeBlockLines_e6Vv
write([\
    // Add bob as viewer on trip:Europe\
    {\
      "user":"user:bob",\
      "relation":"viewer",\
      "object":"trip:Europe"\
    },\
    // Add alice as owner on trip:Europe\
    {\
      "user":"user:alice",\
      "relation":"owner",\
      "object":"trip:Europe"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

Now check: is `bob` allowed to view bookings on trip Europe?

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:bob',
    relation: 'booking_viewer',
    object: 'trip:Europe',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:bob",
    Relation: "booking_viewer",
    Object:   "trip:Europe",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:bob",
    Relation = "booking_viewer",
    Object = "trip:Europe",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:bob",
    relation="booking_viewer",
    object="trip:Europe",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:bob")
        .relation("booking_viewer")
        ._object("trip:Europe");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:bob booking_viewer trip:Europe

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:bob","relation":"booking_viewer","object":"trip:Europe"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:bob", // check if the user `user:bob`
  relation = "booking_viewer", // has an `booking_viewer` relation
  object = "trip:Europe", // with the object `trip:Europe`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:bob related to trip:Europe as booking_viewer?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

`bob` is a `booking_viewer` because of the following chain of resolution:

1. `bob` is a `viewer` on `trip`: Europe
2. Any user related to the _object_ `trip:` Europe as `viewer` is also related as a `booking_viewer` (i.e `usersRelatedToObjectAs: viewer`)
3. Therefore, all `viewers` on a given `trip` are `booking_viewers`

To confirm that `bob` is not allowed to add bookings on trip Europe, run the following check:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:bob',
    relation: 'booking_adder',
    object: 'trip:Europe',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:bob",
    Relation: "booking_adder",
    Object:   "trip:Europe",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:bob",
    Relation = "booking_adder",
    Object = "trip:Europe",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:bob",
    relation="booking_adder",
    object="trip:Europe",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:bob")
        .relation("booking_adder")
        ._object("trip:Europe");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:bob booking_adder trip:Europe

# Response: {"allowed":false}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:bob","relation":"booking_adder","object":"trip:Europe"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:bob", // check if the user `user:bob`
  relation = "booking_adder", // has an `booking_adder` relation
  object = "trip:Europe", // with the object `trip:Europe`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:bob related to trip:Europe as booking_adder?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

You also check: is alice allowed to view and add bookings on trip Europe?

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:alice',
    relation: 'booking_viewer',
    object: 'trip:Europe',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:alice",
    Relation: "booking_viewer",
    Object:   "trip:Europe",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:alice",
    Relation = "booking_viewer",
    Object = "trip:Europe",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:alice",
    relation="booking_viewer",
    object="trip:Europe",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:alice")
        .relation("booking_viewer")
        ._object("trip:Europe");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:alice booking_viewer trip:Europe

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:alice","relation":"booking_viewer","object":"trip:Europe"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:alice", // check if the user `user:alice`
  relation = "booking_viewer", // has an `booking_viewer` relation
  object = "trip:Europe", // with the object `trip:Europe`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:alice related to trip:Europe as booking_viewer?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:alice',
    relation: 'booking_adder',
    object: 'trip:Europe',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:alice",
    Relation: "booking_adder",
    Object:   "trip:Europe",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:alice",
    Relation = "booking_adder",
    Object = "trip:Europe",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:alice",
    relation="booking_adder",
    object="trip:Europe",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:alice")
        .relation("booking_adder")
        ._object("trip:Europe");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:alice booking_adder trip:Europe

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:alice","relation":"booking_adder","object":"trip:Europe"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:alice", // check if the user `user:alice`
  relation = "booking_adder", // has an `booking_adder` relation
  object = "trip:Europe", // with the object `trip:Europe`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:alice related to trip:Europe as booking_adder?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

`alice` is a `booking_viewer` and `booking_adder` because of the following chain of resolution:

1. `alice` is a `owner` on `trip`: Europe
2. Any user related to the _object_ `trip:` Europe as `owner` is also related as a `booking_viewer`
3. Any user related to the _object_ `trip:` Europe as `owner` is also related as a `booking_adder`
4. Therefore, all `owners` on a given `trip` are `booking_viewers` and `booking_adders` on that trip

caution

Use unique ids for each object and user within your application domain when creating relationship tuples for OpenFGA. This example first names and simple ids as an easy-to-follow example.

## Related sections [​](https://openfga.dev/docs/modeling/roles-and-permissions\#related-sections "Direct link to Related sections")

See following sections for more on how to model for roles and permissions.

Modeling Concepts: Concentric Relationships

Learn about how to represent a concentric relationships in OpenFGA.

- [More](https://openfga.dev/docs/modeling/building-blocks/concentric-relationships)

Modeling Google Drive

See how to indicate that editors are commenters and viewers in Google Drive.

- [More](https://openfga.dev/docs/modeling/advanced/gdrive#01-individual-permissions)

Modeling GitHub

See how to indicate that repository admins are writers and readers in GitHub.

- [More](https://openfga.dev/docs/modeling/advanced/github#01-permissions-for-individuals-in-an-org)

- [Before you start](https://openfga.dev/docs/modeling/roles-and-permissions#before-you-start)
  - [Direct Access](https://openfga.dev/docs/modeling/roles-and-permissions#direct-access)
  - [Concepts](https://openfga.dev/docs/modeling/roles-and-permissions#-concepts)
- [Step by step](https://openfga.dev/docs/modeling/roles-and-permissions#step-by-step)
  - [01\. Understand how roles work within the trip booking system](https://openfga.dev/docs/modeling/roles-and-permissions#01-understand-how-roles-work-within-the-trip-booking-system)
  - [02\. Add permissions for bookings](https://openfga.dev/docs/modeling/roles-and-permissions#02-add-permissions-for-bookings)
  - [03\. Check user roles and their permissions](https://openfga.dev/docs/modeling/roles-and-permissions#03-check-user-roles-and-their-permissions)
- [Related sections](https://openfga.dev/docs/modeling/roles-and-permissions#related-sections)

## OpenFGA Newsletter
[Skip to main content](https://openfga.dev/blog/tags/newsletter/page/2#__docusaurus_skipToContent_fallback)

Welcome to Fine Grained News, KubeCon Edition!

## KubeCon Europe 2024 was super-busy! [​](https://openfga.dev/blog/tags/newsletter/page/2\#kubecon-europe-2024-was-super-busy "Direct link to KubeCon Europe 2024 was super-busy!")

You can now watch online:

- An AppDeveloperCon session about [Implementing Modern Cloud Native Authorization Using OpenFGA](https://www.youtube.com/watch?v=5NkJHeToEwo) where [Pauline Jamin](https://github.com/paulinejamin) and [Andres Aguiar](https://github.com/aaguiarz) go over how OpenFGA is helping Agicap to implement fine-grained authorization.

- A 7-min Lightning Talk about [OpenFGA: The Cloud Native way to implement Fine Grained Authorization](https://www.youtube.com/watch?v=K7Me3OjFxJ0).

- [Jonathan Whitaker](https://www.linkedin.com/in/jonathan-whitaker-5a8b2484/)'s talk about [Federated IAM for Kubernetes with OpenFGA](https://www.youtube.com/watch?v=UaK1EnRgrng), demoing how to use OpenFGA and KeyCloak to implement fine-grained authorization in a Kubernetes cluster, in ways it's not possible today, like giving access to a user for 90 seconds.

- We also participated in [Canonical's Operator Day](https://app.myonvent.com/event/operator-day) sharing how Canonical is using OpenFGA, but the presentation is not online yet.


Also, thanks to everyone who stopped by the OpenFGA Kiosk in the Project Pavilion to share their feedback about the project or learn more about it!

## CNCF incubation [​](https://openfga.dev/blog/tags/newsletter/page/2\#cncf-incubation "Direct link to CNCF incubation")

As you may know, the CNCF has three stages for projects: Sandbox, Incubation, and Graduation. OpenFGA is currently a Sandbox project.

We are very happy to announce that we just [applied for Incubation](https://github.com/cncf/toc/pull/1276)! We are excited about this step and will keep you posted on the progress.

## New Adopters [​](https://openfga.dev/blog/tags/newsletter/page/2\#new-adopters "Direct link to New Adopters")

The OpenFGA community [maintains a list](https://github.com/openfga/community/blob/main/ADOPTERS.md) of products/projects/companies that are using OpenFGA in production. We'd like to thank thank the following adopters for adding themselves to the list in the last month:

- [Instill AI](https://www.instill.tech/)
- [Zuplo](https://zuplo.com/)
- [OpenObserve](https://openobserve.ai/)
- [Datum](https://datum.net/)

If you are using OpenFGA in production, please consider adding your company/project to the list.

## Community News [​](https://openfga.dev/blog/tags/newsletter/page/2\#community-news "Direct link to Community News")

- [Raghd Hamzeh](https://github.com/rhamzeh/) represented OpenFGA in an [episode on Authorizing Access](https://www.youtube.com/watch?v=VyHbFwfrf04) within a series called "You Choose - Choose Your Own Adventure: The Treacherous Trek to Security”. This episode was comparing OpenFGA with Hexa and Paralus. OpenFGA was the project viewers voted for as most interested in being featured in a demo.

- [Sam Bellen](https://github.com/Sambego) published a [Google Drive example](https://github.com/Sambego/fga-drive-example/) using OpenFGA. It's a Next.js project, written in TypeScript and ready to deploy on Vercel.

- [Philipp Wagner](https://github.com/bytefish) is working on a [.NET example](https://github.com/bytefish/gitclub-dotnet) inspired by the Github model.

- [Pauline Jamin](https://github.com/paulinejamin) and [Geoffroy Braun](https://github.com/geoffroybraun) will present about [Infuser du métier dans les autorisations avec ReBAC](https://www.devoxx.fr/schedule/talk/?id=42356) at [Devoxx France 2024](https://www.devoxx.fr/) in April 17th.


## New Releases [​](https://openfga.dev/blog/tags/newsletter/page/2\#new-releases "Direct link to New Releases")

We just shipped a [release candidate of Modular Models](https://openfga.dev/blog/modular-models-announcement), that makes it easy for multiple teams to collaborate in a single OpenFGA model. It requires the following components:

- [OpenFGA v.1.5.1](https://github.com/openfga/js-sdk/releases/tag/v0.3.5)
- [CLI v0.3.0](https://github.com/openfga/cli/releases/tag/v0.3.0)
- [Visual Studio Code Extension v0.2.20](https://github.com/openfga/vscode-ext/releases/tag/v0.2.20)

We also shipped new version of our SDKs with several fixes:

- [Javascript SDK 0.3.5](https://github.com/openfga/js-sdk/releases/tag/v0.3.5).
- [Go SDK v0.3.5](https://github.com/openfga/go-sdk/releases/tag/v0.3.5)
- [Java SDK v0.4.0](https://github.com/openfga/java-sdk/releases/tag/v0.4.0)

## Transitioning from Discord to CNCF's Slack [​](https://openfga.dev/blog/tags/newsletter/page/2\#transitioning-from-discord-to-cncfs-slack "Direct link to Transitioning from Discord to CNCF's Slack")

As we mentioned in the last edition, we transitioned out from Discord for OpenFGA and are now using the CNCF [#openfga Slack channel](https://cloud-native.slack.com/archives/C06G1NNH47N). If you are not part of the CNCF Slack workspace, you need to join the [CNCF Slack](https://slack.cncf.io/) first.

## See you next month! [​](https://openfga.dev/blog/tags/newsletter/page/2\#see-you-next-month "Direct link to See you next month!")

Fine Grained News are published every month. If you have any feedback, want to share your OpenFGA story, or know about something that you think is worth mentioning, please let us know!

Welcome to the 3rd edition of Fine Grained News!

## KubeCon Europe 2024 is getting closer! [​](https://openfga.dev/blog/tags/newsletter/page/2\#kubecon-europe-2024-is-getting-closer "Direct link to KubeCon Europe 2024 is getting closer!")

We'll be pretty busy during [KubeCon Europe 2024](https://events.linuxfoundation.org/kubecon-cloudnativecon-europe/):

- [Jonathan Whitaker](https://www.linkedin.com/in/jonathan-whitaker-5a8b2484/) from Okta will talk about [Federated IAM for Kubernetes with OpenFGA](https://kccnceu2024.sched.com/event/1YeQD)

- [Pauline Jamin](https://www.linkedin.com/in/paulinejamin/) from Agicap and [Andres Aguiar](https://www.linkedin.com/in/aaguiar/) from Okta will present on [Implementing Modern Cloud Native Authorization Using OpenFGA](https://colocatedeventseu2024.sched.com/event/1YFhM/implementing-modern-cloud-native-authorization-using-openfga-andres-aguiar-okta-pauline-jamin-agicap)

- OpenFGA will be present in [Canonical's Operator's day](https://app.myonvent.com/event/operator-day/), co-located at KubeCon EU. Andres Aguiar and Massimilano Gori from Canonical, will talk about how Canonical adopted OpenFGA for implementing authorization in [Juju](https://juju.is/).

- Andres Aguiar will also be delivering a Lightning Talk titled **OpenFGA - The Cloud Native way to implement Fine Grained Authorization** (link not available yet :) ).


We'll also have a kiosk in the CNCF Project Pavilion, so if you plan to attend let us know and we can schedule some time together!

## Documentation Improvements [​](https://openfga.dev/blog/tags/newsletter/page/2\#documentation-improvements "Direct link to Documentation Improvements")

We keep improving our documentation, and added a few new documents that you might find interesting:

- Learn how to [use the FGA CLI](https://openfga.dev/docs/getting-started/cli) to perform every possible operation on OpenFGA and simplify most common workflows.

- Learn how you can [test FGA models](https://openfga.dev/docs/modeling/testing) as part of your development flow or CI/CD pipelines, without the need to run an OpenFGA server.

- Learn how you can include [identity token claims contextual tuples](https://openfga.dev/docs/modeling/token-claims-contextual-tuples) to model ABAC-like scenarios or simplify data integrations with OpenFGA.


## OpenFGA in the Java Ecosystem [​](https://openfga.dev/blog/tags/newsletter/page/2\#openfga-in-the-java-ecosystem "Direct link to OpenFGA in the Java Ecosystem")

OpenFGA is getting bigger on the Java world! We are [working with the Spring Security team](https://github.com/spring-projects/spring-security/issues/14121) to build an Spring Security integration for OpenFGA. You can check the ideas we are exploring in [this repository](https://github.com/jimmyjames/fga-spring-examples).

Also, the Testcontainers team added [an OpenFGA integration for Java](https://java.testcontainers.org/modules/openfga/) to make it simple to write integration tests for applications using OpenFGA.

We'd love to hear your feedback!

## SDK Improvements [​](https://openfga.dev/blog/tags/newsletter/page/2\#sdk-improvements "Direct link to SDK Improvements")

New releases with bug fixes and improvements:

- [Javascript SDK 0.3.3](https://github.com/openfga/js-sdk/releases/tag/v0.3.3).
- [Go SDK v0.3.5](https://github.com/openfga/go-sdk/releases/tag/v0.3.5)
- [Python SDK v0.4.1](https://github.com/openfga/python-sdk/releases/tag/v0.4.1)

## Modular Models [​](https://openfga.dev/blog/tags/newsletter/page/2\#modular-models "Direct link to Modular Models")

We wrapped up the [RFC for Modular Models](https://github.com/openfga/rfcs/blob/main/20231212-modular-models.md), which will enable multiple teams to work on different parts of the model independently and we are now working on the implementation. We'd love feedback on the RFC.

Wait for a demo on our next [Community Meeting](https://github.com/openfga/community/blob/main/community-meetings.md)!

## Community News [​](https://openfga.dev/blog/tags/newsletter/page/2\#community-news "Direct link to Community News")

- Learn [how stacklok is using OpenFGA](https://stacklok.com/blog/using-openfga-to-build-a-relationship-based-authorization-model-in-minder) to implement authorization in Minder, an open source project that makes it easier to apply and automate the enforcement of security checks and policies across multiple GitHub repositories.

- Check this [OpenFGA tutorial](https://www.albertcoronado.com/2024/02/08/tutorial-openfga/) by [Alberto Coronado](https://twitter.com/acoronadoc) (in Spanish!).

- [Raghd Hamzeh](https://www.linkedin.com/in/raghdhamzeh/) joined [Whitney Lee](https://twitter.com/wiggitywhitney) in an in-depth Tanzu ⚡️Enlightning [session](https://www.youtube.com/watch?v=yTgtAzhvC28) about OpenFGA.


## Transitioning from Discord to CNCF's Slack [​](https://openfga.dev/blog/tags/newsletter/page/2\#transitioning-from-discord-to-cncfs-slack "Direct link to Transitioning from Discord to CNCF's Slack")

As you may know, we've been using Discord for the OpenFGA community. We’ll transition it to the CNCF [OpenFGA Slack channel](https://cloud-native.slack.com/archives/C06G1NNH47N). If you are not part of the CNCF Slack workspace, you need to join the [CNCF Slack](https://slack.cncf.io/) first.

## See you next month! [​](https://openfga.dev/blog/tags/newsletter/page/2\#see-you-next-month "Direct link to See you next month!")

Fine Grained News are published every month, after the OpenFGA community meeting. If you have any feedback, you want to share your OpenFGA story, or know about something that you think is worth mentioning, please let us know!

Welcome to the 2nd edition of Fine Grained News!

## Team News [​](https://openfga.dev/blog/tags/newsletter/page/2\#team-news "Direct link to Team News")

The OpenFGA team got bigger, and we met in person in Toronto for the first time! We got to know each other better, helped new team members to get familiar with the project, hacked some code, had some fun with ax throwing, and loved Toronto's weather!

![OpenFGA Team](https://openfga.dev/assets/images/fgn-2024-01-team-fdc90c95b67c4a2f60a3235944480b1d.png)

## KubeCon Europe 2024! [​](https://openfga.dev/blog/tags/newsletter/page/2\#kubecon-europe-2024 "Direct link to KubeCon Europe 2024!")

We got two presentations accepted in KubeCon Europe!

- [Jonathan Whitaker](https://www.linkedin.com/in/jonathan-whitaker-5a8b2484/) from Okta will talk about [Federated IAM for Kubernetes with OpenFGA](https://kccnceu2024.sched.com/event/1YeQD)

- [Pauline Jamin](https://www.linkedin.com/in/paulinejamin/) from Agicap and [Andres Aguiar](https://www.linkedin.com/in/aaguiar/) from Okta will present on [Implementing Modern Cloud Native Authorization Using OpenFGA](https://colocatedeventseu2024.sched.com/event/1YFhM/implementing-modern-cloud-native-authorization-using-openfga-andres-aguiar-okta-pauline-jamin-agicap)


We'll also have a Project Kiosk, so if you plan to attend let us know and we can schedule some time together!

## OpenFGA ⚡️Enlightning Session! [​](https://openfga.dev/blog/tags/newsletter/page/2\#openfga-%EF%B8%8Fenlightning-session "Direct link to OpenFGA ⚡️Enlightning Session!")

Our own [Raghd Hamzeh](https://www.linkedin.com/in/raghdhamzeh/) will join [Whitney Lee](https://twitter.com/wiggitywhitney) in a Tanzu ⚡️Enlightning session on **February 8th at 9am PT**.

Join their Youtube stream [here](https://www.youtube.com/watch?v=yTgtAzhvC28).

## Visual Studio Code Integration Enhancements [​](https://openfga.dev/blog/tags/newsletter/page/2\#visual-studio-code-integration-enhancements "Direct link to Visual Studio Code Integration Enhancements")

We keep investing in improving our VS Code experience. The video below shows how, in addition to validating the model, we can validate the tuple content and the tests.

We are identifying:

- Invalid object types, user types, and relations when defining tuples.
- Invalid object types, user types, and relations when defining tests.
- User id or object id that was not included in any tuple in check tests.

This helps authoring/testing models, making the whole process less error prone and more fun!

![VS Code](https://openfga.dev/assets/images/fgn-2024-01-vscode-d007f1d2381717433705be88761959e2.gif)

## CLI improvements [​](https://openfga.dev/blog/tags/newsletter/page/2\#cli-improvements "Direct link to CLI improvements")

We love the FGA CLI and we keep making it even better.

We had a few of contributions from new team members and the community :).

- You can now import tuples from a CSV file. We supported JSON/YAML, but if you are exporting data from a database, producing to CSV is way simpler.
- You can take a .fga.yaml file with a model and tuples, and get it imported in OpenFGA.
- Added support for specifying an external tuple\_file in .fga.yaml files.
- Added support for specifying a continuation\_token when calling fga tuple changes.
- Support for configuring OAuth scopes to authenticate to OIDC servers.

Check the updated documentation in our [CLI repository](https://github.com/openfga/cli)

Thanks to [Yann D'Isanto](https://github.com/le-yams) for all your help on this!

## OpenFGA v1.4.3 [​](https://openfga.dev/blog/tags/newsletter/page/2\#openfga-v143 "Direct link to OpenFGA v1.4.3")

We just shipped OpenFGA [v1.4.3](https://github.com/openfga/openfga/releases/tag/v1.4.3), with performance improvements and [one security issue](https://github.com/openfga/openfga/security/advisories/GHSA-rxpw-85vw-fx87) fixed. We recommend everyone to upgrade to the latest release.

## SDK Improvements [​](https://openfga.dev/blog/tags/newsletter/page/2\#sdk-improvements "Direct link to SDK Improvements")

New releases with bug fixes and improvements:

- [Java SDK v0.3.2](https://github.com/openfga/java-sdk/releases/tag/v0.3.2). If you are using the Java SDK please upgrade to this version.
- [Go SDK v0.3.4](https://github.com/openfga/go-sdk/releases/tag/v0.3.4)
- [Python SDK v0.4.0](https://github.com/openfga/python-sdk/releases/tag/v0.4.0), which has breaking changes.

Thanks again to [Yann D'Isanto](https://github.com/le-yams) for your help on the Java SDK!

## Language Improvements [​](https://openfga.dev/blog/tags/newsletter/page/2\#language-improvements "Direct link to Language Improvements")

The DSL language now has better support for comments and mixed operator support, where you can use parentheses to group expressions when defining relations:

![DSL improvements](https://openfga.dev/assets/images/fgn-2023-12-language-8a3e7f852814fa536430c8e3f81e57f1.png)

It's available in the VS Code extension, the CLI and the Playground.

## Github Actions [​](https://openfga.dev/blog/tags/newsletter/page/2\#github-actions "Direct link to Github Actions")

We shipped a couple of Github Actions that help you deploy FGA models, and run model tests as part of your CI/CD build. Find them [here](https://github.com/marketplace?query=openfga).

## What's Next? Check our RFCs! [​](https://openfga.dev/blog/tags/newsletter/page/2\#whats-next-check-our-rfcs "Direct link to What's Next? Check our RFCs!")

We've been discussing with the OpenFGA community a couple of RFCs that we are planning to implement in the next few weeks:

- [Support for modular models](https://github.com/openfga/rfcs/pull/14).
- [ListUsers API](https://github.com/openfga/rfcs/pull/15).

Please take a look at them and let us know what you think!

## OpenFGA Community [​](https://openfga.dev/blog/tags/newsletter/page/2\#openfga-community "Direct link to OpenFGA Community")

We have a very welcoming community, and we'd love to have you there! You can join us in different ways:

- Join our [community meetings](https://github.com/openfga/community/blob/main/community-meetings.md), the second Thursday of every month. All the recordings are [here](https://www.youtube.com/@OpenFGA).
- Stay up to date by following us on [X](https://twitter.com/openfga).
- Join our [community channels](https://openfga.dev/community) in Slack or GitHub.

## See you next month! [​](https://openfga.dev/blog/tags/newsletter/page/2\#see-you-next-month "Direct link to See you next month!")

Fine Grained News are published every month, after the OpenFGA community meeting. If you have any feedback, you want to share your OpenFGA story, or know about something that you think is worth mentioning, please let us know!

Hi Everyone!

We've been publishing a monthly internal newsletter we called **Fine Grained News** since the beginning on 2023, and we just thought it would be a good idea to share it with the community. Yeah, we are slow thinkers!

You can expect to find here a summary of what we've been up to, what we are planning to do, and some other random stuff we think you might find interesting.

## Team News [​](https://openfga.dev/blog/tags/newsletter/page/2\#team-news "Direct link to Team News")

We always start our Monthly Community Meetings presenting the team. If you attended the last one, you've seen that the size of the team has grown quite a bit! We are pretty excited about the impact it will have in OpenFGA and the authorization space in general.

## Behavior Driven Development with OpenFGA [​](https://openfga.dev/blog/tags/newsletter/page/2\#behavior-driven-development-with-openfga "Direct link to Behavior Driven Development with OpenFGA")

In our last Community Meeting, the [Agicap](https://agicap.com/en) team (Pauline and Yann) demoed how they are using OpenFGA to implement Behavior Driven Development (BDD) in their authorization system.

The screenshot below might be enough to understand what they are doing, but if you want to know more, you can watch the full presentation [here](https://youtu.be/xXhwPPcGRqE?t=765).

![bdd demo](https://openfga.dev/assets/images/fgn-2023-12-bdd-919c556a442e23bdac6643a34267ea70.png)

## GoDaddy & OpenFGA [​](https://openfga.dev/blog/tags/newsletter/page/2\#godaddy--openfga "Direct link to GoDaddy & OpenFGA")

GoDaddy has been working with OpenFGA for a few months. They just published a document explaining why they picked OpenFGA, and how they used to address the authorization challenges they were facing.

Some interesting tidbits:

- They implemented their own DynamoDB Storage Adapter, as they were heavy Dynamo DB users and liked the eventual consistency model it provided.
- They needed [Contextual Tuples](https://docs.fga.dev/modeling/basics/contextual-time-based-authorization#use-contextual-tuples-for-context-related-checks) to fully support their use case.

Read the full article [here](https://www.godaddy.com/engineering/2023/12/12/authorization-oauth-openfga/).

## Canonical & OpenFGA [​](https://openfga.dev/blog/tags/newsletter/page/2\#canonical--openfga "Direct link to Canonical & OpenFGA")

Canonical has also been working with OpenFGA for a while, and it's adding OpenFGA to different layers in their stack.

![OpenFGA at Canonical](https://openfga.dev/assets/images/fgn-2023-12-canonical-38a8b58970e46161957f5acb3ed43a46.png)

They just announced that OpenFGA support is included [in LXD](https://discourse.ubuntu.com/t/lxd-5-20-has-been-released/40865) and [MicroCloud](https://www.gamingdeputy.com/canonical-unveils-microcloud-a-toolkit-for-rapid-cluster-deployment/).

Pretty soon, if you are using Ubuntu Pro, you will be using OpenFGA :).

## OpenFGA v1.4! [​](https://openfga.dev/blog/tags/newsletter/page/2\#openfga-v14 "Direct link to OpenFGA v1.4!")

Last week we released OpenFGA v1.4! This release includes our support for Conditional Relationship Tuples, which helps implementing additional Attribute-Based Access Control scenarios like temporal access, IP based access, bank transfer limits, SaaS application plans, and much more!

You can read more about it [here](https://openfga.dev/docs/modeling/conditions).

## SDK Improvements [​](https://openfga.dev/blog/tags/newsletter/page/2\#sdk-improvements "Direct link to SDK Improvements")

- The [Java SDK](https://github.com/openfga/java-sdk) has now feature parity with the rest of the our SDKs. It can be used from any language for the Java VM. You can see examples on Kotlin, Groovy and Scala [here](https://github.com/booniepepper/openfga-java-sdk-preview/tree/core/src/main).

- The [Python SDK](https://github.com/openfga/python-sdk) was updated to support synchronous clients, support custom SSL certificates, and better performance in batch checks.


## Language Improvements [​](https://openfga.dev/blog/tags/newsletter/page/2\#language-improvements "Direct link to Language Improvements")

We've been working on the OpenFGA language with some long-due improvements. Soon, you'll be able to use parentheses to group expressions when defining relations:

![DSL improvements](https://openfga.dev/assets/images/fgn-2023-12-language-8a3e7f852814fa536430c8e3f81e57f1.png)

The syntax is still not supported in the FGA CLI, but we are pretty close. Daniel demoed it in our latest community meeting, you can see the full demo [here](https://youtu.be/xXhwPPcGRqE?t=1313).

## VS Code Extension Improvements [​](https://openfga.dev/blog/tags/newsletter/page/2\#vs-code-extension-improvements "Direct link to VS Code Extension Improvements")

We have also been improving tuple validation when writing `fga.yaml` files, and it's pretty cool! Works on Daniel's machine for now :).

![Tuple Validation Demo](https://openfga.dev/assets/images/fgn-2023-12-validation-b3df7ed681e938abf6f1d43c02423439.png)

Daniel also demoed it in our latest community meeting, watch it [here](https://youtu.be/xXhwPPcGRqE?t=1598).

## KubeCon EU 2024 [​](https://openfga.dev/blog/tags/newsletter/page/2\#kubecon-eu-2024 "Direct link to KubeCon EU 2024")

We are getting ready for KubeCon Europe 2024, in Paris. We'll have a Project Kiosk, and we have submitted a few talks. We'll keep you posted!

## OpenFGA Community [​](https://openfga.dev/blog/tags/newsletter/page/2\#openfga-community "Direct link to OpenFGA Community")

We have a very welcoming community, and we'd love to have you there! You can join us in different ways:

- Join our [community meetings](https://github.com/openfga/community/blob/main/community-meetings.md), the second Thursday of every month. All the recordings are [here](https://www.youtube.com/@OpenFGA).
- Join our [community channels](https://openfga.dev/community) in Slack or GitHub.
- Stay up to date by following us on [X](https://twitter.com/openfga).
- Ask questions, submit ideas, or just say hi in our [GitHub Discussions](https://github.com/orgs/openfga/discussions).

## See you next month! [​](https://openfga.dev/blog/tags/newsletter/page/2\#see-you-next-month "Direct link to See you next month!")

We'll keep publishing our Fine Grained News each month, after the OpenFGA community meeting. If you have any feedback, you want to share your OpenFGA story, or know about something that you think is worth mentioning, please let us know!

## OpenFGA SDK Installation
[Skip to main content](https://openfga.dev/docs/getting-started/install-sdk#__docusaurus_skipToContent_fallback)

On this page

To get started, install the OpenFGA SDK packages.

- Node.js
- Go
- .NET
- Python
- Java
- CLI

You can find the Node.js package on npm at: [@openfga/sdk](https://www.npmjs.com/package/@openfga/sdk).

Using [npm](https://www.npmjs.com/):

```codeBlockLines_e6Vv
npm install @openfga/sdk

```

Using [yarn](https://yarnpkg.com/):

```codeBlockLines_e6Vv
yarn add @openfga/sdk

```

You can find the Go package on GitHub at: [@openfga/go-sdk](https://github.com/openfga/go-sdk).

To install:

```codeBlockLines_e6Vv
go get -u github.com/openfga/go-sdk

```

In your code, import the module and use it:

```codeBlockLines_e6Vv
import (
    openfga "github.com/openfga/go-sdk"
)

func main() {
    configuration, err := openfga.NewConfiguration(openfga.Configuration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
    })

    if err != nil {
        // .. Handle error
    }
}

```

You can then run

```codeBlockLines_e6Vv
go mod tidy

```

to update `go.mod` and `go.sum` if you are using them.

The OpenFGA .NET SDK is available on [NuGet](https://www.nuget.org/packages/OpenFga.Sdk).

You can install it using:

- The [dotnet CLI](https://docs.microsoft.com/en-us/nuget/consume-packages/install-use-packages-dotnet-cli):

```codeBlockLines_e6Vv
dotnet add package OpenFGA.Sdk

```

- The [Package Manager Console](https://docs.microsoft.com/en-us/nuget/consume-packages/install-use-packages-powershell) inside Visual Studio:

```codeBlockLines_e6Vv
Install-Package OpenFGA.Sdk

```

- [Visual Studio](https://docs.microsoft.com/en-us/nuget/consume-packages/install-use-packages-visual-studio), [Visual Studio for Mac](https://docs.microsoft.com/en-us/visualstudio/mac/nuget-walkthrough) and [IntelliJ Rider](https://www.jetbrains.com/help/rider/Using_NuGet.html): Search for and install `OpenFGA.Sdk` in each of their respective package manager UIs.

The OpenFGA Python SDK is available on [PyPI](https://pypi.org/project/openfga-sdk).

To install:

```codeBlockLines_e6Vv
pip3 install openfga_sdk

```

In your code, import the module and use it:

```codeBlockLines_e6Vv
import openfga_sdk

```

You can find the Java package on [Maven Central](https://central.sonatype.com/artifact/dev.openfga/openfga-sdk).

Using [Maven](https://maven.apache.org/):

```codeBlockLines_e6Vv
<dependency>
    <groupId>dev.openfga</groupId>
    <artifactId>openfga-sdk</artifactId>
    <version>0.3.1</version>
</dependency>

```

Using [Gradle](https://gradle.org/):

```codeBlockLines_e6Vv
implementation 'dev.openfga:openfga-sdk:0.3.1'

```

The OpenFGA CLI is available on [GitHub](https://github.com/openfga/cli).

To install:

### Brew [​](https://openfga.dev/docs/getting-started/install-sdk\#brew "Direct link to Brew")

```codeBlockLines_e6Vv
brew install openfga/tap/fga

```

### Linux (deb, rpm and apk) packages [​](https://openfga.dev/docs/getting-started/install-sdk\#linux-deb-rpm-and-apk-packages "Direct link to Linux (deb, rpm and apk) packages")

Download the .deb, .rpm or .apk packages from the [releases page](https://github.com/openfga/cli/releases).

Debian:

```codeBlockLines_e6Vv
sudo apt install ./fga_<version>_linux_<arch>.deb

```

Fedora:

```codeBlockLines_e6Vv
sudo dnf install ./fga_<version>_linux_<arch>.rpm

```

Alpine Linux:

```codeBlockLines_e6Vv
sudo apk add --allow-untrusted ./fga_<version>_linux_<arch>.apk

```

### Docker [​](https://openfga.dev/docs/getting-started/install-sdk\#docker "Direct link to Docker")

```codeBlockLines_e6Vv
docker pull openfga/cli; docker run -it openfga/cli

```

### Go [​](https://openfga.dev/docs/getting-started/install-sdk\#go "Direct link to Go")

> note that the command will be named `cli`

```codeBlockLines_e6Vv
go install github.com/openfga/cli@latest

```

### Manually [​](https://openfga.dev/docs/getting-started/install-sdk\#manually "Direct link to Manually")

Download the pre-compiled binaries from the [releases page](https://github.com/openfga/cli/releases).

[check API](https://openfga.dev/docs/concepts#what-is-a-check-request)

## Related Sections [​](https://openfga.dev/docs/getting-started/install-sdk\#related-sections "Direct link to Related Sections")

Get OpenFGA's SDKs to add authorization to your API.

OpenFGA Node.js SDK

Install our Node.js & JavaScript SDK to get started.

- [More](https://www.npmjs.com/package/@openfga/sdk)

OpenFGA Go SDK

Use our Go SDK to easily connect your Go application to the OpenFGA API

- [More](https://github.com/openfga/go-sdk)

OpenFGA .NET SDK

Connect your .NET service with OpenFGA using our .NET SDK

- [More](https://github.com/openfga/dotnet-sdk)

OpenFGA Python SDK

Connect your Python service with OpenFGA using our Python SDK

- [More](https://github.com/openfga/python-sdk)

OpenFGA Java SDK

Connect your Java service with OpenFGA using our Java SDK

- [More](https://github.com/openfga/java-sdk)

- [Brew](https://openfga.dev/docs/getting-started/install-sdk#brew)
- [Linux (deb, rpm and apk) packages](https://openfga.dev/docs/getting-started/install-sdk#linux-deb-rpm-and-apk-packages)
- [Docker](https://openfga.dev/docs/getting-started/install-sdk#docker)
- [Go](https://openfga.dev/docs/getting-started/install-sdk#go)
- [Manually](https://openfga.dev/docs/getting-started/install-sdk#manually)
- [Related Sections](https://openfga.dev/docs/getting-started/install-sdk#related-sections)

## Create OpenFGA Store
[Skip to main content](https://openfga.dev/docs/getting-started/create-store#__docusaurus_skipToContent_fallback)

On this page

A [store](https://openfga.dev/docs/concepts#what-is-a-store) is a OpenFGA entity that contains your authorization data. You will need to create a store in OpenFGA before adding an [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model) and [relationship tuples](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple) to it.

This article explains how to set up an OpenFGA store.

## Step by step [​](https://openfga.dev/docs/getting-started/create-store\#step-by-step "Direct link to Step by step")

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl

```codeBlockLines_e6Vv
const { OpenFgaClient } = require('@openfga/sdk'); // OR import { OpenFgaClient } from '@openfga/sdk';

const openFga = new OpenFgaClient({
    apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
});

const { id: storeId } = await openFga.createStore({
    name: "FGA Demo Store",
});

```

```codeBlockLines_e6Vv
import (
    "context"
    "os"

    . "github.com/openfga/go-sdk/client"
)

func main() {
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for \`CreateStore\` and \`ListStores\`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
        // .. Handle error
    }

    resp, err := fgaClient.CreateStore(context.Background()).Body(ClientCreateStoreRequest{Name: "FGA Demo"}).Execute()
    if err != nil {
        // .. Handle error
    }
}

```

```codeBlockLines_e6Vv
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace ExampleApp;

class MyProgram {
    static async Task Main() {
         var configuration = new ClientConfiguration() {
            ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL") ?? "http://localhost:8080", // required, e.g. https://api.fga.example
            StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for \`CreateStore\` and \`ListStores\`, required before calling for all other methods
            AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);

        var store = await fgaClient.CreateStore(new ClientCreateStoreRequest(){Name = "FGA Demo Store"});
    }
}

```

```codeBlockLines_e6Vv
import asyncio
import os
import openfga_sdk
from openfga_sdk.client import OpenFgaClient
from openfga_sdk.models.create_store_request import CreateStoreRequest

async def main():
    configuration = openfga_sdk.ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
    )

    async with OpenFgaClient(configuration) as fga_client:
        body = CreateStoreRequest(
            name = "FGA Demo Store",
        )
        response = await fga_client.create_store(body)

asyncio.run(main())

```

```codeBlockLines_e6Vv
import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;
import dev.openfga.sdk.api.model.CreateStoreRequest;

public class Example {
    public static void main(String[] args) {
        var config = new ClientConfiguration()
                .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
                .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
                .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

        var fgaClient = new OpenFgaClient(config);
        var body = new CreateStoreRequest().name("FGA Demo Store");
        var store = fgaClient.createStore(body).get();
    }
}

```

```codeBlockLines_e6Vv
fga store create --name "FGA Demo Store"

# To create the store and directly put the Store ID into an env variable:
# export FGA_STORE_ID=$(fga store create --name "FGA Demo Store" | jq -r .store.id)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores \
  -H "content-type: application/json" \
  -d '{"name": "FGA Demo Store"}'

```

- [Step by step](https://openfga.dev/docs/getting-started/create-store#step-by-step)

## Read Changes API Guide
[Skip to main content](https://openfga.dev/docs/interacting/read-tuple-changes#__docusaurus_skipToContent_fallback)

On this page

This section illustrates how to call the Read Changes API to get the list of relationship tuple changes that happened in your store, in the exact order that they happened. The API response includes tuples that have been added or removed in your store. It does not include other changes, like updates to your authorization model and adding new assertions.

## Before you start [​](https://openfga.dev/docs/interacting/read-tuple-changes\#before-you-start "Direct link to Before you start")

- Node.js
- Go
- .NET
- Python
- Java
- curl

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk).
3. You have [configured the _authorization model_](https://openfga.dev/docs/modeling) and [added some _relationship tuples_](https://openfga.dev/docs/getting-started/update-tuples#02-calling-write-api-to-add-new-relationship-tuples).
4. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk).
3. You have [configured the _authorization model_](https://openfga.dev/docs/modeling) and [added some _relationship tuples_](https://openfga.dev/docs/getting-started/update-tuples#02-calling-write-api-to-add-new-relationship-tuples).
4. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk).
3. You have [configured the _authorization model_](https://openfga.dev/docs/modeling).
4. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk).
3. You have [configured the _authorization model_](https://openfga.dev/docs/modeling).
4. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [installed the SDK](https://openfga.dev/docs/getting-started/install-sdk).
3. You have [configured the _authorization model_](https://openfga.dev/docs/modeling).
4. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

1. Deploy an instance of the OpenFGA server, and have ready the values for your setup: FGA\_STORE\_ID, FGA\_API\_URL and, if needed, FGA\_API\_TOKEN.

2. You have [configured the _authorization model_](https://openfga.dev/docs/modeling) and [added some _relationship tuples_](https://openfga.dev/docs/getting-started/update-tuples#02-calling-write-api-to-add-new-relationship-tuples).
3. You have loaded `FGA_STORE_ID` and `FGA_API_URL` as environment variables.

## Step by step [​](https://openfga.dev/docs/interacting/read-tuple-changes\#step-by-step "Direct link to Step by step")

To get a chronologically ordered list of tuples that have been written or deleted in your store, you can do so by calling the Read Changes API.

### 01\. Configure The OpenFGA API Client [​](https://openfga.dev/docs/interacting/read-tuple-changes\#01-configure-the--api-client "Direct link to 01-configure-the--api-client")

First you will need to configure the API client.

- Node.js
- Go
- .NET
- Python
- Java
- curl

```codeBlockLines_e6Vv
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

To obtain the [access token](https://auth0.com/docs/authorization/flows/call-your-api-using-the-client-credentials-flow):

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

### 02\. Get changes for all object types [​](https://openfga.dev/docs/interacting/read-tuple-changes\#02-get-changes-for-all-object-types "Direct link to 02. Get changes for all object types")

To get a paginated list of changes that happened in your store:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl

```codeBlockLines_e6Vv
var type = "";
var continuationToken = "";
var pageSize = 25;

await fgaClient.readChanges({ type }, { pageSize, continuationToken });

```

```codeBlockLines_e6Vv
options := ClientReadChangesOptions{
	PageSize: PtrInt32(25),
}
body := ClientReadChangesRequest{
}

data, err := fgaClient.ReadChanges(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

```

```codeBlockLines_e6Vv
var body = new ClientReadChangesRequest {  };
var options = new ClientReadChangesOptions {
    PageSize = 25,


};

var response = await fgaClient.ReadChanges(body, options);

```

```codeBlockLines_e6Vv

body = ClientReadChangesRequest()
options = new ClientReadChangesOptions {
    page_size: 25,


};
response = await fga_client.read_changes(body, options)

```

```codeBlockLines_e6Vv
var options = new ClientReadChangesOptions()
        .pageSize(25);

var body = new ClientReadChangesRequest();

var response = fgaClient.readChanges(body, options).get();

```

```codeBlockLines_e6Vv
fga tuple changes --store-id=${FGA_STORE_ID}

```

```codeBlockLines_e6Vv
curl -X GET $FGA_API_URL/stores/$FGA_STORE_ID/changes?page_size=25 \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json"

```

The result will contain an array of up to 25 tuples, with the operation ( `write` or `delete`), and the timestamp in which that operation took place. The result will also contain a continuation token. Save the continuation token in persistent storage between calls so that it is not lost and you do not have to restart from scratch on system restart or on error.

You can then use this token to get the next set of changes:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl

```codeBlockLines_e6Vv
var type = "";
var continuationToken = "eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==";
var pageSize = 25;

await fgaClient.readChanges({ type }, { pageSize, continuationToken });

```

```codeBlockLines_e6Vv
options := ClientReadChangesOptions{
	PageSize: PtrInt32(25),

	ContinuationToken: PtrString("eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ=="),
}
body := ClientReadChangesRequest{
}

data, err := fgaClient.ReadChanges(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

```

```codeBlockLines_e6Vv
var body = new ClientReadChangesRequest {  };
var options = new ClientReadChangesOptions {
    PageSize = 25,

    ContinuationToken = "eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==",

};

var response = await fgaClient.ReadChanges(body, options);

```

```codeBlockLines_e6Vv

body = ClientReadChangesRequest()
options = new ClientReadChangesOptions {
    page_size: 25,

    continuation_token: "eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==",

};
response = await fga_client.read_changes(body, options)

```

```codeBlockLines_e6Vv
var options = new ClientReadChangesOptions()
        .pageSize(25)
        .continuationToken("eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==");

var body = new ClientReadChangesRequest();

var response = fgaClient.readChanges(body, options).get();

```

```codeBlockLines_e6Vv
fga tuple changes --store-id=${FGA_STORE_ID} --continuation-token eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==

```

```codeBlockLines_e6Vv
curl -X GET $FGA_API_URL/stores/$FGA_STORE_ID/changes?page_size=25&continuation_token=eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ== \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json"

```

Once there are no more changes to retrieve, the API will return the same token as the one you sent. Save the token in persistent storage to use at a later time.

note

- The default page size is 50. The maximum page size allowed is 100.
- The API response does not expand the tuples. If you wrote a tuple that includes a userset, like `{"user": "group:abc#member", "relation": "owner": "doc:budget"}`, the Read Changes API will return that exact tuple.

### 03\. Get changes for a specific object type [​](https://openfga.dev/docs/interacting/read-tuple-changes\#03-get-changes-for-a-specific-object-type "Direct link to 03. Get changes for a specific object type")

Imagine you have the following authorization model:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type group
  relations
    define member: [user]

type folder
  relations
    define owner: [group#member, user]

type doc
  relations
    define owner: [group#member, user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "group",\
      "relations": {\
        "member": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "member": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "folder",\
      "relations": {\
        "owner": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "owner": {\
            "directly_related_user_types": [\
              {\
                "type": "group",\
                "relation": "member"\
              },\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "doc",\
      "relations": {\
        "owner": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "owner": {\
            "directly_related_user_types": [\
              {\
                "type": "group",\
                "relation": "member"\
              },\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

It is possible to get a list of changes that happened in your store that relate only to one specific object type, like `folder`, by issuing a call like this:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl

```codeBlockLines_e6Vv
var type = "folder";
var continuationToken = "";
var pageSize = 25;

await fgaClient.readChanges({ type }, { pageSize, continuationToken });

```

```codeBlockLines_e6Vv
options := ClientReadChangesOptions{
	PageSize: PtrInt32(25),
}
body := ClientReadChangesRequest{
	Type: "folder",
}

data, err := fgaClient.ReadChanges(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

```

```codeBlockLines_e6Vv
var body = new ClientReadChangesRequest { Type = "folder" };
var options = new ClientReadChangesOptions {
    PageSize = 25,


};

var response = await fgaClient.ReadChanges(body, options);

```

```codeBlockLines_e6Vv

body = ClientReadChangesRequest("folder")
options = new ClientReadChangesOptions {
    page_size: 25,


};
response = await fga_client.read_changes(body, options)

```

```codeBlockLines_e6Vv
var options = new ClientReadChangesOptions()
        .pageSize(25);

var body = new ClientReadChangesRequest()
        .type("folder");

var response = fgaClient.readChanges(body, options).get();

```

```codeBlockLines_e6Vv
fga tuple changes --store-id=${FGA_STORE_ID} --type folder

```

```codeBlockLines_e6Vv
curl -X GET $FGA_API_URL/stores/$FGA_STORE_ID/changes?type=folder&page_size=25 \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json"

```

The response will include a continuation token. In subsequent calls, you have to include the token and the `type`. (If you send this continuation token without the `type` parameter set, you will get an error).

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl

```codeBlockLines_e6Vv
var type = "folder";
var continuationToken = "eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==";
var pageSize = 25;

await fgaClient.readChanges({ type }, { pageSize, continuationToken });

```

```codeBlockLines_e6Vv
options := ClientReadChangesOptions{
	PageSize: PtrInt32(25),

	ContinuationToken: PtrString("eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ=="),
}
body := ClientReadChangesRequest{
	Type: "folder",
}

data, err := fgaClient.ReadChanges(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

```

```codeBlockLines_e6Vv
var body = new ClientReadChangesRequest { Type = "folder" };
var options = new ClientReadChangesOptions {
    PageSize = 25,

    ContinuationToken = "eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==",

};

var response = await fgaClient.ReadChanges(body, options);

```

```codeBlockLines_e6Vv

body = ClientReadChangesRequest("folder")
options = new ClientReadChangesOptions {
    page_size: 25,

    continuation_token: "eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==",

};
response = await fga_client.read_changes(body, options)

```

```codeBlockLines_e6Vv
var options = new ClientReadChangesOptions()
        .pageSize(25)
        .continuationToken("eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==");

var body = new ClientReadChangesRequest()
        .type("folder");

var response = fgaClient.readChanges(body, options).get();

```

```codeBlockLines_e6Vv
fga tuple changes --store-id=${FGA_STORE_ID} --type folder --continuation-token eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==

```

```codeBlockLines_e6Vv
curl -X GET $FGA_API_URL/stores/$FGA_STORE_ID/changes?type=folder&page_size=25&continuation_token=eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ== \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json"

```

- [Before you start](https://openfga.dev/docs/interacting/read-tuple-changes#before-you-start)
- [Step by step](https://openfga.dev/docs/interacting/read-tuple-changes#step-by-step)
  - [01\. Configure The  API Client](https://openfga.dev/docs/interacting/read-tuple-changes#01-configure-the--api-client)
  - [02\. Get changes for all object types](https://openfga.dev/docs/interacting/read-tuple-changes#02-get-changes-for-all-object-types)
  - [03\. Get changes for a specific object type](https://openfga.dev/docs/interacting/read-tuple-changes#03-get-changes-for-a-specific-object-type)

## Understanding Usersets in OpenFGA
[Skip to main content](https://openfga.dev/docs/modeling/building-blocks/usersets#__docusaurus_skipToContent_fallback)

On this page

## What is a userset? [​](https://openfga.dev/docs/modeling/building-blocks/usersets\#what-is-a-userset "Direct link to What is a userset?")

A userset represents a set or collection of [users](https://openfga.dev/docs/concepts#what-is-a-user).

Usersets can be used to indicate that a group of users in the system have a certain [relation](https://openfga.dev/docs/concepts#what-is-a-relation) with an [object](https://openfga.dev/docs/concepts#what-is-an-object). This can be used to assign permissions to groups of users rather than specific ones, allowing us to represent the permissions in our system using less tuples and granting us flexibility in granting or denying access in bulk.

In OpenFGA, usersets are represented via this notation: `object#relation`, where [object](https://openfga.dev/docs/concepts#what-is-an-object) is made up of a [type](https://openfga.dev/docs/concepts#what-is-a-type) and an object identifier. For example:

- `company:xyz#employee` represents all users that are related to `company:xyz` as `employee`
- `tweet:12345#viewer` represents all users that are related to `tweet:12345` as `viewer`

## How do check requests work with usersets? [​](https://openfga.dev/docs/modeling/building-blocks/usersets\#how-do-check-requests-work-with-usersets "Direct link to How do check requests work with usersets?")

Imagine the following authorization model:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type org
  relations
    define member: [user]

type document
  relations
    define reader: [user, org#member]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "org",\
      "relations": {\
        "member": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "member": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "document",\
      "relations": {\
        "reader": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "reader": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "org",\
                "relation": "member"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

Now let us assume that the store has the following tuples:

```codeBlockLines_e6Vv
[// Userset "Members of the xyz org" can read the budget document\
  {\
  "_description": "Userset \"Members of the xyz org\" can read the budget document",\
  "user": "org:xyz#member",\
  "relation": "reader",\
  "object": "document:budget"\
}// Anne is part of the userset "Members of the xyz org"\
  {\
  "_description": "Anne is part of the userset \"Members of the xyz org\"",\
  "user": "user:anne",\
  "relation": "member",\
  "object": "org:xyz"\
}]

```

If we call the [check API](https://openfga.dev/docs/concepts#what-is-a-check-request) to see if user `anne` has a `reader` relationship with `document:budget`, OpenFGA will check whether `anne` is part of the userset that does have a `reader` relationship. Because she is part of that userset, the request will return true:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'reader',
    object: 'document:budget',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "reader",
    Object:   "document:budget",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "reader",
    Object = "document:budget",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="reader",
    object="document:budget",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("reader")
        ._object("document:budget");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne reader document:budget

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"reader","object":"document:budget"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "reader", // has an `reader` relation
  object = "document:budget", // with the object `document:budget`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to document:budget as reader?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

## How do expand requests work with usersets? [​](https://openfga.dev/docs/modeling/building-blocks/usersets\#how-do-expand-requests-work-with-usersets "Direct link to How do expand requests work with usersets?")

Imagine the following authorization model:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define writer: [user, org#member]
    define reader: [user, org#member] or writer

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "document",\
      "relations": {\
        "writer": {\
          "this": {}\
        },\
        "reader": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "writer"\
                }\
              }\
            ]\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "reader": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "org",\
                "relation": "member"\
              }\
            ]\
          },\
          "writer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "org",\
                "relation": "member"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

If we wanted to see which users and usersets have a `reader` relationship with `document:budget`, we can call the [Expand API](https://openfga.dev/api/service#Relationship%20Queries/Expand). The response will contain a userset tree where the leaf nodes are specific user IDs and usersets. For example:

```codeBlockLines_e6Vv
{
  "tree": {
    "root": {
      "type": "document:budget#reader",
      "union": {
        "nodes": [\
          {\
            "type": "document:budget#reader",\
            "leaf": {\
              "users": {\
                "users": ["user:bob"]\
              }\
            }\
          },\
          {\
            "type": "document:budget#reader",\
            "leaf": {\
              "computed": {\
                "userset": "document:budget#writer"\
              }\
            }\
          }\
        ]
      }
    }
  }
}

```

As you can see from the response above, with usersets we can express [unions](https://openfga.dev/docs/configuration-language#the-union-operator) of user groups. We can also express [intersections](https://openfga.dev/docs/configuration-language#the-intersection-operator) and [exclusions](https://openfga.dev/docs/configuration-language#the-exclusion-operator).

## Internals [​](https://openfga.dev/docs/modeling/building-blocks/usersets\#internals "Direct link to Internals")

Using the type definitions in the authorization model, some of the situations we can represent are:

- that a user is **not** in a set of users having a certain relation to an object, even if a relationship tuple exists in the system. See [Disabling Direct Relationships](https://openfga.dev/docs/modeling/building-blocks/direct-relationships#2-with-direct-relationships-disabled)
- that a user has a certain relationship with an object if they are in the [union](https://openfga.dev/docs/configuration-language#the-union-operator), [intersection](https://openfga.dev/docs/configuration-language#the-intersection-operator) or [exclusion](https://openfga.dev/docs/configuration-language#the-exclusion-operator) of usersets.
- that a user being in a set of users having a certain relation to an object can result in them having another relation to the object. See [Concentric Relationships](https://openfga.dev/docs/modeling/building-blocks/concentric-relationships)
- that the user being in a set of users having a certain relation to an object and that object is in a set of users having a certain relation to another object, can imply that the original user has a certain relationship to the final object. See [Object-to-Object Relationships](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships)

When executing the Check API of the form `check(user, relation, object)`, OpenFGA will perform the following steps:

1. In the authorization model, look up `type` and its `relation`. Start building a tree where the root node will be the definition of that `relation`, which can be a union, exclusion, or intersection of usersets, or it can be direct users.
2. Expand all the usersets involved into new nodes in the tree. This means recursively finding all the users that are members of the usersets. If there are direct relationships with users, create leaf nodes.
3. Check whether `user` is a leaf node in the tree. If the API finds one match, it will return immediately and will not expand the remaining nodes.

![Image showing the path  traverses to find if a user is in the userset related to an object](https://openfga.dev/assets/images/usersets-check-tree-68f05e3f382b35ea6be97c5115223351.png)

## Related Sections [​](https://openfga.dev/docs/modeling/building-blocks/usersets\#related-sections "Direct link to Related Sections")

See the following sections for more information:

Managing Group Membership

How to add users to a userset

- [More](https://openfga.dev/docs/interacting/managing-group-membership)

Managing Group Access

How to add permissions to a userset

- [More](https://openfga.dev/docs/interacting/managing-group-access)

- [What is a userset?](https://openfga.dev/docs/modeling/building-blocks/usersets#what-is-a-userset)
- [How do check requests work with usersets?](https://openfga.dev/docs/modeling/building-blocks/usersets#how-do-check-requests-work-with-usersets)
- [How do expand requests work with usersets?](https://openfga.dev/docs/modeling/building-blocks/usersets#how-do-expand-requests-work-with-usersets)
- [Internals](https://openfga.dev/docs/modeling/building-blocks/usersets#internals)
- [Related Sections](https://openfga.dev/docs/modeling/building-blocks/usersets#related-sections)

## Organization Context Authorization
[Skip to main content](https://openfga.dev/docs/modeling/organization-context-authorization#__docusaurus_skipToContent_fallback)

On this page

This section tackles cases where a user may have access to a particular resource through their presence in a particular organization, and they should have that access only when logged in within the context of that organization.

When to use

Contextual Tuples should be used when modeling cases where a user's access to an object depends on the context of their request. For example:

- An employee’s ability to access a document when they are connected to the organization VPN or the api call is originating from an internal IP address.
- A support engineer is only able to access a user's account during office hours.
- If a user belongs to multiple organizations, they are only able to access a resource if they set a specific organization in their current context.

## Before You Start [​](https://openfga.dev/docs/modeling/organization-context-authorization\#before-you-start "Direct link to Before You Start")

To follow this guide, you should be familiar with some [OpenFGA Concepts](https://openfga.dev/docs/concepts).

### OpenFGA Concepts [​](https://openfga.dev/docs/modeling/organization-context-authorization\#-concepts "Direct link to -concepts")

- A [Relation](https://openfga.dev/docs/concepts#what-is-a-relation): is a string defined in the type definition of an authorization model that defines the possibility of a relationship between an object of the same type as the type definition and a user in the system
- A [Check Request](https://openfga.dev/docs/concepts#what-is-a-check-request): is a call to the OpenFGA check endpoint that returns whether the user has a certain relationship with an object.
- A [Relationship Tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple): a grouping consisting of a user, a relation and an object stored in OpenFGA
- A [Contextual Tuple](https://openfga.dev/docs/concepts#what-are-contextual-tuples): a tuple that can be added to a check request, and only exist within the context of that particular request.

You also need to be familiar with:

- **Modeling Object-to-Object Relationships**: You need to know how to create relationships between objects and how that might affect a user's relationships to those objects. [Learn more →](https://openfga.dev/docs/modeling/building-blocks/object-to-object-relationships)
- **Modeling Multiple Restrictions**: You need to know how to model requiring multiple authorizations before allowing users to perform certain actions. [Learn more →](https://openfga.dev/docs/modeling/multiple-restrictions)

### Scenario [​](https://openfga.dev/docs/modeling/organization-context-authorization\#scenario "Direct link to Scenario")

For the scope of this guide, we are going to consider the following scenario.

Consider you are building the authorization model for a multi-tenant project management system.

In this particular system:

- projects are owned and managed by companies
- users can be members of multiple companies
- project access is governed by the user's role in the organization that manages the project

In order for a user to access a project:

- The project needs to be managed by an organization the user is a member of
- A project is owned by a single organization
- A project can be shared with partner companies (that are able to view, edit but not perform admin actions, such as deletion, on the project)
- The user should have a role that grants access to the project
- The user should be logged in within the context of that organization

We will start with the following authorization model:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type organization
  relations
    define member: [user]
    define project_manager: [user]
    define project_editor: [user]

type project
  relations
    define owner: [organization]
    define partner: [organization]
    define manager: project_manager from owner
    define editor: project_editor from owner or project_editor from partner or manager
    define can_delete: manager
    define can_edit: editor
    define can_view: editor

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "organization",\
      "relations": {\
        "member": {\
          "this": {}\
        },\
        "project_manager": {\
          "this": {}\
        },\
        "project_editor": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "member": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "project_manager": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "project_editor": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "project",\
      "relations": {\
        "owner": {\
          "this": {}\
        },\
        "partner": {\
          "this": {}\
        },\
        "manager": {\
          "tupleToUserset": {\
            "tupleset": {\
              "object": "",\
              "relation": "owner"\
            },\
            "computedUserset": {\
              "object": "",\
              "relation": "project_manager"\
            }\
          }\
        },\
        "editor": {\
          "union": {\
            "child": [\
              {\
                "tupleToUserset": {\
                  "tupleset": {\
                    "object": "",\
                    "relation": "owner"\
                  },\
                  "computedUserset": {\
                    "object": "",\
                    "relation": "project_editor"\
                  }\
                }\
              },\
              {\
                "tupleToUserset": {\
                  "tupleset": {\
                    "object": "",\
                    "relation": "partner"\
                  },\
                  "computedUserset": {\
                    "object": "",\
                    "relation": "project_editor"\
                  }\
                }\
              },\
              {\
                "computedUserset": {\
                  "object": "",\
                  "relation": "manager"\
                }\
              }\
            ]\
          }\
        },\
        "can_delete": {\
          "computedUserset": {\
            "object": "",\
            "relation": "manager"\
          }\
        },\
        "can_edit": {\
          "computedUserset": {\
            "object": "",\
            "relation": "editor"\
          }\
        },\
        "can_view": {\
          "computedUserset": {\
            "object": "",\
            "relation": "editor"\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "owner": {\
            "directly_related_user_types": [\
              {\
                "type": "organization"\
              }\
            ]\
          },\
          "partner": {\
            "directly_related_user_types": [\
              {\
                "type": "organization"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

We are considering the case that:

- Anne has a project manager role at organizations A, B and C
- Beth has a project manager role at organization B
- Carl has a project manager role at organization C
- Project X is owned by organization A
- Project X is shared with organization B

The above state translates to the following relationship tuples:

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // Anne has a `project manager` role at organization A\
      {"_description":"Anne has a `project manager` role at organization A","user":"user:anne","relation":"project_manager","object":"organization:A"},\
      // Anne has a `project manager` role at organization B\
      {"_description":"Anne has a `project manager` role at organization B","user":"user:anne","relation":"project_manager","object":"organization:B"},\
      // Anne has a `project manager` role at organization C\
      {"_description":"Anne has a `project manager` role at organization C","user":"user:anne","relation":"project_manager","object":"organization:C"},\
      // Beth has a `project manager` role at organization B\
      {"_description":"Beth has a `project manager` role at organization B","user":"user:anne","relation":"project_manager","object":"organization:B"},\
      // Carl has a `project manager` role at organization C\
      {"_description":"Carl has a `project manager` role at organization C","user":"user:carl","relation":"project_manager","object":"organization:C"},\
      // Organization A owns Project X\
      {"_description":"Organization A owns Project X","user":"organization:A","relation":"owner","object":"project:X"},\
      // Project X is shared with Organization B\
      {"_description":"Project X is shared with Organization B","user":"organization:B","relation":"partner","object":"project:X"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             // Anne has a `project manager` role at organization A
             User: "user:anne",
             Relation: "project_manager",
             Object: "organization:A",
        },         {
             // Anne has a `project manager` role at organization B
             User: "user:anne",
             Relation: "project_manager",
             Object: "organization:B",
        },         {
             // Anne has a `project manager` role at organization C
             User: "user:anne",
             Relation: "project_manager",
             Object: "organization:C",
        },         {
             // Beth has a `project manager` role at organization B
             User: "user:anne",
             Relation: "project_manager",
             Object: "organization:B",
        },         {
             // Carl has a `project manager` role at organization C
             User: "user:carl",
             Relation: "project_manager",
             Object: "organization:C",
        },         {
             // Organization A owns Project X
             User: "organization:A",
             Relation: "owner",
             Object: "project:X",
        },         {
             // Project X is shared with Organization B
             User: "organization:B",
             Relation: "partner",
             Object: "project:X",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
    // Anne has a `project manager` role at organization A
       new() {
                  User = "user:anne",
                  Relation = "project_manager",
                  Object = "organization:A"
              },
    // Anne has a `project manager` role at organization B
       new() {
                  User = "user:anne",
                  Relation = "project_manager",
                  Object = "organization:B"
              },
    // Anne has a `project manager` role at organization C
       new() {
                  User = "user:anne",
                  Relation = "project_manager",
                  Object = "organization:C"
              },
    // Beth has a `project manager` role at organization B
       new() {
                  User = "user:anne",
                  Relation = "project_manager",
                  Object = "organization:B"
              },
    // Carl has a `project manager` role at organization C
       new() {
                  User = "user:carl",
                  Relation = "project_manager",
                  Object = "organization:C"
              },
    // Organization A owns Project X
       new() {
                  User = "organization:A",
                  Relation = "owner",
                  Object = "project:X"
              },
    // Project X is shared with Organization B
       new() {
                  User = "organization:B",
                  Relation = "partner",
                  Object = "project:X"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    # Anne has a `project manager` role at organization A\
                    user="user:anne",\
                    relation="project_manager",\
                    object="organization:A",\
                ),\
                ClientTuple(\
                    # Anne has a `project manager` role at organization B\
                    user="user:anne",\
                    relation="project_manager",\
                    object="organization:B",\
                ),\
                ClientTuple(\
                    # Anne has a `project manager` role at organization C\
                    user="user:anne",\
                    relation="project_manager",\
                    object="organization:C",\
                ),\
                ClientTuple(\
                    # Beth has a `project manager` role at organization B\
                    user="user:anne",\
                    relation="project_manager",\
                    object="organization:B",\
                ),\
                ClientTuple(\
                    # Carl has a `project manager` role at organization C\
                    user="user:carl",\
                    relation="project_manager",\
                    object="organization:C",\
                ),\
                ClientTuple(\
                    # Organization A owns Project X\
                    user="organization:A",\
                    relation="owner",\
                    object="project:X",\
                ),\
                ClientTuple(\
                    # Project X is shared with Organization B\
                    user="organization:B",\
                    relation="partner",\
                    object="project:X",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                // Anne has a `project manager` role at organization A
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("project_manager")
                        ._object("organization:A"),
                // Anne has a `project manager` role at organization B
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("project_manager")
                        ._object("organization:B"),
                // Anne has a `project manager` role at organization C
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("project_manager")
                        ._object("organization:C"),
                // Beth has a `project manager` role at organization B
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("project_manager")
                        ._object("organization:B"),
                // Carl has a `project manager` role at organization C
                new ClientTupleKey()
                        .user("user:carl")
                        .relation("project_manager")
                        ._object("organization:C"),
                // Organization A owns Project X
                new ClientTupleKey()
                        .user("organization:A")
                        .relation("owner")
                        ._object("project:X"),
                // Project X is shared with Organization B
                new ClientTupleKey()
                        .user("organization:B")
                        .relation("partner")
                        ._object("project:X")
        ));

var response = fgaClient.write(body, options).get();

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"_description":"Anne has a `project manager` role at organization A","user":"user:anne","relation":"project_manager","object":"organization:A"},{"_description":"Anne has a `project manager` role at organization B","user":"user:anne","relation":"project_manager","object":"organization:B"},{"_description":"Anne has a `project manager` role at organization C","user":"user:anne","relation":"project_manager","object":"organization:C"},{"_description":"Beth has a `project manager` role at organization B","user":"user:anne","relation":"project_manager","object":"organization:B"},{"_description":"Carl has a `project manager` role at organization C","user":"user:carl","relation":"project_manager","object":"organization:C"},{"_description":"Organization A owns Project X","user":"organization:A","relation":"owner","object":"project:X"},{"_description":"Project X is shared with Organization B","user":"organization:B","relation":"partner","object":"project:X"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne project_manager organization:A
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne project_manager organization:B
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne project_manager organization:C
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne project_manager organization:B
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:carl project_manager organization:C
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA organization:A owner project:X
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA organization:B partner project:X

```

```codeBlockLines_e6Vv
write([\
    // Anne has a `project manager` role at organization A\
    {\
      "user":"user:anne",\
      "relation":"project_manager",\
      "object":"organization:A"\
    },\
    // Anne has a `project manager` role at organization B\
    {\
      "user":"user:anne",\
      "relation":"project_manager",\
      "object":"organization:B"\
    },\
    // Anne has a `project manager` role at organization C\
    {\
      "user":"user:anne",\
      "relation":"project_manager",\
      "object":"organization:C"\
    },\
    // Beth has a `project manager` role at organization B\
    {\
      "user":"user:anne",\
      "relation":"project_manager",\
      "object":"organization:B"\
    },\
    // Carl has a `project manager` role at organization C\
    {\
      "user":"user:carl",\
      "relation":"project_manager",\
      "object":"organization:C"\
    },\
    // Organization A owns Project X\
    {\
      "user":"organization:A",\
      "relation":"owner",\
      "object":"project:X"\
    },\
    // Project X is shared with Organization B\
    {\
      "user":"organization:B",\
      "relation":"partner",\
      "object":"project:X"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

### Requirements [​](https://openfga.dev/docs/modeling/organization-context-authorization\#requirements "Direct link to Requirements")

- When logging in within the context of organization A, Anne should be able to view and delete project X.
- When logging in within the context of organization B, Anne should be able to view, but not delete, project X.
- When logging in within the context of organization C, Anne should not be able to view nor delete project X.
- When logging in within the context of organization B, Beth should be able to view, but not delete, project X.
- Carl should not be able to view nor delete project X.

## Step By Step [​](https://openfga.dev/docs/modeling/organization-context-authorization\#step-by-step "Direct link to Step By Step")

In order to solve for the requirements above, we will break the problem down into three steps:

1. [Understand relationships without contextual tuples](https://openfga.dev/docs/modeling/organization-context-authorization#understand-relationships-without-contextual-data). For example, we need to ensure that Anne can view and delete "Project X".
2. [Take organization context into consideration](https://openfga.dev/docs/modeling/organization-context-authorization#take-organization-context-into-consideration). This includes [extending the authorization model](https://openfga.dev/docs/modeling/organization-context-authorization#extend-the-authorization-model) and a temporary step of [adding the required tuples to mark that Anne is in an approved context](https://openfga.dev/docs/modeling/organization-context-authorization#add-the-required-tuples-to-mark-that-anne-is-in-an-approved-context).
3. [Use contextual tuples for context related checks](https://openfga.dev/docs/modeling/organization-context-authorization#use-contextual-tuples-for-context-related-checks).

### Understand Relationships Without Contextual Data [​](https://openfga.dev/docs/modeling/organization-context-authorization\#understand-relationships-without-contextual-data "Direct link to Understand Relationships Without Contextual Data")

With the authorization model and relationship tuples shown above, OpenFGA has all the information needed to ensure that Anne can view and delete "Project X".

We can verify that using the following checks:

- Anne can view Project X


- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'can_view',
    object: 'project:X',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "can_view",
    Object:   "project:X",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "can_view",
    Object = "project:X",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="can_view",
    object="project:X",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("can_view")
        ._object("project:X");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne can_view project:X

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"can_view","object":"project:X"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "can_view", // has an `can_view` relation
  object = "project:X", // with the object `project:X`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to project:X as can_view?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

- Anne can delete Project X


- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'can_delete',
    object: 'project:X',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "can_delete",
    Object:   "project:X",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "can_delete",
    Object = "project:X",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="can_delete",
    object="project:X",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("can_delete")
        ._object("project:X");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne can_delete project:X

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"can_delete","object":"project:X"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "can_delete", // has an `can_delete` relation
  object = "project:X", // with the object `project:X`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to project:X as can_delete?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

More checks

- Beth can view Project X

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:beth',
    relation: 'can_view',
    object: 'project:X',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:beth",
    Relation: "can_view",
    Object:   "project:X",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:beth",
    Relation = "can_view",
    Object = "project:X",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:beth",
    relation="can_view",
    object="project:X",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:beth")
        .relation("can_view")
        ._object("project:X");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:beth can_view project:X

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:beth","relation":"can_view","object":"project:X"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:beth", // check if the user `user:beth`
  relation = "can_view", // has an `can_view` relation
  object = "project:X", // with the object `project:X`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:beth related to project:X as can_view?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

- Beth cannot delete Project X

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:beth',
    relation: 'can_delete',
    object: 'project:X',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:beth",
    Relation: "can_delete",
    Object:   "project:X",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:beth",
    Relation = "can_delete",
    Object = "project:X",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:beth",
    relation="can_delete",
    object="project:X",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:beth")
        .relation("can_delete")
        ._object("project:X");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:beth can_delete project:X

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:beth","relation":"can_delete","object":"project:X"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:beth", // check if the user `user:beth`
  relation = "can_delete", // has an `can_delete` relation
  object = "project:X", // with the object `project:X`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:beth related to project:X as can_delete?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

- Carl cannot view Project X

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:carl',
    relation: 'can_view',
    object: 'project:X',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:carl",
    Relation: "can_view",
    Object:   "project:X",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:carl",
    Relation = "can_view",
    Object = "project:X",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:carl",
    relation="can_view",
    object="project:X",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:carl")
        .relation("can_view")
        ._object("project:X");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:carl can_view project:X

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:carl","relation":"can_view","object":"project:X"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:carl", // check if the user `user:carl`
  relation = "can_view", // has an `can_view` relation
  object = "project:X", // with the object `project:X`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:carl related to project:X as can_view?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

- Carl cannot delete Project X

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:carl',
    relation: 'can_delete',
    object: 'project:X',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:carl",
    Relation: "can_delete",
    Object:   "project:X",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:carl",
    Relation = "can_delete",
    Object = "project:X",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:carl",
    relation="can_delete",
    object="project:X",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:carl")
        .relation("can_delete")
        ._object("project:X");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:carl can_delete project:X

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:carl","relation":"can_delete","object":"project:X"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:carl", // check if the user `user:carl`
  relation = "can_delete", // has an `can_delete` relation
  object = "project:X", // with the object `project:X`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:carl related to project:X as can_delete?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

Note that so far, we have not prevented Anne from viewing "Project X" even if Anne is viewing it from the context of Organization C.

### Take Organization Context Into Consideration [​](https://openfga.dev/docs/modeling/organization-context-authorization\#take-organization-context-into-consideration "Direct link to Take Organization Context Into Consideration")

##### Extend The Authorization Model [​](https://openfga.dev/docs/modeling/organization-context-authorization\#extend-the-authorization-model "Direct link to Extend The Authorization Model")

In order to add a restriction based on the current organization context, we will make use of OpenFGA configuration language's support for [intersection](https://openfga.dev/docs/configuration-language#the-intersection-operator) to specify that a user has to both have access _and_ be in the correct context in order to be authorized.

We can do that by introducing some new relations and updating existing relation definitions:

1. On the "organization" type

- Add "user\_in\_context" relation to mark that a user's access is being evaluated within that particular context
- Update the "project\_manager" relation to require that the user be in the correct context (by adding `and user_in_context` to the relation definition)
- Considering thatOpenFGAdoes not yet support multiple logical operations within the same definition, we will split "project\_editor" into two:
  - "base\_project\_editor" editor which will contain the original relation definition ( `[user] or project_manager`)
  - "project\_editor" which will require that a user has both the "base\_project\_editor" and the "user\_in\_context" relations

The "organization" type definition then becomes:

- DSL
- JSON

```codeBlockLines_e6Vv

type organization
  relations
    define member: [user]
    define project_manager: [user] and user_in_context
    define base_project_editor: [user] or project_manager
    define project_editor: base_project_editor and user_in_context
    define user_in_context: [user]

```

```codeBlockLines_e6Vv
{
  "type": "organization",
  "relations": {
    "member": {
      "this": {}
    },
    "project_manager": {
      "intersection": {
        "child": [\
          {\
            "this": {}\
          },\
          {\
            "computedUserset": {\
              "object": "",\
              "relation": "user_in_context"\
            }\
          }\
        ]
      }
    },
    "base_project_editor": {
      "union": {
        "child": [\
          {\
            "this": {}\
          },\
          {\
            "computedUserset": {\
              "object": "",\
              "relation": "project_manager"\
            }\
          }\
        ]
      }
    },
    "project_editor": {
      "intersection": {
        "child": [\
          {\
            "computedUserset": {\
              "object": "",\
              "relation": "base_project_editor"\
            }\
          },\
          {\
            "computedUserset": {\
              "object": "",\
              "relation": "user_in_context"\
            }\
          }\
        ]
      }
    },
    "user_in_context": {
      "this": {}
    }
  },
  "metadata": {
    "relations": {
      "member": {
        "directly_related_user_types": [\
          {\
            "type": "user"\
          }\
        ]
      },
      "project_manager": {
        "directly_related_user_types": [\
          {\
            "type": "user"\
          }\
        ]
      },
      "base_project_editor": {
        "directly_related_user_types": [\
          {\
            "type": "user"\
          }\
        ]
      },
      "user_in_context": {
        "directly_related_user_types": [\
          {\
            "type": "user"\
          }\
        ]
      }
    }
  }
}

```

2. On the "project" type

- Nothing will need to be done, as it will inherit the updated "project\_manager" and "project\_editor" relation definitions from "organization"

##### Add The Required Tuples To Mark That Anne Is In An Approved Context [​](https://openfga.dev/docs/modeling/organization-context-authorization\#add-the-required-tuples-to-mark-that-anne-is-in-an-approved-context "Direct link to Add The Required Tuples To Mark That Anne Is In An Approved Context")

Now that we have updated our authorization model to take the current user's organization context into consideration, you will notice that Anne has lost access because nothing indicates that Anne is authorizing from the context of an organization. You can verify that by issuing the following check:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'can_view',
    object: 'project:X',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "can_view",
    Object:   "project:X",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "can_view",
    Object = "project:X",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="can_view",
    object="project:X",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("can_view")
        ._object("project:X");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne can_view project:X

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"can_view","object":"project:X"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "can_view", // has an `can_view` relation
  object = "project:X", // with the object `project:X`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:anne related to project:X as can_view?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

In order for Anne to be authorized, a tuple indicating Anne's current organization context will need to be present:

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // Anne is authorizing from the context of organization:A\
      {"_description":"Anne is authorizing from the context of organization:A","user":"user:anne","relation":"user_in_context","object":"organization:A"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             // Anne is authorizing from the context of organization:A
             User: "user:anne",
             Relation: "user_in_context",
             Object: "organization:A",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
    // Anne is authorizing from the context of organization:A
       new() {
                  User = "user:anne",
                  Relation = "user_in_context",
                  Object = "organization:A"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    # Anne is authorizing from the context of organization:A\
                    user="user:anne",\
                    relation="user_in_context",\
                    object="organization:A",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                // Anne is authorizing from the context of organization:A
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("user_in_context")
                        ._object("organization:A")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"_description":"Anne is authorizing from the context of organization:A","user":"user:anne","relation":"user_in_context","object":"organization:A"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne user_in_context organization:A

```

```codeBlockLines_e6Vv
write([\
    // Anne is authorizing from the context of organization:A\
    {\
      "user":"user:anne",\
      "relation":"user_in_context",\
      "object":"organization:A"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

We can verify this by running a check request

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'can_view',
    object: 'project:X',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "can_view",
    Object:   "project:X",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "can_view",
    Object = "project:X",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="can_view",
    object="project:X",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("can_view")
        ._object("project:X");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne can_view project:X

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"can_view","object":"project:X"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "can_view", // has an `can_view` relation
  object = "project:X", // with the object `project:X`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to project:X as can_view?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

### Use Contextual Tuples For Context Related Checks [​](https://openfga.dev/docs/modeling/organization-context-authorization\#use-contextual-tuples-for-context-related-checks "Direct link to Use Contextual Tuples For Context Related Checks")

Now that we know we can authorize based on present state, we have a different problem to solve. We are storing the tuples in the state in order for OpenFGA to evaluate them, which fails in certain use-cases where Anne can be connected to two different contexts in different browser windows at the same time, as each has a different context at the same time, so if they are written to the state, which will OpenFGA use to compute Anne's access to the project?

For Check calls, OpenFGA has a concept called " [Contextual Tuples](https://openfga.dev/docs/concepts#what-are-contextual-tuples)". Contextual Tuples are tuples that do **not** exist in the system state and are not written beforehand to OpenFGA. They are tuples that are sent alongside the Check request and will be treated as _if_ they already exist in the state for the context of that particular Check call. That means that Anne can be using two different sessions, each within a different organization context, and OpenFGA will correctly respond to each one with the correct authorization decision.

First, we will undo the [temporary step](https://openfga.dev/docs/modeling/organization-context-authorization#add-the-required-tuples-to-mark-that-anne-is-in-an-approved-context) and remove the stored tuples for which Anne has a `user_in_context` relation with `organization:A`.

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

await fgaClient.write({
  deletes: [\
      // Delete stored tuples where Anne is authorizing from the context of organization:A\
      { user: 'user:anne', relation: 'user_in_context', object: 'organization:A'}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Deletes: []ClientTupleKeyWithoutCondition{
        {
             // Delete stored tuples where Anne is authorizing from the context of organization:A
             User: "user:anne",
             Relation: "user_in_context",
             Object: "organization:A",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Deletes = new List<ClientTupleKeyWithoutCondition>() {
    // Delete stored tuples where Anne is authorizing from the context of organization:A
    new() { User = "user:anne", Relation = "user_in_context", Object = "organization:A" }
  },
};
var response = await fgaClient.Write(body, options);

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        deletes=[\
                ClientTuple(\
                    # Delete stored tuples where Anne is authorizing from the context of organization:A\
                    user="user:anne",\
                    relation="user_in_context",\
                    object="organization:A",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .deletes(List.of(
                // Delete stored tuples where Anne is authorizing from the context of organization:A
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("user_in_context")
                        ._object("organization:A")
        ));

var response = fgaClient.write(body, options).get();

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"deletes": { "tuple_keys" : [{"_description":"Delete stored tuples where Anne is authorizing from the context of organization:A","user":"user:anne","relation":"user_in_context","object":"organization:A"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv

fga tuple delete --store-id=${FGA_STORE_ID} user:anne user_in_context organization:A

```

```codeBlockLines_e6Vv

delete([\
    // Delete stored tuples where Anne is authorizing from the context of organization:A\
    {\
      "user":"user:anne",\
      "relation":"user_in_context",\
      "object":"organization:A"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

Next, when Anne is connecting from the context of organization A, OpenFGA will return `{"allowed":true}`:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'can_view',
    object: 'project:X',
    contextualTuples: [\
      {"_description":"Anne is authorizing from the context of organization:A","user":"user:anne","relation":"user_in_context","object":"organization:A"}\
    ],
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "can_view",
    Object:   "project:X",
    ContextualTuples: []ClientTupleKey{
        {
            User:     "user:anne",
            Relation: "user_in_context",
            Object:   "organization:A",
        },
    },
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "can_view",
    Object = "project:X",,
    ContextualTuples = new List<ClientTupleKey>({
    new(user: "user:anne", relation: "user_in_context", _object: "organization:A")
})

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="can_view",
    object="project:X",
    contextual_tuples=[\
        ClientTuple(user="user:anne", relation="user_in_context", object="organization:A")\
    ],
)

response = await fga_client.check(body, options)

# response.allowed = true

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("can_view")
        ._object("project:X")
        .contextualTuples(
                List.of(
                        new ClientTupleKey()
                                .user("user:anne")
                                .relation("user_in_context")
                                ._object("organization:A")
                ));

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne can_view project:X --contextual-tuple "user:anne user_in_context organization:A"

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"can_view","object":"project:X"},"contextual_tuples":{"tuple_keys":[{"user":"user:anne","relation":"user_in_context","object":"organization:A"}]}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "can_view", // has an `can_view` relation
  object = "project:X", // with the object `project:X`
  contextual_tuples = [ // Assuming the following is true\
    {user = "user:anne", relation = "user_in_context", object = "organization:A"}\
  ], authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to project:X as can_view?

# Note: Contextual Tuples are not supported on the playground

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

When Anne is connecting from the context of organization C, OpenFGA will return `{"allowed":false}`:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'can_view',
    object: 'project:X',
    contextualTuples: [\
      {"_description":"Anne is authorizing from the context of organization:A","user":"user:anne","relation":"user_in_context","object":"organization:C"}\
    ],
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "can_view",
    Object:   "project:X",
    ContextualTuples: []ClientTupleKey{
        {
            User:     "user:anne",
            Relation: "user_in_context",
            Object:   "organization:C",
        },
    },
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "can_view",
    Object = "project:X",,
    ContextualTuples = new List<ClientTupleKey>({
    new(user: "user:anne", relation: "user_in_context", _object: "organization:C")
})

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="can_view",
    object="project:X",
    contextual_tuples=[\
        ClientTuple(user="user:anne", relation="user_in_context", object="organization:C")\
    ],
)

response = await fga_client.check(body, options)

# response.allowed = false

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("can_view")
        ._object("project:X")
        .contextualTuples(
                List.of(
                        new ClientTupleKey()
                                .user("user:anne")
                                .relation("user_in_context")
                                ._object("organization:C")
                ));

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne can_view project:X --contextual-tuple "user:anne user_in_context organization:C"

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"can_view","object":"project:X"},"contextual_tuples":{"tuple_keys":[{"user":"user:anne","relation":"user_in_context","object":"organization:C"}]}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "can_view", // has an `can_view` relation
  object = "project:X", // with the object `project:X`
  contextual_tuples = [ // Assuming the following is true\
    {user = "user:anne", relation = "user_in_context", object = "organization:C"}\
  ], authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:anne related to project:X as can_view?

# Note: Contextual Tuples are not supported on the playground

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

Using this, you can check that the following requirements are satisfied:

| User | Organization Context | Action | Allowed |
| --- | --- | --- | --- |
| Anne | Organization A | View | Yes |
| Anne | Organization B | View | Yes |
| Anne | Organization C | View | Yes |
| Anne | Organization A | Delete | Yes |
| Anne | Organization B | Delete | No |
| Anne | Organization C | Delete | No |
| Beth | Organization B | View | Yes |
| Beth | Organization B | Delete | No |
| Carl | Organization C | View | No |
| Carl | Organization C | Delete | No |

## Summary [​](https://openfga.dev/docs/modeling/organization-context-authorization\#summary "Direct link to Summary")

Final version of the Authorization Model and Relationship tuples

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type organization
  relations
    define member: [user]
    define project_manager: [user] and user_in_context
    define base_project_editor: [user] or project_manager
    define project_editor: base_project_editor and user_in_context
    define user_in_context: [user]

type project
  relations
    define owner: [organization]
    define partner: [organization]
    define manager: project_manager from owner
    define editor: manager or project_editor from owner or project_editor from partner
    define can_delete: manager
    define can_edit: editor
    define can_view: editor

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "organization",\
      "relations": {\
        "member": {\
          "this": {}\
        },\
        "project_manager": {\
          "intersection": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "object": "",\
                  "relation": "user_in_context"\
                }\
              }\
            ]\
          }\
        },\
        "base_project_editor": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "object": "",\
                  "relation": "project_manager"\
                }\
              }\
            ]\
          }\
        },\
        "project_editor": {\
          "intersection": {\
            "child": [\
              {\
                "computedUserset": {\
                  "object": "",\
                  "relation": "base_project_editor"\
                }\
              },\
              {\
                "computedUserset": {\
                  "object": "",\
                  "relation": "user_in_context"\
                }\
              }\
            ]\
          }\
        },\
        "user_in_context": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "member": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "project_manager": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "base_project_editor": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "user_in_context": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "project",\
      "relations": {\
        "owner": {\
          "this": {}\
        },\
        "partner": {\
          "this": {}\
        },\
        "manager": {\
          "tupleToUserset": {\
            "tupleset": {\
              "object": "",\
              "relation": "owner"\
            },\
            "computedUserset": {\
              "object": "",\
              "relation": "project_manager"\
            }\
          }\
        },\
        "editor": {\
          "union": {\
            "child": [\
              {\
                "computedUserset": {\
                  "object": "",\
                  "relation": "manager"\
                }\
              },\
              {\
                "tupleToUserset": {\
                  "tupleset": {\
                    "object": "",\
                    "relation": "owner"\
                  },\
                  "computedUserset": {\
                    "object": "",\
                    "relation": "project_editor"\
                  }\
                }\
              },\
              {\
                "tupleToUserset": {\
                  "tupleset": {\
                    "object": "",\
                    "relation": "partner"\
                  },\
                  "computedUserset": {\
                    "object": "",\
                    "relation": "project_editor"\
                  }\
                }\
              }\
            ]\
          }\
        },\
        "can_delete": {\
          "computedUserset": {\
            "object": "",\
            "relation": "manager"\
          }\
        },\
        "can_edit": {\
          "computedUserset": {\
            "object": "",\
            "relation": "editor"\
          }\
        },\
        "can_view": {\
          "computedUserset": {\
            "object": "",\
            "relation": "editor"\
          }\
        }\
      },\
      "metadata": {\
        "relations": {\
          "owner": {\
            "directly_related_user_types": [\
              {\
                "type": "organization"\
              }\
            ]\
          },\
          "partner": {\
            "directly_related_user_types": [\
              {\
                "type": "organization"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

- Node.js
- Go
- .NET
- Python
- Java
- curl
- CLI
- Pseudocode

```codeBlockLines_e6Vv

await fgaClient.write({
  writes: [\
      // Anne has a `project manager` role at organization A\
      {"_description":"Anne has a `project manager` role at organization A","user":"user:anne","relation":"project_manager","object":"organization:A"},\
      // Anne has a `project manager` role at organization B\
      {"_description":"Anne has a `project manager` role at organization B","user":"user:anne","relation":"project_manager","object":"organization:B"},\
      // Anne has a `project manager` role at organization C\
      {"_description":"Anne has a `project manager` role at organization C","user":"user:anne","relation":"project_manager","object":"organization:C"},\
      // Beth has a `project manager` role at organization B\
      {"_description":"Beth has a `project manager` role at organization B","user":"user:beth","relation":"project_manager","object":"organization:B"},\
      // Carl has a `project manager` role at organization C\
      {"_description":"Carl has a `project manager` role at organization C","user":"user:carl","relation":"project_manager","object":"organization:C"},\
      // Organization A owns Project X\
      {"_description":"Organization A owns Project X","user":"organization:A","relation":"owner","object":"project:X"},\
      // Project X is shared with Organization B\
      {"_description":"Project X is shared with Organization B","user":"organization:B","relation":"partner","object":"project:X"}\
  ],
}, {
  authorizationModelId: "01HVMMBCMGZNT3SED4Z17ECXCA"
});

```

```codeBlockLines_e6Vv

options := ClientWriteOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientWriteRequest{
    Writes: []ClientTupleKey{
        {
             // Anne has a `project manager` role at organization A
             User: "user:anne",
             Relation: "project_manager",
             Object: "organization:A",
        },         {
             // Anne has a `project manager` role at organization B
             User: "user:anne",
             Relation: "project_manager",
             Object: "organization:B",
        },         {
             // Anne has a `project manager` role at organization C
             User: "user:anne",
             Relation: "project_manager",
             Object: "organization:C",
        },         {
             // Beth has a `project manager` role at organization B
             User: "user:beth",
             Relation: "project_manager",
             Object: "organization:B",
        },         {
             // Carl has a `project manager` role at organization C
             User: "user:carl",
             Relation: "project_manager",
             Object: "organization:C",
        },         {
             // Organization A owns Project X
             User: "organization:A",
             Relation: "owner",
             Object: "project:X",
        },         {
             // Project X is shared with Organization B
             User: "organization:B",
             Relation: "partner",
             Object: "project:X",
        },
    },
}

data, err := fgaClient.Write(context.Background()).
    Body(body).
    Options(options).
    Execute()

if err != nil {
    // .. Handle error
}

_ = data // use the response

```

```codeBlockLines_e6Vv

var options = new ClientWriteOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientWriteRequest() {
    Writes = new List<ClientTupleKey>() {
    // Anne has a `project manager` role at organization A
       new() {
                  User = "user:anne",
                  Relation = "project_manager",
                  Object = "organization:A"
              },
    // Anne has a `project manager` role at organization B
       new() {
                  User = "user:anne",
                  Relation = "project_manager",
                  Object = "organization:B"
              },
    // Anne has a `project manager` role at organization C
       new() {
                  User = "user:anne",
                  Relation = "project_manager",
                  Object = "organization:C"
              },
    // Beth has a `project manager` role at organization B
       new() {
                  User = "user:beth",
                  Relation = "project_manager",
                  Object = "organization:B"
              },
    // Carl has a `project manager` role at organization C
       new() {
                  User = "user:carl",
                  Relation = "project_manager",
                  Object = "organization:C"
              },
    // Organization A owns Project X
       new() {
                  User = "organization:A",
                  Relation = "owner",
                  Object = "project:X"
              },
    // Project X is shared with Organization B
       new() {
                  User = "organization:B",
                  Relation = "partner",
                  Object = "project:X"
              }
  },
};
var response = await fgaClient.Write(body, options);

```

```codeBlockLines_e6Vv
options = {
    "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientWriteRequest(
        writes=[\
                ClientTuple(\
                    # Anne has a `project manager` role at organization A\
                    user="user:anne",\
                    relation="project_manager",\
                    object="organization:A",\
                ),\
                ClientTuple(\
                    # Anne has a `project manager` role at organization B\
                    user="user:anne",\
                    relation="project_manager",\
                    object="organization:B",\
                ),\
                ClientTuple(\
                    # Anne has a `project manager` role at organization C\
                    user="user:anne",\
                    relation="project_manager",\
                    object="organization:C",\
                ),\
                ClientTuple(\
                    # Beth has a `project manager` role at organization B\
                    user="user:beth",\
                    relation="project_manager",\
                    object="organization:B",\
                ),\
                ClientTuple(\
                    # Carl has a `project manager` role at organization C\
                    user="user:carl",\
                    relation="project_manager",\
                    object="organization:C",\
                ),\
                ClientTuple(\
                    # Organization A owns Project X\
                    user="organization:A",\
                    relation="owner",\
                    object="project:X",\
                ),\
                ClientTuple(\
                    # Project X is shared with Organization B\
                    user="organization:B",\
                    relation="partner",\
                    object="project:X",\
                ),\
        ],
)

response = await fga_client.write(body, options)

```

```codeBlockLines_e6Vv
var options = new ClientWriteOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientWriteRequest()
        .writes(List.of(
                // Anne has a `project manager` role at organization A
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("project_manager")
                        ._object("organization:A"),
                // Anne has a `project manager` role at organization B
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("project_manager")
                        ._object("organization:B"),
                // Anne has a `project manager` role at organization C
                new ClientTupleKey()
                        .user("user:anne")
                        .relation("project_manager")
                        ._object("organization:C"),
                // Beth has a `project manager` role at organization B
                new ClientTupleKey()
                        .user("user:beth")
                        .relation("project_manager")
                        ._object("organization:B"),
                // Carl has a `project manager` role at organization C
                new ClientTupleKey()
                        .user("user:carl")
                        .relation("project_manager")
                        ._object("organization:C"),
                // Organization A owns Project X
                new ClientTupleKey()
                        .user("organization:A")
                        .relation("owner")
                        ._object("project:X"),
                // Project X is shared with Organization B
                new ClientTupleKey()
                        .user("organization:B")
                        .relation("partner")
                        ._object("project:X")
        ));

var response = fgaClient.write(body, options).get();

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/write \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"writes": { "tuple_keys" : [{"_description":"Anne has a `project manager` role at organization A","user":"user:anne","relation":"project_manager","object":"organization:A"},{"_description":"Anne has a `project manager` role at organization B","user":"user:anne","relation":"project_manager","object":"organization:B"},{"_description":"Anne has a `project manager` role at organization C","user":"user:anne","relation":"project_manager","object":"organization:C"},{"_description":"Beth has a `project manager` role at organization B","user":"user:beth","relation":"project_manager","object":"organization:B"},{"_description":"Carl has a `project manager` role at organization C","user":"user:carl","relation":"project_manager","object":"organization:C"},{"_description":"Organization A owns Project X","user":"organization:A","relation":"owner","object":"project:X"},{"_description":"Project X is shared with Organization B","user":"organization:B","relation":"partner","object":"project:X"}] }, "authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA"}'

```

```codeBlockLines_e6Vv
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne project_manager organization:A
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne project_manager organization:B
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne project_manager organization:C
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:beth project_manager organization:B
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:carl project_manager organization:C
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA organization:A owner project:X
fga tuple write --store-id=${FGA_STORE_ID} --model-id=01HVMMBCMGZNT3SED4Z17ECXCA organization:B partner project:X

```

```codeBlockLines_e6Vv
write([\
    // Anne has a `project manager` role at organization A\
    {\
      "user":"user:anne",\
      "relation":"project_manager",\
      "object":"organization:A"\
    },\
    // Anne has a `project manager` role at organization B\
    {\
      "user":"user:anne",\
      "relation":"project_manager",\
      "object":"organization:B"\
    },\
    // Anne has a `project manager` role at organization C\
    {\
      "user":"user:anne",\
      "relation":"project_manager",\
      "object":"organization:C"\
    },\
    // Beth has a `project manager` role at organization B\
    {\
      "user":"user:beth",\
      "relation":"project_manager",\
      "object":"organization:B"\
    },\
    // Carl has a `project manager` role at organization C\
    {\
      "user":"user:carl",\
      "relation":"project_manager",\
      "object":"organization:C"\
    },\
    // Organization A owns Project X\
    {\
      "user":"organization:A",\
      "relation":"owner",\
      "object":"project:X"\
    },\
    // Project X is shared with Organization B\
    {\
      "user":"organization:B",\
      "relation":"partner",\
      "object":"project:X"\
    }\
], authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA")

```

Warning

Contextual tuples:

- Are not persisted in the store.
- Are only supported on the [Check API endpoint](https://openfga.dev/api/service#Relationship%20Queries/Check) and [ListObjects API endpoint](https://openfga.dev/api/service#Relationship%20Queries/ListObjects). They are not supported on read, expand and other endpoints.
- If you are using the [Read Changes API endpoint](https://openfga.dev/api/service#Relationship%20Tuples/ReadChanges) to build a permission aware search index, note that it will not be trivial to take contextual tuples into account.

## Related Sections [​](https://openfga.dev/docs/modeling/organization-context-authorization\#related-sections "Direct link to Related Sections")

Check the following sections for more on how user groups can be used.

Modeling with Multiple Restrictions

Learn how to model requiring multiple relationships before users are authorized to perform certain actions.

- [More](https://openfga.dev/docs/modeling/multiple-restrictions)

Contextual and Time-Based Authorization

Learn how to authorize access that depends on dynamic or contextual criteria.

- [More](https://openfga.dev/docs/modeling/contextual-time-based-authorization)

OpenFGA Check API

Details on the Check API in the OpenFGA reference guide.

- [More](https://openfga.dev/api/service#Relationship%20Queries/Check)

- [Before You Start](https://openfga.dev/docs/modeling/organization-context-authorization#before-you-start)
  - [Concepts](https://openfga.dev/docs/modeling/organization-context-authorization#-concepts)
  - [Scenario](https://openfga.dev/docs/modeling/organization-context-authorization#scenario)
  - [Requirements](https://openfga.dev/docs/modeling/organization-context-authorization#requirements)
- [Step By Step](https://openfga.dev/docs/modeling/organization-context-authorization#step-by-step)
  - [Understand Relationships Without Contextual Data](https://openfga.dev/docs/modeling/organization-context-authorization#understand-relationships-without-contextual-data)
  - [Take Organization Context Into Consideration](https://openfga.dev/docs/modeling/organization-context-authorization#take-organization-context-into-consideration)
  - [Use Contextual Tuples For Context Related Checks](https://openfga.dev/docs/modeling/organization-context-authorization#use-contextual-tuples-for-context-related-checks)
- [Summary](https://openfga.dev/docs/modeling/organization-context-authorization#summary)
- [Related Sections](https://openfga.dev/docs/modeling/organization-context-authorization#related-sections)

## Search with Permissions
[Skip to main content](https://openfga.dev/docs/interacting/search-with-permissions#__docusaurus_skipToContent_fallback)

On this page

Once you implement fine-grained authorization to protect your resources, search becomes a more complex problem, because the user's access to each resource now has to be validated before the resource can be shown.

The search problem can then be summarized as:

> "Given a particular search filter and a sort order, what objects can the user access"?

The OpenFGA service does not store object metadata (names of files, creation dates, time of last update, etc), which means completing any search request by filtering and sorting according to certain criteria will require data from your database.

The services responsible for performing these actions are:

- Filter: Your database
- Sort: Your database
- Authorize: OpenFGA

To return the set of results that match the user's search query, you will need to get the intersection of the results from the services above.

## Possible options [​](https://openfga.dev/docs/interacting/search-with-permissions\#possible-options "Direct link to Possible options")

There are three possible ways to do this:

### Option 1: Search, then check [​](https://openfga.dev/docs/interacting/search-with-permissions\#option-1-search-then-check "Direct link to Option 1: Search, then check")

Pre-filter, then call OpenFGA Batch Check endpoint.

1. Filter and sort on your database.
2. Call [`/batch-check`](https://openfga.dev/docs/interacting/relationship-queries#batch-check) to check access for multiple objects in a single request.
3. Filter out objects the user does not have access to.
4. Return the filtered result to the user.

### Option 2: Build a local index from changes endpoint, search, then check [​](https://openfga.dev/docs/interacting/search-with-permissions\#option-2-build-a-local-index-from-changes-endpoint-search-then-check "Direct link to Option 2: Build a local index from changes endpoint, search, then check")

Consume the `GET /changes` endpoint to create a local index you can use to do an intersection on the two sets of results.

1. Call the [OpenFGA changes API](https://openfga.dev/api/service#Relationship%20Tuples/ReadChanges).
2. For the particular authorization model version(s) you are using in production, flatten/expand the changes (e.g. `user:anne, writer, doc:planning` becomes two tuples: `user:anne, writer, doc:planning` and `user:anne, reader, doc:planning`).
3. Build the intersection between the objects in your database and the flattened/expanded state you created.
4. You can then call `/check` on each resource in the resulting set before returning the response to filter out any resource with permissions revoked but whose authorization data has not made it into your index yet.

### Option 3: Build a list of IDs, then search [​](https://openfga.dev/docs/interacting/search-with-permissions\#option-3-build-a-list-of-ids-then-search "Direct link to Option 3: Build a list of IDs, then search")

Call the `GET /list-objects` API to get a list of object IDs the user has access to, then run the filter restricting by the object IDs returned.

1. Call the [OpenFGA List Objects API](https://openfga.dev/api/service#Relationship%20Queries/ListObjects). to get the list of all resources a user can access.
2. Pass in the set of object IDs to the database query to limit the search.
3. Return the filtered result to the user.

Be aware that the performance characteristics of the ListObjects endpoint vary drastically depending on the model complexity, number of tuples, and the relations it needs to evaluate. Relations with `and` or `but not` are more expensive to evaluate than relations with `or`.

## Choosing the best option [​](https://openfga.dev/docs/interacting/search-with-permissions\#choosing-the-best-option "Direct link to Choosing the best option")

Which option to choose among the three listed above depends on the following criteria:

1. Number of objects that your database can return from a search query
2. Number of objects of a certain type the user could have access to
3. Percentage of objects in a type the user could have access to

Consider the following scenarios:

**A.** The _number of objects a search query could return from the database_ is _low_.

**[Search then Check](https://openfga.dev/docs/interacting/search-with-permissions#option-1-search-then-check)** is the recommended solution.

Use-case: Situations where the search query can be optimized to return a small number of results.

**B.** The _number of objects of a certain type the user could have access to_ is _low_, and the _percentage of objects in a namespace a user could have access to_ is _high_.

**[Search then Check](https://openfga.dev/docs/interacting/search-with-permissions#option-1-search-then-check)** is recommended to get the final list of results.

Note that this use case, because the user has access to a low number of objects which are still a high percentage of the total objects in the system, that means that the total number of objects in the system is low.

**C.** The _number of objects of a certain type the user could have access to_ is _low_ (~ 1000), and the _percentage of the total objects that the user can have access to_ is also _low_.

In this case, using the `GET /list-objects` would make sense. You can query this API to get a list of object IDs and then pass these IDs to your filter function to limit the search to them.

As this number increases, this solution becomes impractical, because you would need to paginate over multiple pages to get the entire list before being able to search and sort. A partial list from the API is not enough, because you won't be able to sort using it.

So while **[List of IDs then Search](https://openfga.dev/docs/interacting/search-with-permissions#option-3-build-a-list-of-ids-then-search)** would be useful for this in some situations, we would recommend **[Local Index from Changes Endpoint, Search then Check](https://openfga.dev/docs/interacting/search-with-permissions#option-2-build-a-local-index-from-changes-endpoint-search-then-check)** for the cases when the number of objects is high enough.

**D.** The _number of objects of a certain type the user could have access to_ is _high_, and the _percentage of the total objects that the user can have access to_ is _low_.

The recommended option for this case is to use **[Local Index from Changes Endpoint, Search then Check](https://openfga.dev/docs/interacting/search-with-permissions#option-2-build-a-local-index-from-changes-endpoint-search-then-check)**.

- _List of IDs then Search_ would not work because you would have to get and paginate across thousands or tens of thousands (or in some cases more) of results from OpenFGA, only after you have retrieved the entire set can you start searching within your database for matching results. This would mean that your user could be waiting for a long time before they can start seeing results.

- _Search then Check_ would also not be ideal, as you will be retrieving and checking against a lot of items and discarding most of them.


Use case: Searching in Google Drive, where the list of documents and folders that a user has access to can be very high, but it still is a small percentage of the entire set of documents in Google Drive.

You can consider the following strategies to transform this scenario to a **type B** one:

- Duplicate logic from the authorization model when querying your database. For example, in a multi-tenant scenario, you can filter all resources based on the tenant the user is logged-in to. Duplicating logic from the authorization model is not ideal, but it can be a reasonable trade-off.

- Retrieve a higher-level resource ID list with lower cardinality for efficient filtering. For example, in a document management application, first obtain the list of accessible folders for the user. You can then filter documents by these folders in your database query. This approach increases the likelihood that the user can access the documents in those folders, optimizing the query’s effectiveness.


**E.** The _number of objects of a certain type the user could have access to_ is _high_, and the _percentage of the total objects that the user can have access to_ is also _high_.

In this case a **[Local Index from Changes Endpoint, Search then Check](https://openfga.dev/docs/interacting/search-with-permissions#option-2-build-a-local-index-from-changes-endpoint-search-then-check)** would be useful. If you do not want to maintain a local index, and if the user can access a high percentage of the total, meaning that the user is more likely than not to have access to the results returned by the search query, then **[Search then Check](https://openfga.dev/docs/interacting/search-with-permissions#option-1-search-then-check)** would work just as well.

Use-case: Searching on Twitter. Most Twitter users have their profiles set to public, so the user is more likely to have access to the tweets when performing a search. So searching first then running checks against the set of returned results would be appropriate.

## Summary [​](https://openfga.dev/docs/interacting/search-with-permissions\#summary "Direct link to Summary")

| Scenario | Use Case | \# of objects returned from database query | \# of objects user can access in a type | % of objects user can access in a type | Preferred Option |
| --- | --- | --- | --- | --- | --- |
| A | Search criteria enough to narrow down results | Low | - | - | [1](https://openfga.dev/docs/interacting/search-with-permissions#option-1-search-then-check) |
| B | Few objects the user has access to, but still a high % of total objects | Low | Low | High | [1](https://openfga.dev/docs/interacting/search-with-permissions#option-1-search-then-check) |
| C | Cannot narrow down search results, very high probability search returns objects user cannot access, total number of objects user can access is low enough to fit in a response | High | Low | Low | [3](https://openfga.dev/docs/interacting/search-with-permissions#option-3-build-a-list-of-ids-then-search) or [2](https://openfga.dev/docs/interacting/search-with-permissions#option-2-build-a-local-index-from-changes-endpoint-search-then-check) |
| D | Google Drive: User has access to a lot of documents, but low percentage from total | High | High | Low | [2](https://openfga.dev/docs/interacting/search-with-permissions#option-2-build-a-local-index-from-changes-endpoint-search-then-check) |
| E | Twitter Search: Most profiles are public, and the user can access them | High | High | High | [1](https://openfga.dev/docs/interacting/search-with-permissions#option-1-search-then-check) or [2](https://openfga.dev/docs/interacting/search-with-permissions#option-2-build-a-local-index-from-changes-endpoint-search-then-check) |

- [Possible options](https://openfga.dev/docs/interacting/search-with-permissions#possible-options)
  - [Option 1: Search, then check](https://openfga.dev/docs/interacting/search-with-permissions#option-1-search-then-check)
  - [Option 2: Build a local index from changes endpoint, search, then check](https://openfga.dev/docs/interacting/search-with-permissions#option-2-build-a-local-index-from-changes-endpoint-search-then-check)
  - [Option 3: Build a list of IDs, then search](https://openfga.dev/docs/interacting/search-with-permissions#option-3-build-a-list-of-ids-then-search)
- [Choosing the best option](https://openfga.dev/docs/interacting/search-with-permissions#choosing-the-best-option)
- [Summary](https://openfga.dev/docs/interacting/search-with-permissions#summary)

## OpenFGA Query Consistency
[Skip to main content](https://openfga.dev/blog/query-consistency-options-announcement#__docusaurus_skipToContent_fallback)

OpenFGA query APIs now allow specifying the desired consistency of query results. By default, OpenFGA does not use a cache. However, when caching is enabled, it applies to all requests. This means that any changes in permissions won't be reflected in authorization checks during the cache TTL period.

The community expressed the need for flexibility in using the cache on a per-request basis. In response, starting with [OpenFGA v1.5.7](https://github.com/openfga/openfga/releases/tag/v1.5.7), all query APIs can accept a consistency parameter with the following values:

| Name | Description |
| --- | --- |
| MINIMIZE\_LATENCY (default) | OpenFGA will try to minimize latency (e.g. by making use of the cache) |
| HIGHER\_CONSISTENCY | OpenFGA will try to optimize for stronger consistency (e.g. by bypassing cache) |

When `HIGHER_CONSISTENCY` is specified, OpenFGA reads directly from the database, even when the cache is enabled.

## How to use it? [​](https://openfga.dev/blog/query-consistency-options-announcement\#how-to-use-it "Direct link to How to use it?")

The new consistency parameter is available in OpenFGA starting [v1.5.7](https://github.com/openfga/openfga/releases/tag/v1.5.7).

The parameter is supported by all OpenFGA SDKs.

For more information on enabling the cache and best practices for specifying consistency values, refer to the [documentation](https://openfga.dev/docs/interacting/consistency).

## Custom database adapter implementations [​](https://openfga.dev/blog/query-consistency-options-announcement\#custom-database-adapter-implementations "Direct link to Custom database adapter implementations")

For those with a custom database adapter for a multi-region database, the behavior of the HIGHER\_CONSISTENCY parameter can be defined according to your needs. With an eventually consistent database (e.g., Dynamo DB) in a multi-region setup, there will be replication lag even if the cache is bypassed. If the database supports strong reads, you can choose to perform those at an extra cost. Otherwise, you can perform an eventually consistent read without providing full consistency semantics to the caller. In some other databases where you have Read/Write replicas, you may choose to go to the Write replica when the `HIGHER_CONSISTENCY` preference is selected.

## Future work [​](https://openfga.dev/blog/query-consistency-options-announcement\#future-work "Direct link to Future work")

[Google Zanzibar](https://zanzibar.academy/) features a consistency token called `Zookies`, returned from write operations. This token can be stored in a resource table and specified in subsequent query API calls. We are considering introducing a similar feature in future releases.

## We want your feedback! [​](https://openfga.dev/blog/query-consistency-options-announcement\#we-want-your-feedback "Direct link to We want your feedback!")

We want to learn how you use this API and how we can improve it!

Please reach out through our [community channels](https://openfga.dev/community) with any questions or feedback.

- [How to use it?](https://openfga.dev/blog/query-consistency-options-announcement#how-to-use-it)
- [Custom database adapter implementations](https://openfga.dev/blog/query-consistency-options-announcement#custom-database-adapter-implementations)
- [Future work](https://openfga.dev/blog/query-consistency-options-announcement#future-work)
- [We want your feedback!](https://openfga.dev/blog/query-consistency-options-announcement#we-want-your-feedback)

## OpenFGA November News
[Skip to main content](https://openfga.dev/blog/fine-grained-news-2024-11#__docusaurus_skipToContent_fallback)

Welcome to the November edition of Fine Grained News! As we enter the final stretch of 2024, there are exciting developments in the OpenFGA to share.

🌟 **We hit 3,000 stars on the OpenFGA repo!:** 🌟 Because of this great community, we've just this incredible milestone! Thank you so much for all the support you've shown this project. Let's keep the momentum going! If you haven't yet, we'd greatly appreciate you [starring the repo](https://github.com/openfga/openfga) to help push us toward 4,000 stars and grow our amazing community!

![Celebrating OpenFGA reaching 3,000 GitHub stars](https://openfga.dev/assets/images/fgn-2024-11-stars-d961d19917669492d95418e8f8ab7233.png)

## Just Shipped [​](https://openfga.dev/blog/fine-grained-news-2024-11\#just-shipped "Direct link to Just Shipped")

**v1.8.1:** This release focuses on performance and monitoring enhancements. It introduces two new flags for better control over check operations, optimizes performance for TTU relationships with set operations, and expands metrics tracking with duration measurements. Additionally, deduplication logic has been added to the `BatchCheck` API, along with new logging fields for authz calls. Read more in the [Read more in the Changelog...](https://github.com/openfga/openfga/releases/tag/v1.8.1)

For more about the new OPENFGA\_CHECK\_ITERATOR\_TTL and OPENFGA\_CHECK\_CACHE\_LIMIT flags, run `./openfga run --help`

**Batch Check API:** Introduced in v1.8.0, the `BatchCheck` API significantly reduces network latency by batching authorization checks in a single request. With v1.8.1, deduplication logic increasing its efficiency further. v1.8.0 also added support for Contextual Tuples in the `Expand` API, time-based filtering in the `ReadChanges` API, and additional performance improvements. [Read more in the Changelog](https://github.com/openfga/openfga/releases/tag/v1.8.0) or the [`BatchCheck` API docs](https://openfga.dev/docs/interacting/relationship-queries#batch-check).

## **Coming Up** [​](https://openfga.dev/blog/fine-grained-news-2024-11\#coming-up "Direct link to coming-up")

**SDK Updates:** We will be updating the SDKs next to take advantage of the new BatchCheck, starting with Python and JavaScript. If you want to see an SDK prioritized, let us know!

Check out our roadmap to see what we're working on. Feature requests and ideas can be shared in [GitHub Discussions](https://github.com/orgs/openfga/discussions).

## **Community Highlights** [​](https://openfga.dev/blog/fine-grained-news-2024-11\#community-highlights "Direct link to community-highlights")

**OpenFGA at KubeCon:** In November, [Andres Aguiar](https://www.linkedin.com/in/andresaguiar/) represented OpenFGA at KubeCon/CloudNativeCon. OpenFGA had a kiosk in the Project Pavilion, where Andres delivered a lightning talk and participated in _The Policy Engines Showdown_ with other authorization solution providers. [Watch the panel discussion...](https://www.youtube.com/watch?v=AVA32aYObRE)

![Andres Aguiar at OpenFGA&#39;s KubeCon booth](https://openfga.dev/assets/images/fgn-2024-11-kubecon1-85f27733b8385fd1339ec1c2e168741c.jpg)![Andres Aguiar participating in The Policy Engines Showdown](https://openfga.dev/assets/images/fgn-2024-11-kubecon2-10ef89f7b795d8b870ad8deca04926aa.jpg)

_Andres Aguiar representing OpenFGA at KubeCon_

**OpenFGA in Italy:** [Andrea Chiarelli](https://www.linkedin.com/in/andreachiarelli/) presented _Authorize in the Cloud with OpenFGA_ at Cloud Day 2024 in Milan.

![Andrea Chiarelli presenting OpenFGA in Milan](https://openfga.dev/assets/images/fgn-2024-11-andrea-chiarelli1-8b865d5915d209e4ba425ec08706268e.png)![Andrea Chiarelli during his talk at Cloud Day 2024](https://openfga.dev/assets/images/fgn-2024-11-andrea-chiarelli2-678faee102f1bf7a25d178f91f8bbc92.png)

_Andrea Chiarelli presenting at Cloud Day 2024_

**OpenFGA Offsite:** The team that works hard to bring you OpenFGA met in Chicago this November for a fun and productive offsite, diving deep into our vision, developer needs, and the roadmap ahead.

![OpenFGA team group photo in Chicago](https://openfga.dev/assets/images/fgn-2024-11-chicago-offsite-team-photo-eb4af67e361d204336a083503595de2f.png)

_The OpenFGA team in Chicago_

**New Modeling Demos Available!:** Learn how to model fine-grained authorization in OpenFGA's domain-specific language step-by-step with our [new demo video series](https://www.youtube.com/playlist?list=PLUR5l-oTFZqWaDdhEOVt_IfPOIbKo1Ypt)! Starting with the basics and gradually adding complexity, this playlist is your guide to mastering OpenFGA modeling.

**Monthly Community Meeting:** Join our in depth monthly community discussions every second Thursday at [11 AM Eastern Time (US)](https://www.worldtimebuddy.com/?qm=1&lid=12,100,5,8&h=5&sln=11-12&hf=1). Check out our [meeting details](https://github.com/openfga/community/blob/main/community-meetings.md#:~:text=OpenFGA%20Community%20Meetings) for more information.

November's highlights included:

- [Sebastian Döll](https://www.linkedin.com/in/katallaxie/) from ZEISS showcasing their Terraform/OpenFGA integration.
- [Justin Cohen](https://www.linkedin.com/in/justincoh/) demonstrating the new Batch Check functionality.

Can't make it? Catch up on our [latest recording](https://youtu.be/4MGF4rTzhbA?si=iGcoZTw8T99E0LKs) or browse previous sessions on our [YouTube channel](https://www.youtube.com/@OpenFGA).

**Blogs and Videos for AuthZ Fans:**

- Granting TTL based permissions in OpenFGA: Implement TTL-based permissions in OpenFGA for time-limited access control. [Read more on Medium...](https://medium.com/@shruti1810/granting-ttl-based-permissions-in-openfga-2ed2073931c3)

- Overcoming Security Challenges in Protecting Shared Generative AI Environments: Explore solutions for ensuring secure, scalable, and efficient multi-tenancy in generative AI environments. [Read more on Medium...](https://towardsdatascience.com/overcoming-security-challenges-in-protecting-shared-generative-ai-environments-1ffb27da1bde)

- Fine-Grained Authorization for Backstage using OpenFGA: Learn how OpenFGA enables dynamic fine-grained authorization in Backstage through ReBAC models and seamless policy updates. [See the webinar on YouTube...](https://www.youtube.com/watch?v=wWFbLPvwOyQ)


## **New Adopters** [​](https://openfga.dev/blog/fine-grained-news-2024-11\#new-adopters "Direct link to new-adopters")

- Are you using OpenFGA in production? Join our growing community of adopters! Add your company to our [ADOPTERS.md](https://github.com/openfga/community/blob/main/ADOPTERS.md#companiesprojects-using-openfga-in-production) file with a quick PR.

- Do you offer OpenFGA implementation services? Get listed in our [Implementation Services](https://github.com/openfga/community/blob/main/ADOPTERS.md#companies-offering-openfga-implementation-services) directory. Note: Listings are community-contributed and not officially endorsed by the OpenFGA project.


## **Announcements** [​](https://openfga.dev/blog/fine-grained-news-2024-11\#announcements "Direct link to announcements")

**OpenFGA Ranked #5 in CNCF Project Contributions!**
Thanks to our amazing community, OpenFGA soared to become the 5th most active CNCF project during Hacktoberfest in October! Your contributions made this possible, and hope to continue the engagement!

Ready to join our community of contributors? We have opportunities for every skill level:

- Start with our [Good First Issues](https://github.com/search?q=org%3Aopenfga+is%3Aopen+label%3A%22good+first+issue%22+&type=issues&s=created&o=desc) for beginner-friendly tasks.
- Take on more complex challenges in our [Issue queue](https://github.com/openfga/openfga/issues).
- Follow our [Contribution Guide](https://github.com/openfga/.github/blob/main/CONTRIBUTING.md) to get started.

![CNCF projects ranked by commits during Hacktoberfest](https://openfga.dev/assets/images/fgn-2024-11-open-fga-ranks-5th-3bc380d0478b8988d07beaeca665cca2.jpeg)

_CNCF Projects Ranked by Commits during Hacktoberfest_

**Follow OpenFGA on LinkedIn**
Connect with a growing community of fine-grained authorization enthusiasts and expand your professional network by following our new
[OpenFGA LinkedIn](http://linkedin.com/company/openfga) page!

![OpenFGA&#39;s LinkedIn page](https://openfga.dev/assets/images/fgn-2024-11-linkedin-9463378da14cb33d27b81eb8fb461a86.png)

## **See You Next Month:** [​](https://openfga.dev/blog/fine-grained-news-2024-11\#see-you-next-month "Direct link to see-you-next-month")

Fine Grained News is published every month. If you have any feedback, want to share your OpenFGA story, or have a noteworthy update, please let us know on any of our [community channels](https://openfga.dev/community) or at [community@openfga.dev](mailto:community@openfga.dev).

- [Just Shipped](https://openfga.dev/blog/fine-grained-news-2024-11#just-shipped)
- [**Coming Up**](https://openfga.dev/blog/fine-grained-news-2024-11#coming-up)
- [**Community Highlights**](https://openfga.dev/blog/fine-grained-news-2024-11#community-highlights)
- [**New Adopters**](https://openfga.dev/blog/fine-grained-news-2024-11#new-adopters)
- [**Announcements**](https://openfga.dev/blog/fine-grained-news-2024-11#announcements)
- [**See You Next Month:**](https://openfga.dev/blog/fine-grained-news-2024-11#see-you-next-month)

## OpenFGA October News
[Skip to main content](https://openfga.dev/blog/fine-grained-news-2024-10#__docusaurus_skipToContent_fallback)

Welcome to the October edition of Fine Grained News! As we approach the end of the year, we're excited to bring you the latest updates, improvements, and community contributions shaping the future of OpenFGA.

As always, if you’re finding the OpenFGA project to be a valuable resource, we would greatly appreciate if you would [star our repo](https://github.com/openfga/openfga) on GitHub to show your support!⭐

## Just Shipped [​](https://openfga.dev/blog/fine-grained-news-2024-10\#just-shipped "Direct link to Just Shipped")

- **OpenFGA v1.7.0:** In our latest release, we’ve introduced Access Control. This experimental feature allows you to control access to your OpenFGA server, and of course, we built it using OpenFGA! We’ve updated our Docs to show you [how to enable this feature](https://openfga.dev/docs/getting-started/setup-openfga/access-control); please share your feedback in the [GitHub Discussions](https://github.com/orgs/openfga/discussions/382)!

- This month, we’ve also added documentation of our [OpenFGA release process](https://github.com/openfga/openfga/pull/1923).

- We’ve [improved performance for checks involving nested tuple-to-userset relations](https://github.com/openfga/openfga/pull/2025). This is commonly used when implementing nested groups. Users can enable this with the experimental flag `enable-check-optimizations`.

- Following last month’s launch of OpenFGA SDK support for telemetry data using OpenTelemetry, we’ve also [updated our Docs](https://openfga.dev/docs/getting-started/configure-telemetry) to guide users through configuration to collect tracing data and metrics.


## In Progress [​](https://openfga.dev/blog/fine-grained-news-2024-10\#in-progress "Direct link to In Progress")

**Batch Check API Endpoint:** We’re close to releasing a [new feature](https://github.com/orgs/openfga/projects/1/views/1?pane=issue&itemId=28481432&issue=openfga%7Croadmap%7C35) to enable sending multiple check operations in a single network request.

Check out our roadmap to see what’s in the works. Feature requests and ideas can be shared in [GitHub Discussions](https://github.com/orgs/openfga/discussions).

## Community Highlights [​](https://openfga.dev/blog/fine-grained-news-2024-10\#community-highlights "Direct link to Community Highlights")

- **OpenFGA at Open Source Strategy Forum 2024:** [Kiah Imani](https://www.linkedin.com/in/kiah-tolliver/) presented “Role-Based Access Is So Yesterday: Revolutionizing Authorization with OpenFGA” at the OSSF 2024 earlier this month. The presentation is now [available in Youtube](https://www.youtube.com/watch?v=uHKeE4DAHpE)![Kiah Imani](https://openfga.dev/assets/images/fgn-2024-10-kiah-imani-eceac7fa9e3d3ea9257956280ed9007c.jpeg)

- **OpenFGA at KubeCon:** [Andres Aguiar](https://www.linkedin.com/in/aaguiar/) will participate in KubeCon/CloudNativeCon in November! OpenFGA will have a Kiosk in the Project Pavilion. He'll present a [lightning talk on OpenFGA](https://kccncna2024.sched.com/event/1iWA6/openfga-the-cloud-native-way-to-implement-fine-grained-authorization-project-lightning-talk) and participate in [The Policy Engines Showdown](https://kccncna2024.sched.com/event/1i7qp/the-policy-engines-showdown-gabriel-l-manor-permitio-andres-aguiar-okta-omri-gazitt-aserto-anders-eknert-styra-sarah-cecchetti-aws?iframe=no).

![Andres Aguiar](https://openfga.dev/assets/images/fgn-2024-10-andres-aguiar-68c2e8b22fedf6e908b5f6bb6ccbc920.jpg)

- **OpenFGA in Italy:** [Andrea Chiarelli](https://www.linkedin.com/in/andreachiarelli) will present [Authorize in the Cloud with OpenFGA](https://www.cloudday.it/e/sessione/3533/Autorizzare-nel-cloud-con-OpenFGA) at [Cloud Day 2024](https://www.cloudday.it/e/3486/Cloud-Day-2024) in Milan on November 20, 2024.

![Andrea Chiarelli](https://openfga.dev/assets/images/fgn-2024-10-andrea-chiarelli-c078f103fd5b28ef4dfff0b1245aae0e.jpeg)

- **New Demp Flask App Added:** To complement our OpenFGA examples and guides, we have published an [example app demonstrating the integration of OpenFGA](https://github.com/openfga/flask-demo). This app utilizes several FGA features to provide a multi-user system for folder and text file sharing. Thanks to @ [ryanpq](https://github.com/openfga/flask-demo/commits?author=ryanpq) for your contribution!

![Ryan Quinn](<Base64-Image-Removed>)

- **Monthly Community Meeting:** Join us for our monthly [Community Meetings](https://github.com/openfga/community/blob/main/community-meetings.md#:~:text=OpenFGA%20Community%20Meetings), held on the second Thursday of every month at [11 AM Eastern Time (US)](https://www.worldtimebuddy.com/?qm=1&lid=12,100,5,6,8&h=5&sln=11-12&hf=1). Our next meeting is on Thursday, November 14, 2024. Our community meetings are a great way to stay updated with the latest developments, ask questions, and engage with the OpenFGA community. If you can’t join the meetings live, our [latest month's video](https://youtu.be/LITUfwqpNIo?si=ze7dhGG46rhatWBN) will always be posted on our [YouTube channel](https://www.youtube.com/@OpenFGA)!

As always, we welcome community members to demo their use cases. If you want to demo your implementation of OpenFGA, please contact any of the OpenFGA team on our community channels linked below.


## New Adopters [​](https://openfga.dev/blog/fine-grained-news-2024-10\#new-adopters "Direct link to New Adopters")

- This month, we welcome [Gillion](https://www.gilion.com/) and [Flex](https://flex.team/) as OpenFGA adopters! If you or your company have implemented OpenFGA, we would love to hear about it! Please add your name as an adopter by updating the [ADOPTERS.md](https://github.com/openfga/community/blob/main/ADOPTERS.md#companiesprojects-using-openfga-in-production) file and sending us a PR.

- If you or your company provides implementation services for OpenFGA, we invite you to share your information with the community in our [Implementation Services](https://github.com/openfga/community/blob/main/ADOPTERS.md#companies-offering-openfga-implementation-services) section of the ADOPTERS.md file by sending us a PR! However, please note that the OpenFGA project has not evaluated or endorsed the individuals and companies listed, and inclusion does not imply endorsement.


## Announcements [​](https://openfga.dev/blog/fine-grained-news-2024-10\#announcements "Direct link to Announcements")

- **Hacktoberfest Highlights:** This Hacktoberfest, we welcomed 13 new contributors making their first commit to OpenFGA! Thanks to the incredible community participation, we saw a 28% increase in pull requests compared to September and a remarkable 260% increase in PRs on the SDK Generator. A huge thanks to this community for your continued participation and contributions!

- **OpenFGA Community Meeting Updates:** We are adding chapters to our [YouTube channel](https://www.youtube.com/@OpenFGA) videos to simplify content navigation. We’ve begun with the most recent videos and will add chapters as time goes on. We have also begun releasing [demos](https://www.youtube.com/playlist?list=PLUR5l-oTFZqXYaB3W_OEEsUhI4l8iLYNe) as individual videos for easier content consumption. You can catch this month’s demos on [Modular Authorization](https://www.youtube.com/watch?v=ws9BjricJu4) and [Client-Side Caching](https://www.youtube.com/watch?v=sst9PyvPHSk), with Materialize Integration coming soon!


## See you Next Month [​](https://openfga.dev/blog/fine-grained-news-2024-10\#see-you-next-month "Direct link to See you Next Month")

Fine Grained News is published every month. If you have any feedback, want to share your OpenFGA story, or have a noteworthy update, please let us know on any of our [community channels](https://openfga.dev/community) or at [community@openfga.dev](mailto:community@openfga.dev).

- [Just Shipped](https://openfga.dev/blog/fine-grained-news-2024-10#just-shipped)
- [In Progress](https://openfga.dev/blog/fine-grained-news-2024-10#in-progress)
- [Community Highlights](https://openfga.dev/blog/fine-grained-news-2024-10#community-highlights)
- [New Adopters](https://openfga.dev/blog/fine-grained-news-2024-10#new-adopters)
- [Announcements](https://openfga.dev/blog/fine-grained-news-2024-10#announcements)
- [See you Next Month](https://openfga.dev/blog/fine-grained-news-2024-10#see-you-next-month)

## Fine Grained News
[Skip to main content](https://openfga.dev/blog/fine-grained-news-2023-12#__docusaurus_skipToContent_fallback)

Hi Everyone!

We've been publishing a monthly internal newsletter we called **Fine Grained News** since the beginning on 2023, and we just thought it would be a good idea to share it with the community. Yeah, we are slow thinkers!

You can expect to find here a summary of what we've been up to, what we are planning to do, and some other random stuff we think you might find interesting.

## Team News [​](https://openfga.dev/blog/fine-grained-news-2023-12\#team-news "Direct link to Team News")

We always start our Monthly Community Meetings presenting the team. If you attended the last one, you've seen that the size of the team has grown quite a bit! We are pretty excited about the impact it will have in OpenFGA and the authorization space in general.

## Behavior Driven Development with OpenFGA [​](https://openfga.dev/blog/fine-grained-news-2023-12\#behavior-driven-development-with-openfga "Direct link to Behavior Driven Development with OpenFGA")

In our last Community Meeting, the [Agicap](https://agicap.com/en) team (Pauline and Yann) demoed how they are using OpenFGA to implement Behavior Driven Development (BDD) in their authorization system.

The screenshot below might be enough to understand what they are doing, but if you want to know more, you can watch the full presentation [here](https://youtu.be/xXhwPPcGRqE?t=765).

![bdd demo](https://openfga.dev/assets/images/fgn-2023-12-bdd-919c556a442e23bdac6643a34267ea70.png)

## GoDaddy & OpenFGA [​](https://openfga.dev/blog/fine-grained-news-2023-12\#godaddy--openfga "Direct link to GoDaddy & OpenFGA")

GoDaddy has been working with OpenFGA for a few months. They just published a document explaining why they picked OpenFGA, and how they used to address the authorization challenges they were facing.

Some interesting tidbits:

- They implemented their own DynamoDB Storage Adapter, as they were heavy Dynamo DB users and liked the eventual consistency model it provided.
- They needed [Contextual Tuples](https://docs.fga.dev/modeling/basics/contextual-time-based-authorization#use-contextual-tuples-for-context-related-checks) to fully support their use case.

Read the full article [here](https://www.godaddy.com/engineering/2023/12/12/authorization-oauth-openfga/).

## Canonical & OpenFGA [​](https://openfga.dev/blog/fine-grained-news-2023-12\#canonical--openfga "Direct link to Canonical & OpenFGA")

Canonical has also been working with OpenFGA for a while, and it's adding OpenFGA to different layers in their stack.

![OpenFGA at Canonical](https://openfga.dev/assets/images/fgn-2023-12-canonical-38a8b58970e46161957f5acb3ed43a46.png)

They just announced that OpenFGA support is included [in LXD](https://discourse.ubuntu.com/t/lxd-5-20-has-been-released/40865) and [MicroCloud](https://www.gamingdeputy.com/canonical-unveils-microcloud-a-toolkit-for-rapid-cluster-deployment/).

Pretty soon, if you are using Ubuntu Pro, you will be using OpenFGA :).

## OpenFGA v1.4! [​](https://openfga.dev/blog/fine-grained-news-2023-12\#openfga-v14 "Direct link to OpenFGA v1.4!")

Last week we released OpenFGA v1.4! This release includes our support for Conditional Relationship Tuples, which helps implementing additional Attribute-Based Access Control scenarios like temporal access, IP based access, bank transfer limits, SaaS application plans, and much more!

You can read more about it [here](https://openfga.dev/docs/modeling/conditions).

## SDK Improvements [​](https://openfga.dev/blog/fine-grained-news-2023-12\#sdk-improvements "Direct link to SDK Improvements")

- The [Java SDK](https://github.com/openfga/java-sdk) has now feature parity with the rest of the our SDKs. It can be used from any language for the Java VM. You can see examples on Kotlin, Groovy and Scala [here](https://github.com/booniepepper/openfga-java-sdk-preview/tree/core/src/main).

- The [Python SDK](https://github.com/openfga/python-sdk) was updated to support synchronous clients, support custom SSL certificates, and better performance in batch checks.


## Language Improvements [​](https://openfga.dev/blog/fine-grained-news-2023-12\#language-improvements "Direct link to Language Improvements")

We've been working on the OpenFGA language with some long-due improvements. Soon, you'll be able to use parentheses to group expressions when defining relations:

![DSL improvements](https://openfga.dev/assets/images/fgn-2023-12-language-8a3e7f852814fa536430c8e3f81e57f1.png)

The syntax is still not supported in the FGA CLI, but we are pretty close. Daniel demoed it in our latest community meeting, you can see the full demo [here](https://youtu.be/xXhwPPcGRqE?t=1313).

## VS Code Extension Improvements [​](https://openfga.dev/blog/fine-grained-news-2023-12\#vs-code-extension-improvements "Direct link to VS Code Extension Improvements")

We have also been improving tuple validation when writing `fga.yaml` files, and it's pretty cool! Works on Daniel's machine for now :).

![Tuple Validation Demo](https://openfga.dev/assets/images/fgn-2023-12-validation-b3df7ed681e938abf6f1d43c02423439.png)

Daniel also demoed it in our latest community meeting, watch it [here](https://youtu.be/xXhwPPcGRqE?t=1598).

## KubeCon EU 2024 [​](https://openfga.dev/blog/fine-grained-news-2023-12\#kubecon-eu-2024 "Direct link to KubeCon EU 2024")

We are getting ready for KubeCon Europe 2024, in Paris. We'll have a Project Kiosk, and we have submitted a few talks. We'll keep you posted!

## OpenFGA Community [​](https://openfga.dev/blog/fine-grained-news-2023-12\#openfga-community "Direct link to OpenFGA Community")

We have a very welcoming community, and we'd love to have you there! You can join us in different ways:

- Join our [community meetings](https://github.com/openfga/community/blob/main/community-meetings.md), the second Thursday of every month. All the recordings are [here](https://www.youtube.com/@OpenFGA).
- Join our [community channels](https://openfga.dev/community) in Slack or GitHub.
- Stay up to date by following us on [X](https://twitter.com/openfga).
- Ask questions, submit ideas, or just say hi in our [GitHub Discussions](https://github.com/orgs/openfga/discussions).

## See you next month! [​](https://openfga.dev/blog/fine-grained-news-2023-12\#see-you-next-month "Direct link to See you next month!")

We'll keep publishing our Fine Grained News each month, after the OpenFGA community meeting. If you have any feedback, you want to share your OpenFGA story, or know about something that you think is worth mentioning, please let us know!

- [Team News](https://openfga.dev/blog/fine-grained-news-2023-12#team-news)
- [Behavior Driven Development with OpenFGA](https://openfga.dev/blog/fine-grained-news-2023-12#behavior-driven-development-with-openfga)
- [GoDaddy & OpenFGA](https://openfga.dev/blog/fine-grained-news-2023-12#godaddy--openfga)
- [Canonical & OpenFGA](https://openfga.dev/blog/fine-grained-news-2023-12#canonical--openfga)
- [OpenFGA v1.4!](https://openfga.dev/blog/fine-grained-news-2023-12#openfga-v14)
- [SDK Improvements](https://openfga.dev/blog/fine-grained-news-2023-12#sdk-improvements)
- [Language Improvements](https://openfga.dev/blog/fine-grained-news-2023-12#language-improvements)
- [VS Code Extension Improvements](https://openfga.dev/blog/fine-grained-news-2023-12#vs-code-extension-improvements)
- [KubeCon EU 2024](https://openfga.dev/blog/fine-grained-news-2023-12#kubecon-eu-2024)
- [OpenFGA Community](https://openfga.dev/blog/fine-grained-news-2023-12#openfga-community)
- [See you next month!](https://openfga.dev/blog/fine-grained-news-2023-12#see-you-next-month)

## OpenFGA February 2025 News
[Skip to main content](https://openfga.dev/blog/fine-grained-news-2025-02#__docusaurus_skipToContent_fallback)

Welcome to the second Fine Grained News edition of 2025!

## Just Shipped! [​](https://openfga.dev/blog/fine-grained-news-2025-02\#just-shipped "Direct link to Just Shipped!")

- We shipped 3 minor versions of OpenFGA which include:
  - Fixes for [CVE-2025-25196](https://github.com/openfga/openfga/security/advisories/GHSA-g4v5-6f5p-m38j) and [CVE-2024-56323](https://github.com/openfga/openfga/security/advisories/GHSA-32q6-rr98-cjqv)

  - Several performance improvements that are enabled with the `enable-check-optimizations` experimental flag.

  - Dynamic TLS certificate reloading for HTTP and gRPC servers. Thanks [Rokibul Hasan](https://github.com/RokibulHasan7) for your contribution!

  - A `name` filter to ListStores. The name parameter instructs the API to only include results that match that name. Thanks [Karl Persson](https://github.com/kalleep) for your contribution!

  - Optimized database dialect handling by setting it during initialization instead of per-call, fixing SQL syntax errors in MySQL. Thanks [Siddhant Khare](https://github.com/Siddhant-K-code) for your contribution!

  - Support for Go 1.24. We follow Go's version support policy and will only support the latest two major versions of Go. Now that Go 1.24 is out, we have dropped support for Go < 1.23.
- Two minor versions of the [Java SDK](https://github.com/openfga/java-sdk), with support for server-side [BatchCheck](https://github.com/openfga/js-sdk?tab=readme-ov-file#batch-check). Thanks [Piotr Olaszewski](https://github.com/piotrooo) for your contribution!

- A minor release of the [Go SDK](https://github.com/openfga/go-sdk), with support for the `StartTime` parameter in the [ReadChanges method](https://github.com/openfga/go-sdk?tab=readme-ov-file#read-relationship-tuple-changes-watch) and support for specifying contextual tuples and context parameters in assertions.

- A minor release of the [FGA CLI](https://github.com/openfga/cli), with support for the `start-time` parameter for the `changes` command and importing assertions during `fga store import`. Thanks [Sujitha A V](https://github.com/sujitha-av) for your contribution!


## Using OpenFGA for GenAI and Retrieval Augmented Generation (RAG) [​](https://openfga.dev/blog/fine-grained-news-2025-02\#using-openfga-for-genai-and-retrieval-augmented-generation-rag "Direct link to Using OpenFGA for GenAI and Retrieval Augmented Generation (RAG)")

We are seeing a lot of interest in using OpenFGA for RAG scenarios and we wanted to share a list of interesting articles and repositories that were published lately:

- [RAG and Access Control: Where Do You Start?](https://auth0.com/blog/rag-and-access-control-where-do-you-start/)
- [Building a Secure RAG with Python, LangChain, and OpenFGA](https://auth0.com/blog/building-a-secure-rag-with-python-langchain-and-openfga/)
- [GenAI, LangChain.js, and FGA](https://auth0.com/blog/genai-langchain-js-fga/)
- [Building a Permissions System For Your RAG Application](https://www.useparagon.com/learn/ai-knowledge-chatbot-with-permissions-chapter-2/)
- [mdb-openfga: OpenFGA + MongoDB](https://github.com/ranfysvalle02/mdb-openfga)

## Learning OpenFGA [​](https://openfga.dev/blog/fine-grained-news-2025-02\#learning-openfga "Direct link to Learning OpenFGA")

We've been busy creating blog posts and videos that help you adopt OpenFGA, check them out!

- [OpenFGA: Modeling Guide](https://www.youtube.com/watch?v=5Lwy9aHXXHE&list=PLUR5l-oTFZqWaDdhEOVt_IfPOIbKo1Ypt)
- [OpenFGA: The Basics](https://www.youtube.com/watch?v=v1Io8TtB4bg&list=PLUR5l-oTFZqXGikFJolWJfP7zDK4GRYJ6)
- [OpenFGA for Python Flask Applications](https://auth0.com/blog/fine-grained-access-control-with-python-flask/)
- [How to Implement Relationship-Based Access Control (ReBAC) in a Ruby On Rails API?](https://auth0.com/blog/what-is-rebac-and-how-to-implement-rails-api/)
- [Securing data in your Next.js app with Okta and OpenFGA](https://vercel.com/blog/securing-data-in-your-next-js-app-with-okta-and-openfga)
- [OpenFGA for an Express + Typescript Node.js API](https://auth0.com/blog/express-typescript-fga/)
- [OpenFGA for Spring Boot Applications](https://auth0.com/blog/add-fga-to-spring-boot-api-with-openfga/)

## OpenFGA to CNCF Incubation [​](https://openfga.dev/blog/fine-grained-news-2025-02\#openfga-to-cncf-incubation "Direct link to OpenFGA to CNCF Incubation")

The [CNCF Technical Oversight Committee](https://www.cncf.io/people/technical-oversight-committee/) triaged OpenFGA's application to be accepted as an "Incubation" project, decided we had provided the appropriate information and references, and [moved the project to the next step](https://github.com/orgs/cncf/projects/27/views/9). We now need to wait for a TOC member to pick the project and do their due diligence.

Thanks to Canonical, Grafana, Docker, Read.AI, Agicap, Sourcegraph, Zuplo, and Stacklok for agreeing to be interviewed by the CNCF as reference adopters!

## OpenFGA in London [​](https://openfga.dev/blog/fine-grained-news-2025-02\#openfga-in-london "Direct link to OpenFGA in London")

OpenFGA will be present in two high-profile events in London:

- [Sam Bellen](https://www.linkedin.com/in/sambellen/) will participate in the [Gartner IAM EMEA event](https://www.gartner.com/en/conferences/emea/identity-access-management-uk) demoing [OpenFGA interoperability with the AuthZen standard](https://openid.net/authzen-at-gartner-iam/).

- [Poovamraj Thanganadar Thiagarajan](https://www.linkedin.com/in/poovamraj/) from Okta will be presenting at KubeCon Europe, together with [Jo Guerreiro](https://www.linkedin.com/in/jmlguerreiro/) from Grafana Labs about [From Chaos To Control: Migrating Access Control To OpenFGA in a Multi-Tenant World](https://kccnceu2025.sched.com/event/1txIJ/from-chaos-to-control-migrating-access-control-to-openfga-in-a-multi-tenant-world-jo-guerreiro-grafana-labs-poovamraj-thanganadar-thiagarajan-okta).

- [Andres Aguiar](https://www.linkedin.com/in/aaguiar/) from Okta was invited to present on the Maintainer's Summit at KubeCon Europe about our experiences collaborating with the CNCF TAG-Security team: [A Project Maintainers Guide To TAG Security](https://maintainersummiteu2025.sched.com/event/1tj8v/a-project-maintainers-guide-to-tag-security-marina-moore-edera-andres-aguiar-okta).


## **See You Next Month:** [​](https://openfga.dev/blog/fine-grained-news-2025-02\#see-you-next-month "Direct link to see-you-next-month")

Fine Grained News is published every month. If you have any feedback, want to share your OpenFGA story, or have a noteworthy update, please let us know on any of our [community channels](https://openfga.dev/community) or at [community@openfga.dev](mailto:community@openfga.dev).

- [Just Shipped!](https://openfga.dev/blog/fine-grained-news-2025-02#just-shipped)
- [Using OpenFGA for GenAI and Retrieval Augmented Generation (RAG)](https://openfga.dev/blog/fine-grained-news-2025-02#using-openfga-for-genai-and-retrieval-augmented-generation-rag)
- [Learning OpenFGA](https://openfga.dev/blog/fine-grained-news-2025-02#learning-openfga)
- [OpenFGA to CNCF Incubation](https://openfga.dev/blog/fine-grained-news-2025-02#openfga-to-cncf-incubation)
- [OpenFGA in London](https://openfga.dev/blog/fine-grained-news-2025-02#openfga-in-london)
- [**See You Next Month:**](https://openfga.dev/blog/fine-grained-news-2025-02#see-you-next-month)

## OpenFGA News 2025
[Skip to main content](https://openfga.dev/blog/fine-grained-news-2025-01#__docusaurus_skipToContent_fallback)

Welcome to the first Fine Grained News edition of 2025! January is always a good month to look back at what the OpenFGA community accomplished over the past year.

## Major faatures [​](https://openfga.dev/blog/fine-grained-news-2025-01\#major-faatures "Direct link to Major faatures")

Below is a list of the major features that were shipped in 2024:

- [Modular Models](https://openfga.dev/docs/modeling/modular-models)
- [Java Spring Boot Integration](https://github.com/openfga/spring-boot-starter)
- [JetBrains Integration](https://plugins.jetbrains.com/plugin/24394-openfga)
- [Telemetry in OpenFGA SDKs](https://openfga.dev/docs/getting-started/configure-telemetry)
- [ListUsers Endpoint](https://openfga.dev/docs/getting-started/perform-list-users)
- [Batch Check Endpoint](https://openfga.dev/docs/interacting/relationship-queries#batch-check)
- [Query Consistency Options](https://openfga.dev/docs/interacting/consistency)
- [Storage adapter for SQLite](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga#sqlite), contributed by [DanCech](https://github.com/DanCech) from Grafana Labs
- [Experimental Access Control for the OpenFGA server](https://openfga.dev/docs/getting-started/setup-openfga/access-control)

We heavily invested in OpenFGA performance, reducing latency by 90% in several cases. We'll continue improving performance in the following months.

## But that's not all! [​](https://openfga.dev/blog/fine-grained-news-2025-01\#but-thats-not-all "Direct link to But that's not all!")

We are very grateful with the OpenFGA community, who helped shipping **126** releases and improvements across the board:

- [OpenFGA Server](https://github.com/openfga/openfga): [23 releases](https://github.com/openfga/openfga). Thanks [kalleep](https://github.com/kalleep), [DanCech](https://github.com/DanCech), [golanglemonade](https://github.com/golanglemonade,) [tranngoclam](https://github.com/tranngoclam), [lalalalatt](https://github.com/lalalalatt), [Code2Life](https://github.com/Code2Life), [JAORMX](https://github.com/JAORMX), [Zach-Johnson](https://github.com/Zach-Johnson), [cmmoran](https://github.com/cmmoran), [00chorch](https://github.com/00chorch), [chenrui333](https://github.com/chenrui333), [le-yams](https://github.com/le-yams), [lekaf974](https://github.com/lekaf974), [raj-saxena](https://github.com/raj-saxena)!
- [Python SDK](https://github.com/openfga/go-sdkk): [16 Releases](https://github.com/openfga/go-sdk/releases). Thanks [Oscmage](https://github.com/Oscmage) [ovindu-a](https://github.com/ovindu-a), [GMorris-professional](https://github.com/GMorris-professional), [Divan009](https://github.com/Divan009)!
- [Go SDK](https://github.com/openfga/go-sdk): [10 releases](https://github.com/openfga/go-sdk/releases). Thanks [le-yams](https://github.com/le-yams), [le-yams](https://github.com/HeroicHorizon), [gurleensethi](https://github.com/gurleensethi), [gurleensethi](https://github.com/gurleensethi), [wonyx](https://github.com/wonyx), [Code2Life](https://github.com/Code2Life), [Kryvchun](https://github.com/Kryvchun)!
- [Java SDK](https://github.com/openfga/java-sdk): [10 releases](https://github.com/openfga/java-sdk/releases). Thanks [le-yams](https://github.com/le-yams), [paulosuzart](https://github.com/paulosuzart) and [Didier-SimpleCommeDev](https://github.com/Didier-SimpleCommeDev)!
- [JS SDK](https://github.com/openfga/js-sdk): [13 releases](https://github.com/openfga/js-sdk/releases). Thanks [sccalabr](https://github.com/sccalabr), [Siddhant-K-code](https://github.com/Siddhant-K-code), [vil02](https://github.com/vil02), [Waheedsys](https://github.com/Waheedsys), [tmsagarofficial](https://github.com/tmsagarofficial)!
- [.NET SDK](https://github.com/openfga/dotnet-sdk): [5 releases](https://github.com/openfga/dotnet-sdk/releases).
- [Spring Boot](https://github.com/openfga/spring-boot-starter): [2 releases](https://github.com/openfga/spring-boot-starter/releases). Thanks [eddumelendez](https://github.com/eddumelendez) and [dheid](https://github.com/dheid)!
- [Helm Chart](https://github.com/openfga/helm-charts): [31 releases](https://github.com/openfga/helm-charts). Thanks
[jliedy](https://github.com/jliedy), [aaronschweig](https://github.com/aaronschweig), [bagnaram](https://github.com/bagnaram), [vil02](https://github.com/vil02), [jagregory](https://github.com/jagregory) [danielloader](https://github.com/danielloader), [wenzel-felix](https://github.com/wenzel-felix%5D), [aballet](https://github.com/aballet), [tamalsaha](https://github.com/tamalsaha), [Oscmage](https://github.com/Oscmage), [rorynickolls-skyral](https://github.com/rorynickolls-skyral),
[juusujanar](https://github.com/juusujanar), [cstruck](https://github.com/cstruck), [almeynman](https://github.com/almeynman), [JAORMX](https://github.com/JAORMX)!
- [openfga.dev](https://github.com/openfga/openfga.dev): Our website received contributions from [Siddhant-K-code](https://github.com/Siddhant-K-code), [tazarov](https://github.com/tazarov), [sarthak-kumar-shailendra](https://github.com/sarthak-kumar-shailendra), [nimakarimi97](https://github.com/nimakarimi97), [soura-b](https://github.com/soura-ba), [asenawritescode](https://github.com/asenawritescode), [kwiky](https://github.com/kwiky), [lupeterm](https://github.com/lupeterm), [RobertKielty](https://github.com/RobertKielty), [t3hmrman](https://github.com/t3hmrman), [mwangersjo](https://github.com/mwangersjo), [josxha](https://github.com/josxha), [tbcvl](https://github.com/tbcvl), [sujitha-av](https://github.com/sujitha-av), [jamct](https://github.com/jamct), [lhchingit](https://github.com/lhchingit), [DanCech](https://github.com/DanCech). Thanks to everyone!
- [Visual Studio Code Extension](https://github.com/openfga/vscode-ext): [11 releases](https://github.com/openfga/vscode-ext/releases). Thanks [solon](https://github.com/solon)!
- [IntelliJ Plugin](https://github.com/openfga/intellij-plugin): [5 releases](https://github.com/openfga/intellij-plugin/releases). Thanks [le-yams](https://github.com/le-yams) and [edlundin](https://github.com/edlundin)!

## More community accomplishments [​](https://openfga.dev/blog/fine-grained-news-2025-01\#more-community-accomplishments "Direct link to More community accomplishments")

- [OpenFGA](https://github.com/openfga/openfga) repository’s stars increased 70%, crossing the 3k mark.
- [External contributors](https://github.com/openfga/openfga/graphs/contributors) to the OpenFGA repository doubled.
- There are [more than 140 repositories](https://github.com/search?q=openfga&type=repositories) in Github that have ‘openfga’ in its name or description and are not maintained by the OpenFGA team.
- We onboarded [Grafana Labs](https://grafana.com/) as a new maintainer for the OpenFGA project.
- We just launched a [LinkedIn Page](https://www.linkedin.com/company/openfga). We need more followers!
- There are [15 Production OpenFGA Models](https://github.com/openfga/sample-stores?tab=readme-ov-file#openfga-models-in-open-source-projects) in different projects in Github.
- We applied to CNCF Incubation in April 2024, [we are third in the line](https://github.com/orgs/cncf/projects/27/views/9) waiting for being evaluated.

## Future community presentations [​](https://openfga.dev/blog/fine-grained-news-2025-01\#future-community-presentations "Direct link to Future community presentations")

[Sam Bellen](https://www.linkedin.com/in/sambellen/) will present [Can’t Touch This!](https://jfokus.se/talks/1839), a talk about access control, including OpenFGA at JFokus Stockholm.

[Poovamraj Thanganadar Thiagarajan](https://www.linkedin.com/in/poovamraj/) from Okta will be presenting at KubeCon Europe, together with [Jo Guerreiro](https://www.linkedin.com/in/jmlguerreiro/) from Grafana Labs about [From Chaos To Control: Migrating Access Control To OpenFGA in a Multi-Tenant World](https://kccnceu2025.sched.com/event/1txIJ/from-chaos-to-control-migrating-access-control-to-openfga-in-a-multi-tenant-world-jo-guerreiro-grafana-labs-poovamraj-thanganadar-thiagarajan-okta).

[Andres Aguiar](https://www.linkedin.com/in/aaguiar/) from Okta was invited to present on the Maintainer’s Summit at KubeCon Europe aaout our experiences collaborating with the CNCF TAG-Security team: [A Project Maintainers Guide To TAG Security](https://maintainersummiteu2025.sched.com/event/1tj8v/a-project-maintainers-guide-to-tag-security-marina-moore-edera-andres-aguiar-okta).

[Mark Laing](https://www.linkedin.com/in/mark-laing/) from Canonical will present at FOSDEM about [Fine-grained access control in LXD with OpenFGA](https://fosdem.org/2025/schedule/event/fosdem-2025-6194-fine-grained-access-control-in-lxd-with-openfga/).

## **See You Next Month:** [​](https://openfga.dev/blog/fine-grained-news-2025-01\#see-you-next-month "Direct link to see-you-next-month")

Fine Grained News is published every month. If you have any feedback, want to share your OpenFGA story, or have a noteworthy update, please let us know on any of our [community channels](https://openfga.dev/community) or at [community@openfga.dev](mailto:community@openfga.dev).

- [Major faatures](https://openfga.dev/blog/fine-grained-news-2025-01#major-faatures)
- [But that's not all!](https://openfga.dev/blog/fine-grained-news-2025-01#but-thats-not-all)
- [More community accomplishments](https://openfga.dev/blog/fine-grained-news-2025-01#more-community-accomplishments)
- [Future community presentations](https://openfga.dev/blog/fine-grained-news-2025-01#future-community-presentations)
- [**See You Next Month:**](https://openfga.dev/blog/fine-grained-news-2025-01#see-you-next-month)

## OpenFGA News March 2024
[Skip to main content](https://openfga.dev/blog/fine-grained-news-2024-03#__docusaurus_skipToContent_fallback)

Welcome to Fine Grained News, KubeCon Edition!

## KubeCon Europe 2024 was super-busy! [​](https://openfga.dev/blog/fine-grained-news-2024-03\#kubecon-europe-2024-was-super-busy "Direct link to KubeCon Europe 2024 was super-busy!")

You can now watch online:

- An AppDeveloperCon session about [Implementing Modern Cloud Native Authorization Using OpenFGA](https://www.youtube.com/watch?v=5NkJHeToEwo) where [Pauline Jamin](https://github.com/paulinejamin) and [Andres Aguiar](https://github.com/aaguiarz) go over how OpenFGA is helping Agicap to implement fine-grained authorization.

- A 7-min Lightning Talk about [OpenFGA: The Cloud Native way to implement Fine Grained Authorization](https://www.youtube.com/watch?v=K7Me3OjFxJ0).

- [Jonathan Whitaker](https://www.linkedin.com/in/jonathan-whitaker-5a8b2484/)'s talk about [Federated IAM for Kubernetes with OpenFGA](https://www.youtube.com/watch?v=UaK1EnRgrng), demoing how to use OpenFGA and KeyCloak to implement fine-grained authorization in a Kubernetes cluster, in ways it's not possible today, like giving access to a user for 90 seconds.

- We also participated in [Canonical's Operator Day](https://app.myonvent.com/event/operator-day) sharing how Canonical is using OpenFGA, but the presentation is not online yet.


Also, thanks to everyone who stopped by the OpenFGA Kiosk in the Project Pavilion to share their feedback about the project or learn more about it!

## CNCF incubation [​](https://openfga.dev/blog/fine-grained-news-2024-03\#cncf-incubation "Direct link to CNCF incubation")

As you may know, the CNCF has three stages for projects: Sandbox, Incubation, and Graduation. OpenFGA is currently a Sandbox project.

We are very happy to announce that we just [applied for Incubation](https://github.com/cncf/toc/pull/1276)! We are excited about this step and will keep you posted on the progress.

## New Adopters [​](https://openfga.dev/blog/fine-grained-news-2024-03\#new-adopters "Direct link to New Adopters")

The OpenFGA community [maintains a list](https://github.com/openfga/community/blob/main/ADOPTERS.md) of products/projects/companies that are using OpenFGA in production. We'd like to thank thank the following adopters for adding themselves to the list in the last month:

- [Instill AI](https://www.instill.tech/)
- [Zuplo](https://zuplo.com/)
- [OpenObserve](https://openobserve.ai/)
- [Datum](https://datum.net/)

If you are using OpenFGA in production, please consider adding your company/project to the list.

## Community News [​](https://openfga.dev/blog/fine-grained-news-2024-03\#community-news "Direct link to Community News")

- [Raghd Hamzeh](https://github.com/rhamzeh/) represented OpenFGA in an [episode on Authorizing Access](https://www.youtube.com/watch?v=VyHbFwfrf04) within a series called "You Choose - Choose Your Own Adventure: The Treacherous Trek to Security”. This episode was comparing OpenFGA with Hexa and Paralus. OpenFGA was the project viewers voted for as most interested in being featured in a demo.

- [Sam Bellen](https://github.com/Sambego) published a [Google Drive example](https://github.com/Sambego/fga-drive-example/) using OpenFGA. It's a Next.js project, written in TypeScript and ready to deploy on Vercel.

- [Philipp Wagner](https://github.com/bytefish) is working on a [.NET example](https://github.com/bytefish/gitclub-dotnet) inspired by the Github model.

- [Pauline Jamin](https://github.com/paulinejamin) and [Geoffroy Braun](https://github.com/geoffroybraun) will present about [Infuser du métier dans les autorisations avec ReBAC](https://www.devoxx.fr/schedule/talk/?id=42356) at [Devoxx France 2024](https://www.devoxx.fr/) in April 17th.


## New Releases [​](https://openfga.dev/blog/fine-grained-news-2024-03\#new-releases "Direct link to New Releases")

We just shipped a [release candidate of Modular Models](https://openfga.dev/blog/modular-models-announcement), that makes it easy for multiple teams to collaborate in a single OpenFGA model. It requires the following components:

- [OpenFGA v.1.5.1](https://github.com/openfga/js-sdk/releases/tag/v0.3.5)
- [CLI v0.3.0](https://github.com/openfga/cli/releases/tag/v0.3.0)
- [Visual Studio Code Extension v0.2.20](https://github.com/openfga/vscode-ext/releases/tag/v0.2.20)

We also shipped new version of our SDKs with several fixes:

- [Javascript SDK 0.3.5](https://github.com/openfga/js-sdk/releases/tag/v0.3.5).
- [Go SDK v0.3.5](https://github.com/openfga/go-sdk/releases/tag/v0.3.5)
- [Java SDK v0.4.0](https://github.com/openfga/java-sdk/releases/tag/v0.4.0)

## Transitioning from Discord to CNCF's Slack [​](https://openfga.dev/blog/fine-grained-news-2024-03\#transitioning-from-discord-to-cncfs-slack "Direct link to Transitioning from Discord to CNCF's Slack")

As we mentioned in the last edition, we transitioned out from Discord for OpenFGA and are now using the CNCF [#openfga Slack channel](https://cloud-native.slack.com/archives/C06G1NNH47N). If you are not part of the CNCF Slack workspace, you need to join the [CNCF Slack](https://slack.cncf.io/) first.

## See you next month! [​](https://openfga.dev/blog/fine-grained-news-2024-03\#see-you-next-month "Direct link to See you next month!")

Fine Grained News are published every month. If you have any feedback, want to share your OpenFGA story, or know about something that you think is worth mentioning, please let us know!

- [KubeCon Europe 2024 was super-busy!](https://openfga.dev/blog/fine-grained-news-2024-03#kubecon-europe-2024-was-super-busy)
- [CNCF incubation](https://openfga.dev/blog/fine-grained-news-2024-03#cncf-incubation)
- [New Adopters](https://openfga.dev/blog/fine-grained-news-2024-03#new-adopters)
- [Community News](https://openfga.dev/blog/fine-grained-news-2024-03#community-news)
- [New Releases](https://openfga.dev/blog/fine-grained-news-2024-03#new-releases)
- [Transitioning from Discord to CNCF's Slack](https://openfga.dev/blog/fine-grained-news-2024-03#transitioning-from-discord-to-cncfs-slack)
- [See you next month!](https://openfga.dev/blog/fine-grained-news-2024-03#see-you-next-month)

## Concentric Relationships Guide
[Skip to main content](https://openfga.dev/docs/modeling/building-blocks/concentric-relationships#__docusaurus_skipToContent_fallback)

On this page

In this short guide, you'll learn how to represent a concentric [relationships](https://openfga.dev/docs/concepts#what-is-a-relationship).

For example, if you want to have all editors of a document also be viewers of said document.

When to use

Concentric relations make the most sense when your domain logic has nested relations, where one having relation implies having another relation.

For example:

- all `editors` are `viewers`
- all `managers` are `members`
- all `device_managers` are `device_renamers`

This allows you to only create a single _relationship tuple_ rather than creating n _relationship tuples_ for each relation.

## Before You Start [​](https://openfga.dev/docs/modeling/building-blocks/concentric-relationships\#before-you-start "Direct link to Before You Start")

To better understand this guide, you should be familiar with some [OpenFGA Concepts](https://openfga.dev/docs/concepts) and know how to develop the things listed below.

You will start with the _[authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model)_ below, it represents a `document` _[type](https://openfga.dev/docs/concepts#what-is-a-type)_ that can have users **[related](https://openfga.dev/docs/concepts#what-is-a-relation)** as `editor` and `viewer`.

Let us also assume that we have a `document` called "meeting\_notes.doc" and bob is assigned as editor to this document.

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define viewer: [user]
    define editor: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "document",\
      "relations": {\
        "viewer": {\
          "this": {}\
        },\
        "editor": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "editor": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

The current state of the system is represented by the following relationship tuples being in the system already:

```codeBlockLines_e6Vv
[{\
  "user": "user:bob",\
  "relation": "editor",\
  "object": "document:meeting_notes.doc"\
}]

```

* * *

In addition, you will need to know the following:

### Modeling User Groups [​](https://openfga.dev/docs/modeling/building-blocks/concentric-relationships\#modeling-user-groups "Direct link to Modeling User Groups")

You need to know how to add users to groups and grant groups access to resources. [Learn more →](https://openfga.dev/docs/modeling/user-groups)

### OpenFGA concepts [​](https://openfga.dev/docs/modeling/building-blocks/concentric-relationships\#-concepts "Direct link to -concepts")

- A [Type](https://openfga.dev/docs/concepts#what-is-a-type): a class of objects that have similar characteristics
- A [User](https://openfga.dev/docs/concepts#what-is-a-user): an entity in the system that can be related to an object
- A [Relation](https://openfga.dev/docs/concepts#what-is-a-relation): is a string defined in the type definition of an authorization model that defines the possibility of a relationship between an object of the same type as the type definition and a user in the system
- An [Object](https://openfga.dev/docs/concepts#what-is-an-object): represents an entity in the system. Users' relationships to it can be define through relationship tuples and the authorization model
- A [Relationship Tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple): a grouping consisting of a user, a relation and an object stored in OpenFGA

## Step by step [​](https://openfga.dev/docs/modeling/building-blocks/concentric-relationships\#step-by-step "Direct link to Step by step")

With the current type definition, there isn't a way to indicate that all `editors` of a certain `document` are also automatically `viewers` of that document. So for a certain user, in order to indicate that they can both `edit` and `view` a certain `document`, two _[relationship tuples](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple)_ need to be created (one for `editor`, and another for `viewer`).

### 01\. Modify our model to imply editor as viewer [​](https://openfga.dev/docs/modeling/building-blocks/concentric-relationships\#01-modify-our-model-to-imply-editor-as-viewer "Direct link to 01. Modify our model to imply editor as viewer")

Instead of creating two _relationship tuples_, we can leverage concentric relationships by defining editors are viewers.

Our authorization model becomes the following:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define viewer: [user] or editor
    define editor: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "document",\
      "relations": {\
        "viewer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "editor"\
                }\
              }\
            ]\
          }\
        },\
        "editor": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          },\
          "editor": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

info

`viewer` of a `document` are any of:

1. users that are directly assigned as `viewer`
2. users that have `editor` of the document

With this authorization model change, having an `editor` relationship with a certain document implies having a `viewer` relationship with that same document.

### 02\. Check that editors are viewers [​](https://openfga.dev/docs/modeling/building-blocks/concentric-relationships\#02-check-that-editors-are-viewers "Direct link to 02. Check that editors are viewers")

Since we had a _relationship tuple_ that indicates that **bob** is an `editor` of **document:meeting\_notes.doc**, this means **bob** is now implicitly a `viewer` of **document:meeting\_notes.doc**.
If we now check: **is bob a viewer of document:meeting\_notes.doc?** we would get the following:

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:bob',
    relation: 'viewer',
    object: 'document:meeting_notes.doc',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:bob",
    Relation: "viewer",
    Object:   "document:meeting_notes.doc",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:bob",
    Relation = "viewer",
    Object = "document:meeting_notes.doc",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:bob",
    relation="viewer",
    object="document:meeting_notes.doc",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:bob")
        .relation("viewer")
        ._object("document:meeting_notes.doc");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:bob viewer document:meeting_notes.doc

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:bob","relation":"viewer","object":"document:meeting_notes.doc"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:bob", // check if the user `user:bob`
  relation = "viewer", // has an `viewer` relation
  object = "document:meeting_notes.doc", // with the object `document:meeting_notes.doc`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:bob related to document:meeting_notes.doc as viewer?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

Note

When creating relationship tuples for OpenFGA make sure to use unique ids for each object and user within your application domain. We're using first names and simple ids to just illustrate an easy-to-follow example.

## Related Sections [​](https://openfga.dev/docs/modeling/building-blocks/concentric-relationships\#related-sections "Direct link to Related Sections")

Check the following sections for more on how concentric relationships can be used.

Modeling Google Drive

See how to indicate that editors are commenters and viewers in Google Drive.

- [More](https://openfga.dev/docs/modeling/advanced/gdrive#01-individual-permissions)

Modeling GitHub

See how to indicate that repository admins are writers and readers in GitHub.

- [More](https://openfga.dev/docs/modeling/advanced/github#01-permissions-for-individuals-in-an-org)

- [Before You Start](https://openfga.dev/docs/modeling/building-blocks/concentric-relationships#before-you-start)
  - [Modeling User Groups](https://openfga.dev/docs/modeling/building-blocks/concentric-relationships#modeling-user-groups)
  - [concepts](https://openfga.dev/docs/modeling/building-blocks/concentric-relationships#-concepts)
- [Step by step](https://openfga.dev/docs/modeling/building-blocks/concentric-relationships#step-by-step)
  - [01\. Modify our model to imply editor as viewer](https://openfga.dev/docs/modeling/building-blocks/concentric-relationships#01-modify-our-model-to-imply-editor-as-viewer)
  - [02\. Check that editors are viewers](https://openfga.dev/docs/modeling/building-blocks/concentric-relationships#02-check-that-editors-are-viewers)
- [Related Sections](https://openfga.dev/docs/modeling/building-blocks/concentric-relationships#related-sections)

## OpenFGA August 2024 News
[Skip to main content](https://openfga.dev/blog/fine-grained-news-2024-08#__docusaurus_skipToContent_fallback)

Welcome to the August 2024 edition of Fine Grained News! We are excited to bring you the latest updates, features, and community highlights from OpenFGA.

## Just Shipped! [​](https://openfga.dev/blog/fine-grained-news-2024-08\#just-shipped "Direct link to Just Shipped!")

- **OpenFGA v1.6.0:** The [latest OpenFGA release](https://github.com/openfga/openfga/releases/tag/v1.6.0) enables support for [query consistency options](https://openfga.dev/docs/interacting/consistency) and includes additional performance enhancements.

- **Query Consistency Options in SDKs:** All OpenFGA SDKs now support specifying [a query consistency parameter](https://openfga.dev/docs/interacting/consistency) for OpenFGA query endpoints. Make sure to update to the latest versions of the SDKs and OpenFGA to take advantage of this feature.

- **Metrics Telemetry for SDKs:** We already supported OpenTelemetry metrics in the [Python](https://github.com/openfga/python-sdk/) and [Javascript](https://github.com/openfga/js-sdk/) SDKs. We’ve just added support in [the Java SDK](https://github.com/openfga/java-sdk/releases/tag/v0.6.1), and [the GO SDK](https://github.com/openfga/go-sdk/releases/v0.6.0).


## Security Advisory [​](https://openfga.dev/blog/fine-grained-news-2024-08\#security-advisory "Direct link to Security Advisory")

We recently addressed a security issue, identified as GHSA-3f6g-m4hr-59h8, that was present in OpenFGA v1.5.7 and v1.5.8. This issue has been fixed starting v1.5.9, and we strongly recommend all users update to the latest version to ensure their systems remain secure. For more details, please refer to the [security advisory](https://github.com/openfga/openfga/security/advisories/GHSA-3f6g-m4hr-59h8) on our GitHub page.

## In Progress [​](https://openfga.dev/blog/fine-grained-news-2024-08\#in-progress "Direct link to In Progress")

- [Support for OpenTelemetry tracing and logging](https://github.com/openfga/roadmap/issues/41)
- [Performance Improvements for OpenFGA queries](https://github.com/openfga/roadmap/issues/61)
- [Additional OpenFGA API Authorization Options](https://github.com/openfga/roadmap/issues/30)
- [SQLite Storage Adapter](https://github.com/openfga/roadmap/issues/56), thanks to [Grafana](https://grafana.com/) for the contribution!

Curious about what’s coming next for OpenFGA? Check out our [roadmap](https://github.com/orgs/openfga/projects/1/views/1) to see what’s in store. We also welcome your feature requests and ideas in [GitHub Discussions](https://github.com/orgs/openfga/discussions/categories/ideas).

## Community Highlights [​](https://openfga.dev/blog/fine-grained-news-2024-08\#community-highlights "Direct link to Community Highlights")

- **CNCF Security TAG:** This month, [Andrés Aguiar](https://www.linkedin.com/in/aaguiar/) presented OpenFGA to the [CNCF Security Technical Advisory Group (TAG)](https://tag-security.cncf.io/), where he discussed the project's current [status](https://github.com/cncf/tag-security/issues/1339) and showcased various use cases. You can see the presentation deck [here](https://docs.google.com/presentation/d/1-TFfvKPi3jJ-jO-bjsHb3Soj_kKcQCf4Y_UvST7z744/edit#slide=id.p). It’s a great way to see how OpenFGA is being utilized and what’s on the horizon for the project.
- **API Security: APISIX + OpenFGA:** Check out this [blog post](https://dev.to/kaankahraman/supercharging-api-security-apisix-with-openfga-45da) by Kaan Kahraman on enhancing API security by integrating [APISIX](https://apisix.apache.org/) with OpenFGA.

### Upcoming Events [​](https://openfga.dev/blog/fine-grained-news-2024-08\#upcoming-events "Direct link to Upcoming Events")

- **Join Us at Open Source Summit Europe 2024:** [José Carlos Chávez](https://www.linkedin.com/in/jcchavezs/) will present at Open Source Summit Europe 2024 in Vienna, Austria on September 16, 2024! He will discuss [Fine-Grained Policies: RBAC with OpenFGA](https://osseu2024.sched.com/event/1ej2u/fine-grained-policies-rbac-with-openfga-jose-carlos-chavez-okta). We look forward to seeing you there!
- **OpenFGA at Open Source Strategy Forum 2024:** [Kiah Imani](https://www.linkedin.com/in/kiah-tolliver/) will present [Role-Based Access Is So Yesterday: Revolutionizing Authorization with OpenFGA](https://sossfusion2024.sched.com/event/1hcQa?iframe=no) at OSSF on Wednesday, October 23, 2024. In this session, attendees will learn how OpenFGA addresses the limitations of RBAC, enhancing security, performance, and access management across various systems.
- We'll be participating of KubeCon / CloudNativeCon North America! OpenFGA will have a Kiosk in the Project Pavilion, we'll present a [lightning talk on OpenFGA](https://kccncna2024.sched.com/event/1iWA6/openfga-the-cloud-native-way-to-implement-fine-grained-authorization-project-lightning-talk) and participate in [The Policy Engines Showdown](https://kccncna2024.sched.com/event/1i7qp/the-policy-engines-showdown-gabriel-l-manor-permitio-andres-aguiar-okta-omri-gazitt-aserto-anders-eknert-styra-sarah-cecchetti-aws?iframe=no).

### New Adopters [​](https://openfga.dev/blog/fine-grained-news-2024-08\#new-adopters "Direct link to New Adopters")

We want to welcome [Patika Global Technology](https://patikaglobal.com/) as an OpenFGA adopter! If you're using OpenFGA in production, we encourage you to add your company or project to our [Adopters list](https://github.com/openfga/community/blob/main/ADOPTERS.md) by opening a PR. Please include a short description of your use case in your submission. If you’ve previously added your company or project to the adopter's list, we would appreciate you updating it to include a short description. Your contributions help the community, and we greatly appreciate your support!

### OpenFGA Service Providers [​](https://openfga.dev/blog/fine-grained-news-2024-08\#openfga-service-providers "Direct link to OpenFGA Service Providers")

We’ve added a new section within the Adopters list for those offering OpenFGA [implementation services](https://github.com/openfga/community/blob/main/ADOPTERS.md#companies-offering-openfga-implementation-services). If your organization wants help adopting OpenFGA, this resource can connect you with professionals specializing in our technology. If your company provides implementation services for OpenFGA, we invite you to add your details by sending us a PR! Please note that the listed companies have not been individually evaluated or endorsed by the OpenFGA project, and inclusion on the list does not imply endorsement.

### Announcements [​](https://openfga.dev/blog/fine-grained-news-2024-08\#announcements "Direct link to Announcements")

- **OpenFGA Joins Docker-Sponsored Open Source Program:** We’re excited to share that OpenFGA has been accepted into the Docker-Sponsored Open Source Program! This partnership allows us to distribute [our container image](https://hub.docker.com/r/openfga/openfga) more efficiently and securely, ensuring that our community can easily access and trust the latest versions of OpenFGA on Docker Hub with higher rate limits.
- **2024 Community Survey Participation:** A huge thank you to everyone who participated in the 2024 Community Survey! Your insights are invaluable in helping us shape the future of OpenFGA. We truly appreciate the time and thought you put into sharing your experiences and suggestions. Remember, we always welcome feedback across our [community channels](https://openfga.dev/community) — your input is what drives us forward.
- **Monthly Community Meeting:** Join us for our monthly Community Meetings, held on the second Thursday of every month at 11 AM Eastern Time (US). Our next meeting is on Thursday, September 12, 2024. These meetings are a fantastic opportunity to stay updated with the latest developments, ask questions, and engage with the OpenFGA community. You can find the link to the meeting invite [here](https://openfga.dev/docs/community#monthly-community-meetings). We look forward to seeing you there!

## See You Next Month! [​](https://openfga.dev/blog/fine-grained-news-2024-08\#see-you-next-month "Direct link to See You Next Month!")

Fine Grained News is published every month. Although we have transitioned from Discord to the CNCF Slack channel, we want to continue to hear from you! Whether you have questions or feedback or just want to connect with others using OpenFGA, our community channels are the best place to do so. You can reach us at:

- **CNCF Slack:** Join the conversation in the [#openfga](https://cloud-native.slack.com/archives/C06G1NNH47N) channel. Please note: If you are not currently part of the CNCF Slack channel, you will need to click [here](https://slack.cncf.io/) to join the channel first.
- **GitHub Discussions:** Share your feedback, ask questions, and engage with the community on [GitHub Discussions](https://github.com/orgs/openfga/discussions).
- **Twitter:** Follow us [@openfga](https://twitter.com/openfga) for updates and news.

Visit our [community page](https://openfga.dev/docs/community) for more details and to join these channels. We look forward to your contributions and conversations!

- [Just Shipped!](https://openfga.dev/blog/fine-grained-news-2024-08#just-shipped)
- [Security Advisory](https://openfga.dev/blog/fine-grained-news-2024-08#security-advisory)
- [In Progress](https://openfga.dev/blog/fine-grained-news-2024-08#in-progress)
- [Community Highlights](https://openfga.dev/blog/fine-grained-news-2024-08#community-highlights)
  - [Upcoming Events](https://openfga.dev/blog/fine-grained-news-2024-08#upcoming-events)
  - [New Adopters](https://openfga.dev/blog/fine-grained-news-2024-08#new-adopters)
  - [OpenFGA Service Providers](https://openfga.dev/blog/fine-grained-news-2024-08#openfga-service-providers)
  - [Announcements](https://openfga.dev/blog/fine-grained-news-2024-08#announcements)
- [See You Next Month!](https://openfga.dev/blog/fine-grained-news-2024-08#see-you-next-month)

## OpenFGA September Updates
[Skip to main content](https://openfga.dev/blog/fine-grained-news-2024-09#__docusaurus_skipToContent_fallback)

Welcome to the September edition of Fine Grained News! As we transition into the fall season, we’re excited to bring you the latest updates on the progress of OpenFGA.

## **Just Shipped** [​](https://openfga.dev/blog/fine-grained-news-2024-09\#just-shipped "Direct link to just-shipped")

- We shipped [OpenFGA v1.6.1](https://github.com/openfga/openfga/releases/tag/v1.6.1) with performance fixes, bug fixes, and a new SQLite storage adapter contributed by [Grafana](https://grafana.com/). Thanks [@DanCech](https://github.com/DanCech)!

- This month we released improved [OpenTelemetry metrics support](https://openfga.dev/docs/getting-started/configure-telemetry) for [.NET SDK](https://github.com/openfga/dotnet-sdk/releases), [Go SDK](https://github.com/openfga/go-sdk/releases/tag/v0.6.1), [Java SDK](https://github.com/openfga/java-sdk/releases/tag/v0.7.1), and [JavaScript SDK](https://github.com/openfga/js-sdk/releases/tag/v0.7.0).


## **In Progress** [​](https://openfga.dev/blog/fine-grained-news-2024-09\#in-progress "Direct link to in-progress")

- **Authorization for OpenFGA**: OpenFGA currently supports global pre-shared keys and OIDC for API authentication, but [we’re exploring more granular authorization options](https://github.com/openfga/roadmap/issues/30), such as store-specific credentials and varying permissions for stores, modules, and types.

- **Batch Check**: OpenFGA SDKs currently implement BatchCheck by issuing multiple parallel request to the OpenFGA server. We'll be implementing a [BatchCheck server endpoint](https://github.com/openfga/roadmap/issues/35) to improve performance and reduce network overhead.


Check out our [roadmap](https://github.com/orgs/openfga/projects/1/views/1) to see what’s in the works. Feature requests and ideas can be shared in [GitHub Discussions](https://github.com/orgs/openfga/discussions/categories/ideas).

## **Community Highlights** [​](https://openfga.dev/blog/fine-grained-news-2024-09\#community-highlights "Direct link to community-highlights")

- **OpenFGA at Open Source Summit Europe:** [José Carlos Chávez](https://www.linkedin.com/in/jcchavezs/) gave a talk on [RBAC with OpenFGA](https://osseu2024.sched.com/event/1ej2u/fine-grained-policies-rbac-with-openfga-jose-carlos-chavez-okta) at OSS Europe 2024 in Vienna, Austria this month. You can see the presentation deck [here](https://speakerdeck.com/jcchavezs/fine-grained-policies-rbac-with-openfga).
- **OpenFGA at Open Source Strategy Forum 2024:** [Kiah Imani](https://www.linkedin.com/in/kiah-tolliver/) will present [Role-Based Access Is So Yesterday: Revolutionizing Authorization with OpenFGA](https://sossfusion2024.sched.com/event/1hcQa?iframe=no) at OSSF on Wednesday, October 23, 2024. In this session, attendees will learn how OpenFGA addresses the limitations of RBAC, enhancing security, performance, and access management across various systems.
- **OpenFGA at KubeCon:** [Andres Aguiar](https://www.linkedin.com/in/aaguiar/) will participate in KubeCon/CloudNativeCon in November! OpenFGA will have a Kiosk in the Project Pavilion. He'll present a [lightning talk on OpenFGA](https://kccncna2024.sched.com/event/1iWA6/openfga-the-cloud-native-way-to-implement-fine-grained-authorization-project-lightning-talk) and participate in [The Policy Engines Showdown](https://kccncna2024.sched.com/event/1i7qp/the-policy-engines-showdown-gabriel-l-manor-permitio-andres-aguiar-okta-omri-gazitt-aserto-anders-eknert-styra-sarah-cecchetti-aws?iframe=no).
- We added new authorization model examples for [multi-tenant RBAC](https://github.com/openfga/sample-stores/tree/main/stores/multitenant-rbac) and how to define [ABAC policies using ReBAC](https://github.com/openfga/sample-stores/tree/main/stores/abac-with-rebac).
- **Guide to Building Auth Systems:** Level Up Coding offers a [comprehensive guide](https://levelup.gitconnected.com/complete-guide-to-building-authorization-systems-using-rbac-rebac-and-abac-0a2ce5311d25) to building authorization systems using RBAC, ReBAC, and ABAC models. The guide covers the differences between these approaches and when to use each.
- **High Marks for OpenFGA Policy Languages:** Trial Of Bits published a report comparing the security of the [Cedar, OPA, and OpenFGA policy languages](https://github.com/trailofbits/publications/blob/master/reports/Policy_Language_Security_Comparison_and_TM.pdf). OpenFGA was very well evaluated!
- **September Community Meeting:** Check out the [September Community Meeting](https://www.youtube.com/watch?v=p_ERXS8Dsu4&list=PLUR5l-oTFZqUneyHz-h4WzaJssgxBXdxB&index=18), which is posted on YouTube! In last month’s meeting, we reviewed recent updates, demos with [Envoy](https://github.com/openfga/openfga-envoy), an OpenFGA Kubernetes Operator, fine-grained access for OpenFGA, and reviewed the results of the 2024 Community Survey.

## **New Adopters** [​](https://openfga.dev/blog/fine-grained-news-2024-09\#new-adopters "Direct link to new-adopters")

- If you or your company have implemented OpenFGA, we would love to hear about it! Please add your name as yourself as an adopter by updating the [Adopters.md](https://github.com/openfga/community/blob/main/ADOPTERS.md#companiesprojects-using-openfga-in-production) file and send us a PR.
- If you or your company provides implementation services for OpenFGA, we invite you to share your information with the community in our [Implementation Services](https://github.com/openfga/community/blob/main/ADOPTERS.md#companies-offering-openfga-implementation-services) section of the Adopters.md file by sending us a PR! However, please note that the listed individuals and companies have not been evaluated or endorsed by the OpenFGA project, and inclusion on the list does not imply endorsement.

## **Announcements** [​](https://openfga.dev/blog/fine-grained-news-2024-09\#announcements "Direct link to announcements")

- **Hacktoberfest 2024:** [Hacktoberfest](https://hacktoberfest.com/) is a month long celebration of open source software which encourages new and experienced developers alike to contribute code to open source projects during the month of October. This makes October a great time to become an OpenFGA contributor! We have labeled a number of issues on GitHub with "Hacktoberfest" and "Good First Issue" labels making it easy to find a way to get involved and have your code included in OpenFGA.
- **Monthly Community Meeting:** Join us for our monthly Community Meetings, held on the second Thursday of every month at 11 AM Eastern Time (US). Our next meeting is on Thursday, October 10, 2024. Our community meetings are a great way to stay updated with the latest developments, ask questions, and engage with the OpenFGA community. If you would like to demo your implementation of OpenFGA, please reach out to us on any of our [community channels](https://openfga.dev/community) or at [community@openfga.dev](mailto:community@openfga.dev). You can find the link to the meeting invite [here](https://openfga.dev/docs/community#monthly-community-meetings). We look forward to seeing you there!

## **See You Next Month!** [​](https://openfga.dev/blog/fine-grained-news-2024-09\#see-you-next-month "Direct link to see-you-next-month")

Fine Grained News is published every month. If you have any feedback, want to share your OpenFGA story, or have a noteworthy update, please let us know on any of our [community channels](https://openfga.dev/community) or at [community@openfga.dev](mailto:community@openfga.dev).

- [**Just Shipped**](https://openfga.dev/blog/fine-grained-news-2024-09#just-shipped)
- [**In Progress**](https://openfga.dev/blog/fine-grained-news-2024-09#in-progress)
- [**Community Highlights**](https://openfga.dev/blog/fine-grained-news-2024-09#community-highlights)
- [**New Adopters**](https://openfga.dev/blog/fine-grained-news-2024-09#new-adopters)
- [**Announcements**](https://openfga.dev/blog/fine-grained-news-2024-09#announcements)
- [**See You Next Month!**](https://openfga.dev/blog/fine-grained-news-2024-09#see-you-next-month)

## OpenFGA News February 2024
[Skip to main content](https://openfga.dev/blog/fine-grained-news-2024-02#__docusaurus_skipToContent_fallback)

Welcome to the 3rd edition of Fine Grained News!

## KubeCon Europe 2024 is getting closer! [​](https://openfga.dev/blog/fine-grained-news-2024-02\#kubecon-europe-2024-is-getting-closer "Direct link to KubeCon Europe 2024 is getting closer!")

We'll be pretty busy during [KubeCon Europe 2024](https://events.linuxfoundation.org/kubecon-cloudnativecon-europe/):

- [Jonathan Whitaker](https://www.linkedin.com/in/jonathan-whitaker-5a8b2484/) from Okta will talk about [Federated IAM for Kubernetes with OpenFGA](https://kccnceu2024.sched.com/event/1YeQD)

- [Pauline Jamin](https://www.linkedin.com/in/paulinejamin/) from Agicap and [Andres Aguiar](https://www.linkedin.com/in/aaguiar/) from Okta will present on [Implementing Modern Cloud Native Authorization Using OpenFGA](https://colocatedeventseu2024.sched.com/event/1YFhM/implementing-modern-cloud-native-authorization-using-openfga-andres-aguiar-okta-pauline-jamin-agicap)

- OpenFGA will be present in [Canonical's Operator's day](https://app.myonvent.com/event/operator-day/), co-located at KubeCon EU. Andres Aguiar and Massimilano Gori from Canonical, will talk about how Canonical adopted OpenFGA for implementing authorization in [Juju](https://juju.is/).

- Andres Aguiar will also be delivering a Lightning Talk titled **OpenFGA - The Cloud Native way to implement Fine Grained Authorization** (link not available yet :) ).


We'll also have a kiosk in the CNCF Project Pavilion, so if you plan to attend let us know and we can schedule some time together!

## Documentation Improvements [​](https://openfga.dev/blog/fine-grained-news-2024-02\#documentation-improvements "Direct link to Documentation Improvements")

We keep improving our documentation, and added a few new documents that you might find interesting:

- Learn how to [use the FGA CLI](https://openfga.dev/docs/getting-started/cli) to perform every possible operation on OpenFGA and simplify most common workflows.

- Learn how you can [test FGA models](https://openfga.dev/docs/modeling/testing) as part of your development flow or CI/CD pipelines, without the need to run an OpenFGA server.

- Learn how you can include [identity token claims contextual tuples](https://openfga.dev/docs/modeling/token-claims-contextual-tuples) to model ABAC-like scenarios or simplify data integrations with OpenFGA.


## OpenFGA in the Java Ecosystem [​](https://openfga.dev/blog/fine-grained-news-2024-02\#openfga-in-the-java-ecosystem "Direct link to OpenFGA in the Java Ecosystem")

OpenFGA is getting bigger on the Java world! We are [working with the Spring Security team](https://github.com/spring-projects/spring-security/issues/14121) to build an Spring Security integration for OpenFGA. You can check the ideas we are exploring in [this repository](https://github.com/jimmyjames/fga-spring-examples).

Also, the Testcontainers team added [an OpenFGA integration for Java](https://java.testcontainers.org/modules/openfga/) to make it simple to write integration tests for applications using OpenFGA.

We'd love to hear your feedback!

## SDK Improvements [​](https://openfga.dev/blog/fine-grained-news-2024-02\#sdk-improvements "Direct link to SDK Improvements")

New releases with bug fixes and improvements:

- [Javascript SDK 0.3.3](https://github.com/openfga/js-sdk/releases/tag/v0.3.3).
- [Go SDK v0.3.5](https://github.com/openfga/go-sdk/releases/tag/v0.3.5)
- [Python SDK v0.4.1](https://github.com/openfga/python-sdk/releases/tag/v0.4.1)

## Modular Models [​](https://openfga.dev/blog/fine-grained-news-2024-02\#modular-models "Direct link to Modular Models")

We wrapped up the [RFC for Modular Models](https://github.com/openfga/rfcs/blob/main/20231212-modular-models.md), which will enable multiple teams to work on different parts of the model independently and we are now working on the implementation. We'd love feedback on the RFC.

Wait for a demo on our next [Community Meeting](https://github.com/openfga/community/blob/main/community-meetings.md)!

## Community News [​](https://openfga.dev/blog/fine-grained-news-2024-02\#community-news "Direct link to Community News")

- Learn [how stacklok is using OpenFGA](https://stacklok.com/blog/using-openfga-to-build-a-relationship-based-authorization-model-in-minder) to implement authorization in Minder, an open source project that makes it easier to apply and automate the enforcement of security checks and policies across multiple GitHub repositories.

- Check this [OpenFGA tutorial](https://www.albertcoronado.com/2024/02/08/tutorial-openfga/) by [Alberto Coronado](https://twitter.com/acoronadoc) (in Spanish!).

- [Raghd Hamzeh](https://www.linkedin.com/in/raghdhamzeh/) joined [Whitney Lee](https://twitter.com/wiggitywhitney) in an in-depth Tanzu ⚡️Enlightning [session](https://www.youtube.com/watch?v=yTgtAzhvC28) about OpenFGA.


## Transitioning from Discord to CNCF's Slack [​](https://openfga.dev/blog/fine-grained-news-2024-02\#transitioning-from-discord-to-cncfs-slack "Direct link to Transitioning from Discord to CNCF's Slack")

As you may know, we've been using Discord for the OpenFGA community. We’ll transition it to the CNCF [OpenFGA Slack channel](https://cloud-native.slack.com/archives/C06G1NNH47N). If you are not part of the CNCF Slack workspace, you need to join the [CNCF Slack](https://slack.cncf.io/) first.

## See you next month! [​](https://openfga.dev/blog/fine-grained-news-2024-02\#see-you-next-month "Direct link to See you next month!")

Fine Grained News are published every month, after the OpenFGA community meeting. If you have any feedback, you want to share your OpenFGA story, or know about something that you think is worth mentioning, please let us know!

- [KubeCon Europe 2024 is getting closer!](https://openfga.dev/blog/fine-grained-news-2024-02#kubecon-europe-2024-is-getting-closer)
- [Documentation Improvements](https://openfga.dev/blog/fine-grained-news-2024-02#documentation-improvements)
- [OpenFGA in the Java Ecosystem](https://openfga.dev/blog/fine-grained-news-2024-02#openfga-in-the-java-ecosystem)
- [SDK Improvements](https://openfga.dev/blog/fine-grained-news-2024-02#sdk-improvements)
- [Modular Models](https://openfga.dev/blog/fine-grained-news-2024-02#modular-models)
- [Community News](https://openfga.dev/blog/fine-grained-news-2024-02#community-news)
- [Transitioning from Discord to CNCF's Slack](https://openfga.dev/blog/fine-grained-news-2024-02#transitioning-from-discord-to-cncfs-slack)
- [See you next month!](https://openfga.dev/blog/fine-grained-news-2024-02#see-you-next-month)

## OpenFGA June 2024 News
[Skip to main content](https://openfga.dev/blog/fine-grained-news-2024-06#__docusaurus_skipToContent_fallback)

Welcome to Fine Grained News, June 2024 edition!

This is where we share what has been going on in the OpenFGA community during the last 30 days :).

## What are we working on? [​](https://openfga.dev/blog/fine-grained-news-2024-06\#what-are-we-working-on "Direct link to What are we working on?")

- We started adding [OpenTelemetry instrumentation](https://github.com/openfga/roadmap/issues/41) to our SDKs. We just shipped metrics support for Python and Javascript. We'll continue with tracing and logging, and we'll be adding support for Java, Go and .NET next.

- We are close to ship a first iteration to [add additional consistency options](https://github.com/orgs/openfga/projects/1?pane=issue&itemId=49635084) for OpenFGA.

- We are working with [Krishna Kumar](https://github.com/krishnakv) and [Eddie Knight](https://github.com/eddie-knight) from the CNCF Tag-Security team on a joint security assessment for OpenFGA. We are pretty close to wrapping it up! You can follow the progress in [this PR](https://github.com/cncf/tag-security/pull/1289).

- We'll be working on adding [authorization for OpenFGA APIs](https://github.com/openfga/roadmap/issues/30).

- We've identified a few areas where we can improve performance and we are actively working on them.


If you have any feedback, or want to try a feature early, or are interested to learn more, please reach out!

## New Adopters [​](https://openfga.dev/blog/fine-grained-news-2024-06\#new-adopters "Direct link to New Adopters")

We are thrilled to welcome [Sourcegraph](https://sourcegraph.com/) to the list of companies in our [Adopters list](https://github.com/openfga/community/blob/main/ADOPTERS.md)! We are proud to be addressing their fine-grained authorization needs.

If you are using OpenFGA in production, please consider adding your company/project to the [list](https://github.com/openfga/community/blob/main/ADOPTERS.md), it will be greatly appreciated!

## Community [​](https://openfga.dev/blog/fine-grained-news-2024-06\#community "Direct link to Community")

- [Zuplo](https://zuplo.com/) released an [OpenFGA Authorization Inbound Policy](https://zuplo.com/docs/policies/openfga-authz-inbound) that makes it super simple to add fine-grained authorization to your APIs. They are also using OpenFGA deployed globally in GCP for Zuplo itself. You can learn more about their OpenFGA integration journey [in this webinar](https://landing.zuplo.com/oktafgawebinarreg).

- [Martin Besozzi](https://github.com/embesozzi) built an [APISIX plugin for OpenFGA](https://github.com/embesozzi/apisix-authz-openfga). He also published a blog post about [Mastering Access Control: Implementing Low-Code Authorization Based on ReBAC and Decoupling Pattern](https://embesozzi.medium.com/mastering-access-control-implementing-low-code-authorization-based-on-rebac-and-decoupling-pattern-f6f54f70115e) demonstrating how to use it.

- [Andres Aguiar](https://github.com/aaguiarz) and [Damian Schenkelman](https://github.com/dschenkelman) will do an OpenFGA Deep Dive in the [July 17 episode of Identirati Office Hours](https://www.linkedin.com/feed/update/urn:li:activity:7211830083366322176/).


## OpenFGA @ CloudNative SecurityCon [​](https://openfga.dev/blog/fine-grained-news-2024-06\#openfga--cloudnative-securitycon "Direct link to OpenFGA @ CloudNative SecurityCon")

OpenFGA was present in [CloudNative SecurityCon North America](https://events.linuxfoundation.org/cloudnativesecuritycon-north-america/)!

[Maria Ines Parnisari](https://github.com/miparnisari) from the OpenFGA team and [Evan Anderson](https://github.com/evankanderson) from [Stacklok](https://stacklok.com/) presented on [Implementing a Multi-Tenant, Relationship-Based Authorization Model with OpenFGA](https://cloudnativesecurityconna24.sched.com/event/1dCVn/implementing-a-multi-tenant-relationship-based-authorization-model-with-openfga-evan-anderson-stacklok-maria-ines-parnisari-okta).

![CloudNative SecurityCon Presentation](https://openfga.dev/assets/images/fgn-2024-06-securitycon-talk-57abfc6e4e3f7e573481a2fdfe30692c.jpg)

We also got a last-minute kiosk to showcase OpenFGA at the event:

![OpenFGA Kiosk](https://openfga.dev/assets/images/fgn-2024-06-securitycon-booth-b547906de2fa364259b5ba8c112ba91c.png)

Thanks to everyone that stopped by!

## Latest Features [​](https://openfga.dev/blog/fine-grained-news-2024-06\#latest-features "Direct link to Latest Features")

In case you missed them, here are some of the latest major features we've added to OpenFGA:

- [List Users API](https://openfga.dev/blog/list-users-announcement) allows you to retrieve all the users that have a specific relation with a resource.

- [Modular Models](https://openfga.dev/blog/modular-models-announcement) makes it easy for multiple teams to collaborate on a single OpenFGA model.

- [JetBrain's IDEs plugin](https://plugins.jetbrains.com/plugin/24394-openfga) to allow syntax coloring and validation of OpenFGA models.

- [Conditional Tuples](https://openfga.dev/blog/conditional-tuples-announcement) allows you to define tuples that are only valid under certain conditions

- [Spring Boot Starter for OpenFGA](https://github.com/openfga/spring-boot-starter) simplifies integrating OpenFGA with Spring Security applications.


## Transitioning from Discord to CNCF's Slack [​](https://openfga.dev/blog/fine-grained-news-2024-06\#transitioning-from-discord-to-cncfs-slack "Direct link to Transitioning from Discord to CNCF's Slack")

As we mentioned before, we transitioned out from Discord for OpenFGA and are now using the CNCF [#openfga Slack channel](https://cloud-native.slack.com/archives/C06G1NNH47N). If you are not part of the CNCF Slack workspace, you need to join the [CNCF Slack](https://slack.cncf.io/) first.

Checkout [https://openfga.dev/community](https://openfga.dev/community) for all the places to find us.

## See you next month! [​](https://openfga.dev/blog/fine-grained-news-2024-06\#see-you-next-month "Direct link to See you next month!")

Fine Grained News are published every month. If you have any feedback, want to share your OpenFGA story, or know about something that you think is worth mentioning, please let us know!

- [What are we working on?](https://openfga.dev/blog/fine-grained-news-2024-06#what-are-we-working-on)
- [New Adopters](https://openfga.dev/blog/fine-grained-news-2024-06#new-adopters)
- [Community](https://openfga.dev/blog/fine-grained-news-2024-06#community)
- [OpenFGA @ CloudNative SecurityCon](https://openfga.dev/blog/fine-grained-news-2024-06#openfga--cloudnative-securitycon)
- [Latest Features](https://openfga.dev/blog/fine-grained-news-2024-06#latest-features)
- [Transitioning from Discord to CNCF's Slack](https://openfga.dev/blog/fine-grained-news-2024-06#transitioning-from-discord-to-cncfs-slack)
- [See you next month!](https://openfga.dev/blog/fine-grained-news-2024-06#see-you-next-month)

## OpenFGA July 2024 News
[Skip to main content](https://openfga.dev/blog/fine-grained-news-2024-07#__docusaurus_skipToContent_fallback)

Welcome to the July 2024 edition of Fine Grained News! We are thrilled to bring you the latest updates, features, and community highlights from OpenFGA. This month has included releases, performance improvements, and insights shared through our community meetings and presentations.

We value your feedback and invite you to participate in our [2024 OpenFGA Community Survey](https://www.surveymonkey.com/r/OPENFGA2024). Your insights help us understand your needs better and improve our offerings. Please take a few minutes to complete the survey and let your voice be heard.

## Improvements [​](https://openfga.dev/blog/fine-grained-news-2024-07\#improvements "Direct link to Improvements")

**Latest Features**

- We’ve introduced consistency options for query requests. This new, experimental, feature provides more flexibility and control over how queries are executed, enhancing the accuracy and reliability of query results. [Learn more about this update](https://openfga.dev/blog/query-consistency-options-announcement).

- We’re now publishing images to `ghcr.io/openfga/openfga` as an alternative to DockerHub, thanks to the contribution from [@JAORMX](https://github.com/JAORMX). This provides an additional option for accessing and deploying our containers. [Read more](https://github.com/openfga/openfga/pull/1775).


**Performance Improvements**

- We've improved our Check latency up to 20X in some scenarios in OpenFGA [v1.5.7](https://github.com/openfga/openfga/releases/tag/v1.5.7) and [v1.5.6](https://github.com/openfga/openfga/releases/tag/v1.5.6).

If you have any feedback, or want to try a feature early, or are interested to learn more, please reach out!

## Breaking Changes [​](https://openfga.dev/blog/fine-grained-news-2024-07\#breaking-changes "Direct link to Breaking Changes")

Several breaking changes related to the storage interface [have been introduced](https://github.com/openfga/openfga/releases/tag/v1.5.7). These changes should not impact your usage of OpenFGA unless you are implementing a custom storage adapter for OpenFGA.

## In Progress [​](https://openfga.dev/blog/fine-grained-news-2024-07\#in-progress "Direct link to In Progress")

- [Additional Consistency Options for OpenFGA queries](https://github.com/openfga/roadmap/issues/54): We've just shipped the first iteration of this feature, we're working on adding support for it in more SDKs. We’ll also be working on adding a consistency token in the future.

- [Telemetry for SDKs](https://github.com/openfga/roadmap/issues/41): We shipped OpenTelemetry Metrics support for Python and Javascript. We’ll be adding metrics support to the rest of the SDKs and then add support for tracing and logging. If you have feedback regarding our OpenTelemetry support, please do reach out on any of our community channels.

- We’ll keep working on [Performance Improvements](https://github.com/openfga/roadmap/issues/61) for Check, List Objects and List Users APIs.

- We’ll be adding additional [authorization options for OpenFGA](https://github.com/openfga/roadmap/issues/30) to restrict API credentials to performing specific actions in OpenFGA stores.

- We collaborated with members of the CNCF [TAG-Security team](https://github.com/cncf/tag-security) for a few weeks to get it wrapped up (thanks [Krishna Krishna](https://github.com/krishnakv) and [Eddie](https://github.com/eddie-knight) for your help).


## Community Highlights [​](https://openfga.dev/blog/fine-grained-news-2024-07\#community-highlights "Direct link to Community Highlights")

- Check out [July’s Community Meeting](https://www.youtube.com/watch?v=GvgeQcQlUuU&t=212s&pp=ygUHT3BlbkZHQQ%3D%3D)! It's a great opportunity to stay updated with the latest developments, ask questions, and engage with the OpenFGA community.

- [Maria Ines Parnisari](https://www.linkedin.com/in/miparnisari/) from the OpenFGA team and [Evan Anderson](https://www.linkedin.com/in/evankanderson/) from Stacklok presented on Implementing a Multi-Tenant, Relationship-Based Authorization Model with OpenFGA at CloudNative SecurityCon North America. If you didn’t attend the conference in June, the presentation recording is now [live](https://www.youtube.com/watch?v=zIJOBLbaZOc).

- This month, [Andres Aguiar](https://www.linkedin.com/in/aaguiar/) and [Damian Schenkelman](https://www.linkedin.com/in/damianschenkelman/) appeared in the [Identerati Office Hours](https://www.youtube.com/watch?v=Ups1FFxK3VE&pp=ygUHT3BlbkZHQQ%3D%3D) livestream for an in-depth exploration of OpenFGA. This video covers advanced topics and provides valuable insights into the capabilities and implementation of OpenFGA. Whether you're a seasoned user or new to OpenFGA, this deep dive is packed with information that will enhance your understanding and usage of the platform.

- Andres Aguiar sat down with Open at Intel host Katherine Druckman during KubeCon Europe to discuss OpenFGA. You can hear that podcast
[here](https://www.intel.com/content/www/us/en/developer/articles/community/fine-grained-authorization-with-openfga.html).


## New Adopters [​](https://openfga.dev/blog/fine-grained-news-2024-07\#new-adopters "Direct link to New Adopters")

We’re happy to share that [Bump](https://www.bump-charge.com/) is now an OpenFGA adopter! If you are using OpenFGA in production, please consider adding your company or project to our [list](https://github.com/openfga/community/blob/main/ADOPTERS.md). Your contribution will be greatly appreciated!

## Announcements [​](https://openfga.dev/blog/fine-grained-news-2024-07\#announcements "Direct link to Announcements")

Join us for our monthly Community Meetings, held on the second Thursday of every month at 11am Eastern Time (US). Our next meeting is on Thursday, August 8, 2024. These meetings are a fantastic opportunity to stay updated with the latest developments, ask questions, and engage with the OpenFGA community. You can find the link to the meeting invite [here](https://openfga.dev/docs/community#monthly-community-meetings). We look forward to seeing you there!

## Transitioning from Discord to CNCF's Slack [​](https://openfga.dev/blog/fine-grained-news-2024-07\#transitioning-from-discord-to-cncfs-slack "Direct link to Transitioning from Discord to CNCF's Slack")

As a reminder, we transitioned out from Discord for OpenFGA and are now using the CNCF [#openfga Slack channel](https://cloud-native.slack.com/archives/C06G1NNH47N). If you are not part of the CNCF Slack workspace, you need to join the [CNCF Slack](https://slack.cncf.io/) first.

## See You Next Month! [​](https://openfga.dev/blog/fine-grained-news-2024-07\#see-you-next-month "Direct link to See You Next Month!")

Fine Grained News is published every month. If you have any feedback, want to share your OpenFGA story, or have a noteworthy update, please let us know on any of our [community channels](https://openfga.dev/community) or at [community@openfga.dev](mailto:community@openfga.dev).

- [Improvements](https://openfga.dev/blog/fine-grained-news-2024-07#improvements)
- [Breaking Changes](https://openfga.dev/blog/fine-grained-news-2024-07#breaking-changes)
- [In Progress](https://openfga.dev/blog/fine-grained-news-2024-07#in-progress)
- [Community Highlights](https://openfga.dev/blog/fine-grained-news-2024-07#community-highlights)
- [New Adopters](https://openfga.dev/blog/fine-grained-news-2024-07#new-adopters)
- [Announcements](https://openfga.dev/blog/fine-grained-news-2024-07#announcements)
- [Transitioning from Discord to CNCF's Slack](https://openfga.dev/blog/fine-grained-news-2024-07#transitioning-from-discord-to-cncfs-slack)
- [See You Next Month!](https://openfga.dev/blog/fine-grained-news-2024-07#see-you-next-month)

## Direct Relationships Guide
[Skip to main content](https://openfga.dev/docs/modeling/building-blocks/direct-relationships#__docusaurus_skipToContent_fallback)

On this page

In this guide you'll learn how to model relationships that may or may not be assigned directly to individual users.

When to use

Disabling _direct relationships_ for a certain relation on an objects are useful especially in cases where you are trying to model some permissions that are not usually granted individually to a user.

This is useful when:

- For security reason, not permitting permissions assigned directly to individuals without associating roles

## Before you start [​](https://openfga.dev/docs/modeling/building-blocks/direct-relationships\#before-you-start "Direct link to Before you start")

To better understand this guide, you should be familiar with some [OpenFGA Concepts](https://openfga.dev/docs/concepts) and know how to develop the things listed below.

You will need to know the following:

- Direct Access
- OpenFGA Concepts

### Direct access [​](https://openfga.dev/docs/modeling/building-blocks/direct-relationships\#direct-access "Direct link to Direct access")

You need to know how to create an authorization model and create a relationship tuple to grant a user access to an object. [Learn more →](https://openfga.dev/docs/modeling/direct-access)

### OpenFGA Concepts [​](https://openfga.dev/docs/modeling/building-blocks/direct-relationships\#-concepts "Direct link to -concepts")

- A [Type](https://openfga.dev/docs/concepts#what-is-a-type): a class of objects that have similar characteristics
- A [User](https://openfga.dev/docs/concepts#what-is-a-user): an entity in the system that can be related to an object
- A [Relation](https://openfga.dev/docs/concepts#what-is-a-relation): is a string defined in the type definition of an authorization model that defines the possibility of a relationship between an object of the same type as the type definition and a user in the system
- An [Object](https://openfga.dev/docs/concepts#what-is-an-object): represents an entity in the system. Users' relationships to it can be define through relationship tuples and the authorization model
- A [Relationship Tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple): a grouping consisting of a user, a relation and an object stored in OpenFGA
- [Direct Relationship Type Restrictions](https://openfga.dev/docs/configuration-language#direct-relationship-type-restrictions): used in the context of the relation definition can be used to allow direct relationships to the objects of this type

## What are direct relationships? [​](https://openfga.dev/docs/modeling/building-blocks/direct-relationships\#what-are-direct-relationships "Direct link to What are direct relationships?")

Direct relationships are relationships where a user has a relationship to an [object](https://openfga.dev/docs/concepts#what-is-an-object) that is not dependent on any other relationship they have with that object.

When checking for a relationship, a direct relationship exists if a _[relationship tuple](https://openfga.dev/docs/concepts#what-is-a-relationship-tuple)_ is present in the system with the exact same object and relation that were in the query and where the user is one of:

- the same user ID as that in the query
- type bound public access ( `<type>:*`)
- a set of users that contains the user ID present in the query

## Enable or disable direct relationships [​](https://openfga.dev/docs/modeling/building-blocks/direct-relationships\#enable-or-disable-direct-relationships "Direct link to Enable or disable direct relationships")

Direct relationships can be enabled for a specific relation on an _[object type](https://openfga.dev/docs/concepts#what-is-a-type)_ by adding [direct relationship type restrictions](https://openfga.dev/docs/configuration-language#direct-relationship-type-restrictions) from that [relation's definition](https://openfga.dev/docs/concepts#what-is-a-relation-definition). Likewise, they can be disabled by removing the direct relationship type restrictions.

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define viewer: [user, user:*, team#member] or editor
    define editor: [user, team#member]

type team
  relations
    define member: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "document",\
      "relations": {\
        "viewer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "editor"\
                }\
              }\
            ]\
          }\
        },\
        "editor": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "user",\
                "wildcard": {}\
              },\
              {\
                "type": "team",\
                "relation": "member"\
              }\
            ]\
          },\
          "editor": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "team",\
                "relation": "member"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "team",\
      "relations": {\
        "member": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "member": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

info

The [authorization model](https://openfga.dev/docs/concepts#what-is-an-authorization-model) describes two [object types](https://openfga.dev/docs/concepts#what-is-a-type): `document` and `team`.

The `document` [type definition](https://openfga.dev/docs/concepts#what-is-a-type-definition) has two [relations](https://openfga.dev/docs/concepts#what-is-a-relation), `editor` and `viewer`. Both relations allow a direct relationship; `viewer` also allows an [indirect relationship](https://openfga.dev/docs/concepts#what-are-direct-and-implied-relationships) through `editor`.

In the `team` type definition, there is a single `member` relation that only allows direct relationships.

## How it affects your system [​](https://openfga.dev/docs/modeling/building-blocks/direct-relationships\#how-it-affects-your-system "Direct link to How it affects your system")

To illustrate the effect enabling or disabling direct relationships on a specific relation has, we'll investigate several situations.

### 1\. With direct relationships enabled [​](https://openfga.dev/docs/modeling/building-blocks/direct-relationships\#1-with-direct-relationships-enabled "Direct link to 1. With direct relationships enabled")

Let us start with the authorization model we had above:

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define viewer: [user, user:*, team#member] or editor
    define editor: [user, team#member]

type team
  relations
    define member: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "document",\
      "relations": {\
        "viewer": {\
          "union": {\
            "child": [\
              {\
                "this": {}\
              },\
              {\
                "computedUserset": {\
                  "relation": "editor"\
                }\
              }\
            ]\
          }\
        },\
        "editor": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "viewer": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "user",\
                "wildcard": {}\
              },\
              {\
                "type": "team",\
                "relation": "member"\
              }\
            ]\
          },\
          "editor": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "team",\
                "relation": "member"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "team",\
      "relations": {\
        "member": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "member": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

Now choose the type of relation to see how it affects your system:

- Direct User
- Type Bound Public Access
- Userset
- Indirect Relationship

Assume you have a tuple that states that Anne is a `viewer` of `document:planning`

```codeBlockLines_e6Vv
[{\
  "user": "user:anne",\
  "relation": "viewer",\
  "object": "document:planning"\
}]

```

Now if we do a [check request](https://openfga.dev/docs/concepts#what-is-a-check-request) to see if Anne can view the planning document, we will get a response of `{"allowed": true}`.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:anne',
    relation: 'viewer',
    object: 'document:planning',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:anne",
    Relation: "viewer",
    Object:   "document:planning",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:anne",
    Relation = "viewer",
    Object = "document:planning",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:anne",
    relation="viewer",
    object="document:planning",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:anne")
        .relation("viewer")
        ._object("document:planning");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:anne viewer document:planning

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:anne","relation":"viewer","object":"document:planning"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:anne", // check if the user `user:anne`
  relation = "viewer", // has an `viewer` relation
  object = "document:planning", // with the object `document:planning`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:anne related to document:planning as viewer?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

This is because:

- There is a relationship tuple specifying that Anne has a `viewer` relationship with `document:planning`.
- Direct relationships are allowed in the `viewer` relation definition in the `document` type definition.

Assume you have a [type bound public access](https://openfga.dev/docs/concepts#what-is-type-bound-public-access) tuple where everyone of type `user` is a `viewer` of `document:planning` (In other words, the document is public)

```codeBlockLines_e6Vv
[{\
  "user": "user:*",\
  "relation": "viewer",\
  "object": "document:planning"\
}]

```

Now if we do a check request to see if Beth can view the planning document, we will get a response of `{"allowed": true}`.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:beth',
    relation: 'viewer',
    object: 'document:planning',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:beth",
    Relation: "viewer",
    Object:   "document:planning",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:beth",
    Relation = "viewer",
    Object = "document:planning",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:beth",
    relation="viewer",
    object="document:planning",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:beth")
        .relation("viewer")
        ._object("document:planning");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:beth viewer document:planning

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:beth","relation":"viewer","object":"document:planning"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:beth", // check if the user `user:beth`
  relation = "viewer", // has an `viewer` relation
  object = "document:planning", // with the object `document:planning`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:beth related to document:planning as viewer?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

This is because:

- There is a relationship tuple specifying that everyone of type `user` has a `viewer` relationship with `document:planning`.
- Direct relationships are allowed in the `viewer` relation definition in the `document` type definition.

info

Note: Even though the relationship tuple stored in the system does not specify the user ( `beth`), this is still considered a direct relationship.

[_Usersets_](https://openfga.dev/docs/modeling/building-blocks/usersets) are the third way direct relationships apply, we will see how in this section.

Assume you have two relationship tuples:

- Charlie is a member of the product team.
- Members of the product team are viewers of the planning document.

```codeBlockLines_e6Vv
[{\
  "user": "user:charlie",\
  "relation": "member",\
  "object": "team:product"\
}{\
  "user": "team:product#member",\
  "relation": "viewer",\
  "object": "document:planning"\
}]

```

info

Note that these two relationship tuples are specifying that:

- `user:charlie` is a `member` of `team:product`.
- any `member` of `team:product` is a `viewer` of `document:planning`.

  - Note that this second relationship tuple is specifying that the **members** of the team have viewer access, and not the team object itself.

Now if we do a _check request_ to see if charlie can view the planning document, we will get a response of `{"allowed": true}`.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:charlie',
    relation: 'viewer',
    object: 'document:planning',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:charlie",
    Relation: "viewer",
    Object:   "document:planning",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:charlie",
    Relation = "viewer",
    Object = "document:planning",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:charlie",
    relation="viewer",
    object="document:planning",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:charlie")
        .relation("viewer")
        ._object("document:planning");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:charlie viewer document:planning

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:charlie","relation":"viewer","object":"document:planning"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:charlie", // check if the user `user:charlie`
  relation = "viewer", // has an `viewer` relation
  object = "document:planning", // with the object `document:planning`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:charlie related to document:planning as viewer?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

This is because:

- Charlie is a member of the product team.
- There is a relationship tuple specifying that all members of the product team have a `viewer` relationship with `document:planning`.
- Direct relationships are allowed in the `viewer` relation definition in the `document` type definition.

Note that this is still considered a direct relationship no matter how many resolutions occur on the usersets until the user is found.

For example, if our relationship tuples were the following relationship tuples:

- Dany is a member of the product leads team.
- Members of the product leads team are members of the product team.
- Members of the product team are members of the contoso team.
- Members of the contoso team are viewers of the planning document.

```codeBlockLines_e6Vv
[{\
  "user": "user:dany",\
  "relation": "member",\
  "object": "team:product-leads"\
}{\
  "user": "team:product-leads#member",\
  "relation": "member",\
  "object": "team:product"\
}{\
  "user": "team:product#member",\
  "relation": "member",\
  "object": "team:contoso"\
}{\
  "user": "team:contoso#member",\
  "relation": "viewer",\
  "object": "document:planning"\
}]

```

A subsequent _check request_ to see if Dany can view the planning document will still return a response of `{"allowed": true}`.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:dany',
    relation: 'viewer',
    object: 'document:planning',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:dany",
    Relation: "viewer",
    Object:   "document:planning",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:dany",
    Relation = "viewer",
    Object = "document:planning",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:dany",
    relation="viewer",
    object="document:planning",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:dany")
        .relation("viewer")
        ._object("document:planning");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:dany viewer document:planning

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:dany","relation":"viewer","object":"document:planning"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:dany", // check if the user `user:dany`
  relation = "viewer", // has an `viewer` relation
  object = "document:planning", // with the object `document:planning`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:dany related to document:planning as viewer?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

info

Note: Even though the relationship tuple stored in the system does not specify the user ( `charlie` or `dany`), this is still considered a direct relationship.

Here we will cover one example of an [indirect relationship](https://openfga.dev/docs/concepts#what-are-direct-and-implied-relationships) in order to see how they differ from direct relationships.

With the same authorization model we have above, assume there is a relationship tuple that specifies that Emily is an `editor` of `document:planning`.

```codeBlockLines_e6Vv
[{\
  "user": "user:emily",\
  "relation": "editor",\
  "object": "document:planning"\
}]

```

A subsequent _check request_ to see if emily can view the planning document will still return a response of `{"allowed": true}`.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:emily',
    relation: 'viewer',
    object: 'document:planning',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:emily",
    Relation: "viewer",
    Object:   "document:planning",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:emily",
    Relation = "viewer",
    Object = "document:planning",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:emily",
    relation="viewer",
    object="document:planning",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:emily")
        .relation("viewer")
        ._object("document:planning");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:emily viewer document:planning

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:emily","relation":"viewer","object":"document:planning"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:emily", // check if the user `user:emily`
  relation = "viewer", // has an `viewer` relation
  object = "document:planning", // with the object `document:planning`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:emily related to document:planning as viewer?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

This is because:

- Emily is an `editor` of the planning document.
- The authorization model specified that anyone who is an `editor` on a `document` is also a `viewer` on that document.

In this case, there is **NO** direct viewer relationship between Emily and the planning document. The only viewer relationship that exists is implied because Emily is an editor and the authorization model specified that any document's `editor` is that document's viewer.

### 2\. With direct relationships disabled [​](https://openfga.dev/docs/modeling/building-blocks/direct-relationships\#2-with-direct-relationships-disabled "Direct link to 2. With direct relationships disabled")

In this section, we will investigate the effect of disabling _direct relationships_ on the document's `viewer` relation.

- DSL
- JSON

```codeBlockLines_e6Vv
model
  schema 1.1

type user

type document
  relations
    define viewer: editor
    define editor: [user, team#member]

type team
  relations
    define member: [user]

```

```codeBlockLines_e6Vv
{
  "schema_version": "1.1",
  "type_definitions": [\
    {\
      "type": "user"\
    },\
    {\
      "type": "document",\
      "relations": {\
        "viewer": {\
          "computedUserset": {\
            "relation": "editor"\
          }\
        },\
        "editor": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "editor": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              },\
              {\
                "type": "team",\
                "relation": "member"\
              }\
            ]\
          }\
        }\
      }\
    },\
    {\
      "type": "team",\
      "relations": {\
        "member": {\
          "this": {}\
        }\
      },\
      "metadata": {\
        "relations": {\
          "member": {\
            "directly_related_user_types": [\
              {\
                "type": "user"\
              }\
            ]\
          }\
        }\
      }\
    }\
  ]
}

```

info

Notice that in this updated authorization model, the direct relationship keyword has been removed from the document's `viewer` relation definition.

Now choose the type of relation to see how it affects your system:

- Direct User
- Everyone
- Userset
- Indirect Relationship

Assume you have a tuple that states that Fred is a `viewer` of `document:planning`

```codeBlockLines_e6Vv
[{\
  "user": "user:fred",\
  "relation": "viewer",\
  "object": "document:planning"\
}]

```

Now if we do a check request to see if Fred can view the planning document, we will get a response of `{"allowed": false}`.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:fred',
    relation: 'viewer',
    object: 'document:planning',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:fred",
    Relation: "viewer",
    Object:   "document:planning",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:fred",
    Relation = "viewer",
    Object = "document:planning",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:fred",
    relation="viewer",
    object="document:planning",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:fred")
        .relation("viewer")
        ._object("document:planning");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:fred viewer document:planning

# Response: {"allowed":false}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:fred","relation":"viewer","object":"document:planning"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:fred", // check if the user `user:fred`
  relation = "viewer", // has an `viewer` relation
  object = "document:planning", // with the object `document:planning`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:fred related to document:planning as viewer?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

This is because:

- Even though there is a relationship tuple specifying that Fred has a `viewer` relationship with `document:planning`.
- Direct relationships are **NOT** allowed in the `viewer` relation definition in the `document` type definition.

You will see the same behaviour with a relationship tuple specifying everyone of type `user` as the user.

Assume you have a tuple that states that everyone of type `user` is a `viewer` of `document:planning`.

```codeBlockLines_e6Vv
[{\
  "user": "user:*",\
  "relation": "viewer",\
  "object": "document:planning"\
}]

```

Now if we do a check request to see if Gabriel can view the planning document, we will get a response of `{"allowed": false}`.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:gabriel',
    relation: 'viewer',
    object: 'document:planning',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:gabriel",
    Relation: "viewer",
    Object:   "document:planning",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:gabriel",
    Relation = "viewer",
    Object = "document:planning",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:gabriel",
    relation="viewer",
    object="document:planning",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:gabriel")
        .relation("viewer")
        ._object("document:planning");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:gabriel viewer document:planning

# Response: {"allowed":false}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:gabriel","relation":"viewer","object":"document:planning"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:gabriel", // check if the user `user:gabriel`
  relation = "viewer", // has an `viewer` relation
  object = "document:planning", // with the object `document:planning`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:gabriel related to document:planning as viewer?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

This is because:

- Even though there is a relationship tuple specifying that everyone has a `viewer` relationship with `document:planning`.
- Direct relationships are **NOT** allowed in the `viewer` relation definition in the `document` type definition.

The same logic applies to usersets.

Assume you have two relationship tuples:

- Henry is a member of the product team.
- Members of the product team are viewers of the planning document.

```codeBlockLines_e6Vv
[{\
  "user": "user:henry",\
  "relation": "member",\
  "object": "team:product"\
}{\
  "user": "team:product#member",\
  "relation": "viewer",\
  "object": "document:planning"\
}]

```

Now if we do a check request to see if Henry can view the planning document, we will get a response of `{"allowed": false}`.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:henry',
    relation: 'viewer',
    object: 'document:planning',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:henry",
    Relation: "viewer",
    Object:   "document:planning",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: false }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:henry",
    Relation = "viewer",
    Object = "document:planning",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:henry",
    relation="viewer",
    object="document:planning",
)

response = await fga_client.check(body, options)

# response.allowed = false

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:henry")
        .relation("viewer")
        ._object("document:planning");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = false

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:henry viewer document:planning

# Response: {"allowed":false}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:henry","relation":"viewer","object":"document:planning"}}'

# Response: {"allowed":false}

```

```codeBlockLines_e6Vv
check(
  user = "user:henry", // check if the user `user:henry`
  relation = "viewer", // has an `viewer` relation
  object = "document:planning", // with the object `document:planning`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: false

```

```codeBlockLines_e6Vv
is user:henry related to document:planning as viewer?

# Response: A red object indicating that the response from the API is `{"allowed":false}`

```

This is because although:

- Henry is a member of the product team.
- There is a relationship tuple specifying that all members of the product team have a `viewer` relationship with `document:planning`.

Direct relationships are **NOT** allowed in the `viewer` relation definition in the `document` type definition.

Indirect relationships are not affected by disabling a direct relationship on a certain relation.

Assume there is a relationship tuple that specifies that Ingred is an `editor` of `document:planning`.

```codeBlockLines_e6Vv
[{\
  "user": "user:ingred",\
  "relation": "editor",\
  "object": "document:planning"\
}]

```

A subsequent check request to see if Ingred can view the planning document will still return a response of `{"allowed": true}`.

- Node.js
- Go
- .NET
- Python
- Java
- CLI
- curl
- Pseudocode
- Playground

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
const { OpenFgaClient } = require('@openfga/sdk');

// Initialize the SDK with no auth - see "How to setup SDK client" for more options
const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL, // required, e.g. https://api.fga.example
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});

```

```codeBlockLines_e6Vv

// Run a check
const { allowed } = await fgaClient.check({
    user: 'user:ingred',
    relation: 'viewer',
    object: 'document:planning',
  }, {
  authorizationModelId: '01HVMMBCMGZNT3SED4Z17ECXCA',
});

// allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
import (
    "os"

    . "github.com/openfga/go-sdk"
    . "github.com/openfga/go-sdk/client"
)

func main() {
    // Initialize the SDK with no auth - see "How to setup SDK client" for more options
    fgaClient, err := NewSdkClient(&ClientConfiguration{
        ApiUrl:               os.Getenv("FGA_API_URL"), // required, e.g. https://api.fga.example
        StoreId:              os.Getenv("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        AuthorizationModelId: os.Getenv("FGA_MODEL_ID"),  // Optional, can be overridden per request
    })

    if err != nil {
    // .. Handle error
    }
}

```

```codeBlockLines_e6Vv

options := ClientCheckOptions{
    AuthorizationModelId: PtrString("01HVMMBCMGZNT3SED4Z17ECXCA"),
}

body := ClientCheckRequest{
    User:     "user:ingred",
    Relation: "viewer",
    Object:   "document:planning",
}

data, err := fgaClient.Check(context.Background()).
    Body(body).
    Options(options).
    Execute()

// data = { allowed: true }

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.
// import the SDK
using OpenFga.Sdk.Client;
using OpenFga.Sdk.Client.Model;
using OpenFga.Sdk.Model;
using Environment = System.Environment;

namespace Example;

class Example {
    public static async Task Main() {
        // Initialize the SDK with no auth - see "How to setup SDK client" for more options
        var configuration = new ClientConfiguration() {
          ApiUrl = Environment.GetEnvironmentVariable("FGA_API_URL"), ?? "http://localhost:8080", // required, e.g. https://api.fga.example
          StoreId = Environment.GetEnvironmentVariable("FGA_STORE_ID"), // optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
          AuthorizationModelId = Environment.GetEnvironmentVariable("FGA_MODEL_ID"), // Optional, can be overridden per request
        };
        var fgaClient = new OpenFgaClient(configuration);
    }
}

```

```codeBlockLines_e6Vv

var options = new ClientCheckOptions {
    AuthorizationModelId = "01HVMMBCMGZNT3SED4Z17ECXCA",
};
var body = new ClientCheckRequest {
    User = "user:ingred",
    Relation = "viewer",
    Object = "document:planning",

};
var response = await fgaClient.Check(body, options);

// response.Allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
# ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import asyncio
import os
import json
from openfga_sdk.client import ClientConfiguration, OpenFgaClient

async def main():
    configuration = ClientConfiguration(
        api_url = os.environ.get('FGA_API_URL'), # required, e.g. https://api.fga.example
        store_id = os.environ.get('FGA_STORE_ID'), # optional, not needed for `CreateStore` and `ListStores`, required before calling for all other methods
        authorization_model_id = os.environ.get('FGA_MODEL_ID'), # Optional, can be overridden per request
    )

    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

asyncio.run(main())

```

```codeBlockLines_e6Vv
options = {
    authorization_model_id="01HVMMBCMGZNT3SED4Z17ECXCA"
}
body = ClientCheckRequest(
    user="user:ingred",
    relation="viewer",
    object="document:planning",
)

response = await fga_client.check(body, options)

# response.allowed = true

```

Initialize the SDK

```codeBlockLines_e6Vv
// ApiTokenIssuer, ApiAudience, ClientId and ClientSecret are optional.

import dev.openfga.sdk.api.client.OpenFgaClient;
import dev.openfga.sdk.api.configuration.ClientConfiguration;

public class Example {
  public static void main(String[] args) throws Exception {
      var config = new ClientConfiguration()
              .apiUrl(System.getenv("FGA_API_URL")) // If not specified, will default to "https://localhost:8080"
              .storeId(System.getenv("FGA_STORE_ID")) // Not required when calling createStore() or listStores()
              .authorizationModelId(System.getenv("FGA_AUTHORIZATION_MODEL_ID")); // Optional, can be overridden per request

      var fgaClient = new OpenFgaClient(config);
  }
}

```

```codeBlockLines_e6Vv
var options = new ClientCheckOptions()
        .authorizationModelId("01HVMMBCMGZNT3SED4Z17ECXCA");

var body = new ClientCheckRequest()
        .user("user:ingred")
        .relation("viewer")
        ._object("document:planning");

var response = fgaClient.check(body, options).get();

// response.getAllowed() = true

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
fga query check --store-id=$FGA_STORE_ID --model-id=01HVMMBCMGZNT3SED4Z17ECXCA user:ingred viewer document:planning

# Response: {"allowed":true}

```

Set FGA\_API\_URL according to the service you are using (e.g. https://api.fga.example)

```codeBlockLines_e6Vv
Set FGA_API_URL according to the service you are using (e.g. https://api.fga.example)

```

```codeBlockLines_e6Vv
curl -X POST $FGA_API_URL/stores/$FGA_STORE_ID/check \
  -H "Authorization: Bearer $FGA_API_TOKEN" \ # Not needed if service does not require authorization
  -H "content-type: application/json" \
  -d '{"authorization_model_id": "01HVMMBCMGZNT3SED4Z17ECXCA", "tuple_key":{"user":"user:ingred","relation":"viewer","object":"document:planning"}}'

# Response: {"allowed":true}

```

```codeBlockLines_e6Vv
check(
  user = "user:ingred", // check if the user `user:ingred`
  relation = "viewer", // has an `viewer` relation
  object = "document:planning", // with the object `document:planning`
   authorization_id = "01HVMMBCMGZNT3SED4Z17ECXCA"
);

Reply: true

```

```codeBlockLines_e6Vv
is user:ingred related to document:planning as viewer?

# Response: A green path from the user to the object indicating that the response from the API is `{"allowed":true}`

```

## Related Sections [​](https://openfga.dev/docs/modeling/building-blocks/direct-relationships\#related-sections "Direct link to Related Sections")

Check the following sections for more one how direct relationships can be used. Also, take a look at the access relation in the feature type in Modeling Entitlements for another use-case.

Modeling Roles and Permissions

Learn how to remove the direct relationship to indicate nonassignable permissions.

- [More](https://openfga.dev/docs/modeling/roles-and-permissions)

Modeling for IoT

See how Roles and Permissions can be used in an IoT use-case.

- [More](https://openfga.dev/docs/modeling/advanced/iot)

Modeling Entitlements

Take a look at the access relation in the feature type for an example of removing the direct relationship

- [More](https://openfga.dev/docs/modeling/advanced/entitlements)

- [Before you start](https://openfga.dev/docs/modeling/building-blocks/direct-relationships#before-you-start)
  - [Direct access](https://openfga.dev/docs/modeling/building-blocks/direct-relationships#direct-access)
  - [Concepts](https://openfga.dev/docs/modeling/building-blocks/direct-relationships#-concepts)
- [What are direct relationships?](https://openfga.dev/docs/modeling/building-blocks/direct-relationships#what-are-direct-relationships)
- [Enable or disable direct relationships](https://openfga.dev/docs/modeling/building-blocks/direct-relationships#enable-or-disable-direct-relationships)
- [How it affects your system](https://openfga.dev/docs/modeling/building-blocks/direct-relationships#how-it-affects-your-system)
  - [1\. With direct relationships enabled](https://openfga.dev/docs/modeling/building-blocks/direct-relationships#1-with-direct-relationships-enabled)
  - [2\. With direct relationships disabled](https://openfga.dev/docs/modeling/building-blocks/direct-relationships#2-with-direct-relationships-disabled)
- [Related Sections](https://openfga.dev/docs/modeling/building-blocks/direct-relationships#related-sections)

## OpenFGA News January 2024
[Skip to main content](https://openfga.dev/blog/fine-grained-news-2024-01#__docusaurus_skipToContent_fallback)

Welcome to the 2nd edition of Fine Grained News!

## Team News [​](https://openfga.dev/blog/fine-grained-news-2024-01\#team-news "Direct link to Team News")

The OpenFGA team got bigger, and we met in person in Toronto for the first time! We got to know each other better, helped new team members to get familiar with the project, hacked some code, had some fun with ax throwing, and loved Toronto's weather!

![OpenFGA Team](https://openfga.dev/assets/images/fgn-2024-01-team-fdc90c95b67c4a2f60a3235944480b1d.png)

## KubeCon Europe 2024! [​](https://openfga.dev/blog/fine-grained-news-2024-01\#kubecon-europe-2024 "Direct link to KubeCon Europe 2024!")

We got two presentations accepted in KubeCon Europe!

- [Jonathan Whitaker](https://www.linkedin.com/in/jonathan-whitaker-5a8b2484/) from Okta will talk about [Federated IAM for Kubernetes with OpenFGA](https://kccnceu2024.sched.com/event/1YeQD)

- [Pauline Jamin](https://www.linkedin.com/in/paulinejamin/) from Agicap and [Andres Aguiar](https://www.linkedin.com/in/aaguiar/) from Okta will present on [Implementing Modern Cloud Native Authorization Using OpenFGA](https://colocatedeventseu2024.sched.com/event/1YFhM/implementing-modern-cloud-native-authorization-using-openfga-andres-aguiar-okta-pauline-jamin-agicap)


We'll also have a Project Kiosk, so if you plan to attend let us know and we can schedule some time together!

## OpenFGA ⚡️Enlightning Session! [​](https://openfga.dev/blog/fine-grained-news-2024-01\#openfga-%EF%B8%8Fenlightning-session "Direct link to OpenFGA ⚡️Enlightning Session!")

Our own [Raghd Hamzeh](https://www.linkedin.com/in/raghdhamzeh/) will join [Whitney Lee](https://twitter.com/wiggitywhitney) in a Tanzu ⚡️Enlightning session on **February 8th at 9am PT**.

Join their Youtube stream [here](https://www.youtube.com/watch?v=yTgtAzhvC28).

## Visual Studio Code Integration Enhancements [​](https://openfga.dev/blog/fine-grained-news-2024-01\#visual-studio-code-integration-enhancements "Direct link to Visual Studio Code Integration Enhancements")

We keep investing in improving our VS Code experience. The video below shows how, in addition to validating the model, we can validate the tuple content and the tests.

We are identifying:

- Invalid object types, user types, and relations when defining tuples.
- Invalid object types, user types, and relations when defining tests.
- User id or object id that was not included in any tuple in check tests.

This helps authoring/testing models, making the whole process less error prone and more fun!

![VS Code](https://openfga.dev/assets/images/fgn-2024-01-vscode-d007f1d2381717433705be88761959e2.gif)

## CLI improvements [​](https://openfga.dev/blog/fine-grained-news-2024-01\#cli-improvements "Direct link to CLI improvements")

We love the FGA CLI and we keep making it even better.

We had a few of contributions from new team members and the community :).

- You can now import tuples from a CSV file. We supported JSON/YAML, but if you are exporting data from a database, producing to CSV is way simpler.
- You can take a .fga.yaml file with a model and tuples, and get it imported in OpenFGA.
- Added support for specifying an external tuple\_file in .fga.yaml files.
- Added support for specifying a continuation\_token when calling fga tuple changes.
- Support for configuring OAuth scopes to authenticate to OIDC servers.

Check the updated documentation in our [CLI repository](https://github.com/openfga/cli)

Thanks to [Yann D'Isanto](https://github.com/le-yams) for all your help on this!

## OpenFGA v1.4.3 [​](https://openfga.dev/blog/fine-grained-news-2024-01\#openfga-v143 "Direct link to OpenFGA v1.4.3")

We just shipped OpenFGA [v1.4.3](https://github.com/openfga/openfga/releases/tag/v1.4.3), with performance improvements and [one security issue](https://github.com/openfga/openfga/security/advisories/GHSA-rxpw-85vw-fx87) fixed. We recommend everyone to upgrade to the latest release.

## SDK Improvements [​](https://openfga.dev/blog/fine-grained-news-2024-01\#sdk-improvements "Direct link to SDK Improvements")

New releases with bug fixes and improvements:

- [Java SDK v0.3.2](https://github.com/openfga/java-sdk/releases/tag/v0.3.2). If you are using the Java SDK please upgrade to this version.
- [Go SDK v0.3.4](https://github.com/openfga/go-sdk/releases/tag/v0.3.4)
- [Python SDK v0.4.0](https://github.com/openfga/python-sdk/releases/tag/v0.4.0), which has breaking changes.

Thanks again to [Yann D'Isanto](https://github.com/le-yams) for your help on the Java SDK!

## Language Improvements [​](https://openfga.dev/blog/fine-grained-news-2024-01\#language-improvements "Direct link to Language Improvements")

The DSL language now has better support for comments and mixed operator support, where you can use parentheses to group expressions when defining relations:

![DSL improvements](https://openfga.dev/assets/images/fgn-2023-12-language-8a3e7f852814fa536430c8e3f81e57f1.png)

It's available in the VS Code extension, the CLI and the Playground.

## Github Actions [​](https://openfga.dev/blog/fine-grained-news-2024-01\#github-actions "Direct link to Github Actions")

We shipped a couple of Github Actions that help you deploy FGA models, and run model tests as part of your CI/CD build. Find them [here](https://github.com/marketplace?query=openfga).

## What's Next? Check our RFCs! [​](https://openfga.dev/blog/fine-grained-news-2024-01\#whats-next-check-our-rfcs "Direct link to What's Next? Check our RFCs!")

We've been discussing with the OpenFGA community a couple of RFCs that we are planning to implement in the next few weeks:

- [Support for modular models](https://github.com/openfga/rfcs/pull/14).
- [ListUsers API](https://github.com/openfga/rfcs/pull/15).

Please take a look at them and let us know what you think!

## OpenFGA Community [​](https://openfga.dev/blog/fine-grained-news-2024-01\#openfga-community "Direct link to OpenFGA Community")

We have a very welcoming community, and we'd love to have you there! You can join us in different ways:

- Join our [community meetings](https://github.com/openfga/community/blob/main/community-meetings.md), the second Thursday of every month. All the recordings are [here](https://www.youtube.com/@OpenFGA).
- Stay up to date by following us on [X](https://twitter.com/openfga).
- Join our [community channels](https://openfga.dev/community) in Slack or GitHub.

## See you next month! [​](https://openfga.dev/blog/fine-grained-news-2024-01\#see-you-next-month "Direct link to See you next month!")

Fine Grained News are published every month, after the OpenFGA community meeting. If you have any feedback, you want to share your OpenFGA story, or know about something that you think is worth mentioning, please let us know!

- [Team News](https://openfga.dev/blog/fine-grained-news-2024-01#team-news)
- [KubeCon Europe 2024!](https://openfga.dev/blog/fine-grained-news-2024-01#kubecon-europe-2024)
- [OpenFGA ⚡️Enlightning Session!](https://openfga.dev/blog/fine-grained-news-2024-01#openfga-%EF%B8%8Fenlightning-session)
- [Visual Studio Code Integration Enhancements](https://openfga.dev/blog/fine-grained-news-2024-01#visual-studio-code-integration-enhancements)
- [CLI improvements](https://openfga.dev/blog/fine-grained-news-2024-01#cli-improvements)
- [OpenFGA v1.4.3](https://openfga.dev/blog/fine-grained-news-2024-01#openfga-v143)
- [SDK Improvements](https://openfga.dev/blog/fine-grained-news-2024-01#sdk-improvements)
- [Language Improvements](https://openfga.dev/blog/fine-grained-news-2024-01#language-improvements)
- [Github Actions](https://openfga.dev/blog/fine-grained-news-2024-01#github-actions)
- [What's Next? Check our RFCs!](https://openfga.dev/blog/fine-grained-news-2024-01#whats-next-check-our-rfcs)
- [OpenFGA Community](https://openfga.dev/blog/fine-grained-news-2024-01#openfga-community)
- [See you next month!](https://openfga.dev/blog/fine-grained-news-2024-01#see-you-next-month)

## OpenFGA April News
[Skip to main content](https://openfga.dev/blog/fine-grained-news-2024-04#__docusaurus_skipToContent_fallback)

Welcome to Fine Grained News, April edition!

## New Releases! [​](https://openfga.dev/blog/fine-grained-news-2024-04\#new-releases "Direct link to New Releases!")

- [Modular Models](https://openfga.dev/blog/modular-models-announcement) is now part of the OpenFGA core, making it easy for multiple teams to collaborate on a single OpenFGA model. Check it out, we love the feature! :)

- Thanks to the help provided by the [Spring Security team](https://github.com/spring-projects/spring-security/issues/14121) there's now a [Spring Boot Starter for OpenFGA](https://github.com/openfga/spring-boot-starter)!

- We shipped an OpenFGA Release Candidate with [a new ListUsers API](https://openfga.dev/blog/list-users-announcement), that can be enabled with an experimental flag. ListUsers allows you to retrieve all the users that have a specific relation with a resource, for example, all users that can view a document.


## OpenFGA Hackathon [​](https://openfga.dev/blog/fine-grained-news-2024-04\#openfga-hackathon "Direct link to OpenFGA Hackathon")

A few weeks ago we hosted a Hackathon where multiple team members experimented new ideas around OpenFGA. You'll need to wait until the next [community meeting](https://github.com/openfga/community/blob/main/community-meetings.md) to learn more :).

## OpenFGA Security Assessment [​](https://openfga.dev/blog/fine-grained-news-2024-04\#openfga-security-assessment "Direct link to OpenFGA Security Assessment")

We are working with the CNCF Tag-Security team on a [joint security assessment](https://github.com/cncf/tag-security/issues/1236), which is a step required to get accepted as a CNCF Incubation project.

## What's Next [​](https://openfga.dev/blog/fine-grained-news-2024-04\#whats-next "Direct link to What's Next")

- In collaboration with [Yann D'Isanto](https://github.com/le-yams) we are building a [plugin for JetBrain's IDEs](https://github.com/le-yams/openfga4intellij) to allow syntax coloring and validation of OpenFGA models. Together with the [Visual Studio Code integration](https://marketplace.visualstudio.com/items?itemName=openfga.openfga-vscode) and the [Tree sitter grammar](https://github.com/matoous/tree-sitter-fga) from [Matouš Dzivjak](https://github.com/matoous/) OpenFGA will get great coverage for major IDEs and editors.

- We'll be [instrumenting our SDKs](https://github.com/openfga/roadmap/issues/41) to provide metrics / tracing and logging through OpenTelemetry APIs.

- We'll be adding [additional consistency options](https://github.com/openfga/roadmap/issues/54) for OpenFGA query APIs.

- We'll be working on adding [authorization for OpenFGA APIs](https://github.com/openfga/roadmap/issues/30).


Please check the items above and let us know if you have any feedback or idea.

## Transitioning from Discord to CNCF's Slack [​](https://openfga.dev/blog/fine-grained-news-2024-04\#transitioning-from-discord-to-cncfs-slack "Direct link to Transitioning from Discord to CNCF's Slack")

As we mentioned in the last edition, we transitioned out from Discord for OpenFGA and are now using the CNCF [#openfga Slack channel](https://cloud-native.slack.com/archives/C06G1NNH47N). If you are not part of the CNCF Slack workspace, you need to join the [CNCF Slack](https://slack.cncf.io/) first.

## See you next month! [​](https://openfga.dev/blog/fine-grained-news-2024-04\#see-you-next-month "Direct link to See you next month!")

Fine Grained News are published every month. If you have any feedback, want to share your OpenFGA story, or know about something that you think is worth mentioning, please let us know!

- [New Releases!](https://openfga.dev/blog/fine-grained-news-2024-04#new-releases)
- [OpenFGA Hackathon](https://openfga.dev/blog/fine-grained-news-2024-04#openfga-hackathon)
- [OpenFGA Security Assessment](https://openfga.dev/blog/fine-grained-news-2024-04#openfga-security-assessment)
- [What's Next](https://openfga.dev/blog/fine-grained-news-2024-04#whats-next)
- [Transitioning from Discord to CNCF's Slack](https://openfga.dev/blog/fine-grained-news-2024-04#transitioning-from-discord-to-cncfs-slack)
- [See you next month!](https://openfga.dev/blog/fine-grained-news-2024-04#see-you-next-month)

## OpenFGA May News
[Skip to main content](https://openfga.dev/blog/fine-grained-news-2024-05#__docusaurus_skipToContent_fallback)

Welcome to Fine Grained News, May edition!

## New Releases! [​](https://openfga.dev/blog/fine-grained-news-2024-05\#new-releases "Direct link to New Releases!")

- We shipped the [a ListUsers API](https://openfga.dev/blog/list-users-announcement). ListUsers allows you to retrieve all the users that have a specific relation with a resource (e.g. all users that can view a document).

- In collaboration with [Yann D'Isanto](https://github.com/yann-disanto) we shipped a [plugin for JetBrain's IDEs](https://plugins.jetbrains.com/plugin/24394-openfga) to allow syntax coloring and validation of OpenFGA models. Together with the [Visual Studio Code integration](https://marketplace.visualstudio.com/items?itemName=openfga.openfga-vscode) and the [Tree sitter grammar](https://github.com/matoous/tree-sitter-fga) from [Matouš Dzivjak](https://github.com/matoous/), OpenFGA has get great coverage for major IDEs and editors.


## What's Next [​](https://openfga.dev/blog/fine-grained-news-2024-05\#whats-next "Direct link to What's Next")

- We've identified a few areas where we can improve performance and we are actively working on them.
- We'll be [instrumenting our SDKs](https://github.com/openfga/roadmap/issues/41) to provide metrics / tracing and logging through OpenTelemetry APIs.
- We'll be adding [additional consistency options](https://github.com/openfga/roadmap/issues/54) for OpenFGA query APIs.
- We'll be working on adding [authorization for OpenFGA APIs](https://github.com/openfga/roadmap/issues/30).

Please check the items above and let us know if you have any feedback or idea.

## OpenFGA @ CloudNative SecurityCon [​](https://openfga.dev/blog/fine-grained-news-2024-05\#openfga--cloudnative-securitycon "Direct link to OpenFGA @ CloudNative SecurityCon")

OpenFGA will be present in [CloudNative SecurityCon North America](https://events.linuxfoundation.org/cloudnativesecuritycon-north-america/)!

[Maria Ines Parnisari](https://github.com/miparnisari) from the OpenFGA team and [Evan Anderson](https://github.com/evankanderson) from [Stacklok](https://stacklok.com/) will be presenting on [Implementing a Multi-Tenant, Relationship-Based Authorization Model with OpenFGA](https://cloudnativesecurityconna24.sched.com/event/1dCVn/implementing-a-multi-tenant-relationship-based-authorization-model-with-openfga-evan-anderson-stacklok-maria-ines-parnisari-okta).

We hope to see you there!

## Latest Features [​](https://openfga.dev/blog/fine-grained-news-2024-05\#latest-features "Direct link to Latest Features")

In case you missed them, here are some of the latest major features we've added to OpenFGA:

- [Conditional Tuples](https://openfga.dev/blog/conditional-tuples-announcement) allows you to define tuples that are only valid under certain conditions.
- [Modular Models](https://openfga.dev/blog/modular-models-announcement) makes it easy for multiple teams to collaborate on a single OpenFGA model.
- [List Users API](https://openfga.dev/blog/list-users-announcement) allowing you to retrieve all the users that have a specific relation with a resource.
- [Spring Boot Starter for OpenFGA](https://github.com/openfga/spring-boot-starter) simplifies integrating OpenFGA with Spring Security applications.
- [JetBrain's IDEs plugin](https://plugins.jetbrains.com/plugin/24394-openfga) to allow syntax coloring and validation of OpenFGA models.

## Transitioning from Discord to CNCF's Slack [​](https://openfga.dev/blog/fine-grained-news-2024-05\#transitioning-from-discord-to-cncfs-slack "Direct link to Transitioning from Discord to CNCF's Slack")

As we mentioned before, we transitioned out from Discord for OpenFGA and are now using the CNCF [#openfga Slack channel](https://cloud-native.slack.com/archives/C06G1NNH47N). If you are not part of the CNCF Slack workspace, you need to join the [CNCF Slack](https://slack.cncf.io/) first.

Checkout [https://openfga.dev/community](https://openfga.dev/community) for all the places to find us.

## See you next month! [​](https://openfga.dev/blog/fine-grained-news-2024-05\#see-you-next-month "Direct link to See you next month!")

Fine Grained News are published every month. If you have any feedback, want to share your OpenFGA story, or know about something that you think is worth mentioning, please let us know!

- [New Releases!](https://openfga.dev/blog/fine-grained-news-2024-05#new-releases)
- [What's Next](https://openfga.dev/blog/fine-grained-news-2024-05#whats-next)
- [OpenFGA @ CloudNative SecurityCon](https://openfga.dev/blog/fine-grained-news-2024-05#openfga--cloudnative-securitycon)
- [Latest Features](https://openfga.dev/blog/fine-grained-news-2024-05#latest-features)
- [Transitioning from Discord to CNCF's Slack](https://openfga.dev/blog/fine-grained-news-2024-05#transitioning-from-discord-to-cncfs-slack)
- [See you next month!](https://openfga.dev/blog/fine-grained-news-2024-05#see-you-next-month)

## OpenFGA Playground Setup
[Skip to main content](https://openfga.dev/docs/getting-started/setup-openfga/playground#__docusaurus_skipToContent_fallback)

On this page

The Playground facilitates rapid development by allowing you to visualize and model your application's authorization models and manage relationship tuples with a locally running OpenFGA instance.

It is enabled on port 3000 by default and accessible at [http://localhost:3000/playground](http://localhost:3000/playground).

The Playground is designed for early prototyping and learning. It has several limitations:

- It works by embedding the public [Playground website](https://play.fga.dev/) in an `<iframe>`. To do this securely, the public Playground configures its Content Security Policies to enable running it from `localhost`. \*\*You can't run the Playground in a host different than `localhost`.
- It does not support OIDC authentication.
- It's loads up to 100 tuples.
- It does not support conditional tuples or contextual tuples.

We have [the intention](https://github.com/openfga/roadmap/issues/7) to rewrite the Playground code and open source it, which will make it possible to overcome some of those limitations.

However, we recommend that for managing a production OpenFGA deployment, you use the [Visual Studio Code integration](https://github.com/openfga/vscode-ext), [OpenFGA CLI](https://github.com/openfga/cli), combined with the ability to specify a model + tuples + assertions in [.fga.yaml](https://github.com/openfga/cli#run-tests-on-an-authorization-model) files.

## Running the Playground in a different port [​](https://openfga.dev/docs/getting-started/setup-openfga/playground\#running-the-playground-in-a-different-port "Direct link to Running the Playground in a different port")

You can change the playground port using the `--playground-port` flag. For example,

```codeBlockLines_e6Vv
openfga run --playground-enabled --playground-port 3001

```

## Disabling the Playground [​](https://openfga.dev/docs/getting-started/setup-openfga/playground\#disabling-the-playground "Direct link to Disabling the Playground")

As the Playground allows performing any action in the OpenFGA server, it's not recommended to have it enabled in production deployments.

To run OpenFGA with the Playground disabled, provide the `--playground-enabled=false` flag.

```codeBlockLines_e6Vv
openfga run --playground-enabled=false

```

- [Running the Playground in a different port](https://openfga.dev/docs/getting-started/setup-openfga/playground#running-the-playground-in-a-different-port)
- [Disabling the Playground](https://openfga.dev/docs/getting-started/setup-openfga/playground#disabling-the-playground)

## OpenFGA Server Setup
[Skip to main content](https://openfga.dev/docs/getting-started/setup-openfga/overview#__docusaurus_skipToContent_fallback)

Follow the guides below to set up an OpenFGA server.

Configure an OpenFGA Server

How to setup an OpenFGA server.

- [Click to navigate](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga)

Docker Setup Guide

How to setup an OpenFGA server with Docker.

- [Click to navigate](https://openfga.dev/docs/getting-started/setup-openfga/docker)

Kubernetes Setup Guide

How to setup an OpenFGA server with Kubernetes.

- [Click to navigate](https://openfga.dev/docs/getting-started/setup-openfga/kubernetes)

Setup Access Control

How to enable and setup the built-in access control OpenFGA server (experimental).

- [Click to navigate](https://openfga.dev/docs/getting-started/setup-openfga/access-control)

## Configure OpenFGA
[Skip to main content](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga#__docusaurus_skipToContent_fallback)

On this page

Refer to the [OpenFGA Getting Started](https://github.com/openfga/openfga?tab=readme-ov-file#getting-started) for info on the various ways to install OpenFGA.

The instructions below assume OpenFGA is installed and that you have the `openfga` binary in your PATH. If you have built `openfga` as a binary, but not in your path, you can refer to it directly (e.g. replace `openfga` in the instructions below with `./openfga` or `/path/to/openfga`).

For a list of all the configuration options that the latest release of OpenFGA supports, see [Configuration Options](https://openfga.dev/docs/getting-started/setup-openfga/configuration), or you can run `openfga --help` to see the ones specific to your version.

note

The instructions below are for configuring the standalone OpenFGA server. If you are using OpenFGA as a library, you can refer to the [GoDoc](https://pkg.go.dev/github.com/openfga/openfga) for more information.

## Configuring data storage [​](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga\#configuring-data-storage "Direct link to Configuring data storage")

OpenFGA supports multiple storage engine options, including:

- `memory` \- A memory storage engine, which is the default. Data is lost between server restarts.
- `postgres` \- A Postgres storage engine.
- `mysql` \- A MySQL storage engine.
- `sqlite` \- A SQLite storage engine.

The first time you run OpenFGA, or when you install a new version, you need to run the `openfga migrate` command. This will create the required database tables or perform the database migration required for a new version.

### Postgres [​](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga\#postgres "Direct link to Postgres")

```codeBlockLines_e6Vv
openfga migrate \
    --datastore-engine postgres \
    --datastore-uri 'postgres://postgres:password@postgres:5432/postgres?sslmode=disable'

openfga run \
    --datastore-engine postgres \
    --datastore-uri 'postgres://postgres:password@postgres:5432/postgres?sslmode=disable'

```

To learn how to run in Docker, check our [Docker documentation](https://openfga.dev/docs/getting-started/setup-openfga/docker#using-postgres).

### MySQL [​](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga\#mysql "Direct link to MySQL")

The MySQL datastore has stricter limits for the max length of some fields for tuples compared to other datastore engines, in particular:

- object type is at most 128 characters (down from 256)
- object id is at most 128 characters (down from 256)
- user is at most 256 characters (down from 512)

The connection URI needs to specify the query `parseTime=true`.

```codeBlockLines_e6Vv
openfga migrate \
    --datastore-engine mysql \
    --datastore-uri 'root:secret@tcp(mysql:3306)/openfga?parseTime=true'

openfga run \
    --datastore-engine mysql \
    --datastore-uri 'root:secret@tcp(mysql:3306)/openfga?parseTime=true'

```

To learn how to run in Docker, check our [Docker documentation](https://openfga.dev/docs/getting-started/setup-openfga/docker#using-mysql).

### SQLite [​](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga\#sqlite "Direct link to SQLite")

```codeBlockLines_e6Vv
openfga migrate
    --datastore-engine sqlite \
    --datastore-uri 'file:/path/to/openfga.db'

openfga run
    --datastore-engine sqlite \
    --datastore-uri 'file:/path/to/openfga.db'

```

To learn how to run in Docker, check our [Docker documentation](https://openfga.dev/docs/getting-started/setup-openfga/docker#using-sqlite).

## Configuring authentication [​](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga\#configuring-authentication "Direct link to Configuring authentication")

You can configure authentication in three ways:

- no authentication (default)
- pre-shared key authentication
- OIDC

### Pre-shared key authentication [​](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga\#pre-shared-key-authentication "Direct link to Pre-shared key authentication")

If using **Pre-shared key authentication**, you will configure OpenFGA with one or more secret keys and your application calling OpenFGA will have to set an `Authorization: Bearer <YOUR-KEY-HERE>` header.

Warning

If you are going to use this setup in production, you should enable HTTP TLS in your OpenFGA server. You will need to configure the TLS certificate and key.

- Configuration File
- Environment Variables

Update the config.yaml file to

```codeBlockLines_e6Vv
authn:
  method: preshared
  preshared:
    keys: ["key1", "key2"]
http:
  tls:
    enabled: true
    cert: /Users/myuser/key/server.crt
    key: /Users/myuser/key/server.key

```

1. Configure the authentication method to preshared: `export OPENFGA_AUTHN_METHOD=preshared`.
2. Configure the authentication keys: `export OPENFGA_AUTHN_PRESHARED_KEYS=key1,key2`
3. Enable the HTTP TLS configuration: `export OPENFGA_HTTP_TLS_ENABLED=true`
4. Configure the HTTP TLS certificate location: `export OPENFGA_HTTP_TLS_CERT=/Users/myuser/key/server.crt`
5. Configure the HTTP TLS key location: `export OPENFGA_HTTP_TLS_KEY=/Users/myuser/key/server.key`

To learn how to run in Docker, check our [Docker documentation](https://openfga.dev/docs/getting-started/setup-openfga/docker#pre-shared-key-authentication).

### OIDC [​](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga\#oidc "Direct link to OIDC")

To configure with OIDC authentication, you will first need to obtain the OIDC issuer and audience from your provider.

Warning

If you are going to use this setup in production, you should enable HTTP TLS in your OpenFGA server. You will need to configure the TLS certificate and key.

- Configuration File
- Environment Variables

Update the config.yaml file to

```codeBlockLines_e6Vv
authn:
  method: oidc
  oidc:
    issuer: "oidc-issuer" # required
    issuerAliases: "oidc-issuer-1", "oidc-issuer-2" # optional
    audience: "oidc-audience" # required
    subjects: "valid-subject-1", "valid-subject-2" # optional

http:
  tls:
    enabled: true
    cert: /Users/myuser/key/server.crt
    key: /Users/myuser/key/server.key

```

1. Configure the authentication method to OIDC: `export OPENFGA_AUTHN_METHOD=oidc`.
2. Configure the valid issuer (required): `export OPENFGA_AUTHN_OIDC_ISSUER=oidc-issuer`
3. Configure the valid issuer aliases (optional): `export OPENFGA_AUTHN_OIDC_ISSUER_ALIASES=oidc-issuer-1,oidc-issuer-2`
4. Configure the valid audience (required): `export OPENFGA_AUTHN_OIDC_AUDIENCE=oidc-audience`
5. Configure the valid subjects (optional): `export OPENFGA_AUTHN_OIDC_SUBJECTS=oidc-subject-1,oidc-subject-2`
6. Enable the HTTP TLS configuration: `export OPENFGA_HTTP_TLS_ENABLED=true`
7. Configure the HTTP TLS certificate location:
`export OPENFGA_HTTP_TLS_CERT=/Users/myuser/key/server.crt`
8. Configure the HTTP TLS key location:
`export OPENFGA_HTTP_TLS_KEY=/Users/myuser/key/server.key`

To learn how to run in Docker, check our [Docker documentation](https://openfga.dev/docs/getting-started/setup-openfga/docker#oidc-authentication).

## Profiler (pprof) [​](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga\#profiler-pprof "Direct link to Profiler (pprof)")

Warning

Continuous profiling can be used in production deployments, but we recommend disabling it unless it is needed to troubleshoot specific performance or memory problems.

Profiling through [`pprof`](https://github.com/google/pprof/blob/main/doc/README.md) can be enabled on the OpenFGA server by providing the `--profiler-enabled` flag. For example:

```codeBlockLines_e6Vv
openfga run --profiler-enabled

```

If you need to serve the profiler on a different port than the default `3001`, you can do so by specifying the `--profiler-addr` flag. For example:

```codeBlockLines_e6Vv
openfga run --profiler-enabled --profiler-addr :3002

```

If you want to run it in docker:

```codeBlockLines_e6Vv
docker run -p 8080:8080 -p 8081:8081 -p 3000:3000 -p 3002:3002 openfga/openfga run --profiler-enabled --profiler-addr :3002

```

## Health check [​](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga\#health-check "Direct link to Health check")

OpenFGA is configured with an HTTP health check endpoint `/healthz` and a gRPC health check `grpc.health.v1.Health/Check`, which is wired to datastore testing. Possible response values are

- UNKNOWN
- SERVING
- NOT\_SERVING
- SERVICE\_UNKNOWN

- cURL
- gRPC

```codeBlockLines_e6Vv
curl -X GET $FGA_API_URL/healthz

# {"status":"SERVING"}

```

```codeBlockLines_e6Vv
# See https://github.com/fullstorydev/grpcurl#installation
grpcurl -plaintext $FGA_API_URL grpc.health.v1.Health/Check

# {"status":"SERVING"}

```

## Experimental features [​](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga\#experimental-features "Direct link to Experimental features")

Various releases of OpenFGA may have experimental features that can be enabled by providing the [`--experimentals`](https://openfga.dev/docs/getting-started/setup-openfga/configuration#OPENFGA_EXPERIMENTALS) flag or the `experimentals` config.

```codeBlockLines_e6Vv
openfga run --experimentals="feature1, feature2"

```

or if you're using environment variables,

```codeBlockLines_e6Vv
openfga -e OPENFGA_EXPERIMENTALS="feature1, feature2" run

```

The following table enumerates the experimental flags, a description of what they do, and the versions of OpenFGA the flag is supported in:

| Name | Description | OpenFGA Version |
| --- | --- | --- |
| otel-metrics | Enables support for exposing OpenFGA metrics through OpenTelemetry | `0.3.2 <= v < 0.3.5` |
| list-objects | Enables ListObjects API | `0.2.0 <= v < 0.3.3` |
| check-query-cache | Enables caching of check subproblem result | `1.3.1 <= v < 1.3.6` |
| enable-conditions | Enables conditional relationship tuples | `1.3.8 <= v < 1.4.0` |
| enable-modular-models | Enables modular authorization modules | `1.5.1 <= v < 1.5.3` |
| enable-list-users | Enables new ListUsers API | `1.5.4 <= v < 1.5.6` |
| enable-consistency-params | Enables consistency options | `1.5.6 <= v < 1.6.0` |
| enable-check-optimizations | Enables performance optimization on Check | `1.6.2 <= v ` |
| enable-access-control | Enables the ability to configure and setup [access control](https://openfga.dev/docs/getting-started/setup-openfga/access-control) | `1.7.0 <= v ` |

Warning

Experimental features are not guaranteed to be stable and may lead to server instabilities. It is not recommended to enable experimental features for anything other than experimentation.

Experimental feature flags are also not considered part of API compatibility and are subject to change, so please refer to each OpenFGA specific release for a list of the experimental feature flags that can be enabled for that release.

## Telemetry [​](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga\#telemetry "Direct link to Telemetry")

OpenFGA telemetry data is collected by default starting on version `v0.3.5`. The telemetry information that is captured includes Metrics, Traces, and Logs.

note

Please refer to the [docker-compose.yaml](https://github.com/openfga/openfga/blob/main/docker-compose.yaml) file as an example of how to collect Metrics and Tracing in OpenFGA in a Docker environment using the [OpenTelemetry Collector](https://opentelemetry.io/docs/concepts/data-collection/). This should serve as a good example that you can adjust for your specific deployment scenario.

## Metrics [​](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga\#metrics "Direct link to Metrics")

OpenFGA metrics are collected with the [Prometheus data format](https://prometheus.io/docs/concepts/data_model/) and exposed on address `0.0.0.0:2112/metrics`.

Metrics are exposed by default, but you can disable this with `--metrics-enabled=false` (or `OPENFGA_METRICS_ENABLED=false` environment variable).

To set an alternative address, you can provide the `--metrics-addr` flag ( `OPENFGA_METRICS_ADDR` environment variable). For example:

```codeBlockLines_e6Vv
openfga run --metrics-addr=0.0.0.0:2114

```

To see the request latency per endpoint of your OpenFGA deployment, you can provide the `--metrics-enable-rpc-histograms` flag ( `OPENFGA_METRICS_ENABLE_RPC_HISTOGRAMS` environment variable).

## Tracing [​](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga\#tracing "Direct link to Tracing")

OpenFGA traces can be collected with the [OTLP data format](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/otlp.md).

Tracing is disabled by default, but you can enable this with the `--trace-enabled=true` ( `OPENFGA_TRACE_ENABLED=true` environment variable). Traces will be exported by default to address `0.0.0.0:4317`. You can change this address with the `--trace-otlp-endpoint` flag ( `OPENFGA_TRACE_OTLP_ENDPOINT` environment variable).

To increase or decrease the trace sampling ratio, you can provide the `--trace-sample-ratio` flag ( `OPENFGA_TRACE_SAMPLE_RATIO` env variable).

Tracing by default uses a insecure connection. You can enable TLS by using `--trace-otlp-tls-enabled=true` flag or the environment variable `OPENFGA_TRACE_OTLP_TLS_ENABLED`.

Warning

It is not recommended to sample all traces (e.g. `--trace-sample-ratio=1`). You will need to adjust your sampling ratio based on the amount of traffic your deployment receives. Higher traffic will require less sampling and lower traffic can tolerate higher sampling ratios.

## Logging [​](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga\#logging "Direct link to Logging")

OpenFGA generates structured logs by default, and it can be configured with the following flags:

- `--log-format`: sets the log format. Today we support `text` and `json` format.
- `--log-level`: sets the minimum log level (defaults to `info`). It can be set to `none` to turn off logging.

Warning

It is highly recommended to enable logging in production environments. Disabling logging ( `--log-level=none`) can mask important operations and hinder the ability to detect and diagnose issues, including potential security incidents. Ensure that logs are enabled and properly monitored to maintain visibility into the application's behavior and security.

## Related Sections [​](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga\#related-sections "Direct link to Related Sections")

Check the following sections for more on how to use OpenFGA.

Configuration Options

Find out all the different flags and options that OpenFGA accepts

- [More](https://openfga.dev/docs/getting-started/setup-openfga/configuration)

Production Best Practices

Learn the best practices of running OpenFGA in a production environment

- [More](https://openfga.dev/docs/getting-started/running-in-production)

- [Configuring data storage](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga#configuring-data-storage)
  - [Postgres](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga#postgres)
  - [MySQL](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga#mysql)
  - [SQLite](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga#sqlite)
- [Configuring authentication](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga#configuring-authentication)
  - [Pre-shared key authentication](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga#pre-shared-key-authentication)
  - [OIDC](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga#oidc)
- [Profiler (pprof)](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga#profiler-pprof)
- [Health check](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga#health-check)
- [Experimental features](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga#experimental-features)
- [Telemetry](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga#telemetry)
- [Metrics](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga#metrics)
- [Tracing](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga#tracing)
- [Logging](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga#logging)
- [Related Sections](https://openfga.dev/docs/getting-started/setup-openfga/configure-openfga#related-sections)

## OpenFGA Blog Archive
[Skip to main content](https://openfga.dev/blog/archive#__docusaurus_skipToContent_fallback)

### 2025 [​](https://openfga.dev/blog/archive\#2025 "Direct link to 2025")

- [January 29 \- Fine Grained News - January 2025](https://openfga.dev/blog/fine-grained-news-2025-01)
- [February 26 \- Fine Grained News - February 2025](https://openfga.dev/blog/fine-grained-news-2025-02)

### 2024 [​](https://openfga.dev/blog/archive\#2024 "Direct link to 2024")

- [January 29 \- Fine Grained News - January 2024](https://openfga.dev/blog/fine-grained-news-2024-01)
- [February 27 \- Fine Grained News - February 2024](https://openfga.dev/blog/fine-grained-news-2024-02)
- [March 28 \- Fine Grained News - March 2024](https://openfga.dev/blog/fine-grained-news-2024-03)
- [April 25 \- Modular Models](https://openfga.dev/blog/modular-models-announcement)
- [April 30 \- Fine Grained News - April 2024](https://openfga.dev/blog/fine-grained-news-2024-04)
- [May 30 \- List Users API](https://openfga.dev/blog/list-users-announcement)
- [May 30 \- Fine Grained News - May 2024](https://openfga.dev/blog/fine-grained-news-2024-05)
- [June 30 \- Fine Grained News - June 2024](https://openfga.dev/blog/fine-grained-news-2024-06)
- [July 30 \- Query Consistency Options in OpenFGA](https://openfga.dev/blog/query-consistency-options-announcement)
- [July 31 \- Fine Grained News - July 2024](https://openfga.dev/blog/fine-grained-news-2024-07)
- [August 30 \- Fine Grained News - August 2024](https://openfga.dev/blog/fine-grained-news-2024-08)
- [September 30 \- Fine Grained News - September 2024](https://openfga.dev/blog/fine-grained-news-2024-09)
- [October 30 \- Fine Grained News - October 2024](https://openfga.dev/blog/fine-grained-news-2024-10)
- [November 30 \- Fine Grained News - November 2024](https://openfga.dev/blog/fine-grained-news-2024-11)

### 2023 [​](https://openfga.dev/blog/archive\#2023 "Direct link to 2023")

- [October 12 \- Join the OpenFGA team at KubeCon NA 2023](https://openfga.dev/blog/kubecon-na-2023)
- [November 6 \- Conditional Relationship Tuples for OpenFGA](https://openfga.dev/blog/conditional-tuples-announcement)
- [December 18 \- Fine Grained News - December 2023](https://openfga.dev/blog/fine-grained-news-2023-12)

## OpenFGA Blog Authors
[Skip to main content](https://openfga.dev/blog/authors#__docusaurus_skipToContent_fallback)

# Authors

- [![Andres Aguiar](https://openfga.dev/img/blog/authors/andres.jpg)](https://github.com/aaguiarz)



[**Andres Aguiar**](https://github.com/aaguiarz) 12

Product Manager

- [![Ewan Harris](https://openfga.dev/img/blog/authors/ewan.jpg)](https://github.com/ewanharris)



[**Ewan Harris**](https://github.com/ewanharris) 1

- [![Maria Ines Parnisari](https://openfga.dev/img/blog/authors/miparnisari.jpg)](https://github.com/miparnisari)



[**Maria Ines Parnisari**](https://github.com/miparnisari) 1

- [![Caleb Hunter](https://openfga.dev/img/blog/authors/caleb.jpg)](https://github.com/hello-caleb)



[**Caleb Hunter**](https://github.com/hello-caleb) 5

Community Engagement

## OpenFGA at KubeCon
[Skip to main content](https://openfga.dev/blog/tags/conferences#__docusaurus_skipToContent_fallback)

As you'd expect, the OpenFGA team will be at KubeCon NA 2023 in Chicago, IL!

We'll have a packed agenda for the week:

- [Jonathan Whitaker](https://www.linkedin.com/in/jonathan-whitaker-5a8b2484/) and [Lucas Käldström](https://www.linkedin.com/in/luxas/) will be presenting in [Could\_Native Rejects](https://cloud-native.rejekts.io/) on how to use OpenFGA to manage and extend authorization in Kubernetes. Learn more [here](https://cfp.cloud-native.rejekts.io/cloud-native-rejekts-na-chicago-2023/speaker/XB7EUR/).

- [Maria Ines Parnisari](https://www.linkedin.com/in/miparnisari/) and [Andres Aguiar](https://www.linkedin.com/in/aaguiar/) will be presenting in [AppDeveloperCon](https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/co-located-events/appdevelopercon/) about modernizing authorization for cloud native applications using OpenFGA. Learn more [here](https://colocatedeventsna2023.sched.com/event/1Rj2j/modernizing-authorization-for-cloud-native-applications-using-openfga-andres-aguiar-maria-ines-parnisari-okta).

- We'll host a Project Meeting on Monday 9.30 AM in the Hudson room at the [Hilton Garden Inn](https://maps.app.goo.gl/77FwgGdpsWK5jWHd6). We'll share how the product is being used, demo the latests features like our new CLI, the VS Code Extension, Conditional Relationships, the Java SDK... and more!

- We'll be in the CNCF Project Pavilion during the afternoons.

- We'll host our [OpenFGA community meeting](https://github.com/openfga/community/blob/main/community-meetings.md) directly from KubeCon on Thursday 9th at 3PM UTC (8AM PST/11AM EST).


If you want to meet with the team outside of these events, please pick any spot that works for you in our [calendar](https://calendar.app.google/GonEwLboKvPkG8pL6).

See you in Chicago!

## OpenFGA Documentation Search
[Skip to main content](https://openfga.dev/search#__docusaurus_skipToContent_fallback)

# Search the documentation

