# https://playwright.dev/python/ llms-full.txt

## Playwright for Python
[Skip to main content](https://playwright.dev/python/#__docusaurus_skipToContent_fallback)

![Browsers (Chromium, Firefox, WebKit)](https://playwright.dev/python/img/logos/Browsers.png)

### Any browser • Any platform • One API

**Cross-browser.** Playwright supports all modern rendering engines including Chromium, WebKit, and Firefox.

**Cross-platform.** Test on Windows, Linux, and macOS, locally or on CI, headless or headed.

**Cross-language.** Use the Playwright API in [TypeScript](https://playwright.dev/docs/intro), [JavaScript](https://playwright.dev/docs/intro), [Python](https://playwright.dev/python/docs/intro), [.NET](https://playwright.dev/dotnet/docs/intro), [Java](https://playwright.dev/java/docs/intro).

**Test Mobile Web.** Native mobile emulation of Google Chrome for Android and Mobile Safari. The same rendering engine works on your Desktop and in the Cloud.

### Resilient • No flaky tests

**Auto-wait.** Playwright waits for elements to be actionable prior to performing actions. It also has a rich set of introspection events. The combination of the two eliminates the need for artificial timeouts - the primary cause of flaky tests.

**Web-first assertions.** Playwright assertions are created specifically for the dynamic web. Checks are automatically retried until the necessary conditions are met.

**Tracing.** Configure test retry strategy, capture execution trace, videos, screenshots to eliminate flakes.

### No trade-offs • No limits

Browsers run web content belonging to different origins in different processes. Playwright is aligned with the modern browsers architecture and runs tests out-of-process. This makes Playwright free of the typical in-process test runner limitations.

**Multiple everything.** Test scenarios that span multiple **tabs**, multiple **origins** and multiple **users**. Create scenarios with different contexts for different users and run them against your server, all in one test.

**Trusted events.** Hover elements, interact with dynamic controls, produce trusted events. Playwright uses real browser input pipeline indistinguishable from the real user.

**Test frames, pierce Shadow DOM.** Playwright selectors pierce shadow DOM and allow entering frames seamlessly.

### Full isolation • Fast execution

**Browser contexts.** Playwright creates a browser context for each test. Browser context is equivalent to a brand new browser profile. This delivers full test isolation with zero overhead. Creating a new browser context only takes a handful of milliseconds.

**Log in once.** Save the authentication state of the context and reuse it in all the tests. This bypasses repetitive log-in operations in each test, yet delivers full isolation of independent tests.

### Powerful Tooling

**[Codegen.](https://playwright.dev/python/docs/codegen)** Generate tests by recording your actions. Save them into any language.

**[Playwright inspector.](https://playwright.dev/python/docs/debug#playwright-inspector)** Inspect page, generate selectors, step through the test execution, see click points, explore execution logs.

**[Trace Viewer.](https://playwright.dev/python/docs/trace-viewer-intro)** Capture all the information to investigate the test failure. Playwright trace contains test execution screencast, live DOM snapshots, action explorer, test source, and many more.

## Chosen by companies and open source projects

- [![VS Code](https://playwright.dev/python/img/logos/VSCode.png)](https://code.visualstudio.com/)
- [![Bing](https://playwright.dev/python/img/logos/Bing.png)](https://bing.com/)
- [![Outlook](https://playwright.dev/python/img/logos/Outlook.png)](https://outlook.com/)
- [![Disney+ Hotstar](https://playwright.dev/python/img/logos/DHotstar.jpg)](https://www.hotstar.com/)
- [![Material UI](https://playwright.dev/python/img/logos/MUI.png)](https://github.com/mui-org/material-ui)
- [![ING](https://playwright.dev/python/img/logos/ING.png)](https://github.com/ing-bank/lion)
- [![Adobe](https://playwright.dev/python/img/logos/Adobe2.png)](https://github.com/adobe/spectrum-web-components)
- [![React Navigation](https://playwright.dev/python/img/logos/ReactNavigation.png)](https://github.com/react-navigation/react-navigation)
- [![Accessibility Insights](https://playwright.dev/python/img/logos/accessibilityinsights.png)](https://accessibilityinsights.io/)

## Playwright Community Ambassadors
[Skip to main content](https://playwright.dev/python/community/ambassadors#__docusaurus_skipToContent_fallback)

On this page

Our Mission is to build an amazing Playwright community with the help of our ambassadors who are sharing their knowledge and passion for Playwright though live streams, video courses, conference talks and more.

## Meet the Ambassadors [​](https://playwright.dev/python/community/ambassadors\#meet-the-ambassadors "Direct link to Meet the Ambassadors")

We are more than excited to introduce to you our awesome Playwright Ambassadors and hope you enjoy the incredible content they are creating.

![Andrew Knight's avatar](https://playwright.dev/python/img/ambassadors/andy-knight.jpeg)

Andrew Knight

North Carolina

USA

English

![Ben Fellows's avatar](https://playwright.dev/python/img/ambassadors/ben-fellows.png)

Ben Fellows

Traverse City

USA

English

![Butch Mayhew's avatar](https://playwright.dev/python/img/ambassadors/butch-mayhew.jpg)

Butch Mayhew

Birmingham

USA

English

![Carlos Gauto's avatar](https://playwright.dev/python/img/ambassadors/carlos-gauto.png)

Carlos Gauto

Berazategui

Argentina

Spanish, English

![Cory House's avatar](https://playwright.dev/python/img/ambassadors/cory-house.jpeg)

Cory House

Kansas City

USA

English

![Jean-François Greffier's avatar](https://playwright.dev/python/img/ambassadors/jean-francois.png)

Jean-François Greffier

Rennes

France

French, English

![John Hill's avatar](https://playwright.dev/python/img/ambassadors/john-hill.jpeg)

John Hill

Palo Alto

USA

English

![Kent C. Dodds's avatar](https://playwright.dev/python/img/ambassadors/kent-c-dodds.jpeg)

Kent C. Dodds

Utah

USA

English

![Stefan Judis's avatar](https://playwright.dev/python/img/ambassadors/stefan-judis.jpeg)

Stefan Judis

Berlin

Germany

English

![Tally Barak's avatar](https://playwright.dev/python/img/ambassadors/tally-barak.jpeg)

Tally Barak

Tel Aviv

Israel

Hebrew, English

![Are you the next Ambassador?'s avatar](https://playwright.dev/python/img/ambassadors/playwright-logo.svg)

Are you the next Ambassador?

- [Meet the Ambassadors](https://playwright.dev/python/community/ambassadors#meet-the-ambassadors)

## Playwright Community Hub
[Skip to main content](https://playwright.dev/python/community/welcome#__docusaurus_skipToContent_fallback)

On this page

Welcome to the Playwright Community. We are so glad to have you here. In our community section take a look at our videos section to see videos on [conference talks](https://playwright.dev/python/community/conference-videos), [live streams](https://playwright.dev/python/community/live-streams), [feature videos](https://playwright.dev/python/community/feature-videos) and [release videos](https://playwright.dev/python/community/release-videos).

## Ambassadors [​](https://playwright.dev/python/community/welcome\#ambassadors "Direct link to Ambassadors")

Check out our [Ambassador page](https://playwright.dev/python/community/ambassadors) to the see the awesome people creating Playwright content and sharing it with the community.

## GitHub [​](https://playwright.dev/python/community/welcome\#github "Direct link to GitHub")

We love stars so make sure you [star us on GitHub](https://github.com/microsoft/playwright).

Please create an issue for the following:

- [Bug Reports](https://github.com/microsoft/playwright/issues/new?assignees=&labels=&template=bug.md&title=%5BBUG%5D)
- [Feature Requests](https://github.com/microsoft/playwright/issues/new?assignees=&labels=&template=feature_request.md&title=%5BFeature%5D)
- [Report Regression](https://github.com/microsoft/playwright/issues/new?assignees=&labels=&template=regression.md&title=%5BREGRESSION%5D%3A+)
- [Report a security vulnerability](https://github.com/microsoft/playwright/security/policy)

## Contributing [​](https://playwright.dev/python/community/welcome\#contributing "Direct link to Contributing")

Check out our [contributing guide](https://github.com/microsoft/playwright/blob/main/CONTRIBUTING.md) if you would like to contribute to Playwright.

## Community Discord [​](https://playwright.dev/python/community/welcome\#community-discord "Direct link to Community Discord")

Join our community [Discord Server](https://aka.ms/playwright/discord) to connect with other developers using Playwright, ask questions in our ['help-playwright'](https://discord.com/channels/807756831384403968/1054804523652231198) forum, share your articles and videos and join live events on the Playwright stage.

## Community LinkedIn [​](https://playwright.dev/python/community/welcome\#community-linkedin "Direct link to Community LinkedIn")

Join our community on [LinkedIn](https://www.linkedin.com/company/playwrightweb/) to connect with other developers and hear the latest news about Playwright.

## Stack Overflow [​](https://playwright.dev/python/community/welcome\#stack-overflow "Direct link to Stack Overflow")

Read through the [existing questions](https://stackoverflow.com/tags/playwright) tagged with **playwright** or [ask your own](https://stackoverflow.com/questions/ask?tags=playwright)!

## YouTube [​](https://playwright.dev/python/community/welcome\#youtube "Direct link to YouTube")

Check out our [YouTube channel](https://www.youtube.com/channel/UC46Zj8pDH5tDosqm1gd7WTg) for getting started series, feature videos and new releases.

## Blog [​](https://playwright.dev/python/community/welcome\#blog "Direct link to Blog")

Follow our [Blog](https://dev.to/playwright) on dev.to for official posts on Playwright.

## News [​](https://playwright.dev/python/community/welcome\#news "Direct link to News")

For the latest news about Playwright, [follow **@playwrightweb** on Twitter](https://twitter.com/playwrightweb).

## Playwright Training [​](https://playwright.dev/python/community/welcome\#training "Direct link to Playwright Training")

Learn how to [Build Your first end-to-end test with Playwright](https://learn.microsoft.com/en-us/training/modules/build-with-playwright/) on Microsoft Learn.

- [Ambassadors](https://playwright.dev/python/community/welcome#ambassadors)
- [GitHub](https://playwright.dev/python/community/welcome#github)
- [Contributing](https://playwright.dev/python/community/welcome#contributing)
- [Community Discord](https://playwright.dev/python/community/welcome#community-discord)
- [Community LinkedIn](https://playwright.dev/python/community/welcome#community-linkedin)
- [Stack Overflow](https://playwright.dev/python/community/welcome#stack-overflow)
- [YouTube](https://playwright.dev/python/community/welcome#youtube)
- [Blog](https://playwright.dev/python/community/welcome#blog)
- [News](https://playwright.dev/python/community/welcome#news)
- [Playwright Training](https://playwright.dev/python/community/welcome#training)

## Playwright Conference Videos
[Skip to main content](https://playwright.dev/python/community/conference-videos#__docusaurus_skipToContent_fallback)

# Conference Videos

Check out the latest conference talks on Playwright

- #### TestU

2024



Advanced Playwright Techniques for Flawless Testing







Debbie O'Brien

English

- #### BreizhCamp

2023



Playwright : l'outil qui va révolutionner les tests end-to-end







Jean-François Greffier

French

- #### Vite Conf

2023



End to End testing with Playwright







Debbie O'Brien

English

- #### MiduConf

2023



Aprende a crear Test de forma Facil







Debbie O'Brien

Spanish

- #### Testμ

2023



Making Testing Fun







Max Schmitt

English

- #### Microsoft meetup

2023



Playwright can do this?







Stefan Judis

English

- #### JSHeroes

2023



Playing your tests wright







Debbie O'Brien

English

- #### PYCon US

2023



Playwright at PYCon US







Andrew Knight

English

- #### VS Code Live

2023



Playing your tests wright in VS Code







Debbie O'Brien

English

- #### Devoxx France

2023



Playwright : l'outil qui va révolutionner les tests end-to-end







Jean-François Greffier

French

- #### Angular Tiny Conf

2023



Playing your tests wright







Debbie O'Brien

English

- #### Vue Amsterdam

2023



Playing your tests wright







Debbie O'Brien

- #### .NET Conf

2022



Testing Blazor Applications with Playwright







Debbie O'BrienMax Schmitt

- #### DevFest Nantes

2022



Testing Web Applications with Playwright







Debbie O'Brien

- #### React Brussels

2022



Testing Web Applications with Playwright







Debbie O'Brien

- #### Argentesting

2022



Playwright: De Cero a Continuous Testing con Low Code. ¿Es posible?







Carlos Gauto

Spanish

- #### VueJS DE, Berlin

2022



Testing Web Applications with Playwright







Debbie O'Brien

- #### Infobip Shift Croatia

2022



Testing Web Applications with Playwright







Debbie O'Brien

- #### Nordic.js, Stockholm

2022



Testing Web Applications with Playwright







Debbie O'Brien

- #### MiduConf, Virtual

2022



Tests E2E con Playwright







Debbie O'Brien

Spanish

- #### PyOhio

2022



A Quickstart to Web Testing with Playwright







Andy Knight

- #### Python Web Conf

2022



Playwright comes to Python







Andrey LushnikovMax Schmitt

- #### Craft Conf, Budapest

2022



Testing Web Applications with Playwright







Debbie O'Brien

- [![Testing Web Applications with Playwright](https://user-images.githubusercontent.com/13063165/179012197-bf33f44d-f1e0-47bd-9079-f14102a4d45b.png)](https://www.vuemastery.com/conferences/vueconf-us-2022/component-testing-with-playwright/)





#### Vue Conf USA

2022



Testing Web Applications with Playwright







Debbie O'Brien

- #### dotNET, Madrid

2022



Testing Blazor Applications with Playwright







Debbie O'Brien

- #### Heisenbug

2021



Introducing Playwright test runner







Andrey LushnikovJoel Einbinder

- #### Applitools

2021



Four Futuristic Features







Andrey Lushnikov

- #### Holy JS

2021



The multi-year quest for the best web test in the west







Andrey Lushnikov

- #### Applitools

2021



A New Test Automation Framework for the Modern Web







Andrey LushnikovPavel Feldman

- #### Heisenbug

2021



Web testing without drama







Andrey Lushnikov

Russian

## Playwright Release Videos
[Skip to main content](https://playwright.dev/python/community/release-videos#__docusaurus_skipToContent_fallback)

# Release Videos

Check out the latest Playwright release videos

- [**Playwright v1.48**](https://playwright.dev/python/docs/release-notes#version-148)







webSocket routingUI mode / Trace Viewer

- [**Playwright v1.46**](https://playwright.dev/python/docs/release-notes#version-146)







client certificates--only-changedUI mode updates

- [**Playwright v1.45**](https://playwright.dev/python/docs/release-notes#version-145)







Clock APIdirectory uploadsControlOrMeta+modifier

- [**Playwright v1.44**](https://playwright.dev/python/docs/release-notes#version-144)







VS Code extensionaccessibility assertionslast failed testclear cookieslocator handler

- [**Playwright v1.41 & 1.42**](https://playwright.dev/python/docs/release-notes#version-142)







new tag and annotation syntaxscreenshot stylinglocator handler

- [**Playwright v1.40**](https://playwright.dev/python/docs/release-notes#version-140)







test generator updategenerate assertions

- [**Playwright v1.39**](https://playwright.dev/python/docs/release-notes#version-139)







box test stepscustom matchersmerge test fixtures and assertions

- [**Playwright v1.38**](https://playwright.dev/python/docs/release-notes#version-138)







UI Mode updateform fillingupdate Playwright

- [**Playwright v1.36 & 1.37**](https://playwright.dev/python/docs/release-notes#version-137)







merge HTML Reporthorizontal scalingUI Mode updatesDebian 12 support

- [**Playwright v1.35**](https://playwright.dev/python/docs/release-notes#version-135)







View traces from VS Codemask colorintercept routesui mode in a tabuninstall

- [**Playwright v1.33 & 1.34**](https://playwright.dev/python/docs/release-notes#version-134)







ui modetear downlocatorsexpect

- [**Playwright v1.32**](https://playwright.dev/python/docs/release-notes#version-132)







ui modewatch modetime travel debugginglive trace viewer

- [**Playwright v1.31**](https://playwright.dev/python/docs/release-notes#version-131)







project dependenciesglobal setupauthviewport assertion

- [**Playwright v1.29**](https://playwright.dev/python/docs/release-notes#version-129)







backend mockingworking with lists

- [**Playwright v1.28**](https://playwright.dev/python/docs/release-notes#version-128)







VS Code extensionPlaywright inspectorsnapshot path

- [**Playwright v1.27**](https://playwright.dev/python/docs/release-notes#version-127)







Locatorsworkershtml reporter

- [**Playwright v1.25**](https://playwright.dev/python/docs/release-notes#version-125)







VS Code ExtensionTest Runner--trace=on

- [**Playwright v1.24**](https://playwright.dev/python/docs/release-notes#version-124)







Multiple Web ServersAnonymous DescribeComponent Tests Update

- [**Playwright v1.23**](https://playwright.dev/python/docs/release-notes#version-123)







Network ReplayAdvanced RoutingWeb-First Assertions Update

- [**Playwright v1.22**](https://playwright.dev/python/docs/release-notes#version-122)







Components TestingLocator FiltersWeb-First Assertions

- [**Playwright v1.21**](https://playwright.dev/python/docs/release-notes#version-121)







Screenshot Optionsexpect.poll

- [**Playwright v1.20**](https://playwright.dev/python/docs/release-notes#version-120)







Screenshot OptionsmaxDiffPixelsfullyParallel

- [**Playwright v1.19**](https://playwright.dev/python/docs/release-notes#version-119)







Soft Assertionscustom error messagehas option

- [**Playwright v1.18**](https://playwright.dev/python/docs/release-notes#version-118)







Locator ImprovementsTesting API ImprovementsCreate Playwright

- [**Playwright v1.17**](https://playwright.dev/python/docs/release-notes#version-117)







Frame LocatorsTrace Viewer UpdateHTML Report Update

- [**Playwright v1.16**](https://playwright.dev/python/docs/release-notes#version-116)







API TestingResponse InterceptionNew HTML reporter

- [**Playwright v1.15**](https://playwright.dev/python/docs/release-notes#version-115)







Mouse WheelNew Headers APItest.parallel()

- [**Playwright v1.14**](https://playwright.dev/python/docs/release-notes#version-114)







Locators APIWeb-First Assertionstest.step

## Playwright Live Streams
[Skip to main content](https://playwright.dev/python/community/live-streams#__docusaurus_skipToContent_fallback)

# Live Streams

Check out the latest Playwright live streams

- #### Playwright Live

2024



Testing with Playwright, Epic React testing tab, Epic web testing course and more







Debbie O'BrienKent C. Dodds

- #### Playwright Live

2024



The Playwright team demos how to iterate quickly using the new-only-changed option







Debbie O'BrienSimon Knott

- #### Playwright Live

2024



It's time to talk Playwright with the clock API







Debbie O'BrienBen Fellows

- #### Playwright Live Spanish

2024



Comunidad de Playwright, última versión y más







Debbie O'BrienCarlos Gauto

- #### Playwright Live

2024



Community, latest release and more







Debbie O'BrienBen Fellows

- #### Learn Live

2023



Deconstruct the E2E Workflow for Testing and Deployment







Nitya Narasimhan

- #### This Dot Media

2023



Awesome Web Testing with Playwright







Andrew Knight

- #### Playwright

2023



Playwright Q&A







Debbie O'Brien, Max Schmitt, Andrey Lushnikov

- #### Uniform

2023



End to End testing with Playwright







Debbie O'Brien, Tim Benniks

- #### This Dot Media

2023



Introduction to Playwright for End-to-End Testing







Debbie O'Brien

- #### Filip Hric

2023



Lets test with Playwright







Debbie O'Brien

- #### Eddie Jaoude

2022



Playwright cross browser automated testing







Debbie O'Brien

- #### Visual Studio Code

2022



Testing modern web apps with Playwright and VS Code







Marcus Felling, Burke Holland

- #### Microsoft Developer

2021



End to End Testing w/ Playwright







Mandy WhaleyArjun Attam

## Playwright Feature Videos
[Skip to main content](https://playwright.dev/python/community/feature-videos#__docusaurus_skipToContent_fallback)

# Feature Videos

Check out the latest Playwright feature videos

- API Mocking

- Trace Viewer

- Codegen

- UI Mode

- Component Tests (preview)

## Playwright Learning Videos
[Skip to main content](https://playwright.dev/python/community/learn-videos#__docusaurus_skipToContent_fallback)

# Learn Videos

Check out the latest videos for learning Playwright

- How to Run Tests in Playwright with the VS Code Extension

- How to Generate Tests in playwright with the VS Code Extension

- Get Started with end-to-end testing: Playwright. Introduction

- Get Started with end-to-end testing: Playwright. Getting Started

- Get Started with end-to-end testing: Playwright. Running Tests

- Get Started with end-to-end testing: Playwright. Writing Tests

- Get Started with end-to-end testing: Playwright. Debugging Tests

- Get Started with end-to-end testing: Playwright. Running Tests on CI

## Playwright Documentation Search
[Skip to main content](https://playwright.dev/python/search#__docusaurus_skipToContent_fallback)

# Search the documentation

[Search by Algolia](https://www.algolia.com/)

## API Response Assertions
[Skip to main content](https://playwright.dev/python/docs/api/class-apiresponseassertions#__docusaurus_skipToContent_fallback)

On this page

The [APIResponseAssertions](https://playwright.dev/python/docs/api/class-apiresponseassertions "APIResponseAssertions") class provides assertion methods that can be used to make assertions about the [APIResponse](https://playwright.dev/python/docs/api/class-apiresponse "APIResponse") in the tests.

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import Page, expect

def test_navigates_to_login_page(page: Page) -> None:
    # ..
    response = page.request.get('https://playwright.dev')
    expect(response).to_be_ok()

```

```codeBlockLines_e6Vv
from playwright.async_api import Page, expect

async def test_navigates_to_login_page(page: Page) -> None:
    # ..
    response = await page.request.get('https://playwright.dev')
    await expect(response).to_be_ok()

```

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-apiresponseassertions\#methods "Direct link to Methods")

### not\_to\_be\_ok [​](https://playwright.dev/python/docs/api/class-apiresponseassertions\#api-response-assertions-not-to-be-ok "Direct link to not_to_be_ok")

Added in: v1.19apiResponseAssertions.not\_to\_be\_ok

The opposite of [expect(response).to\_be\_ok()](https://playwright.dev/python/docs/api/class-apiresponseassertions#api-response-assertions-to-be-ok).

**Usage**

```codeBlockLines_e6Vv
expect(response).not_to_be_ok()

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-apiresponseassertions#api-response-assertions-not-to-be-ok-return)

* * *

### to\_be\_ok [​](https://playwright.dev/python/docs/api/class-apiresponseassertions\#api-response-assertions-to-be-ok "Direct link to to_be_ok")

Added in: v1.18apiResponseAssertions.to\_be\_ok

Ensures the response status code is within `200..299` range.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
import re
from playwright.sync_api import expect

# ...
expect(response).to_be_ok()

```

```codeBlockLines_e6Vv
from playwright.async_api import expect

# ...
await expect(response).to_be_ok()

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-apiresponseassertions#api-response-assertions-to-be-ok-return)

- [Methods](https://playwright.dev/python/docs/api/class-apiresponseassertions#methods)
  - [not\_to\_be\_ok](https://playwright.dev/python/docs/api/class-apiresponseassertions#api-response-assertions-not-to-be-ok)
  - [to\_be\_ok](https://playwright.dev/python/docs/api/class-apiresponseassertions#api-response-assertions-to-be-ok)

## WebSocket Route Management
[Skip to main content](https://playwright.dev/python/docs/api/class-websocketroute#__docusaurus_skipToContent_fallback)

On this page

Whenever a [`WebSocket`](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket) route is set up with [page.route\_web\_socket()](https://playwright.dev/python/docs/api/class-page#page-route-web-socket) or [browser\_context.route\_web\_socket()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route-web-socket), the `WebSocketRoute` object allows to handle the WebSocket, like an actual server would do.

**Mocking**

By default, the routed WebSocket will not connect to the server. This way, you can mock entire communcation over the WebSocket. Here is an example that responds to a `"request"` with a `"response"`.

- Sync
- Async

```codeBlockLines_e6Vv
def message_handler(ws: WebSocketRoute, message: Union[str, bytes]):
  if message == "request":
    ws.send("response")

page.route_web_socket("wss://example.com/ws", lambda ws: ws.on_message(
    lambda message: message_handler(ws, message)
))

```

```codeBlockLines_e6Vv
def message_handler(ws: WebSocketRoute, message: Union[str, bytes]):
  if message == "request":
    ws.send("response")

await page.route_web_socket("wss://example.com/ws", lambda ws: ws.on_message(
    lambda message: message_handler(ws, message)
))

```

Since we do not call [web\_socket\_route.connect\_to\_server](https://playwright.dev/python/docs/api/class-websocketroute#web-socket-route-connect-to-server) inside the WebSocket route handler, Playwright assumes that WebSocket will be mocked, and opens the WebSocket inside the page automatically.

Here is another example that handles JSON messages:

- Sync
- Async

```codeBlockLines_e6Vv
def message_handler(ws: WebSocketRoute, message: Union[str, bytes]):
  json_message = json.loads(message)
  if json_message["request"] == "question":
    ws.send(json.dumps({ "response": "answer" }))

page.route_web_socket("wss://example.com/ws", lambda ws: ws.on_message(
    lambda message: message_handler(ws, message)
))

```

```codeBlockLines_e6Vv
def message_handler(ws: WebSocketRoute, message: Union[str, bytes]):
  json_message = json.loads(message)
  if json_message["request"] == "question":
    ws.send(json.dumps({ "response": "answer" }))

await page.route_web_socket("wss://example.com/ws", lambda ws: ws.on_message(
    lambda message: message_handler(ws, message)
))

```

**Intercepting**

Alternatively, you may want to connect to the actual server, but intercept messages in-between and modify or block them. Calling [web\_socket\_route.connect\_to\_server](https://playwright.dev/python/docs/api/class-websocketroute#web-socket-route-connect-to-server) returns a server-side `WebSocketRoute` instance that you can send messages to, or handle incoming messages.

Below is an example that modifies some messages sent by the page to the server. Messages sent from the server to the page are left intact, relying on the default forwarding.

- Sync
- Async

```codeBlockLines_e6Vv
def message_handler(server: WebSocketRoute, message: Union[str, bytes]):
  if message == "request":
    server.send("request2")
  else:
    server.send(message)

def handler(ws: WebSocketRoute):
  server = ws.connect_to_server()
  ws.on_message(lambda message: message_handler(server, message))

page.route_web_socket("/ws", handler)

```

```codeBlockLines_e6Vv
def message_handler(server: WebSocketRoute, message: Union[str, bytes]):
  if message == "request":
    server.send("request2")
  else:
    server.send(message)

def handler(ws: WebSocketRoute):
  server = ws.connect_to_server()
  ws.on_message(lambda message: message_handler(server, message))

await page.route_web_socket("/ws", handler)

```

After connecting to the server, all **messages are forwarded** between the page and the server by default.

However, if you call [web\_socket\_route.on\_message()](https://playwright.dev/python/docs/api/class-websocketroute#web-socket-route-on-message) on the original route, messages from the page to the server **will not be forwarded** anymore, but should instead be handled by the [handler](https://playwright.dev/python/docs/api/class-websocketroute#web-socket-route-on-message-option-handler).

Similarly, calling [web\_socket\_route.on\_message()](https://playwright.dev/python/docs/api/class-websocketroute#web-socket-route-on-message) on the server-side WebSocket will **stop forwarding messages** from the server to the page, and [handler](https://playwright.dev/python/docs/api/class-websocketroute#web-socket-route-on-message-option-handler) should take care of them.

The following example blocks some messages in both directions. Since it calls [web\_socket\_route.on\_message()](https://playwright.dev/python/docs/api/class-websocketroute#web-socket-route-on-message) in both directions, there is no automatic forwarding at all.

- Sync
- Async

```codeBlockLines_e6Vv
def ws_message_handler(server: WebSocketRoute, message: Union[str, bytes]):
  if message != "blocked-from-the-page":
    server.send(message)

def server_message_handler(ws: WebSocketRoute, message: Union[str, bytes]):
  if message != "blocked-from-the-server":
    ws.send(message)

def handler(ws: WebSocketRoute):
  server = ws.connect_to_server()
  ws.on_message(lambda message: ws_message_handler(server, message))
  server.on_message(lambda message: server_message_handler(ws, message))

page.route_web_socket("/ws", handler)

```

```codeBlockLines_e6Vv
def ws_message_handler(server: WebSocketRoute, message: Union[str, bytes]):
  if message != "blocked-from-the-page":
    server.send(message)

def server_message_handler(ws: WebSocketRoute, message: Union[str, bytes]):
  if message != "blocked-from-the-server":
    ws.send(message)

def handler(ws: WebSocketRoute):
  server = ws.connect_to_server()
  ws.on_message(lambda message: ws_message_handler(server, message))
  server.on_message(lambda message: server_message_handler(ws, message))

await page.route_web_socket("/ws", handler)

```

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-websocketroute\#methods "Direct link to Methods")

### close [​](https://playwright.dev/python/docs/api/class-websocketroute\#web-socket-route-close "Direct link to close")

Added in: v1.48webSocketRoute.close

Closes one side of the WebSocket connection.

**Usage**

```codeBlockLines_e6Vv
web_socket_route.close()
web_socket_route.close(**kwargs)

```

**Arguments**

- `code` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ [#](https://playwright.dev/python/docs/api/class-websocketroute#web-socket-route-close-option-code)

Optional [close code](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close#code).

- `reason` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-websocketroute#web-socket-route-close-option-reason)

Optional [close reason](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close#reason).


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-websocketroute#web-socket-route-close-return)

* * *

### on\_close [​](https://playwright.dev/python/docs/api/class-websocketroute\#web-socket-route-on-close "Direct link to on_close")

Added in: v1.48webSocketRoute.on\_close

Allows to handle [`WebSocket.close`](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close).

By default, closing one side of the connection, either in the page or on the server, will close the other side. However, when [web\_socket\_route.on\_close()](https://playwright.dev/python/docs/api/class-websocketroute#web-socket-route-on-close) handler is set up, the default forwarding of closure is disabled, and handler should take care of it.

**Usage**

```codeBlockLines_e6Vv
web_socket_route.on_close(handler)

```

**Arguments**

- `handler` [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") \| \[undefined\]\]: [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\[ [Any](https://docs.python.org/3/library/typing.html#typing.Any "Any")\] \| [Any](https://docs.python.org/3/library/typing.html#typing.Any "Any") [#](https://playwright.dev/python/docs/api/class-websocketroute#web-socket-route-on-close-option-handler)

Function that will handle WebSocket closure. Received an optional [close code](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close#code) and an optional [close reason](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close#reason).


* * *

### on\_message [​](https://playwright.dev/python/docs/api/class-websocketroute\#web-socket-route-on-message "Direct link to on_message")

Added in: v1.48webSocketRoute.on\_message

This method allows to handle messages that are sent by the WebSocket, either from the page or from the server.

When called on the original WebSocket route, this method handles messages sent from the page. You can handle this messages by responding to them with [web\_socket\_route.send()](https://playwright.dev/python/docs/api/class-websocketroute#web-socket-route-send), forwarding them to the server-side connection returned by [web\_socket\_route.connect\_to\_server](https://playwright.dev/python/docs/api/class-websocketroute#web-socket-route-connect-to-server) or do something else.

Once this method is called, messages are not automatically forwarded to the server or to the page - you should do that manually by calling [web\_socket\_route.send()](https://playwright.dev/python/docs/api/class-websocketroute#web-socket-route-send). See examples at the top for more details.

Calling this method again will override the handler with a new one.

**Usage**

```codeBlockLines_e6Vv
web_socket_route.on_message(handler)

```

**Arguments**

- `handler` [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\]: [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\[ [Any](https://docs.python.org/3/library/typing.html#typing.Any "Any")\] \| [Any](https://docs.python.org/3/library/typing.html#typing.Any "Any") [#](https://playwright.dev/python/docs/api/class-websocketroute#web-socket-route-on-message-option-handler)

Function that will handle messages.


* * *

### send [​](https://playwright.dev/python/docs/api/class-websocketroute\#web-socket-route-send "Direct link to send")

Added in: v1.48webSocketRoute.send

Sends a message to the WebSocket. When called on the original WebSocket, sends the message to the page. When called on the result of [web\_socket\_route.connect\_to\_server](https://playwright.dev/python/docs/api/class-websocketroute#web-socket-route-connect-to-server), sends the message to the server. See examples at the top for more details.

**Usage**

```codeBlockLines_e6Vv
web_socket_route.send(message)

```

**Arguments**

- `message` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") [#](https://playwright.dev/python/docs/api/class-websocketroute#web-socket-route-send-option-message)

Message to send.


* * *

## Properties [​](https://playwright.dev/python/docs/api/class-websocketroute\#properties "Direct link to Properties")

### connect\_to\_server [​](https://playwright.dev/python/docs/api/class-websocketroute\#web-socket-route-connect-to-server "Direct link to connect_to_server")

Added in: v1.48webSocketRoute.connect\_to\_server

By default, routed WebSocket does not connect to the server, so you can mock entire WebSocket communication. This method connects to the actual WebSocket server, and returns the server-side [WebSocketRoute](https://playwright.dev/python/docs/api/class-websocketroute "WebSocketRoute") instance, giving the ability to send and receive messages from the server.

Once connected to the server:

- Messages received from the server will be **automatically forwarded** to the WebSocket in the page, unless [web\_socket\_route.on\_message()](https://playwright.dev/python/docs/api/class-websocketroute#web-socket-route-on-message) is called on the server-side `WebSocketRoute`.
- Messages sent by the [`WebSocket.send()`](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send) call in the page will be **automatically forwarded** to the server, unless [web\_socket\_route.on\_message()](https://playwright.dev/python/docs/api/class-websocketroute#web-socket-route-on-message) is called on the original `WebSocketRoute`.

See examples at the top for more details.

**Usage**

```codeBlockLines_e6Vv
web_socket_route.connect_to_server

```

**Returns**

- [WebSocketRoute](https://playwright.dev/python/docs/api/class-websocketroute "WebSocketRoute") [#](https://playwright.dev/python/docs/api/class-websocketroute#web-socket-route-connect-to-server-return)

* * *

### url [​](https://playwright.dev/python/docs/api/class-websocketroute\#web-socket-route-url "Direct link to url")

Added in: v1.48webSocketRoute.url

URL of the WebSocket created in the page.

**Usage**

```codeBlockLines_e6Vv
web_socket_route.url

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-websocketroute#web-socket-route-url-return)

- [Methods](https://playwright.dev/python/docs/api/class-websocketroute#methods)
  - [close](https://playwright.dev/python/docs/api/class-websocketroute#web-socket-route-close)
  - [on\_close](https://playwright.dev/python/docs/api/class-websocketroute#web-socket-route-on-close)
  - [on\_message](https://playwright.dev/python/docs/api/class-websocketroute#web-socket-route-on-message)
  - [send](https://playwright.dev/python/docs/api/class-websocketroute#web-socket-route-send)
- [Properties](https://playwright.dev/python/docs/api/class-websocketroute#properties)
  - [connect\_to\_server](https://playwright.dev/python/docs/api/class-websocketroute#web-socket-route-connect-to-server)
  - [url](https://playwright.dev/python/docs/api/class-websocketroute#web-socket-route-url)

## Playwright Download API
[Skip to main content](https://playwright.dev/python/docs/api/class-download#__docusaurus_skipToContent_fallback)

On this page

[Download](https://playwright.dev/python/docs/api/class-download "Download") objects are dispatched by page via the [page.on("download")](https://playwright.dev/python/docs/api/class-page#page-event-download) event.

All the downloaded files belonging to the browser context are deleted when the browser context is closed.

Download event is emitted once the download starts. Download path becomes available once download completes.

- Sync
- Async

```codeBlockLines_e6Vv
# Start waiting for the download
with page.expect_download() as download_info:
    # Perform the action that initiates download
    page.get_by_text("Download file").click()
download = download_info.value

# Wait for the download process to complete and save the downloaded file somewhere
download.save_as("/path/to/save/at/" + download.suggested_filename)

```

```codeBlockLines_e6Vv
# Start waiting for the download
async with page.expect_download() as download_info:
    # Perform the action that initiates download
    await page.get_by_text("Download file").click()
download = await download_info.value

# Wait for the download process to complete and save the downloaded file somewhere
await download.save_as("/path/to/save/at/" + download.suggested_filename)

```

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-download\#methods "Direct link to Methods")

### cancel [​](https://playwright.dev/python/docs/api/class-download\#download-cancel "Direct link to cancel")

Added in: v1.13download.cancel

Cancels a download. Will not fail if the download is already finished or canceled. Upon successful cancellations, `download.failure()` would resolve to `'canceled'`.

**Usage**

```codeBlockLines_e6Vv
download.cancel()

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-download#download-cancel-return)

* * *

### delete [​](https://playwright.dev/python/docs/api/class-download\#download-delete "Direct link to delete")

Added before v1.9download.delete

Deletes the downloaded file. Will wait for the download to finish if necessary.

**Usage**

```codeBlockLines_e6Vv
download.delete()

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-download#download-delete-return)

* * *

### failure [​](https://playwright.dev/python/docs/api/class-download\#download-failure "Direct link to failure")

Added before v1.9download.failure

Returns download error if any. Will wait for the download to finish if necessary.

**Usage**

```codeBlockLines_e6Vv
download.failure()

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-download#download-failure-return)

* * *

### path [​](https://playwright.dev/python/docs/api/class-download\#download-path "Direct link to path")

Added before v1.9download.path

Returns path to the downloaded file for a successful download, or throws for a failed/canceled download. The method will wait for the download to finish if necessary. The method throws when connected remotely.

Note that the download's file name is a random GUID, use [download.suggested\_filename](https://playwright.dev/python/docs/api/class-download#download-suggested-filename) to get suggested file name.

**Usage**

```codeBlockLines_e6Vv
download.path()

```

**Returns**

- [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path") [#](https://playwright.dev/python/docs/api/class-download#download-path-return)

* * *

### save\_as [​](https://playwright.dev/python/docs/api/class-download\#download-save-as "Direct link to save_as")

Added before v1.9download.save\_as

Copy the download to a user-specified path. It is safe to call this method while the download is still in progress. Will wait for the download to finish if necessary.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
download.save_as("/path/to/save/at/" + download.suggested_filename)

```

```codeBlockLines_e6Vv
await download.save_as("/path/to/save/at/" + download.suggested_filename)

```

**Arguments**

- `path` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] [#](https://playwright.dev/python/docs/api/class-download#download-save-as-option-path)

Path where the download should be copied.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-download#download-save-as-return)

* * *

## Properties [​](https://playwright.dev/python/docs/api/class-download\#properties "Direct link to Properties")

### page [​](https://playwright.dev/python/docs/api/class-download\#download-page "Direct link to page")

Added in: v1.12download.page

Get the page that the download belongs to.

**Usage**

```codeBlockLines_e6Vv
download.page

```

**Returns**

- [Page](https://playwright.dev/python/docs/api/class-page "Page") [#](https://playwright.dev/python/docs/api/class-download#download-page-return)

* * *

### suggested\_filename [​](https://playwright.dev/python/docs/api/class-download\#download-suggested-filename "Direct link to suggested_filename")

Added before v1.9download.suggested\_filename

Returns suggested filename for this download. It is typically computed by the browser from the [`Content-Disposition`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition) response header or the `download` attribute. See the spec on [whatwg](https://html.spec.whatwg.org/#downloading-resources). Different browsers can use different logic for computing it.

**Usage**

```codeBlockLines_e6Vv
download.suggested_filename

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-download#download-suggested-filename-return)

* * *

### url [​](https://playwright.dev/python/docs/api/class-download\#download-url "Direct link to url")

Added before v1.9download.url

Returns downloaded url.

**Usage**

```codeBlockLines_e6Vv
download.url

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-download#download-url-return)

- [Methods](https://playwright.dev/python/docs/api/class-download#methods)
  - [cancel](https://playwright.dev/python/docs/api/class-download#download-cancel)
  - [delete](https://playwright.dev/python/docs/api/class-download#download-delete)
  - [failure](https://playwright.dev/python/docs/api/class-download#download-failure)
  - [path](https://playwright.dev/python/docs/api/class-download#download-path)
  - [save\_as](https://playwright.dev/python/docs/api/class-download#download-save-as)
- [Properties](https://playwright.dev/python/docs/api/class-download#properties)
  - [page](https://playwright.dev/python/docs/api/class-download#download-page)
  - [suggested\_filename](https://playwright.dev/python/docs/api/class-download#download-suggested-filename)
  - [url](https://playwright.dev/python/docs/api/class-download#download-url)

## Custom Selector Engines
[Skip to main content](https://playwright.dev/python/docs/api/class-selectors#__docusaurus_skipToContent_fallback)

On this page

Selectors can be used to install custom selector engines. See [extensibility](https://playwright.dev/python/docs/extensibility) for more information.

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-selectors\#methods "Direct link to Methods")

### register [​](https://playwright.dev/python/docs/api/class-selectors\#selectors-register "Direct link to register")

Added before v1.9selectors.register

Selectors must be registered before creating the page.

**Usage**

An example of registering selector engine that queries elements based on a tag name:

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    tag_selector = """
      {
          // Returns the first element matching given selector in the root's subtree.
          query(root, selector) {
              return root.querySelector(selector);
          },
          // Returns all elements matching given selector in the root's subtree.
          queryAll(root, selector) {
              return Array.from(root.querySelectorAll(selector));
          }
      }"""

    # Register the engine. Selectors will be prefixed with "tag=".
    playwright.selectors.register("tag", tag_selector)
    browser = playwright.chromium.launch()
    page = browser.new_page()
    page.set_content('<div><button>Click me</button></div>')

    # Use the selector prefixed with its name.
    button = page.locator('tag=button')
    # Combine it with built-in locators.
    page.locator('tag=div').get_by_text('Click me').click()
    # Can use it in any methods supporting selectors.
    button_count = page.locator('tag=button').count()
    print(button_count)
    browser.close()

with sync_playwright() as playwright:
    run(playwright)

```

```codeBlockLines_e6Vv
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    tag_selector = """
      {
          // Returns the first element matching given selector in the root's subtree.
          query(root, selector) {
              return root.querySelector(selector);
          },
          // Returns all elements matching given selector in the root's subtree.
          queryAll(root, selector) {
              return Array.from(root.querySelectorAll(selector));
          }
      }"""

    # Register the engine. Selectors will be prefixed with "tag=".
    await playwright.selectors.register("tag", tag_selector)
    browser = await playwright.chromium.launch()
    page = await browser.new_page()
    await page.set_content('<div><button>Click me</button></div>')

    # Use the selector prefixed with its name.
    button = await page.query_selector('tag=button')
    # Combine it with built-in locators.
    await page.locator('tag=div').get_by_text('Click me').click()
    # Can use it in any methods supporting selectors.
    button_count = await page.locator('tag=button').count()
    print(button_count)
    await browser.close()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)

asyncio.run(main())

```

**Arguments**

- `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-selectors#selectors-register-option-name)

Name that is used in selectors as a prefix, e.g. `{name: 'foo'}` enables `foo=myselectorbody` selectors. May only contain `[a-zA-Z0-9_]` characters.

- `script` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-selectors#selectors-register-option-script)

Raw script content.

- `content_script` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-selectors#selectors-register-option-content-script)

Whether to run this selector engine in isolated JavaScript environment. This environment has access to the same DOM, but not any JavaScript objects from the frame's scripts. Defaults to `false`. Note that running as a content script is not guaranteed when this engine is used together with other registered engines.

- `path` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-selectors#selectors-register-option-path)

Path to the JavaScript file. If `path` is a relative path, then it is resolved relative to the current working directory.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-selectors#selectors-register-return)

* * *

### set\_test\_id\_attribute [​](https://playwright.dev/python/docs/api/class-selectors\#selectors-set-test-id-attribute "Direct link to set_test_id_attribute")

Added in: v1.27selectors.set\_test\_id\_attribute

Defines custom attribute name to be used in [page.get\_by\_test\_id()](https://playwright.dev/python/docs/api/class-page#page-get-by-test-id). `data-testid` is used by default.

**Usage**

```codeBlockLines_e6Vv
selectors.set_test_id_attribute(attribute_name)

```

**Arguments**

- `attribute_name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-selectors#selectors-set-test-id-attribute-option-attribute-name)

Test id attribute name.


- [Methods](https://playwright.dev/python/docs/api/class-selectors#methods)
  - [register](https://playwright.dev/python/docs/api/class-selectors#selectors-register)
  - [set\_test\_id\_attribute](https://playwright.dev/python/docs/api/class-selectors#selectors-set-test-id-attribute)

## Playwright Keyboard API
[Skip to main content](https://playwright.dev/python/docs/api/class-keyboard#__docusaurus_skipToContent_fallback)

On this page

Keyboard provides an api for managing a virtual keyboard. The high level api is [keyboard.type()](https://playwright.dev/python/docs/api/class-keyboard#keyboard-type), which takes raw characters and generates proper `keydown`, `keypress`/ `input`, and `keyup` events on your page.

For finer control, you can use [keyboard.down()](https://playwright.dev/python/docs/api/class-keyboard#keyboard-down), [keyboard.up()](https://playwright.dev/python/docs/api/class-keyboard#keyboard-up), and [keyboard.insert\_text()](https://playwright.dev/python/docs/api/class-keyboard#keyboard-insert-text) to manually fire events as if they were generated from a real keyboard.

An example of holding down `Shift` in order to select and delete some text:

- Sync
- Async

```codeBlockLines_e6Vv
page.keyboard.type("Hello World!")
page.keyboard.press("ArrowLeft")
page.keyboard.down("Shift")
for i in range(6):
    page.keyboard.press("ArrowLeft")
page.keyboard.up("Shift")
page.keyboard.press("Backspace")
# result text will end up saying "Hello!"

```

```codeBlockLines_e6Vv
await page.keyboard.type("Hello World!")
await page.keyboard.press("ArrowLeft")
await page.keyboard.down("Shift")
for i in range(6):
    await page.keyboard.press("ArrowLeft")
await page.keyboard.up("Shift")
await page.keyboard.press("Backspace")
# result text will end up saying "Hello!"

```

An example of pressing uppercase `A`

- Sync
- Async

```codeBlockLines_e6Vv
page.keyboard.press("Shift+KeyA")
# or
page.keyboard.press("Shift+A")

```

```codeBlockLines_e6Vv
await page.keyboard.press("Shift+KeyA")
# or
await page.keyboard.press("Shift+A")

```

An example to trigger select-all with the keyboard

- Sync
- Async

```codeBlockLines_e6Vv
page.keyboard.press("ControlOrMeta+A")

```

```codeBlockLines_e6Vv
await page.keyboard.press("ControlOrMeta+A")

```

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-keyboard\#methods "Direct link to Methods")

### down [​](https://playwright.dev/python/docs/api/class-keyboard\#keyboard-down "Direct link to down")

Added before v1.9keyboard.down

Dispatches a `keydown` event.

[key](https://playwright.dev/python/docs/api/class-keyboard#keyboard-down-option-key) can specify the intended [keyboardEvent.key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) value or a single character to generate the text for. A superset of the [key](https://playwright.dev/python/docs/api/class-keyboard#keyboard-down-option-key) values can be found [here](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values). Examples of the keys are:

`F1` \- `F12`, `Digit0`\- `Digit9`, `KeyA`\- `KeyZ`, `Backquote`, `Minus`, `Equal`, `Backslash`, `Backspace`, `Tab`, `Delete`, `Escape`, `ArrowDown`, `End`, `Enter`, `Home`, `Insert`, `PageDown`, `PageUp`, `ArrowRight`, `ArrowUp`, etc.

Following modification shortcuts are also supported: `Shift`, `Control`, `Alt`, `Meta`, `ShiftLeft`, `ControlOrMeta`. `ControlOrMeta` resolves to `Control` on Windows and Linux and to `Meta` on macOS.

Holding down `Shift` will type the text that corresponds to the [key](https://playwright.dev/python/docs/api/class-keyboard#keyboard-down-option-key) in the upper case.

If [key](https://playwright.dev/python/docs/api/class-keyboard#keyboard-down-option-key) is a single character, it is case-sensitive, so the values `a` and `A` will generate different respective texts.

If [key](https://playwright.dev/python/docs/api/class-keyboard#keyboard-down-option-key) is a modifier key, `Shift`, `Meta`, `Control`, or `Alt`, subsequent key presses will be sent with that modifier active. To release the modifier key, use [keyboard.up()](https://playwright.dev/python/docs/api/class-keyboard#keyboard-up).

After the key is pressed once, subsequent calls to [keyboard.down()](https://playwright.dev/python/docs/api/class-keyboard#keyboard-down) will have [repeat](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat) set to true. To release the key, use [keyboard.up()](https://playwright.dev/python/docs/api/class-keyboard#keyboard-up).

note

Modifier keys DO influence `keyboard.down`. Holding down `Shift` will type the text in upper case.

**Usage**

```codeBlockLines_e6Vv
keyboard.down(key)

```

**Arguments**

- `key` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-keyboard#keyboard-down-option-key)

Name of the key to press or a character to generate, such as `ArrowLeft` or `a`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-keyboard#keyboard-down-return)

* * *

### insert\_text [​](https://playwright.dev/python/docs/api/class-keyboard\#keyboard-insert-text "Direct link to insert_text")

Added before v1.9keyboard.insert\_text

Dispatches only `input` event, does not emit the `keydown`, `keyup` or `keypress` events.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
page.keyboard.insert_text("嗨")

```

```codeBlockLines_e6Vv
await page.keyboard.insert_text("嗨")

```

note

Modifier keys DO NOT effect `keyboard.insertText`. Holding down `Shift` will not type the text in upper case.

**Arguments**

- `text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-keyboard#keyboard-insert-text-option-text)

Sets input to the specified text value.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-keyboard#keyboard-insert-text-return)

* * *

### press [​](https://playwright.dev/python/docs/api/class-keyboard\#keyboard-press "Direct link to press")

Added before v1.9keyboard.press

tip

In most cases, you should use [locator.press()](https://playwright.dev/python/docs/api/class-locator#locator-press) instead.

[key](https://playwright.dev/python/docs/api/class-keyboard#keyboard-press-option-key) can specify the intended [keyboardEvent.key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) value or a single character to generate the text for. A superset of the [key](https://playwright.dev/python/docs/api/class-keyboard#keyboard-press-option-key) values can be found [here](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values). Examples of the keys are:

`F1` \- `F12`, `Digit0`\- `Digit9`, `KeyA`\- `KeyZ`, `Backquote`, `Minus`, `Equal`, `Backslash`, `Backspace`, `Tab`, `Delete`, `Escape`, `ArrowDown`, `End`, `Enter`, `Home`, `Insert`, `PageDown`, `PageUp`, `ArrowRight`, `ArrowUp`, etc.

Following modification shortcuts are also supported: `Shift`, `Control`, `Alt`, `Meta`, `ShiftLeft`, `ControlOrMeta`. `ControlOrMeta` resolves to `Control` on Windows and Linux and to `Meta` on macOS.

Holding down `Shift` will type the text that corresponds to the [key](https://playwright.dev/python/docs/api/class-keyboard#keyboard-press-option-key) in the upper case.

If [key](https://playwright.dev/python/docs/api/class-keyboard#keyboard-press-option-key) is a single character, it is case-sensitive, so the values `a` and `A` will generate different respective texts.

Shortcuts such as `key: "Control+o"`, `key: "Control++` or `key: "Control+Shift+T"` are supported as well. When specified with the modifier, modifier is pressed and being held while the subsequent key is being pressed.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
page = browser.new_page()
page.goto("https://keycode.info")
page.keyboard.press("a")
page.screenshot(path="a.png")
page.keyboard.press("ArrowLeft")
page.screenshot(path="arrow_left.png")
page.keyboard.press("Shift+O")
page.screenshot(path="o.png")
browser.close()

```

```codeBlockLines_e6Vv
page = await browser.new_page()
await page.goto("https://keycode.info")
await page.keyboard.press("a")
await page.screenshot(path="a.png")
await page.keyboard.press("ArrowLeft")
await page.screenshot(path="arrow_left.png")
await page.keyboard.press("Shift+O")
await page.screenshot(path="o.png")
await browser.close()

```

Shortcut for [keyboard.down()](https://playwright.dev/python/docs/api/class-keyboard#keyboard-down) and [keyboard.up()](https://playwright.dev/python/docs/api/class-keyboard#keyboard-up).

**Arguments**

- `key` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-keyboard#keyboard-press-option-key)

Name of the key to press or a character to generate, such as `ArrowLeft` or `a`.

- `delay` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-keyboard#keyboard-press-option-delay)

Time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-keyboard#keyboard-press-return)

* * *

### type [​](https://playwright.dev/python/docs/api/class-keyboard\#keyboard-type "Direct link to type")

Added before v1.9keyboard.type

caution

In most cases, you should use [locator.fill()](https://playwright.dev/python/docs/api/class-locator#locator-fill) instead. You only need to press keys one by one if there is special keyboard handling on the page - in this case use [locator.press\_sequentially()](https://playwright.dev/python/docs/api/class-locator#locator-press-sequentially).

Sends a `keydown`, `keypress`/ `input`, and `keyup` event for each character in the text.

To press a special key, like `Control` or `ArrowDown`, use [keyboard.press()](https://playwright.dev/python/docs/api/class-keyboard#keyboard-press).

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
page.keyboard.type("Hello") # types instantly
page.keyboard.type("World", delay=100) # types slower, like a user

```

```codeBlockLines_e6Vv
await page.keyboard.type("Hello") # types instantly
await page.keyboard.type("World", delay=100) # types slower, like a user

```

note

Modifier keys DO NOT effect `keyboard.type`. Holding down `Shift` will not type the text in upper case.

note

For characters that are not on a US keyboard, only an `input` event will be sent.

**Arguments**

- `text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-keyboard#keyboard-type-option-text)

A text to type into a focused element.

- `delay` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-keyboard#keyboard-type-option-delay)

Time to wait between key presses in milliseconds. Defaults to 0.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-keyboard#keyboard-type-return)

* * *

### up [​](https://playwright.dev/python/docs/api/class-keyboard\#keyboard-up "Direct link to up")

Added before v1.9keyboard.up

Dispatches a `keyup` event.

**Usage**

```codeBlockLines_e6Vv
keyboard.up(key)

```

**Arguments**

- `key` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-keyboard#keyboard-up-option-key)

Name of the key to press or a character to generate, such as `ArrowLeft` or `a`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-keyboard#keyboard-up-return)

- [Methods](https://playwright.dev/python/docs/api/class-keyboard#methods)
  - [down](https://playwright.dev/python/docs/api/class-keyboard#keyboard-down)
  - [insert\_text](https://playwright.dev/python/docs/api/class-keyboard#keyboard-insert-text)
  - [press](https://playwright.dev/python/docs/api/class-keyboard#keyboard-press)
  - [type](https://playwright.dev/python/docs/api/class-keyboard#keyboard-type)
  - [up](https://playwright.dev/python/docs/api/class-keyboard#keyboard-up)

## Clock Emulation Methods
[Skip to main content](https://playwright.dev/python/docs/api/class-clock#__docusaurus_skipToContent_fallback)

On this page

Accurately simulating time-dependent behavior is essential for verifying the correctness of applications. Learn more about [clock emulation](https://playwright.dev/python/docs/clock).

Note that clock is installed for the entire [BrowserContext](https://playwright.dev/python/docs/api/class-browsercontext "BrowserContext"), so the time in all the pages and iframes is controlled by the same clock.

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-clock\#methods "Direct link to Methods")

### fast\_forward [​](https://playwright.dev/python/docs/api/class-clock\#clock-fast-forward "Direct link to fast_forward")

Added in: v1.45clock.fast\_forward

Advance the clock by jumping forward in time. Only fires due timers at most once. This is equivalent to user closing the laptop lid for a while and reopening it later, after given time.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
page.clock.fast_forward(1000)
page.clock.fast_forward("30:00")

```

```codeBlockLines_e6Vv
await page.clock.fast_forward(1000)
await page.clock.fast_forward("30:00")

```

**Arguments**

- `ticks` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") \| [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-clock#clock-fast-forward-option-ticks)

Time may be the number of milliseconds to advance the clock by or a human-readable string. Valid string formats are "08" for eight seconds, "01:00" for one minute and "02:34:10" for two hours, 34 minutes and ten seconds.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-clock#clock-fast-forward-return)

* * *

### install [​](https://playwright.dev/python/docs/api/class-clock\#clock-install "Direct link to install")

Added in: v1.45clock.install

Install fake implementations for the following time-related functions:

- `Date`
- `setTimeout`
- `clearTimeout`
- `setInterval`
- `clearInterval`
- `requestAnimationFrame`
- `cancelAnimationFrame`
- `requestIdleCallback`
- `cancelIdleCallback`
- `performance`

Fake timers are used to manually control the flow of time in tests. They allow you to advance time, fire timers, and control the behavior of time-dependent functions. See [clock.run\_for()](https://playwright.dev/python/docs/api/class-clock#clock-run-for) and [clock.fast\_forward()](https://playwright.dev/python/docs/api/class-clock#clock-fast-forward) for more information.

**Usage**

```codeBlockLines_e6Vv
clock.install()
clock.install(**kwargs)

```

**Arguments**

- `time` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [datetime](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime") _(optional)_ [#](https://playwright.dev/python/docs/api/class-clock#clock-install-option-time)

Time to initialize with, current system time by default.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-clock#clock-install-return)

* * *

### pause\_at [​](https://playwright.dev/python/docs/api/class-clock\#clock-pause-at "Direct link to pause_at")

Added in: v1.45clock.pause\_at

Advance the clock by jumping forward in time and pause the time. Once this method is called, no timers are fired unless [clock.run\_for()](https://playwright.dev/python/docs/api/class-clock#clock-run-for), [clock.fast\_forward()](https://playwright.dev/python/docs/api/class-clock#clock-fast-forward), [clock.pause\_at()](https://playwright.dev/python/docs/api/class-clock#clock-pause-at) or [clock.resume()](https://playwright.dev/python/docs/api/class-clock#clock-resume) is called.

Only fires due timers at most once. This is equivalent to user closing the laptop lid for a while and reopening it at the specified time and pausing.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
page.clock.pause_at(datetime.datetime(2020, 2, 2))
page.clock.pause_at("2020-02-02")

```

```codeBlockLines_e6Vv
await page.clock.pause_at(datetime.datetime(2020, 2, 2))
await page.clock.pause_at("2020-02-02")

```

For best results, install the clock before navigating the page and set it to a time slightly before the intended test time. This ensures that all timers run normally during page loading, preventing the page from getting stuck. Once the page has fully loaded, you can safely use [clock.pause\_at()](https://playwright.dev/python/docs/api/class-clock#clock-pause-at) to pause the clock.

- Sync
- Async

```codeBlockLines_e6Vv
# Initialize clock with some time before the test time and let the page load
# naturally. `Date.now` will progress as the timers fire.
page.clock.install(time=datetime.datetime(2024, 12, 10, 8, 0, 0))
page.goto("http://localhost:3333")
page.clock.pause_at(datetime.datetime(2024, 12, 10, 10, 0, 0))

```

```codeBlockLines_e6Vv
# Initialize clock with some time before the test time and let the page load
# naturally. `Date.now` will progress as the timers fire.
await page.clock.install(time=datetime.datetime(2024, 12, 10, 8, 0, 0))
await page.goto("http://localhost:3333")
await page.clock.pause_at(datetime.datetime(2024, 12, 10, 10, 0, 0))

```

**Arguments**

- `time` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [datetime](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime") [#](https://playwright.dev/python/docs/api/class-clock#clock-pause-at-option-time)

Time to pause at.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-clock#clock-pause-at-return)

* * *

### resume [​](https://playwright.dev/python/docs/api/class-clock\#clock-resume "Direct link to resume")

Added in: v1.45clock.resume

Resumes timers. Once this method is called, time resumes flowing, timers are fired as usual.

**Usage**

```codeBlockLines_e6Vv
clock.resume()

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-clock#clock-resume-return)

* * *

### run\_for [​](https://playwright.dev/python/docs/api/class-clock\#clock-run-for "Direct link to run_for")

Added in: v1.45clock.run\_for

Advance the clock, firing all the time-related callbacks.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
page.clock.run_for(1000);
page.clock.run_for("30:00")

```

```codeBlockLines_e6Vv
await page.clock.run_for(1000);
await page.clock.run_for("30:00")

```

**Arguments**

- `ticks` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") \| [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-clock#clock-run-for-option-ticks)

Time may be the number of milliseconds to advance the clock by or a human-readable string. Valid string formats are "08" for eight seconds, "01:00" for one minute and "02:34:10" for two hours, 34 minutes and ten seconds.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-clock#clock-run-for-return)

* * *

### set\_fixed\_time [​](https://playwright.dev/python/docs/api/class-clock\#clock-set-fixed-time "Direct link to set_fixed_time")

Added in: v1.45clock.set\_fixed\_time

Makes `Date.now` and `new Date()` return fixed fake time at all times, keeps all the timers running.

Use this method for simple scenarios where you only need to test with a predefined time. For more advanced scenarios, use [clock.install()](https://playwright.dev/python/docs/api/class-clock#clock-install) instead. Read docs on [clock emulation](https://playwright.dev/python/docs/clock) to learn more.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
page.clock.set_fixed_time(datetime.datetime.now())
page.clock.set_fixed_time(datetime.datetime(2020, 2, 2))
page.clock.set_fixed_time("2020-02-02")

```

```codeBlockLines_e6Vv
await page.clock.set_fixed_time(datetime.datetime.now())
await page.clock.set_fixed_time(datetime.datetime(2020, 2, 2))
await page.clock.set_fixed_time("2020-02-02")

```

**Arguments**

- `time` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [datetime](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime") [#](https://playwright.dev/python/docs/api/class-clock#clock-set-fixed-time-option-time)

Time to be set.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-clock#clock-set-fixed-time-return)

* * *

### set\_system\_time [​](https://playwright.dev/python/docs/api/class-clock\#clock-set-system-time "Direct link to set_system_time")

Added in: v1.45clock.set\_system\_time

Sets system time, but does not trigger any timers. Use this to test how the web page reacts to a time shift, for example switching from summer to winter time, or changing time zones.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
page.clock.set_system_time(datetime.datetime.now())
page.clock.set_system_time(datetime.datetime(2020, 2, 2))
page.clock.set_system_time("2020-02-02")

```

```codeBlockLines_e6Vv
await page.clock.set_system_time(datetime.datetime.now())
await page.clock.set_system_time(datetime.datetime(2020, 2, 2))
await page.clock.set_system_time("2020-02-02")

```

**Arguments**

- `time` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [datetime](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime") [#](https://playwright.dev/python/docs/api/class-clock#clock-set-system-time-option-time)

Time to be set.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-clock#clock-set-system-time-return)

- [Methods](https://playwright.dev/python/docs/api/class-clock#methods)
  - [fast\_forward](https://playwright.dev/python/docs/api/class-clock#clock-fast-forward)
  - [install](https://playwright.dev/python/docs/api/class-clock#clock-install)
  - [pause\_at](https://playwright.dev/python/docs/api/class-clock#clock-pause-at)
  - [resume](https://playwright.dev/python/docs/api/class-clock#clock-resume)
  - [run\_for](https://playwright.dev/python/docs/api/class-clock#clock-run-for)
  - [set\_fixed\_time](https://playwright.dev/python/docs/api/class-clock#clock-set-fixed-time)
  - [set\_system\_time](https://playwright.dev/python/docs/api/class-clock#clock-set-system-time)

## CDPSession Protocol Methods
[Skip to main content](https://playwright.dev/python/docs/api/class-cdpsession#__docusaurus_skipToContent_fallback)

On this page

The `CDPSession` instances are used to talk raw Chrome Devtools Protocol:

- protocol methods can be called with `session.send` method.
- protocol events can be subscribed to with `session.on` method.

Useful links:

- Documentation on DevTools Protocol can be found here: [DevTools Protocol Viewer](https://chromedevtools.github.io/devtools-protocol/).
- Getting Started with DevTools Protocol: [https://github.com/aslushnikov/getting-started-with-cdp/blob/master/README.md](https://github.com/aslushnikov/getting-started-with-cdp/blob/master/README.md)

- Sync
- Async

```codeBlockLines_e6Vv
client = page.context.new_cdp_session(page)
client.send("Animation.enable")
client.on("Animation.animationCreated", lambda: print("animation created!"))
response = client.send("Animation.getPlaybackRate")
print("playback rate is " + str(response["playbackRate"]))
client.send("Animation.setPlaybackRate", {
    "playbackRate": response["playbackRate"] / 2
})

```

```codeBlockLines_e6Vv
client = await page.context.new_cdp_session(page)
await client.send("Animation.enable")
client.on("Animation.animationCreated", lambda: print("animation created!"))
response = await client.send("Animation.getPlaybackRate")
print("playback rate is " + str(response["playbackRate"]))
await client.send("Animation.setPlaybackRate", {
    "playbackRate": response["playbackRate"] / 2
})

```

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-cdpsession\#methods "Direct link to Methods")

### detach [​](https://playwright.dev/python/docs/api/class-cdpsession\#cdp-session-detach "Direct link to detach")

Added before v1.9cdpSession.detach

Detaches the CDPSession from the target. Once detached, the CDPSession object won't emit any events and can't be used to send messages.

**Usage**

```codeBlockLines_e6Vv
cdp_session.detach()

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-cdpsession#cdp-session-detach-return)

* * *

### send [​](https://playwright.dev/python/docs/api/class-cdpsession\#cdp-session-send "Direct link to send")

Added before v1.9cdpSession.send

**Usage**

```codeBlockLines_e6Vv
cdp_session.send(method)
cdp_session.send(method, **kwargs)

```

**Arguments**

- `method` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-cdpsession#cdp-session-send-option-method)

Protocol method name.

- `params` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-cdpsession#cdp-session-send-option-params)

Optional method parameters.


**Returns**

- [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-cdpsession#cdp-session-send-return)

- [Methods](https://playwright.dev/python/docs/api/class-cdpsession#methods)
  - [detach](https://playwright.dev/python/docs/api/class-cdpsession#cdp-session-detach)
  - [send](https://playwright.dev/python/docs/api/class-cdpsession#cdp-session-send)

## Locator Assertions Overview
[Skip to main content](https://playwright.dev/python/docs/api/class-locatorassertions#__docusaurus_skipToContent_fallback)

On this page

The [LocatorAssertions](https://playwright.dev/python/docs/api/class-locatorassertions "LocatorAssertions") class provides assertion methods that can be used to make assertions about the [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") state in the tests.

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import Page, expect

def test_status_becomes_submitted(page: Page) -> None:
    # ..
    page.get_by_role("button").click()
    expect(page.locator(".status")).to_have_text("Submitted")

```

```codeBlockLines_e6Vv
from playwright.async_api import Page, expect

async def test_status_becomes_submitted(page: Page) -> None:
    # ..
    await page.get_by_role("button").click()
    await expect(page.locator(".status")).to_have_text("Submitted")

```

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-locatorassertions\#methods "Direct link to Methods")

### not\_to\_be\_attached [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-not-to-be-attached "Direct link to not_to_be_attached")

Added in: v1.33locatorAssertions.not\_to\_be\_attached

The opposite of [expect(locator).to\_be\_attached()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-attached).

**Usage**

```codeBlockLines_e6Vv
expect(locator).not_to_be_attached()
expect(locator).not_to_be_attached(**kwargs)

```

**Arguments**

- `attached` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-attached-option-attached)

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-attached-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-attached-return)

* * *

### not\_to\_be\_checked [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-not-to-be-checked "Direct link to not_to_be_checked")

Added in: v1.20locatorAssertions.not\_to\_be\_checked

The opposite of [expect(locator).to\_be\_checked()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-checked).

**Usage**

```codeBlockLines_e6Vv
expect(locator).not_to_be_checked()
expect(locator).not_to_be_checked(**kwargs)

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-checked-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-checked-return)

* * *

### not\_to\_be\_disabled [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-not-to-be-disabled "Direct link to not_to_be_disabled")

Added in: v1.20locatorAssertions.not\_to\_be\_disabled

The opposite of [expect(locator).to\_be\_disabled()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-disabled).

**Usage**

```codeBlockLines_e6Vv
expect(locator).not_to_be_disabled()
expect(locator).not_to_be_disabled(**kwargs)

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-disabled-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-disabled-return)

* * *

### not\_to\_be\_editable [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-not-to-be-editable "Direct link to not_to_be_editable")

Added in: v1.20locatorAssertions.not\_to\_be\_editable

The opposite of [expect(locator).to\_be\_editable()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-editable).

**Usage**

```codeBlockLines_e6Vv
expect(locator).not_to_be_editable()
expect(locator).not_to_be_editable(**kwargs)

```

**Arguments**

- `editable` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.26 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-editable-option-editable)

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-editable-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-editable-return)

* * *

### not\_to\_be\_empty [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-not-to-be-empty "Direct link to not_to_be_empty")

Added in: v1.20locatorAssertions.not\_to\_be\_empty

The opposite of [expect(locator).to\_be\_empty()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-empty).

**Usage**

```codeBlockLines_e6Vv
expect(locator).not_to_be_empty()
expect(locator).not_to_be_empty(**kwargs)

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-empty-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-empty-return)

* * *

### not\_to\_be\_enabled [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-not-to-be-enabled "Direct link to not_to_be_enabled")

Added in: v1.20locatorAssertions.not\_to\_be\_enabled

The opposite of [expect(locator).to\_be\_enabled()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-enabled).

**Usage**

```codeBlockLines_e6Vv
expect(locator).not_to_be_enabled()
expect(locator).not_to_be_enabled(**kwargs)

```

**Arguments**

- `enabled` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.26 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-enabled-option-enabled)

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-enabled-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-enabled-return)

* * *

### not\_to\_be\_focused [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-not-to-be-focused "Direct link to not_to_be_focused")

Added in: v1.20locatorAssertions.not\_to\_be\_focused

The opposite of [expect(locator).to\_be\_focused()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-focused).

**Usage**

```codeBlockLines_e6Vv
expect(locator).not_to_be_focused()
expect(locator).not_to_be_focused(**kwargs)

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-focused-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-focused-return)

* * *

### not\_to\_be\_hidden [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-not-to-be-hidden "Direct link to not_to_be_hidden")

Added in: v1.20locatorAssertions.not\_to\_be\_hidden

The opposite of [expect(locator).to\_be\_hidden()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-hidden).

**Usage**

```codeBlockLines_e6Vv
expect(locator).not_to_be_hidden()
expect(locator).not_to_be_hidden(**kwargs)

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-hidden-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-hidden-return)

* * *

### not\_to\_be\_in\_viewport [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-not-to-be-in-viewport "Direct link to not_to_be_in_viewport")

Added in: v1.31locatorAssertions.not\_to\_be\_in\_viewport

The opposite of [expect(locator).to\_be\_in\_viewport()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-in-viewport).

**Usage**

```codeBlockLines_e6Vv
expect(locator).not_to_be_in_viewport()
expect(locator).not_to_be_in_viewport(**kwargs)

```

**Arguments**

- `ratio` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-in-viewport-option-ratio)

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-in-viewport-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-in-viewport-return)

* * *

### not\_to\_be\_visible [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-not-to-be-visible "Direct link to not_to_be_visible")

Added in: v1.20locatorAssertions.not\_to\_be\_visible

The opposite of [expect(locator).to\_be\_visible()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-visible).

**Usage**

```codeBlockLines_e6Vv
expect(locator).not_to_be_visible()
expect(locator).not_to_be_visible(**kwargs)

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-visible-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.

- `visible` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.26 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-visible-option-visible)


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-visible-return)

* * *

### not\_to\_contain\_text [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-not-to-contain-text "Direct link to not_to_contain_text")

Added in: v1.20locatorAssertions.not\_to\_contain\_text

The opposite of [expect(locator).to\_contain\_text()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-contain-text).

**Usage**

```codeBlockLines_e6Vv
expect(locator).not_to_contain_text(expected)
expect(locator).not_to_contain_text(expected, **kwargs)

```

**Arguments**

- `expected` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Pattern](https://docs.python.org/3/library/re.html "Pattern")\] \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern")\] Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-contain-text-option-expected)

Expected substring or RegExp or a list of those.

- `ignore_case` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.23 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-contain-text-option-ignore-case)

Whether to perform case-insensitive match. [ignore\_case](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-contain-text-option-ignore-case) option takes precedence over the corresponding regular expression flag if specified.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-contain-text-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.

- `use_inner_text` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-contain-text-option-use-inner-text)

Whether to use `element.innerText` instead of `element.textContent` when retrieving DOM node text.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-contain-text-return)

* * *

### not\_to\_have\_accessible\_description [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-not-to-have-accessible-description "Direct link to not_to_have_accessible_description")

Added in: v1.44locatorAssertions.not\_to\_have\_accessible\_description

The opposite of [expect(locator).to\_have\_accessible\_description()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-accessible-description).

**Usage**

```codeBlockLines_e6Vv
expect(locator).not_to_have_accessible_description(name)
expect(locator).not_to_have_accessible_description(name, **kwargs)

```

**Arguments**

- `description` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-accessible-description-option-name)

Expected accessible description.

- `ignore_case` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-accessible-description-option-ignore-case)

Whether to perform case-insensitive match. [ignore\_case](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-accessible-description-option-ignore-case) option takes precedence over the corresponding regular expression flag if specified.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-accessible-description-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-accessible-description-return)

* * *

### not\_to\_have\_accessible\_error\_message [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-not-to-have-accessible-error-message "Direct link to not_to_have_accessible_error_message")

Added in: v1.50locatorAssertions.not\_to\_have\_accessible\_error\_message

The opposite of [expect(locator).to\_have\_accessible\_error\_message()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-accessible-error-message).

**Usage**

```codeBlockLines_e6Vv
expect(locator).not_to_have_accessible_error_message(error_message)
expect(locator).not_to_have_accessible_error_message(error_message, **kwargs)

```

**Arguments**

- `error_message` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-accessible-error-message-option-error-message)

Expected accessible error message.

- `ignore_case` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-accessible-error-message-option-ignore-case)

Whether to perform case-insensitive match. [ignore\_case](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-accessible-error-message-option-ignore-case) option takes precedence over the corresponding regular expression flag if specified.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-accessible-error-message-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-accessible-error-message-return)

* * *

### not\_to\_have\_accessible\_name [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-not-to-have-accessible-name "Direct link to not_to_have_accessible_name")

Added in: v1.44locatorAssertions.not\_to\_have\_accessible\_name

The opposite of [expect(locator).to\_have\_accessible\_name()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-accessible-name).

**Usage**

```codeBlockLines_e6Vv
expect(locator).not_to_have_accessible_name(name)
expect(locator).not_to_have_accessible_name(name, **kwargs)

```

**Arguments**

- `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-accessible-name-option-name)

Expected accessible name.

- `ignore_case` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-accessible-name-option-ignore-case)

Whether to perform case-insensitive match. [ignore\_case](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-accessible-name-option-ignore-case) option takes precedence over the corresponding regular expression flag if specified.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-accessible-name-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-accessible-name-return)

* * *

### not\_to\_have\_attribute [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-not-to-have-attribute "Direct link to not_to_have_attribute")

Added in: v1.20locatorAssertions.not\_to\_have\_attribute

The opposite of [expect(locator).to\_have\_attribute()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-attribute).

**Usage**

```codeBlockLines_e6Vv
expect(locator).not_to_have_attribute(name, value)
expect(locator).not_to_have_attribute(name, value, **kwargs)

```

**Arguments**

- `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-attribute-option-name)

Attribute name.

- `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-attribute-option-value)

Expected attribute value.

- `ignore_case` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.40 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-attribute-option-ignore-case)

Whether to perform case-insensitive match. [ignore\_case](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-attribute-option-ignore-case) option takes precedence over the corresponding regular expression flag if specified.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-attribute-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-attribute-return)

* * *

### not\_to\_have\_class [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-not-to-have-class "Direct link to not_to_have_class")

Added in: v1.20locatorAssertions.not\_to\_have\_class

The opposite of [expect(locator).to\_have\_class()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-class).

**Usage**

```codeBlockLines_e6Vv
expect(locator).not_to_have_class(expected)
expect(locator).not_to_have_class(expected, **kwargs)

```

**Arguments**

- `expected` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Pattern](https://docs.python.org/3/library/re.html "Pattern")\] \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern")\] Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-class-option-expected)

Expected class or RegExp or a list of those.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-class-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-class-return)

* * *

### not\_to\_have\_count [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-not-to-have-count "Direct link to not_to_have_count")

Added in: v1.20locatorAssertions.not\_to\_have\_count

The opposite of [expect(locator).to\_have\_count()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-count).

**Usage**

```codeBlockLines_e6Vv
expect(locator).not_to_have_count(count)
expect(locator).not_to_have_count(count, **kwargs)

```

**Arguments**

- `count` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-count-option-count)

Expected count.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-count-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-count-return)

* * *

### not\_to\_have\_css [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-not-to-have-css "Direct link to not_to_have_css")

Added in: v1.20locatorAssertions.not\_to\_have\_css

The opposite of [expect(locator).to\_have\_css()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-css).

**Usage**

```codeBlockLines_e6Vv
expect(locator).not_to_have_css(name, value)
expect(locator).not_to_have_css(name, value, **kwargs)

```

**Arguments**

- `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-css-option-name)

CSS property name.

- `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-css-option-value)

CSS property value.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-css-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-css-return)

* * *

### not\_to\_have\_id [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-not-to-have-id "Direct link to not_to_have_id")

Added in: v1.20locatorAssertions.not\_to\_have\_id

The opposite of [expect(locator).to\_have\_id()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-id).

**Usage**

```codeBlockLines_e6Vv
expect(locator).not_to_have_id(id)
expect(locator).not_to_have_id(id, **kwargs)

```

**Arguments**

- `id` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-id-option-id)

Element id.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-id-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-id-return)

* * *

### not\_to\_have\_js\_property [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-not-to-have-js-property "Direct link to not_to_have_js_property")

Added in: v1.20locatorAssertions.not\_to\_have\_js\_property

The opposite of [expect(locator).to\_have\_js\_property()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-js-property).

**Usage**

```codeBlockLines_e6Vv
expect(locator).not_to_have_js_property(name, value)
expect(locator).not_to_have_js_property(name, value, **kwargs)

```

**Arguments**

- `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-js-property-option-name)

Property name.

- `value` [Any](https://docs.python.org/3/library/typing.html#typing.Any "Any") Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-js-property-option-value)

Property value.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-js-property-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-js-property-return)

* * *

### not\_to\_have\_role [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-not-to-have-role "Direct link to not_to_have_role")

Added in: v1.44locatorAssertions.not\_to\_have\_role

The opposite of [expect(locator).to\_have\_role()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-role).

**Usage**

```codeBlockLines_e6Vv
expect(locator).not_to_have_role(role)
expect(locator).not_to_have_role(role, **kwargs)

```

**Arguments**

- `role` "alert" \| "alertdialog" \| "application" \| "article" \| "banner" \| "blockquote" \| "button" \| "caption" \| "cell" \| "checkbox" \| "code" \| "columnheader" \| "combobox" \| "complementary" \| "contentinfo" \| "definition" \| "deletion" \| "dialog" \| "directory" \| "document" \| "emphasis" \| "feed" \| "figure" \| "form" \| "generic" \| "grid" \| "gridcell" \| "group" \| "heading" \| "img" \| "insertion" \| "link" \| "list" \| "listbox" \| "listitem" \| "log" \| "main" \| "marquee" \| "math" \| "meter" \| "menu" \| "menubar" \| "menuitem" \| "menuitemcheckbox" \| "menuitemradio" \| "navigation" \| "none" \| "note" \| "option" \| "paragraph" \| "presentation" \| "progressbar" \| "radio" \| "radiogroup" \| "region" \| "row" \| "rowgroup" \| "rowheader" \| "scrollbar" \| "search" \| "searchbox" \| "separator" \| "slider" \| "spinbutton" \| "status" \| "strong" \| "subscript" \| "superscript" \| "switch" \| "tab" \| "table" \| "tablist" \| "tabpanel" \| "term" \| "textbox" \| "time" \| "timer" \| "toolbar" \| "tooltip" \| "tree" \| "treegrid" \| "treeitem" [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-role-option-role)

Required aria role.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-role-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-role-return)

* * *

### not\_to\_have\_text [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-not-to-have-text "Direct link to not_to_have_text")

Added in: v1.20locatorAssertions.not\_to\_have\_text

The opposite of [expect(locator).to\_have\_text()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-text).

**Usage**

```codeBlockLines_e6Vv
expect(locator).not_to_have_text(expected)
expect(locator).not_to_have_text(expected, **kwargs)

```

**Arguments**

- `expected` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Pattern](https://docs.python.org/3/library/re.html "Pattern")\] \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern")\] Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-text-option-expected)

Expected string or RegExp or a list of those.

- `ignore_case` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.23 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-text-option-ignore-case)

Whether to perform case-insensitive match. [ignore\_case](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-text-option-ignore-case) option takes precedence over the corresponding regular expression flag if specified.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-text-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.

- `use_inner_text` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-text-option-use-inner-text)

Whether to use `element.innerText` instead of `element.textContent` when retrieving DOM node text.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-text-return)

* * *

### not\_to\_have\_value [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-not-to-have-value "Direct link to not_to_have_value")

Added in: v1.20locatorAssertions.not\_to\_have\_value

The opposite of [expect(locator).to\_have\_value()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-value).

**Usage**

```codeBlockLines_e6Vv
expect(locator).not_to_have_value(value)
expect(locator).not_to_have_value(value, **kwargs)

```

**Arguments**

- `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-value-option-value)

Expected value.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-value-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-value-return)

* * *

### not\_to\_have\_values [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-not-to-have-values "Direct link to not_to_have_values")

Added in: v1.23locatorAssertions.not\_to\_have\_values

The opposite of [expect(locator).to\_have\_values()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-values).

**Usage**

```codeBlockLines_e6Vv
expect(locator).not_to_have_values(values)
expect(locator).not_to_have_values(values, **kwargs)

```

**Arguments**

- `values` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Pattern](https://docs.python.org/3/library/re.html "Pattern")\] \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern")\] [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-values-option-values)

Expected options currently selected.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-values-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-values-return)

* * *

### not\_to\_match\_aria\_snapshot [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-not-to-match-aria-snapshot "Direct link to not_to_match_aria_snapshot")

Added in: v1.49locatorAssertions.not\_to\_match\_aria\_snapshot

The opposite of [expect(locator).to\_match\_aria\_snapshot()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-match-aria-snapshot).

**Usage**

```codeBlockLines_e6Vv
expect(locator).not_to_match_aria_snapshot(expected)
expect(locator).not_to_match_aria_snapshot(expected, **kwargs)

```

**Arguments**

- `expected` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-match-aria-snapshot-option-expected)

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-match-aria-snapshot-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-match-aria-snapshot-return)

* * *

### to\_be\_attached [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-to-be-attached "Direct link to to_be_attached")

Added in: v1.33locatorAssertions.to\_be\_attached

Ensures that [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") points to an element that is [connected](https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected) to a Document or a ShadowRoot.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
expect(page.get_by_text("Hidden text")).to_be_attached()

```

```codeBlockLines_e6Vv
await expect(page.get_by_text("Hidden text")).to_be_attached()

```

**Arguments**

- `attached` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-attached-option-attached)

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-attached-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-attached-return)

* * *

### to\_be\_checked [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-to-be-checked "Direct link to to_be_checked")

Added in: v1.20locatorAssertions.to\_be\_checked

Ensures the [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") points to a checked input.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import expect

locator = page.get_by_label("Subscribe to newsletter")
expect(locator).to_be_checked()

```

```codeBlockLines_e6Vv
from playwright.async_api import expect

locator = page.get_by_label("Subscribe to newsletter")
await expect(locator).to_be_checked()

```

**Arguments**

- `checked` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-checked-option-checked)

Provides state to assert for. Asserts for input to be checked by default. This option can't be used when [indeterminate](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-checked-option-indeterminate) is set to true.

- `indeterminate` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.50 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-checked-option-indeterminate)

Asserts that the element is in the indeterminate (mixed) state. Only supported for checkboxes and radio buttons. This option can't be true when [checked](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-checked-option-checked) is provided.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-checked-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-checked-return)

* * *

### to\_be\_disabled [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-to-be-disabled "Direct link to to_be_disabled")

Added in: v1.20locatorAssertions.to\_be\_disabled

Ensures the [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") points to a disabled element. Element is disabled if it has "disabled" attribute or is disabled via ['aria-disabled'](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-disabled). Note that only native control elements such as HTML `button`, `input`, `select`, `textarea`, `option`, `optgroup` can be disabled by setting "disabled" attribute. "disabled" attribute on other elements is ignored by the browser.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import expect

locator = page.locator("button.submit")
expect(locator).to_be_disabled()

```

```codeBlockLines_e6Vv
from playwright.async_api import expect

locator = page.locator("button.submit")
await expect(locator).to_be_disabled()

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-disabled-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-disabled-return)

* * *

### to\_be\_editable [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-to-be-editable "Direct link to to_be_editable")

Added in: v1.20locatorAssertions.to\_be\_editable

Ensures the [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") points to an editable element.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import expect

locator = page.get_by_role("textbox")
expect(locator).to_be_editable()

```

```codeBlockLines_e6Vv
from playwright.async_api import expect

locator = page.get_by_role("textbox")
await expect(locator).to_be_editable()

```

**Arguments**

- `editable` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.26 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-editable-option-editable)

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-editable-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-editable-return)

* * *

### to\_be\_empty [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-to-be-empty "Direct link to to_be_empty")

Added in: v1.20locatorAssertions.to\_be\_empty

Ensures the [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") points to an empty editable element or to a DOM node that has no text.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import expect

locator = page.locator("div.warning")
expect(locator).to_be_empty()

```

```codeBlockLines_e6Vv
from playwright.async_api import expect

locator = page.locator("div.warning")
await expect(locator).to_be_empty()

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-empty-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-empty-return)

* * *

### to\_be\_enabled [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-to-be-enabled "Direct link to to_be_enabled")

Added in: v1.20locatorAssertions.to\_be\_enabled

Ensures the [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") points to an enabled element.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import expect

locator = page.locator("button.submit")
expect(locator).to_be_enabled()

```

```codeBlockLines_e6Vv
from playwright.async_api import expect

locator = page.locator("button.submit")
await expect(locator).to_be_enabled()

```

**Arguments**

- `enabled` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.26 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-enabled-option-enabled)

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-enabled-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-enabled-return)

* * *

### to\_be\_focused [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-to-be-focused "Direct link to to_be_focused")

Added in: v1.20locatorAssertions.to\_be\_focused

Ensures the [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") points to a focused DOM node.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import expect

locator = page.get_by_role("textbox")
expect(locator).to_be_focused()

```

```codeBlockLines_e6Vv
from playwright.async_api import expect

locator = page.get_by_role("textbox")
await expect(locator).to_be_focused()

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-focused-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-focused-return)

* * *

### to\_be\_hidden [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-to-be-hidden "Direct link to to_be_hidden")

Added in: v1.20locatorAssertions.to\_be\_hidden

Ensures that [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") either does not resolve to any DOM node, or resolves to a [non-visible](https://playwright.dev/python/docs/actionability#visible) one.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import expect

locator = page.locator('.my-element')
expect(locator).to_be_hidden()

```

```codeBlockLines_e6Vv
from playwright.async_api import expect

locator = page.locator('.my-element')
await expect(locator).to_be_hidden()

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-hidden-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-hidden-return)

* * *

### to\_be\_in\_viewport [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-to-be-in-viewport "Direct link to to_be_in_viewport")

Added in: v1.31locatorAssertions.to\_be\_in\_viewport

Ensures the [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") points to an element that intersects viewport, according to the [intersection observer API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API).

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import expect

locator = page.get_by_role("button")
# Make sure at least some part of element intersects viewport.
expect(locator).to_be_in_viewport()
# Make sure element is fully outside of viewport.
expect(locator).not_to_be_in_viewport()
# Make sure that at least half of the element intersects viewport.
expect(locator).to_be_in_viewport(ratio=0.5)

```

```codeBlockLines_e6Vv
from playwright.async_api import expect

locator = page.get_by_role("button")
# Make sure at least some part of element intersects viewport.
await expect(locator).to_be_in_viewport()
# Make sure element is fully outside of viewport.
await expect(locator).not_to_be_in_viewport()
# Make sure that at least half of the element intersects viewport.
await expect(locator).to_be_in_viewport(ratio=0.5)

```

**Arguments**

- `ratio` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-in-viewport-option-ratio)

The minimal ratio of the element to intersect viewport. If equals to `0`, then element should intersect viewport at any positive ratio. Defaults to `0`.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-in-viewport-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-in-viewport-return)

* * *

### to\_be\_visible [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-to-be-visible "Direct link to to_be_visible")

Added in: v1.20locatorAssertions.to\_be\_visible

Ensures that [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") points to an attached and [visible](https://playwright.dev/python/docs/actionability#visible) DOM node.

To check that at least one element from the list is visible, use [locator.first](https://playwright.dev/python/docs/api/class-locator#locator-first).

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
# A specific element is visible.
expect(page.get_by_text("Welcome")).to_be_visible()

# At least one item in the list is visible.
expect(page.get_by_test_id("todo-item").first).to_be_visible()

# At least one of the two elements is visible, possibly both.
expect(
    page.get_by_role("button", name="Sign in")
    .or_(page.get_by_role("button", name="Sign up"))
    .first
).to_be_visible()

```

```codeBlockLines_e6Vv
# A specific element is visible.
await expect(page.get_by_text("Welcome")).to_be_visible()

# At least one item in the list is visible.
await expect(page.get_by_test_id("todo-item").first).to_be_visible()

# At least one of the two elements is visible, possibly both.
await expect(
    page.get_by_role("button", name="Sign in")
    .or_(page.get_by_role("button", name="Sign up"))
    .first
).to_be_visible()

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-visible-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.

- `visible` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.26 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-visible-option-visible)


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-visible-return)

* * *

### to\_contain\_text [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-to-contain-text "Direct link to to_contain_text")

Added in: v1.20locatorAssertions.to\_contain\_text

Ensures the [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") points to an element that contains the given text. All nested elements will be considered when computing the text content of the element. You can use regular expressions for the value as well.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
import re
from playwright.sync_api import expect

locator = page.locator('.title')
expect(locator).to_contain_text("substring")
expect(locator).to_contain_text(re.compile(r"\d messages"))

```

```codeBlockLines_e6Vv
import re
from playwright.async_api import expect

locator = page.locator('.title')
await expect(locator).to_contain_text("substring")
await expect(locator).to_contain_text(re.compile(r"\d messages"))

```

If you pass an array as an expected value, the expectations are:

1. Locator resolves to a list of elements.
2. Elements from a **subset** of this list contain text from the expected array, respectively.
3. The matching subset of elements has the same order as the expected array.
4. Each text value from the expected array is matched by some element from the list.

For example, consider the following list:

```codeBlockLines_e6Vv
<ul>
  <li>Item Text 1</li>
  <li>Item Text 2</li>
  <li>Item Text 3</li>
</ul>

```

Let's see how we can use the assertion:

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import expect

# ✓ Contains the right items in the right order
expect(page.locator("ul > li")).to_contain_text(["Text 1", "Text 3", "Text 4"])

# ✖ Wrong order
expect(page.locator("ul > li")).to_contain_text(["Text 3", "Text 2"])

# ✖ No item contains this text
expect(page.locator("ul > li")).to_contain_text(["Some 33"])

# ✖ Locator points to the outer list element, not to the list items
expect(page.locator("ul")).to_contain_text(["Text 3"])

```

```codeBlockLines_e6Vv
from playwright.async_api import expect

# ✓ Contains the right items in the right order
await expect(page.locator("ul > li")).to_contain_text(["Text 1", "Text 3", "Text 4"])

# ✖ Wrong order
await expect(page.locator("ul > li")).to_contain_text(["Text 3", "Text 2"])

# ✖ No item contains this text
await expect(page.locator("ul > li")).to_contain_text(["Some 33"])

# ✖ Locator points to the outer list element, not to the list items
await expect(page.locator("ul")).to_contain_text(["Text 3"])

```

**Arguments**

- `expected` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Pattern](https://docs.python.org/3/library/re.html "Pattern")\] \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern")\] Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-contain-text-option-expected)

Expected substring or RegExp or a list of those.

- `ignore_case` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.23 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-contain-text-option-ignore-case)

Whether to perform case-insensitive match. [ignore\_case](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-contain-text-option-ignore-case) option takes precedence over the corresponding regular expression flag if specified.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-contain-text-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.

- `use_inner_text` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-contain-text-option-use-inner-text)

Whether to use `element.innerText` instead of `element.textContent` when retrieving DOM node text.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-contain-text-return)

**Details**

When `expected` parameter is a string, Playwright will normalize whitespaces and line breaks both in the actual text and in the expected string before matching. When regular expression is used, the actual text is matched as is.

* * *

### to\_have\_accessible\_description [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-to-have-accessible-description "Direct link to to_have_accessible_description")

Added in: v1.44locatorAssertions.to\_have\_accessible\_description

Ensures the [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") points to an element with a given [accessible description](https://w3c.github.io/accname/#dfn-accessible-description).

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
locator = page.get_by_test_id("save-button")
expect(locator).to_have_accessible_description("Save results to disk")

```

```codeBlockLines_e6Vv
locator = page.get_by_test_id("save-button")
await expect(locator).to_have_accessible_description("Save results to disk")

```

**Arguments**

- `description` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-accessible-description-option-description)

Expected accessible description.

- `ignore_case` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-accessible-description-option-ignore-case)

Whether to perform case-insensitive match. [ignore\_case](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-accessible-description-option-ignore-case) option takes precedence over the corresponding regular expression flag if specified.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-accessible-description-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-accessible-description-return)

* * *

### to\_have\_accessible\_error\_message [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-to-have-accessible-error-message "Direct link to to_have_accessible_error_message")

Added in: v1.50locatorAssertions.to\_have\_accessible\_error\_message

Ensures the [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") points to an element with a given [aria errormessage](https://w3c.github.io/aria/#aria-errormessage).

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
locator = page.get_by_test_id("username-input")
expect(locator).to_have_accessible_error_message("Username is required.")

```

```codeBlockLines_e6Vv
locator = page.get_by_test_id("username-input")
await expect(locator).to_have_accessible_error_message("Username is required.")

```

**Arguments**

- `error_message` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-accessible-error-message-option-error-message)

Expected accessible error message.

- `ignore_case` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-accessible-error-message-option-ignore-case)

Whether to perform case-insensitive match. [ignore\_case](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-accessible-error-message-option-ignore-case) option takes precedence over the corresponding regular expression flag if specified.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-accessible-error-message-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-accessible-error-message-return)

* * *

### to\_have\_accessible\_name [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-to-have-accessible-name "Direct link to to_have_accessible_name")

Added in: v1.44locatorAssertions.to\_have\_accessible\_name

Ensures the [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") points to an element with a given [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
locator = page.get_by_test_id("save-button")
expect(locator).to_have_accessible_name("Save to disk")

```

```codeBlockLines_e6Vv
locator = page.get_by_test_id("save-button")
await expect(locator).to_have_accessible_name("Save to disk")

```

**Arguments**

- `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-accessible-name-option-name)

Expected accessible name.

- `ignore_case` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-accessible-name-option-ignore-case)

Whether to perform case-insensitive match. [ignore\_case](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-accessible-name-option-ignore-case) option takes precedence over the corresponding regular expression flag if specified.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-accessible-name-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-accessible-name-return)

* * *

### to\_have\_attribute [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-to-have-attribute "Direct link to to_have_attribute")

Added in: v1.20locatorAssertions.to\_have\_attribute

Ensures the [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") points to an element with given attribute.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import expect

locator = page.locator("input")
expect(locator).to_have_attribute("type", "text")

```

```codeBlockLines_e6Vv
from playwright.async_api import expect

locator = page.locator("input")
await expect(locator).to_have_attribute("type", "text")

```

**Arguments**

- `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-attribute-option-name)

Attribute name.

- `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-attribute-option-value)

Expected attribute value.

- `ignore_case` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.40 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-attribute-option-ignore-case)

Whether to perform case-insensitive match. [ignore\_case](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-attribute-option-ignore-case) option takes precedence over the corresponding regular expression flag if specified.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-attribute-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-attribute-return)

* * *

### to\_have\_class [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-to-have-class "Direct link to to_have_class")

Added in: v1.20locatorAssertions.to\_have\_class

Ensures the [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") points to an element with given CSS classes. When a string is provided, it must fully match the element's `class` attribute. To match individual classes or perform partial matches, use a regular expression:

**Usage**

```codeBlockLines_e6Vv
<div class='middle selected row' id='component'></div>

```

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import expect

locator = page.locator("#component")
expect(locator).to_have_class(re.compile(r"(^|\\s)selected(\\s|$)"))
expect(locator).to_have_class("middle selected row")

```

```codeBlockLines_e6Vv
from playwright.async_api import expect

locator = page.locator("#component")
await expect(locator).to_have_class(re.compile(r"(^|\\s)selected(\\s|$)"))
await expect(locator).to_have_class("middle selected row")

```

When an array is passed, the method asserts that the list of elements located matches the corresponding list of expected class values. Each element's class attribute is matched against the corresponding string or regular expression in the array:

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import expect

locator = page.locator("list > .component")
expect(locator).to_have_class(["component", "component selected", "component"])

```

```codeBlockLines_e6Vv
from playwright.async_api import expect

locator = page.locator("list > .component")
await expect(locator).to_have_class(["component", "component selected", "component"])

```

**Arguments**

- `expected` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Pattern](https://docs.python.org/3/library/re.html "Pattern")\] \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern")\] Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-class-option-expected)

Expected class or RegExp or a list of those.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-class-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-class-return)

* * *

### to\_have\_count [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-to-have-count "Direct link to to_have_count")

Added in: v1.20locatorAssertions.to\_have\_count

Ensures the [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") resolves to an exact number of DOM nodes.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import expect

locator = page.locator("list > .component")
expect(locator).to_have_count(3)

```

```codeBlockLines_e6Vv
from playwright.async_api import expect

locator = page.locator("list > .component")
await expect(locator).to_have_count(3)

```

**Arguments**

- `count` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-count-option-count)

Expected count.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-count-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-count-return)

* * *

### to\_have\_css [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-to-have-css "Direct link to to_have_css")

Added in: v1.20locatorAssertions.to\_have\_css

Ensures the [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") resolves to an element with the given computed CSS style.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import expect

locator = page.get_by_role("button")
expect(locator).to_have_css("display", "flex")

```

```codeBlockLines_e6Vv
from playwright.async_api import expect

locator = page.get_by_role("button")
await expect(locator).to_have_css("display", "flex")

```

**Arguments**

- `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-css-option-name)

CSS property name.

- `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-css-option-value)

CSS property value.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-css-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-css-return)

* * *

### to\_have\_id [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-to-have-id "Direct link to to_have_id")

Added in: v1.20locatorAssertions.to\_have\_id

Ensures the [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") points to an element with the given DOM Node ID.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import expect

locator = page.get_by_role("textbox")
expect(locator).to_have_id("lastname")

```

```codeBlockLines_e6Vv
from playwright.async_api import expect

locator = page.get_by_role("textbox")
await expect(locator).to_have_id("lastname")

```

**Arguments**

- `id` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-id-option-id)

Element id.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-id-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-id-return)

* * *

### to\_have\_js\_property [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-to-have-js-property "Direct link to to_have_js_property")

Added in: v1.20locatorAssertions.to\_have\_js\_property

Ensures the [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") points to an element with given JavaScript property. Note that this property can be of a primitive type as well as a plain serializable JavaScript object.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import expect

locator = page.locator(".component")
expect(locator).to_have_js_property("loaded", True)

```

```codeBlockLines_e6Vv
from playwright.async_api import expect

locator = page.locator(".component")
await expect(locator).to_have_js_property("loaded", True)

```

**Arguments**

- `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-js-property-option-name)

Property name.

- `value` [Any](https://docs.python.org/3/library/typing.html#typing.Any "Any") Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-js-property-option-value)

Property value.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-js-property-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-js-property-return)

* * *

### to\_have\_role [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-to-have-role "Direct link to to_have_role")

Added in: v1.44locatorAssertions.to\_have\_role

Ensures the [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") points to an element with a given [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles).

Note that role is matched as a string, disregarding the ARIA role hierarchy. For example, asserting a superclass role `"checkbox"` on an element with a subclass role `"switch"` will fail.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
locator = page.get_by_test_id("save-button")
expect(locator).to_have_role("button")

```

```codeBlockLines_e6Vv
locator = page.get_by_test_id("save-button")
await expect(locator).to_have_role("button")

```

**Arguments**

- `role` "alert" \| "alertdialog" \| "application" \| "article" \| "banner" \| "blockquote" \| "button" \| "caption" \| "cell" \| "checkbox" \| "code" \| "columnheader" \| "combobox" \| "complementary" \| "contentinfo" \| "definition" \| "deletion" \| "dialog" \| "directory" \| "document" \| "emphasis" \| "feed" \| "figure" \| "form" \| "generic" \| "grid" \| "gridcell" \| "group" \| "heading" \| "img" \| "insertion" \| "link" \| "list" \| "listbox" \| "listitem" \| "log" \| "main" \| "marquee" \| "math" \| "meter" \| "menu" \| "menubar" \| "menuitem" \| "menuitemcheckbox" \| "menuitemradio" \| "navigation" \| "none" \| "note" \| "option" \| "paragraph" \| "presentation" \| "progressbar" \| "radio" \| "radiogroup" \| "region" \| "row" \| "rowgroup" \| "rowheader" \| "scrollbar" \| "search" \| "searchbox" \| "separator" \| "slider" \| "spinbutton" \| "status" \| "strong" \| "subscript" \| "superscript" \| "switch" \| "tab" \| "table" \| "tablist" \| "tabpanel" \| "term" \| "textbox" \| "time" \| "timer" \| "toolbar" \| "tooltip" \| "tree" \| "treegrid" \| "treeitem" [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-role-option-role)

Required aria role.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-role-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-role-return)

* * *

### to\_have\_text [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-to-have-text "Direct link to to_have_text")

Added in: v1.20locatorAssertions.to\_have\_text

Ensures the [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") points to an element with the given text. All nested elements will be considered when computing the text content of the element. You can use regular expressions for the value as well.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
import re
from playwright.sync_api import expect

locator = page.locator(".title")
expect(locator).to_have_text(re.compile(r"Welcome, Test User"))
expect(locator).to_have_text(re.compile(r"Welcome, .*"))

```

```codeBlockLines_e6Vv
import re
from playwright.async_api import expect

locator = page.locator(".title")
await expect(locator).to_have_text(re.compile(r"Welcome, Test User"))
await expect(locator).to_have_text(re.compile(r"Welcome, .*"))

```

If you pass an array as an expected value, the expectations are:

1. Locator resolves to a list of elements.
2. The number of elements equals the number of expected values in the array.
3. Elements from the list have text matching expected array values, one by one, in order.

For example, consider the following list:

```codeBlockLines_e6Vv
<ul>
  <li>Text 1</li>
  <li>Text 2</li>
  <li>Text 3</li>
</ul>

```

Let's see how we can use the assertion:

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import expect

# ✓ Has the right items in the right order
expect(page.locator("ul > li")).to_have_text(["Text 1", "Text 2", "Text 3"])

# ✖ Wrong order
expect(page.locator("ul > li")).to_have_text(["Text 3", "Text 2", "Text 1"])

# ✖ Last item does not match
expect(page.locator("ul > li")).to_have_text(["Text 1", "Text 2", "Text"])

# ✖ Locator points to the outer list element, not to the list items
expect(page.locator("ul")).to_have_text(["Text 1", "Text 2", "Text 3"])

```

```codeBlockLines_e6Vv
from playwright.async_api import expect

# ✓ Has the right items in the right order
await expect(page.locator("ul > li")).to_have_text(["Text 1", "Text 2", "Text 3"])

# ✖ Wrong order
await expect(page.locator("ul > li")).to_have_text(["Text 3", "Text 2", "Text 1"])

# ✖ Last item does not match
await expect(page.locator("ul > li")).to_have_text(["Text 1", "Text 2", "Text"])

# ✖ Locator points to the outer list element, not to the list items
await expect(page.locator("ul")).to_have_text(["Text 1", "Text 2", "Text 3"])

```

**Arguments**

- `expected` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Pattern](https://docs.python.org/3/library/re.html "Pattern")\] \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern")\] Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-text-option-expected)

Expected string or RegExp or a list of those.

- `ignore_case` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.23 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-text-option-ignore-case)

Whether to perform case-insensitive match. [ignore\_case](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-text-option-ignore-case) option takes precedence over the corresponding regular expression flag if specified.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-text-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.

- `use_inner_text` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-text-option-use-inner-text)

Whether to use `element.innerText` instead of `element.textContent` when retrieving DOM node text.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-text-return)

**Details**

When `expected` parameter is a string, Playwright will normalize whitespaces and line breaks both in the actual text and in the expected string before matching. When regular expression is used, the actual text is matched as is.

* * *

### to\_have\_value [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-to-have-value "Direct link to to_have_value")

Added in: v1.20locatorAssertions.to\_have\_value

Ensures the [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") points to an element with the given input value. You can use regular expressions for the value as well.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
import re
from playwright.sync_api import expect

locator = page.locator("input[type=number]")
expect(locator).to_have_value(re.compile(r"[0-9]"))

```

```codeBlockLines_e6Vv
import re
from playwright.async_api import expect

locator = page.locator("input[type=number]")
await expect(locator).to_have_value(re.compile(r"[0-9]"))

```

**Arguments**

- `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-value-option-value)

Expected value.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-value-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-value-return)

* * *

### to\_have\_values [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-to-have-values "Direct link to to_have_values")

Added in: v1.23locatorAssertions.to\_have\_values

Ensures the [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") points to multi-select/combobox (i.e. a `select` with the `multiple` attribute) and the specified values are selected.

**Usage**

For example, given the following element:

```codeBlockLines_e6Vv
<select id="favorite-colors" multiple>
  <option value="R">Red</option>
  <option value="G">Green</option>
  <option value="B">Blue</option>
</select>

```

- Sync
- Async

```codeBlockLines_e6Vv
import re
from playwright.sync_api import expect

locator = page.locator("id=favorite-colors")
locator.select_option(["R", "G"])
expect(locator).to_have_values([re.compile(r"R"), re.compile(r"G")])

```

```codeBlockLines_e6Vv
import re
from playwright.async_api import expect

locator = page.locator("id=favorite-colors")
await locator.select_option(["R", "G"])
await expect(locator).to_have_values([re.compile(r"R"), re.compile(r"G")])

```

**Arguments**

- `values` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Pattern](https://docs.python.org/3/library/re.html "Pattern")\] \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern")\] [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-values-option-values)

Expected options currently selected.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-values-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-values-return)

* * *

### to\_match\_aria\_snapshot [​](https://playwright.dev/python/docs/api/class-locatorassertions\#locator-assertions-to-match-aria-snapshot "Direct link to to_match_aria_snapshot")

Added in: v1.49locatorAssertions.to\_match\_aria\_snapshot

Asserts that the target element matches the given [accessibility snapshot](https://playwright.dev/python/docs/aria-snapshots).

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
page.goto("https://demo.playwright.dev/todomvc/")
expect(page.locator('body')).to_match_aria_snapshot('''
  - heading "todos"
  - textbox "What needs to be done?"
''')

```

```codeBlockLines_e6Vv
await page.goto("https://demo.playwright.dev/todomvc/")
await expect(page.locator('body')).to_match_aria_snapshot('''
  - heading "todos"
  - textbox "What needs to be done?"
''')

```

**Arguments**

- `expected` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-match-aria-snapshot-option-expected)

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-match-aria-snapshot-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-match-aria-snapshot-return)

- [Methods](https://playwright.dev/python/docs/api/class-locatorassertions#methods)
  - [not\_to\_be\_attached](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-attached)
  - [not\_to\_be\_checked](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-checked)
  - [not\_to\_be\_disabled](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-disabled)
  - [not\_to\_be\_editable](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-editable)
  - [not\_to\_be\_empty](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-empty)
  - [not\_to\_be\_enabled](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-enabled)
  - [not\_to\_be\_focused](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-focused)
  - [not\_to\_be\_hidden](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-hidden)
  - [not\_to\_be\_in\_viewport](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-in-viewport)
  - [not\_to\_be\_visible](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-be-visible)
  - [not\_to\_contain\_text](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-contain-text)
  - [not\_to\_have\_accessible\_description](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-accessible-description)
  - [not\_to\_have\_accessible\_error\_message](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-accessible-error-message)
  - [not\_to\_have\_accessible\_name](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-accessible-name)
  - [not\_to\_have\_attribute](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-attribute)
  - [not\_to\_have\_class](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-class)
  - [not\_to\_have\_count](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-count)
  - [not\_to\_have\_css](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-css)
  - [not\_to\_have\_id](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-id)
  - [not\_to\_have\_js\_property](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-js-property)
  - [not\_to\_have\_role](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-role)
  - [not\_to\_have\_text](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-text)
  - [not\_to\_have\_value](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-value)
  - [not\_to\_have\_values](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-values)
  - [not\_to\_match\_aria\_snapshot](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-match-aria-snapshot)
  - [to\_be\_attached](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-attached)
  - [to\_be\_checked](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-checked)
  - [to\_be\_disabled](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-disabled)
  - [to\_be\_editable](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-editable)
  - [to\_be\_empty](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-empty)
  - [to\_be\_enabled](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-enabled)
  - [to\_be\_focused](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-focused)
  - [to\_be\_hidden](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-hidden)
  - [to\_be\_in\_viewport](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-in-viewport)
  - [to\_be\_visible](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-visible)
  - [to\_contain\_text](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-contain-text)
  - [to\_have\_accessible\_description](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-accessible-description)
  - [to\_have\_accessible\_error\_message](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-accessible-error-message)
  - [to\_have\_accessible\_name](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-accessible-name)
  - [to\_have\_attribute](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-attribute)
  - [to\_have\_class](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-class)
  - [to\_have\_count](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-count)
  - [to\_have\_css](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-css)
  - [to\_have\_id](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-id)
  - [to\_have\_js\_property](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-js-property)
  - [to\_have\_role](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-role)
  - [to\_have\_text](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-text)
  - [to\_have\_value](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-value)
  - [to\_have\_values](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-values)
  - [to\_match\_aria\_snapshot](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-match-aria-snapshot)

## Playwright Tracing API
[Skip to main content](https://playwright.dev/python/docs/api/class-tracing#__docusaurus_skipToContent_fallback)

On this page

API for collecting and saving Playwright traces. Playwright traces can be opened in [Trace Viewer](https://playwright.dev/python/docs/trace-viewer) after Playwright script runs.

Start recording a trace before performing actions. At the end, stop tracing and save it to a file.

- Sync
- Async

```codeBlockLines_e6Vv
browser = chromium.launch()
context = browser.new_context()
context.tracing.start(screenshots=True, snapshots=True)
page = context.new_page()
page.goto("https://playwright.dev")
context.tracing.stop(path = "trace.zip")

```

```codeBlockLines_e6Vv
browser = await chromium.launch()
context = await browser.new_context()
await context.tracing.start(screenshots=True, snapshots=True)
page = await context.new_page()
await page.goto("https://playwright.dev")
await context.tracing.stop(path = "trace.zip")

```

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-tracing\#methods "Direct link to Methods")

### group [​](https://playwright.dev/python/docs/api/class-tracing\#tracing-group "Direct link to group")

Added in: v1.49tracing.group

caution

Use `test.step` instead when available.

Creates a new group within the trace, assigning any subsequent API calls to this group, until [tracing.group\_end()](https://playwright.dev/python/docs/api/class-tracing#tracing-group-end) is called. Groups can be nested and will be visible in the trace viewer.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
# All actions between group and group_end
# will be shown in the trace viewer as a group.
page.context.tracing.group("Open Playwright.dev > API")
page.goto("https://playwright.dev/")
page.get_by_role("link", name="API").click()
page.context.tracing.group_end()

```

```codeBlockLines_e6Vv
# All actions between group and group_end
# will be shown in the trace viewer as a group.
await page.context.tracing.group("Open Playwright.dev > API")
await page.goto("https://playwright.dev/")
await page.get_by_role("link", name="API").click()
await page.context.tracing.group_end()

```

**Arguments**

- `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-tracing#tracing-group-option-name)

Group name shown in the trace viewer.

- `location` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-tracing#tracing-group-option-location)


  - `file` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

  - `line` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_

  - `column` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_


Specifies a custom location for the group to be shown in the trace viewer. Defaults to the location of the [tracing.group()](https://playwright.dev/python/docs/api/class-tracing#tracing-group) call.

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-tracing#tracing-group-return)

* * *

### group\_end [​](https://playwright.dev/python/docs/api/class-tracing\#tracing-group-end "Direct link to group_end")

Added in: v1.49tracing.group\_end

Closes the last group created by [tracing.group()](https://playwright.dev/python/docs/api/class-tracing#tracing-group).

**Usage**

```codeBlockLines_e6Vv
tracing.group_end()

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-tracing#tracing-group-end-return)

* * *

### start [​](https://playwright.dev/python/docs/api/class-tracing\#tracing-start "Direct link to start")

Added in: v1.12tracing.start

Start tracing.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
context.tracing.start(screenshots=True, snapshots=True)
page = context.new_page()
page.goto("https://playwright.dev")
context.tracing.stop(path = "trace.zip")

```

```codeBlockLines_e6Vv
await context.tracing.start(screenshots=True, snapshots=True)
page = await context.new_page()
await page.goto("https://playwright.dev")
await context.tracing.stop(path = "trace.zip")

```

**Arguments**

- `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-tracing#tracing-start-option-name)

If specified, intermediate trace files are going to be saved into the files with the given name prefix inside the [traces\_dir](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-traces-dir) directory specified in [browser\_type.launch()](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch). To specify the final trace zip file name, you need to pass `path` option to [tracing.stop()](https://playwright.dev/python/docs/api/class-tracing#tracing-stop) instead.

- `screenshots` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-tracing#tracing-start-option-screenshots)

Whether to capture screenshots during tracing. Screenshots are used to build a timeline preview.

- `snapshots` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-tracing#tracing-start-option-snapshots)

If this option is true tracing will
  - capture DOM snapshot on every action
  - record network activity
- `sources` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.17 [#](https://playwright.dev/python/docs/api/class-tracing#tracing-start-option-sources)

Whether to include source files for trace actions.

- `title` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ Added in: v1.17 [#](https://playwright.dev/python/docs/api/class-tracing#tracing-start-option-title)

Trace name to be shown in the Trace Viewer.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-tracing#tracing-start-return)

* * *

### start\_chunk [​](https://playwright.dev/python/docs/api/class-tracing\#tracing-start-chunk "Direct link to start_chunk")

Added in: v1.15tracing.start\_chunk

Start a new trace chunk. If you'd like to record multiple traces on the same [BrowserContext](https://playwright.dev/python/docs/api/class-browsercontext "BrowserContext"), use [tracing.start()](https://playwright.dev/python/docs/api/class-tracing#tracing-start) once, and then create multiple trace chunks with [tracing.start\_chunk()](https://playwright.dev/python/docs/api/class-tracing#tracing-start-chunk) and [tracing.stop\_chunk()](https://playwright.dev/python/docs/api/class-tracing#tracing-stop-chunk).

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
context.tracing.start(screenshots=True, snapshots=True)
page = context.new_page()
page.goto("https://playwright.dev")

context.tracing.start_chunk()
page.get_by_text("Get Started").click()
# Everything between start_chunk and stop_chunk will be recorded in the trace.
context.tracing.stop_chunk(path = "trace1.zip")

context.tracing.start_chunk()
page.goto("http://example.com")
# Save a second trace file with different actions.
context.tracing.stop_chunk(path = "trace2.zip")

```

```codeBlockLines_e6Vv
await context.tracing.start(screenshots=True, snapshots=True)
page = await context.new_page()
await page.goto("https://playwright.dev")

await context.tracing.start_chunk()
await page.get_by_text("Get Started").click()
# Everything between start_chunk and stop_chunk will be recorded in the trace.
await context.tracing.stop_chunk(path = "trace1.zip")

await context.tracing.start_chunk()
await page.goto("http://example.com")
# Save a second trace file with different actions.
await context.tracing.stop_chunk(path = "trace2.zip")

```

**Arguments**

- `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ Added in: v1.32 [#](https://playwright.dev/python/docs/api/class-tracing#tracing-start-chunk-option-name)

If specified, intermediate trace files are going to be saved into the files with the given name prefix inside the [traces\_dir](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-traces-dir) directory specified in [browser\_type.launch()](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch). To specify the final trace zip file name, you need to pass `path` option to [tracing.stop\_chunk()](https://playwright.dev/python/docs/api/class-tracing#tracing-stop-chunk) instead.

- `title` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ Added in: v1.17 [#](https://playwright.dev/python/docs/api/class-tracing#tracing-start-chunk-option-title)

Trace name to be shown in the Trace Viewer.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-tracing#tracing-start-chunk-return)

* * *

### stop [​](https://playwright.dev/python/docs/api/class-tracing\#tracing-stop "Direct link to stop")

Added in: v1.12tracing.stop

Stop tracing.

**Usage**

```codeBlockLines_e6Vv
tracing.stop()
tracing.stop(**kwargs)

```

**Arguments**

- `path` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-tracing#tracing-stop-option-path)

Export trace into the file with the given path.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-tracing#tracing-stop-return)

* * *

### stop\_chunk [​](https://playwright.dev/python/docs/api/class-tracing\#tracing-stop-chunk "Direct link to stop_chunk")

Added in: v1.15tracing.stop\_chunk

Stop the trace chunk. See [tracing.start\_chunk()](https://playwright.dev/python/docs/api/class-tracing#tracing-start-chunk) for more details about multiple trace chunks.

**Usage**

```codeBlockLines_e6Vv
tracing.stop_chunk()
tracing.stop_chunk(**kwargs)

```

**Arguments**

- `path` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-tracing#tracing-stop-chunk-option-path)

Export trace collected since the last [tracing.start\_chunk()](https://playwright.dev/python/docs/api/class-tracing#tracing-start-chunk) call into the file with the given path.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-tracing#tracing-stop-chunk-return)

- [Methods](https://playwright.dev/python/docs/api/class-tracing#methods)
  - [group](https://playwright.dev/python/docs/api/class-tracing#tracing-group)
  - [group\_end](https://playwright.dev/python/docs/api/class-tracing#tracing-group-end)
  - [start](https://playwright.dev/python/docs/api/class-tracing#tracing-start)
  - [start\_chunk](https://playwright.dev/python/docs/api/class-tracing#tracing-start-chunk)
  - [stop](https://playwright.dev/python/docs/api/class-tracing#tracing-stop)
  - [stop\_chunk](https://playwright.dev/python/docs/api/class-tracing#tracing-stop-chunk)

## Playwright Response Class
[Skip to main content](https://playwright.dev/python/docs/api/class-response#__docusaurus_skipToContent_fallback)

On this page

[Response](https://playwright.dev/python/docs/api/class-response "Response") class represents responses which are received by page.

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-response\#methods "Direct link to Methods")

### all\_headers [​](https://playwright.dev/python/docs/api/class-response\#response-all-headers "Direct link to all_headers")

Added in: v1.15response.all\_headers

An object with all the response HTTP headers associated with this response.

**Usage**

```codeBlockLines_e6Vv
response.all_headers()

```

**Returns**

- [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] [#](https://playwright.dev/python/docs/api/class-response#response-all-headers-return)

* * *

### body [​](https://playwright.dev/python/docs/api/class-response\#response-body "Direct link to body")

Added before v1.9response.body

Returns the buffer with response body.

**Usage**

```codeBlockLines_e6Vv
response.body()

```

**Returns**

- [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") [#](https://playwright.dev/python/docs/api/class-response#response-body-return)

* * *

### finished [​](https://playwright.dev/python/docs/api/class-response\#response-finished "Direct link to finished")

Added before v1.9response.finished

Waits for this response to finish, returns always `null`.

**Usage**

```codeBlockLines_e6Vv
response.finished()

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-response#response-finished-return)

* * *

### header\_value [​](https://playwright.dev/python/docs/api/class-response\#response-header-value "Direct link to header_value")

Added in: v1.15response.header\_value

Returns the value of the header matching the name. The name is case-insensitive. If multiple headers have the same name (except `set-cookie`), they are returned as a list separated by `, `. For `set-cookie`, the `\n` separator is used. If no headers are found, `null` is returned.

**Usage**

```codeBlockLines_e6Vv
response.header_value(name)

```

**Arguments**

- `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-response#response-header-value-option-name)

Name of the header.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-response#response-header-value-return)

* * *

### header\_values [​](https://playwright.dev/python/docs/api/class-response\#response-header-values "Direct link to header_values")

Added in: v1.15response.header\_values

Returns all values of the headers matching the name, for example `set-cookie`. The name is case-insensitive.

**Usage**

```codeBlockLines_e6Vv
response.header_values(name)

```

**Arguments**

- `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-response#response-header-values-option-name)

Name of the header.


**Returns**

- [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] [#](https://playwright.dev/python/docs/api/class-response#response-header-values-return)

* * *

### headers\_array [​](https://playwright.dev/python/docs/api/class-response\#response-headers-array "Direct link to headers_array")

Added in: v1.15response.headers\_array

An array with all the request HTTP headers associated with this response. Unlike [response.all\_headers()](https://playwright.dev/python/docs/api/class-response#response-all-headers), header names are NOT lower-cased. Headers with multiple entries, such as `Set-Cookie`, appear in the array multiple times.

**Usage**

```codeBlockLines_e6Vv
response.headers_array()

```

**Returns**

- [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\] [#](https://playwright.dev/python/docs/api/class-response#response-headers-array-return)
  - `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    Name of the header.

  - `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    Value of the header.

* * *

### json [​](https://playwright.dev/python/docs/api/class-response\#response-json "Direct link to json")

Added before v1.9response.json

Returns the JSON representation of response body.

This method will throw if the response body is not parsable via `JSON.parse`.

**Usage**

```codeBlockLines_e6Vv
response.json()

```

**Returns**

- [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-response#response-json-return)

* * *

### security\_details [​](https://playwright.dev/python/docs/api/class-response\#response-security-details "Direct link to security_details")

Added in: v1.13response.security\_details

Returns SSL and other security information.

**Usage**

```codeBlockLines_e6Vv
response.security_details()

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-response#response-security-details-return)
  - `issuer` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_

    Common Name component of the Issuer field. from the certificate. This should only be used for informational purposes. Optional.

  - `protocol` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_

    The specific TLS protocol used. (e.g. `TLS 1.3`). Optional.

  - `subjectName` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_

    Common Name component of the Subject field from the certificate. This should only be used for informational purposes. Optional.

  - `validFrom` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_

    Unix timestamp (in seconds) specifying when this cert becomes valid. Optional.

  - `validTo` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_

    Unix timestamp (in seconds) specifying when this cert becomes invalid. Optional.

* * *

### server\_addr [​](https://playwright.dev/python/docs/api/class-response\#response-server-addr "Direct link to server_addr")

Added in: v1.13response.server\_addr

Returns the IP address and port of the server.

**Usage**

```codeBlockLines_e6Vv
response.server_addr()

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-response#response-server-addr-return)
  - `ipAddress` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    IPv4 or IPV6 address of the server.

  - `port` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

* * *

### text [​](https://playwright.dev/python/docs/api/class-response\#response-text "Direct link to text")

Added before v1.9response.text

Returns the text representation of response body.

**Usage**

```codeBlockLines_e6Vv
response.text()

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-response#response-text-return)

* * *

## Properties [​](https://playwright.dev/python/docs/api/class-response\#properties "Direct link to Properties")

### frame [​](https://playwright.dev/python/docs/api/class-response\#response-frame "Direct link to frame")

Added before v1.9response.frame

Returns the [Frame](https://playwright.dev/python/docs/api/class-frame "Frame") that initiated this response.

**Usage**

```codeBlockLines_e6Vv
response.frame

```

**Returns**

- [Frame](https://playwright.dev/python/docs/api/class-frame "Frame") [#](https://playwright.dev/python/docs/api/class-response#response-frame-return)

* * *

### from\_service\_worker [​](https://playwright.dev/python/docs/api/class-response\#response-from-service-worker "Direct link to from_service_worker")

Added in: v1.23response.from\_service\_worker

Indicates whether this Response was fulfilled by a Service Worker's Fetch Handler (i.e. via [FetchEvent.respondWith](https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/respondWith)).

**Usage**

```codeBlockLines_e6Vv
response.from_service_worker

```

**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-response#response-from-service-worker-return)

* * *

### headers [​](https://playwright.dev/python/docs/api/class-response\#response-headers "Direct link to headers")

Added before v1.9response.headers

An object with the response HTTP headers. The header names are lower-cased. Note that this method does not return security-related headers, including cookie-related ones. You can use [response.all\_headers()](https://playwright.dev/python/docs/api/class-response#response-all-headers) for complete list of headers that include `cookie` information.

**Usage**

```codeBlockLines_e6Vv
response.headers

```

**Returns**

- [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] [#](https://playwright.dev/python/docs/api/class-response#response-headers-return)

* * *

### ok [​](https://playwright.dev/python/docs/api/class-response\#response-ok "Direct link to ok")

Added before v1.9response.ok

Contains a boolean stating whether the response was successful (status in the range 200-299) or not.

**Usage**

```codeBlockLines_e6Vv
response.ok

```

**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-response#response-ok-return)

* * *

### request [​](https://playwright.dev/python/docs/api/class-response\#response-request "Direct link to request")

Added before v1.9response.request

Returns the matching [Request](https://playwright.dev/python/docs/api/class-request "Request") object.

**Usage**

```codeBlockLines_e6Vv
response.request

```

**Returns**

- [Request](https://playwright.dev/python/docs/api/class-request "Request") [#](https://playwright.dev/python/docs/api/class-response#response-request-return)

* * *

### status [​](https://playwright.dev/python/docs/api/class-response\#response-status "Direct link to status")

Added before v1.9response.status

Contains the status code of the response (e.g., 200 for a success).

**Usage**

```codeBlockLines_e6Vv
response.status

```

**Returns**

- [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") [#](https://playwright.dev/python/docs/api/class-response#response-status-return)

* * *

### status\_text [​](https://playwright.dev/python/docs/api/class-response\#response-status-text "Direct link to status_text")

Added before v1.9response.status\_text

Contains the status text of the response (e.g. usually an "OK" for a success).

**Usage**

```codeBlockLines_e6Vv
response.status_text

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-response#response-status-text-return)

* * *

### url [​](https://playwright.dev/python/docs/api/class-response\#response-url "Direct link to url")

Added before v1.9response.url

Contains the URL of the response.

**Usage**

```codeBlockLines_e6Vv
response.url

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-response#response-url-return)

- [Methods](https://playwright.dev/python/docs/api/class-response#methods)
  - [all\_headers](https://playwright.dev/python/docs/api/class-response#response-all-headers)
  - [body](https://playwright.dev/python/docs/api/class-response#response-body)
  - [finished](https://playwright.dev/python/docs/api/class-response#response-finished)
  - [header\_value](https://playwright.dev/python/docs/api/class-response#response-header-value)
  - [header\_values](https://playwright.dev/python/docs/api/class-response#response-header-values)
  - [headers\_array](https://playwright.dev/python/docs/api/class-response#response-headers-array)
  - [json](https://playwright.dev/python/docs/api/class-response#response-json)
  - [security\_details](https://playwright.dev/python/docs/api/class-response#response-security-details)
  - [server\_addr](https://playwright.dev/python/docs/api/class-response#response-server-addr)
  - [text](https://playwright.dev/python/docs/api/class-response#response-text)
- [Properties](https://playwright.dev/python/docs/api/class-response#properties)
  - [frame](https://playwright.dev/python/docs/api/class-response#response-frame)
  - [from\_service\_worker](https://playwright.dev/python/docs/api/class-response#response-from-service-worker)
  - [headers](https://playwright.dev/python/docs/api/class-response#response-headers)
  - [ok](https://playwright.dev/python/docs/api/class-response#response-ok)
  - [request](https://playwright.dev/python/docs/api/class-response#response-request)
  - [status](https://playwright.dev/python/docs/api/class-response#response-status)
  - [status\_text](https://playwright.dev/python/docs/api/class-response#response-status-text)
  - [url](https://playwright.dev/python/docs/api/class-response#response-url)

## Browser Contexts in Playwright
[Skip to main content](https://playwright.dev/python/docs/api/class-browsercontext#__docusaurus_skipToContent_fallback)

On this page

BrowserContexts provide a way to operate multiple independent browser sessions.

If a page opens another page, e.g. with a `window.open` call, the popup will belong to the parent page's browser context.

Playwright allows creating isolated non-persistent browser contexts with [browser.new\_context()](https://playwright.dev/python/docs/api/class-browser#browser-new-context) method. Non-persistent browser contexts don't write any browsing data to disk.

- Sync
- Async

```codeBlockLines_e6Vv
# create a new incognito browser context
context = browser.new_context()
# create a new page inside context.
page = context.new_page()
page.goto("https://example.com")
# dispose context once it is no longer needed.
context.close()

```

```codeBlockLines_e6Vv
# create a new incognito browser context
context = await browser.new_context()
# create a new page inside context.
page = await context.new_page()
await page.goto("https://example.com")
# dispose context once it is no longer needed.
await context.close()

```

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-browsercontext\#methods "Direct link to Methods")

### add\_cookies [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-add-cookies "Direct link to add_cookies")

Added before v1.9browserContext.add\_cookies

Adds cookies into this browser context. All pages within this context will have these cookies installed. Cookies can be obtained via [browser\_context.cookies()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-cookies).

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
browser_context.add_cookies([cookie_object1, cookie_object2])

```

```codeBlockLines_e6Vv
await browser_context.add_cookies([cookie_object1, cookie_object2])

```

**Arguments**

- `cookies` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\] [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-add-cookies-option-cookies)
  - `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

  - `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

  - `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_

    Either url or domain / path are required. Optional.

  - `domain` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_

    For the cookie to apply to all subdomains as well, prefix domain with a dot, like this: ".example.com". Either url or domain / path are required. Optional.

  - `path` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_

    Either url or domain / path are required Optional.

  - `expires` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_

    Unix time in seconds. Optional.

  - `httpOnly` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_

    Optional.

  - `secure` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_

    Optional.

  - `sameSite` "Strict" \| "Lax" \| "None" _(optional)_

    Optional.

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-add-cookies-return)

* * *

### add\_init\_script [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-add-init-script "Direct link to add_init_script")

Added before v1.9browserContext.add\_init\_script

Adds a script which would be evaluated in one of the following scenarios:

- Whenever a page is created in the browser context or is navigated.
- Whenever a child frame is attached or navigated in any page in the browser context. In this case, the script is evaluated in the context of the newly attached frame.

The script is evaluated after the document was created but before any of its scripts were run. This is useful to amend the JavaScript environment, e.g. to seed `Math.random`.

**Usage**

An example of overriding `Math.random` before the page loads:

```codeBlockLines_e6Vv
// preload.js
Math.random = () => 42;

```

- Sync
- Async

```codeBlockLines_e6Vv
# in your playwright script, assuming the preload.js file is in same directory.
browser_context.add_init_script(path="preload.js")

```

```codeBlockLines_e6Vv
# in your playwright script, assuming the preload.js file is in same directory.
await browser_context.add_init_script(path="preload.js")

```

note

The order of evaluation of multiple scripts installed via [browser\_context.add\_init\_script()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-add-init-script) and [page.add\_init\_script()](https://playwright.dev/python/docs/api/class-page#page-add-init-script) is not defined.

**Arguments**

- `path` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-add-init-script-option-path)

Path to the JavaScript file. If `path` is a relative path, then it is resolved relative to the current working directory. Optional.

- `script` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-add-init-script-option-script)

Script to be evaluated in all pages in the browser context. Optional.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-add-init-script-return)

* * *

### clear\_cookies [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-clear-cookies "Direct link to clear_cookies")

Added before v1.9browserContext.clear\_cookies

Removes cookies from context. Accepts optional filter.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
context.clear_cookies()
context.clear_cookies(name="session-id")
context.clear_cookies(domain="my-origin.com")
context.clear_cookies(path="/api/v1")
context.clear_cookies(name="session-id", domain="my-origin.com")

```

```codeBlockLines_e6Vv
await context.clear_cookies()
await context.clear_cookies(name="session-id")
await context.clear_cookies(domain="my-origin.com")
await context.clear_cookies(path="/api/v1")
await context.clear_cookies(name="session-id", domain="my-origin.com")

```

**Arguments**

- `domain` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") _(optional)_ Added in: v1.43 [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-clear-cookies-option-domain)

Only removes cookies with the given domain.

- `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") _(optional)_ Added in: v1.43 [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-clear-cookies-option-name)

Only removes cookies with the given name.

- `path` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") _(optional)_ Added in: v1.43 [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-clear-cookies-option-path)

Only removes cookies with the given path.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-clear-cookies-return)

* * *

### clear\_permissions [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-clear-permissions "Direct link to clear_permissions")

Added before v1.9browserContext.clear\_permissions

Clears all permission overrides for the browser context.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
context = browser.new_context()
context.grant_permissions(["clipboard-read"])
# do stuff ..
context.clear_permissions()

```

```codeBlockLines_e6Vv
context = await browser.new_context()
await context.grant_permissions(["clipboard-read"])
# do stuff ..
context.clear_permissions()

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-clear-permissions-return)

* * *

### close [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-close "Direct link to close")

Added before v1.9browserContext.close

Closes the browser context. All the pages that belong to the browser context will be closed.

note

The default browser context cannot be closed.

**Usage**

```codeBlockLines_e6Vv
browser_context.close()
browser_context.close(**kwargs)

```

**Arguments**

- `reason` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ Added in: v1.40 [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-close-option-reason)

The reason to be reported to the operations interrupted by the context closure.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-close-return)

* * *

### cookies [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-cookies "Direct link to cookies")

Added before v1.9browserContext.cookies

If no URLs are specified, this method returns all cookies. If URLs are specified, only cookies that affect those URLs are returned.

**Usage**

```codeBlockLines_e6Vv
browser_context.cookies()
browser_context.cookies(**kwargs)

```

**Arguments**

- `urls` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-cookies-option-urls)

Optional list of URLs.


**Returns**

- [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\] [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-cookies-return)
  - `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

  - `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

  - `domain` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

  - `path` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

  - `expires` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    Unix time in seconds.

  - `httpOnly` [bool](https://docs.python.org/3/library/stdtypes.html "bool")

  - `secure` [bool](https://docs.python.org/3/library/stdtypes.html "bool")

  - `sameSite` "Strict" \| "Lax" \| "None"

* * *

### expect\_console\_message [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-wait-for-console-message "Direct link to expect_console_message")

Added in: v1.34browserContext.expect\_console\_message

Performs action and waits for a [ConsoleMessage](https://playwright.dev/python/docs/api/class-consolemessage "ConsoleMessage") to be logged by in the pages in the context. If predicate is provided, it passes [ConsoleMessage](https://playwright.dev/python/docs/api/class-consolemessage "ConsoleMessage") value into the `predicate` function and waits for `predicate(message)` to return a truthy value. Will throw an error if the page is closed before the [browser\_context.on("console")](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-event-console) event is fired.

**Usage**

```codeBlockLines_e6Vv
browser_context.expect_console_message()
browser_context.expect_console_message(**kwargs)

```

**Arguments**

- `predicate` [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [ConsoleMessage](https://playwright.dev/python/docs/api/class-consolemessage "ConsoleMessage")\]: [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-wait-for-console-message-option-predicate)

Receives the [ConsoleMessage](https://playwright.dev/python/docs/api/class-consolemessage "ConsoleMessage") object and resolves to truthy value when the waiting should resolve.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-wait-for-console-message-option-timeout)

Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout).


**Returns**

- [EventContextManager](https://docs.python.org/3/reference/datamodel.html#context-managers "Event context manager")\[ [ConsoleMessage](https://playwright.dev/python/docs/api/class-consolemessage "ConsoleMessage")\] [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-wait-for-console-message-return)

* * *

### expect\_event [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-wait-for-event "Direct link to expect_event")

Added before v1.9browserContext.expect\_event

Waits for event to fire and passes its value into the predicate function. Returns when the predicate returns truthy value. Will throw an error if the context closes before the event is fired. Returns the event data value.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
with context.expect_event("page") as event_info:
    page.get_by_role("button").click()
page = event_info.value

```

```codeBlockLines_e6Vv
async with context.expect_event("page") as event_info:
    await page.get_by_role("button").click()
page = await event_info.value

```

**Arguments**

- `event` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-wait-for-event-option-event)

Event name, same one would pass into `browserContext.on(event)`.

- `predicate` [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-wait-for-event-option-predicate)

Receives the event data and resolves to truthy value when the waiting should resolve.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-wait-for-event-option-timeout)

Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout).


**Returns**

- [EventContextManager](https://docs.python.org/3/reference/datamodel.html#context-managers "Event context manager") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-wait-for-event-return)

* * *

### expect\_page [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-wait-for-page "Direct link to expect_page")

Added in: v1.9browserContext.expect\_page

Performs action and waits for a new [Page](https://playwright.dev/python/docs/api/class-page "Page") to be created in the context. If predicate is provided, it passes [Page](https://playwright.dev/python/docs/api/class-page "Page") value into the `predicate` function and waits for `predicate(event)` to return a truthy value. Will throw an error if the context closes before new [Page](https://playwright.dev/python/docs/api/class-page "Page") is created.

**Usage**

```codeBlockLines_e6Vv
browser_context.expect_page()
browser_context.expect_page(**kwargs)

```

**Arguments**

- `predicate` [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [Page](https://playwright.dev/python/docs/api/class-page "Page")\]: [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-wait-for-page-option-predicate)

Receives the [Page](https://playwright.dev/python/docs/api/class-page "Page") object and resolves to truthy value when the waiting should resolve.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-wait-for-page-option-timeout)

Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout).


**Returns**

- [EventContextManager](https://docs.python.org/3/reference/datamodel.html#context-managers "Event context manager")\[ [Page](https://playwright.dev/python/docs/api/class-page "Page")\] [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-wait-for-page-return)

* * *

### expose\_binding [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-expose-binding "Direct link to expose_binding")

Added before v1.9browserContext.expose\_binding

The method adds a function called [name](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-expose-binding-option-name) on the `window` object of every frame in every page in the context. When called, the function executes [callback](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-expose-binding-option-callback) and returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise") which resolves to the return value of [callback](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-expose-binding-option-callback). If the [callback](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-expose-binding-option-callback) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), it will be awaited.

The first argument of the [callback](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-expose-binding-option-callback) function contains information about the caller: `{ browserContext: BrowserContext, page: Page, frame: Frame }`.

See [page.expose\_binding()](https://playwright.dev/python/docs/api/class-page#page-expose-binding) for page-only version.

**Usage**

An example of exposing page URL to all frames in all pages in the context:

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    webkit = playwright.webkit
    browser = webkit.launch(headless=False)
    context = browser.new_context()
    context.expose_binding("pageURL", lambda source: source["page"].url)
    page = context.new_page()
    page.set_content("""
    <script>
      async function onClick() {
        document.querySelector('div').textContent = await window.pageURL();
      }
    </script>
    <button onclick="onClick()">Click me</button>
    <div></div>
    """)
    page.get_by_role("button").click()

with sync_playwright() as playwright:
    run(playwright)

```

```codeBlockLines_e6Vv
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    webkit = playwright.webkit
    browser = await webkit.launch(headless=False)
    context = await browser.new_context()
    await context.expose_binding("pageURL", lambda source: source["page"].url)
    page = await context.new_page()
    await page.set_content("""
    <script>
      async function onClick() {
        document.querySelector('div').textContent = await window.pageURL();
      }
    </script>
    <button onclick="onClick()">Click me</button>
    <div></div>
    """)
    await page.get_by_role("button").click()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())

```

**Arguments**

- `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-expose-binding-option-name)

Name of the function on the window object.

- `callback` [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-expose-binding-option-callback)

Callback function that will be called in the Playwright's context.

- `handle` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-expose-binding-option-handle)



Deprecated





This option will be removed in the future.





Whether to pass the argument as a handle, instead of passing by value. When passing a handle, only one argument is supported. When passing by value, multiple arguments are supported.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-expose-binding-return)

* * *

### expose\_function [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-expose-function "Direct link to expose_function")

Added before v1.9browserContext.expose\_function

The method adds a function called [name](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-expose-function-option-name) on the `window` object of every frame in every page in the context. When called, the function executes [callback](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-expose-function-option-callback) and returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise") which resolves to the return value of [callback](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-expose-function-option-callback).

If the [callback](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-expose-function-option-callback) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), it will be awaited.

See [page.expose\_function()](https://playwright.dev/python/docs/api/class-page#page-expose-function) for page-only version.

**Usage**

An example of adding a `sha256` function to all pages in the context:

- Sync
- Async

```codeBlockLines_e6Vv
import hashlib
from playwright.sync_api import sync_playwright

def sha256(text: str) -> str:
    m = hashlib.sha256()
    m.update(bytes(text, "utf8"))
    return m.hexdigest()

def run(playwright: Playwright):
    webkit = playwright.webkit
    browser = webkit.launch(headless=False)
    context = browser.new_context()
    context.expose_function("sha256", sha256)
    page = context.new_page()
    page.set_content("""
        <script>
          async function onClick() {
            document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');
          }
        </script>
        <button onclick="onClick()">Click me</button>
        <div></div>
    """)
    page.get_by_role("button").click()

with sync_playwright() as playwright:
    run(playwright)

```

```codeBlockLines_e6Vv
import asyncio
import hashlib
from playwright.async_api import async_playwright, Playwright

def sha256(text: str) -> str:
    m = hashlib.sha256()
    m.update(bytes(text, "utf8"))
    return m.hexdigest()

async def run(playwright: Playwright):
    webkit = playwright.webkit
    browser = await webkit.launch(headless=False)
    context = await browser.new_context()
    await context.expose_function("sha256", sha256)
    page = await context.new_page()
    await page.set_content("""
        <script>
          async function onClick() {
            document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');
          }
        </script>
        <button onclick="onClick()">Click me</button>
        <div></div>
    """)
    await page.get_by_role("button").click()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())

```

**Arguments**

- `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-expose-function-option-name)

Name of the function on the window object.

- `callback` [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-expose-function-option-callback)

Callback function that will be called in the Playwright's context.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-expose-function-return)

* * *

### grant\_permissions [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-grant-permissions "Direct link to grant_permissions")

Added before v1.9browserContext.grant\_permissions

Grants specified permissions to the browser context. Only grants corresponding permissions to the given origin if specified.

**Usage**

```codeBlockLines_e6Vv
browser_context.grant_permissions(permissions)
browser_context.grant_permissions(permissions, **kwargs)

```

**Arguments**

- `permissions` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-grant-permissions-option-permissions)

A list of permissions to grant.



danger





Supported permissions differ between browsers, and even between different versions of the same browser. Any permission may stop working after an update.





Here are some permissions that may be supported by some browsers:
  - `'accelerometer'`
  - `'ambient-light-sensor'`
  - `'background-sync'`
  - `'camera'`
  - `'clipboard-read'`
  - `'clipboard-write'`
  - `'geolocation'`
  - `'gyroscope'`
  - `'magnetometer'`
  - `'microphone'`
  - `'midi-sysex'` (system-exclusive midi)
  - `'midi'`
  - `'notifications'`
  - `'payment-handler'`
  - `'storage-access'`
- `origin` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-grant-permissions-option-origin)

The [origin](https://developer.mozilla.org/en-US/docs/Glossary/Origin "Origin") to grant permissions to, e.g. " [https://example.com](https://example.com/)".


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-grant-permissions-return)

* * *

### new\_cdp\_session [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-new-cdp-session "Direct link to new_cdp_session")

Added in: v1.11browserContext.new\_cdp\_session

note

CDP sessions are only supported on Chromium-based browsers.

Returns the newly created session.

**Usage**

```codeBlockLines_e6Vv
browser_context.new_cdp_session(page)

```

**Arguments**

- `page` [Page](https://playwright.dev/python/docs/api/class-page "Page") \| [Frame](https://playwright.dev/python/docs/api/class-frame "Frame") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-new-cdp-session-option-page)

Target to create new session for. For backwards-compatibility, this parameter is named `page`, but it can be a `Page` or `Frame` type.


**Returns**

- [CDPSession](https://playwright.dev/python/docs/api/class-cdpsession "CDPSession") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-new-cdp-session-return)

* * *

### new\_page [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-new-page "Direct link to new_page")

Added before v1.9browserContext.new\_page

Creates a new page in the browser context.

**Usage**

```codeBlockLines_e6Vv
browser_context.new_page()

```

**Returns**

- [Page](https://playwright.dev/python/docs/api/class-page "Page") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-new-page-return)

* * *

### route [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-route "Direct link to route")

Added before v1.9browserContext.route

Routing provides the capability to modify network requests that are made by any page in the browser context. Once route is enabled, every request matching the url pattern will stall unless it's continued, fulfilled or aborted.

note

[browser\_context.route()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route) will not intercept requests intercepted by Service Worker. See [this](https://github.com/microsoft/playwright/issues/1090) issue. We recommend disabling Service Workers when using request interception by setting [service\_workers](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-service-workers) to `'block'`.

**Usage**

An example of a naive handler that aborts all image requests:

- Sync
- Async

```codeBlockLines_e6Vv
context = browser.new_context()
page = context.new_page()
context.route("**/*.{png,jpg,jpeg}", lambda route: route.abort())
page.goto("https://example.com")
browser.close()

```

```codeBlockLines_e6Vv
context = await browser.new_context()
page = await context.new_page()
await context.route("**/*.{png,jpg,jpeg}", lambda route: route.abort())
await page.goto("https://example.com")
await browser.close()

```

or the same snippet using a regex pattern instead:

- Sync
- Async

```codeBlockLines_e6Vv
context = browser.new_context()
page = context.new_page()
context.route(re.compile(r"(\.png$)|(\.jpg$)"), lambda route: route.abort())
page = await context.new_page()
page = context.new_page()
page.goto("https://example.com")
browser.close()

```

```codeBlockLines_e6Vv
context = await browser.new_context()
page = await context.new_page()
await context.route(re.compile(r"(\.png$)|(\.jpg$)"), lambda route: route.abort())
page = await context.new_page()
await page.goto("https://example.com")
await browser.close()

```

It is possible to examine the request to decide the route action. For example, mocking all requests that contain some post data, and leaving all other requests as is:

- Sync
- Async

```codeBlockLines_e6Vv
def handle_route(route: Route):
  if ("my-string" in route.request.post_data):
    route.fulfill(body="mocked-data")
  else:
    route.continue_()
context.route("/api/**", handle_route)

```

```codeBlockLines_e6Vv
async def handle_route(route: Route):
  if ("my-string" in route.request.post_data):
    await route.fulfill(body="mocked-data")
  else:
    await route.continue_()
await context.route("/api/**", handle_route)

```

Page routes (set up with [page.route()](https://playwright.dev/python/docs/api/class-page#page-route)) take precedence over browser context routes when request matches both handlers.

To remove a route with its handler you can use [browser\_context.unroute()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-unroute).

note

Enabling routing disables http cache.

**Arguments**

- `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") \| [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [URL](https://en.wikipedia.org/wiki/URL "URL")\]: [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route-option-url)

A glob pattern, regex pattern or predicate receiving [URL](https://en.wikipedia.org/wiki/URL "URL") to match while routing. When a [base\_url](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-base-url) via the context options was provided and the passed URL is a path, it gets merged via the [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor.

- `handler` [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [Route](https://playwright.dev/python/docs/api/class-route "Route"), [Request](https://playwright.dev/python/docs/api/class-request "Request")\]: [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\[ [Any](https://docs.python.org/3/library/typing.html#typing.Any "Any")\] \| [Any](https://docs.python.org/3/library/typing.html#typing.Any "Any") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route-option-handler)

handler function to route the request.

- `times` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ Added in: v1.15 [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route-option-times)

How often a route should be used. By default it will be used every time.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route-return)

* * *

### route\_from\_har [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-route-from-har "Direct link to route_from_har")

Added in: v1.23browserContext.route\_from\_har

If specified the network requests that are made in the context will be served from the HAR file. Read more about [Replaying from HAR](https://playwright.dev/python/docs/mock#replaying-from-har).

Playwright will not serve requests intercepted by Service Worker from the HAR file. See [this](https://github.com/microsoft/playwright/issues/1090) issue. We recommend disabling Service Workers when using request interception by setting [service\_workers](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-service-workers) to `'block'`.

**Usage**

```codeBlockLines_e6Vv
browser_context.route_from_har(har)
browser_context.route_from_har(har, **kwargs)

```

**Arguments**

- `har` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route-from-har-option-har)

Path to a [HAR](http://www.softwareishard.com/blog/har-12-spec) file with prerecorded network data. If `path` is a relative path, then it is resolved relative to the current working directory.

- `not_found` "abort" \| "fallback" _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route-from-har-option-not-found)


  - If set to 'abort' any request not found in the HAR file will be aborted.
  - If set to 'fallback' falls through to the next route handler in the handler chain.

Defaults to abort.

- `update` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route-from-har-option-update)

If specified, updates the given HAR with the actual network information instead of serving from file. The file is written to disk when [browser\_context.close()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-close) is called.

- `update_content` "embed" \| "attach" _(optional)_ Added in: v1.32 [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route-from-har-option-update-content)

Optional setting to control resource content management. If `attach` is specified, resources are persisted as separate files or entries in the ZIP archive. If `embed` is specified, content is stored inline the HAR file.

- `update_mode` "full" \| "minimal" _(optional)_ Added in: v1.32 [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route-from-har-option-update-mode)

When set to `minimal`, only record information necessary for routing from HAR. This omits sizes, timing, page, cookies, security and other types of HAR information that are not used when replaying from HAR. Defaults to `minimal`.

- `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route-from-har-option-url)

A glob pattern, regular expression or predicate to match the request URL. Only requests with URL matching the pattern will be served from the HAR file. If not specified, all requests are served from the HAR file.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route-from-har-return)

* * *

### route\_web\_socket [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-route-web-socket "Direct link to route_web_socket")

Added in: v1.48browserContext.route\_web\_socket

This method allows to modify websocket connections that are made by any page in the browser context.

Note that only `WebSocket` s created after this method was called will be routed. It is recommended to call this method before creating any pages.

**Usage**

Below is an example of a simple handler that blocks some websocket messages. See [WebSocketRoute](https://playwright.dev/python/docs/api/class-websocketroute "WebSocketRoute") for more details and examples.

- Sync
- Async

```codeBlockLines_e6Vv
def message_handler(ws: WebSocketRoute, message: Union[str, bytes]):
  if message == "to-be-blocked":
    return
  ws.send(message)

def handler(ws: WebSocketRoute):
  ws.route_send(lambda message: message_handler(ws, message))
  ws.connect()

context.route_web_socket("/ws", handler)

```

```codeBlockLines_e6Vv
def message_handler(ws: WebSocketRoute, message: Union[str, bytes]):
  if message == "to-be-blocked":
    return
  ws.send(message)

async def handler(ws: WebSocketRoute):
  ws.route_send(lambda message: message_handler(ws, message))
  await ws.connect()

await context.route_web_socket("/ws", handler)

```

**Arguments**

- `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") \| [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [URL](https://en.wikipedia.org/wiki/URL "URL")\]: [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route-web-socket-option-url)

Only WebSockets with the url matching this pattern will be routed. A string pattern can be relative to the [base\_url](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-base-url) context option.

- `handler` [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [WebSocketRoute](https://playwright.dev/python/docs/api/class-websocketroute "WebSocketRoute")\]: [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\[ [Any](https://docs.python.org/3/library/typing.html#typing.Any "Any")\] \| [Any](https://docs.python.org/3/library/typing.html#typing.Any "Any") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route-web-socket-option-handler)

Handler function to route the WebSocket.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route-web-socket-return)

* * *

### set\_default\_navigation\_timeout [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-set-default-navigation-timeout "Direct link to set_default_navigation_timeout")

Added before v1.9browserContext.set\_default\_navigation\_timeout

This setting will change the default maximum navigation time for the following methods and related shortcuts:

- [page.go\_back()](https://playwright.dev/python/docs/api/class-page#page-go-back)
- [page.go\_forward()](https://playwright.dev/python/docs/api/class-page#page-go-forward)
- [page.goto()](https://playwright.dev/python/docs/api/class-page#page-goto)
- [page.reload()](https://playwright.dev/python/docs/api/class-page#page-reload)
- [page.set\_content()](https://playwright.dev/python/docs/api/class-page#page-set-content)
- [page.expect\_navigation()](https://playwright.dev/python/docs/api/class-page#page-wait-for-navigation)

note

[page.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-navigation-timeout) and [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) take priority over [browser\_context.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout).

**Usage**

```codeBlockLines_e6Vv
browser_context.set_default_navigation_timeout(timeout)

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout-option-timeout)

Maximum navigation time in milliseconds


* * *

### set\_default\_timeout [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-set-default-timeout "Direct link to set_default_timeout")

Added before v1.9browserContext.set\_default\_timeout

This setting will change the default maximum time for all the methods accepting [timeout](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout-option-timeout) option.

note

[page.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-navigation-timeout), [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) and [browser\_context.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout) take priority over [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout).

**Usage**

```codeBlockLines_e6Vv
browser_context.set_default_timeout(timeout)

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout-option-timeout)

Maximum time in milliseconds. Pass `0` to disable timeout.


* * *

### set\_extra\_http\_headers [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-set-extra-http-headers "Direct link to set_extra_http_headers")

Added before v1.9browserContext.set\_extra\_http\_headers

The extra HTTP headers will be sent with every request initiated by any page in the context. These headers are merged with page-specific extra HTTP headers set with [page.set\_extra\_http\_headers()](https://playwright.dev/python/docs/api/class-page#page-set-extra-http-headers). If page overrides a particular header, page-specific header value will be used instead of the browser context header value.

note

[browser\_context.set\_extra\_http\_headers()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-extra-http-headers) does not guarantee the order of headers in the outgoing requests.

**Usage**

```codeBlockLines_e6Vv
browser_context.set_extra_http_headers(headers)

```

**Arguments**

- `headers` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-extra-http-headers-option-headers)

An object containing additional HTTP headers to be sent with every request. All header values must be strings.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-extra-http-headers-return)

* * *

### set\_geolocation [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-set-geolocation "Direct link to set_geolocation")

Added before v1.9browserContext.set\_geolocation

Sets the context's geolocation. Passing `null` or `undefined` emulates position unavailable.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
browser_context.set_geolocation({"latitude": 59.95, "longitude": 30.31667})

```

```codeBlockLines_e6Vv
await browser_context.set_geolocation({"latitude": 59.95, "longitude": 30.31667})

```

note

Consider using [browser\_context.grant\_permissions()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-grant-permissions) to grant permissions for the browser context pages to read its geolocation.

**Arguments**

- `geolocation` [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-geolocation-option-geolocation)
  - `latitude` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    Latitude between -90 and 90.

  - `longitude` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    Longitude between -180 and 180.

  - `accuracy` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_

    Non-negative accuracy value. Defaults to `0`.

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-geolocation-return)

* * *

### set\_offline [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-set-offline "Direct link to set_offline")

Added before v1.9browserContext.set\_offline

**Usage**

```codeBlockLines_e6Vv
browser_context.set_offline(offline)

```

**Arguments**

- `offline` [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-offline-option-offline)

Whether to emulate network being offline for the browser context.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-offline-return)

* * *

### storage\_state [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-storage-state "Direct link to storage_state")

Added before v1.9browserContext.storage\_state

Returns storage state for this browser context, contains current cookies, local storage snapshot and IndexedDB snapshot.

**Usage**

```codeBlockLines_e6Vv
browser_context.storage_state()
browser_context.storage_state(**kwargs)

```

**Arguments**

- `indexed_db` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.51 [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-storage-state-option-indexed-db)

Set to `true` to include [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API) in the storage state snapshot. If your application uses IndexedDB to store authentication tokens, like Firebase Authentication, enable this.



note





IndexedDBs with typed arrays are currently not supported.

- `path` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-storage-state-option-path)

The file path to save the storage state to. If [path](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-storage-state-option-path) is a relative path, then it is resolved relative to current working directory. If no path is provided, storage state is still returned, but won't be saved to the disk.


**Returns**

- [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-storage-state-return)
  - `cookies` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\]
    - `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    - `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    - `domain` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    - `path` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    - `expires` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

      Unix time in seconds.

    - `httpOnly` [bool](https://docs.python.org/3/library/stdtypes.html "bool")

    - `secure` [bool](https://docs.python.org/3/library/stdtypes.html "bool")

    - `sameSite` "Strict" \| "Lax" \| "None"
  - `origins` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\]
    - `origin` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    - `localStorage` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\]
      - `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

      - `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

* * *

### unroute [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-unroute "Direct link to unroute")

Added before v1.9browserContext.unroute

Removes a route created with [browser\_context.route()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route). When [handler](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-unroute-option-handler) is not specified, removes all routes for the [url](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-unroute-option-url).

**Usage**

```codeBlockLines_e6Vv
browser_context.unroute(url)
browser_context.unroute(url, **kwargs)

```

**Arguments**

- `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") \| [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [URL](https://en.wikipedia.org/wiki/URL "URL")\]: [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-unroute-option-url)

A glob pattern, regex pattern or predicate receiving [URL](https://en.wikipedia.org/wiki/URL "URL") used to register a routing with [browser\_context.route()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route).

- `handler` [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [Route](https://playwright.dev/python/docs/api/class-route "Route"), [Request](https://playwright.dev/python/docs/api/class-request "Request")\]: [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\[ [Any](https://docs.python.org/3/library/typing.html#typing.Any "Any")\] \| [Any](https://docs.python.org/3/library/typing.html#typing.Any "Any") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-unroute-option-handler)

Optional handler function used to register a routing with [browser\_context.route()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route).


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-unroute-return)

* * *

### unroute\_all [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-unroute-all "Direct link to unroute_all")

Added in: v1.41browserContext.unroute\_all

Removes all routes created with [browser\_context.route()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route) and [browser\_context.route\_from\_har()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route-from-har).

**Usage**

```codeBlockLines_e6Vv
browser_context.unroute_all()
browser_context.unroute_all(**kwargs)

```

**Arguments**

- `behavior` "wait" \| "ignoreErrors" \| "default" _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-unroute-all-option-behavior)

Specifies whether to wait for already running handlers and what to do if they throw errors:
  - `'default'` \- do not wait for current handler calls (if any) to finish, if unrouted handler throws, it may result in unhandled error
  - `'wait'` \- wait for current handler calls (if any) to finish
  - `'ignoreErrors'` \- do not wait for current handler calls (if any) to finish, all errors thrown by the handlers after unrouting are silently caught

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-unroute-all-return)

* * *

### wait\_for\_event [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-wait-for-event-2 "Direct link to wait_for_event")

Added before v1.9browserContext.wait\_for\_event

note

In most cases, you should use [browser\_context.expect\_event()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-wait-for-event).

Waits for given `event` to fire. If predicate is provided, it passes event's value into the `predicate` function and waits for `predicate(event)` to return a truthy value. Will throw an error if the browser context is closed before the `event` is fired.

**Usage**

```codeBlockLines_e6Vv
browser_context.wait_for_event(event)
browser_context.wait_for_event(event, **kwargs)

```

**Arguments**

- `event` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-wait-for-event-2-option-event)

Event name, same one typically passed into `*.on(event)`.

- `predicate` [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-wait-for-event-2-option-predicate)

Receives the event data and resolves to truthy value when the waiting should resolve.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-wait-for-event-2-option-timeout)

Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout).


**Returns**

- [Any](https://docs.python.org/3/library/typing.html#typing.Any "Any") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-wait-for-event-2-return)

* * *

## Properties [​](https://playwright.dev/python/docs/api/class-browsercontext\#properties "Direct link to Properties")

### background\_pages [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-background-pages "Direct link to background_pages")

Added in: v1.11browserContext.background\_pages

note

Background pages are only supported on Chromium-based browsers.

All existing background pages in the context.

**Usage**

```codeBlockLines_e6Vv
browser_context.background_pages

```

**Returns**

- [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Page](https://playwright.dev/python/docs/api/class-page "Page")\] [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-background-pages-return)

* * *

### browser [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-browser "Direct link to browser")

Added before v1.9browserContext.browser

Returns the browser instance of the context. If it was launched as a persistent context null gets returned.

**Usage**

```codeBlockLines_e6Vv
browser_context.browser

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [Browser](https://playwright.dev/python/docs/api/class-browser "Browser") [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-browser-return)

* * *

### clock [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-clock "Direct link to clock")

Added in: v1.45browserContext.clock

Playwright has ability to mock clock and passage of time.

**Usage**

```codeBlockLines_e6Vv
browser_context.clock

```

**Type**

- [Clock](https://playwright.dev/python/docs/api/class-clock "Clock")

* * *

### pages [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-pages "Direct link to pages")

Added before v1.9browserContext.pages

Returns all open pages in the context.

**Usage**

```codeBlockLines_e6Vv
browser_context.pages

```

**Returns**

- [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Page](https://playwright.dev/python/docs/api/class-page "Page")\] [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-pages-return)

* * *

### request [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-request "Direct link to request")

Added in: v1.16browserContext.request

API testing helper associated with this context. Requests made with this API will use context cookies.

**Usage**

```codeBlockLines_e6Vv
browser_context.request

```

**Type**

- [APIRequestContext](https://playwright.dev/python/docs/api/class-apirequestcontext "APIRequestContext")

* * *

### service\_workers [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-service-workers "Direct link to service_workers")

Added in: v1.11browserContext.service\_workers

note

Service workers are only supported on Chromium-based browsers.

All existing service workers in the context.

**Usage**

```codeBlockLines_e6Vv
browser_context.service_workers

```

**Returns**

- [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Worker](https://playwright.dev/python/docs/api/class-worker "Worker")\] [#](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-service-workers-return)

* * *

### tracing [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-tracing "Direct link to tracing")

Added in: v1.12browserContext.tracing

**Usage**

```codeBlockLines_e6Vv
browser_context.tracing

```

**Type**

- [Tracing](https://playwright.dev/python/docs/api/class-tracing "Tracing")

* * *

## Events [​](https://playwright.dev/python/docs/api/class-browsercontext\#events "Direct link to Events")

### on("backgroundpage") [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-event-background-page "Direct link to on(\"backgroundpage\")")

Added in: v1.11browserContext.on("backgroundpage")

note

Only works with Chromium browser's persistent context.

Emitted when new background page is created in the context.

- Sync
- Async

```codeBlockLines_e6Vv
background_page = context.wait_for_event("backgroundpage")

```

```codeBlockLines_e6Vv
background_page = await context.wait_for_event("backgroundpage")

```

**Usage**

```codeBlockLines_e6Vv
browser_context.on("backgroundpage", handler)

```

**Event data**

- [Page](https://playwright.dev/python/docs/api/class-page "Page")

* * *

### on("close") [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-event-close "Direct link to on(\"close\")")

Added before v1.9browserContext.on("close")

Emitted when Browser context gets closed. This might happen because of one of the following:

- Browser context is closed.
- Browser application is closed or crashed.
- The [browser.close()](https://playwright.dev/python/docs/api/class-browser#browser-close) method was called.

**Usage**

```codeBlockLines_e6Vv
browser_context.on("close", handler)

```

**Event data**

- [BrowserContext](https://playwright.dev/python/docs/api/class-browsercontext "BrowserContext")

* * *

### on("console") [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-event-console "Direct link to on(\"console\")")

Added in: v1.34browserContext.on("console")

Emitted when JavaScript within the page calls one of console API methods, e.g. `console.log` or `console.dir`.

The arguments passed into `console.log` and the page are available on the [ConsoleMessage](https://playwright.dev/python/docs/api/class-consolemessage "ConsoleMessage") event handler argument.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
def print_args(msg):
    for arg in msg.args:
        print(arg.json_value())

context.on("console", print_args)
page.evaluate("console.log('hello', 5, { foo: 'bar' })")

```

```codeBlockLines_e6Vv
async def print_args(msg):
    values = []
    for arg in msg.args:
        values.append(await arg.json_value())
    print(values)

context.on("console", print_args)
await page.evaluate("console.log('hello', 5, { foo: 'bar' })")

```

**Event data**

- [ConsoleMessage](https://playwright.dev/python/docs/api/class-consolemessage "ConsoleMessage")

* * *

### on("dialog") [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-event-dialog "Direct link to on(\"dialog\")")

Added in: v1.34browserContext.on("dialog")

Emitted when a JavaScript dialog appears, such as `alert`, `prompt`, `confirm` or `beforeunload`. Listener **must** either [dialog.accept()](https://playwright.dev/python/docs/api/class-dialog#dialog-accept) or [dialog.dismiss()](https://playwright.dev/python/docs/api/class-dialog#dialog-dismiss) the dialog - otherwise the page will [freeze](https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#never_blocking) waiting for the dialog, and actions like click will never finish.

**Usage**

```codeBlockLines_e6Vv
context.on("dialog", lambda dialog: dialog.accept())

```

note

When no [page.on("dialog")](https://playwright.dev/python/docs/api/class-page#page-event-dialog) or [browser\_context.on("dialog")](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-event-dialog) listeners are present, all dialogs are automatically dismissed.

**Event data**

- [Dialog](https://playwright.dev/python/docs/api/class-dialog "Dialog")

* * *

### on("page") [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-event-page "Direct link to on(\"page\")")

Added before v1.9browserContext.on("page")

The event is emitted when a new Page is created in the BrowserContext. The page may still be loading. The event will also fire for popup pages. See also [page.on("popup")](https://playwright.dev/python/docs/api/class-page#page-event-popup) to receive events about popups relevant to a specific page.

The earliest moment that page is available is when it has navigated to the initial url. For example, when opening a popup with `window.open('http://example.com')`, this event will fire when the network request to " [http://example.com](http://example.com/)" is done and its response has started loading in the popup. If you would like to route/listen to this network request, use [browser\_context.route()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route) and [browser\_context.on("request")](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-event-request) respectively instead of similar methods on the [Page](https://playwright.dev/python/docs/api/class-page "Page").

- Sync
- Async

```codeBlockLines_e6Vv
with context.expect_page() as page_info:
    page.get_by_text("open new page").click(),
page = page_info.value
print(page.evaluate("location.href"))

```

```codeBlockLines_e6Vv
async with context.expect_page() as page_info:
    await page.get_by_text("open new page").click(),
page = await page_info.value
print(await page.evaluate("location.href"))

```

note

Use [page.wait\_for\_load\_state()](https://playwright.dev/python/docs/api/class-page#page-wait-for-load-state) to wait until the page gets to a particular state (you should not need it in most cases).

**Usage**

```codeBlockLines_e6Vv
browser_context.on("page", handler)

```

**Event data**

- [Page](https://playwright.dev/python/docs/api/class-page "Page")

* * *

### on("request") [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-event-request "Direct link to on(\"request\")")

Added in: v1.12browserContext.on("request")

Emitted when a request is issued from any pages created through this context. The [request](https://playwright.dev/python/docs/api/class-request "Request") object is read-only. To only listen for requests from a particular page, use [page.on("request")](https://playwright.dev/python/docs/api/class-page#page-event-request).

In order to intercept and mutate requests, see [browser\_context.route()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route) or [page.route()](https://playwright.dev/python/docs/api/class-page#page-route).

**Usage**

```codeBlockLines_e6Vv
browser_context.on("request", handler)

```

**Event data**

- [Request](https://playwright.dev/python/docs/api/class-request "Request")

* * *

### on("requestfailed") [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-event-request-failed "Direct link to on(\"requestfailed\")")

Added in: v1.12browserContext.on("requestfailed")

Emitted when a request fails, for example by timing out. To only listen for failed requests from a particular page, use [page.on("requestfailed")](https://playwright.dev/python/docs/api/class-page#page-event-request-failed).

note

HTTP Error responses, such as 404 or 503, are still successful responses from HTTP standpoint, so request will complete with [browser\_context.on("requestfinished")](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-event-request-finished) event and not with [browser\_context.on("requestfailed")](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-event-request-failed).

**Usage**

```codeBlockLines_e6Vv
browser_context.on("requestfailed", handler)

```

**Event data**

- [Request](https://playwright.dev/python/docs/api/class-request "Request")

* * *

### on("requestfinished") [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-event-request-finished "Direct link to on(\"requestfinished\")")

Added in: v1.12browserContext.on("requestfinished")

Emitted when a request finishes successfully after downloading the response body. For a successful response, the sequence of events is `request`, `response` and `requestfinished`. To listen for successful requests from a particular page, use [page.on("requestfinished")](https://playwright.dev/python/docs/api/class-page#page-event-request-finished).

**Usage**

```codeBlockLines_e6Vv
browser_context.on("requestfinished", handler)

```

**Event data**

- [Request](https://playwright.dev/python/docs/api/class-request "Request")

* * *

### on("response") [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-event-response "Direct link to on(\"response\")")

Added in: v1.12browserContext.on("response")

Emitted when [response](https://playwright.dev/python/docs/api/class-response "Response") status and headers are received for a request. For a successful response, the sequence of events is `request`, `response` and `requestfinished`. To listen for response events from a particular page, use [page.on("response")](https://playwright.dev/python/docs/api/class-page#page-event-response).

**Usage**

```codeBlockLines_e6Vv
browser_context.on("response", handler)

```

**Event data**

- [Response](https://playwright.dev/python/docs/api/class-response "Response")

* * *

### on("serviceworker") [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-event-service-worker "Direct link to on(\"serviceworker\")")

Added in: v1.11browserContext.on("serviceworker")

note

Service workers are only supported on Chromium-based browsers.

Emitted when new service worker is created in the context.

**Usage**

```codeBlockLines_e6Vv
browser_context.on("serviceworker", handler)

```

**Event data**

- [Worker](https://playwright.dev/python/docs/api/class-worker "Worker")

* * *

### on("weberror") [​](https://playwright.dev/python/docs/api/class-browsercontext\#browser-context-event-web-error "Direct link to on(\"weberror\")")

Added in: v1.38browserContext.on("weberror")

Emitted when exception is unhandled in any of the pages in this context. To listen for errors from a particular page, use [page.on("pageerror")](https://playwright.dev/python/docs/api/class-page#page-event-page-error) instead.

**Usage**

```codeBlockLines_e6Vv
browser_context.on("weberror", handler)

```

**Event data**

- [WebError](https://playwright.dev/python/docs/api/class-weberror "WebError")

- [Methods](https://playwright.dev/python/docs/api/class-browsercontext#methods)
  - [add\_cookies](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-add-cookies)
  - [add\_init\_script](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-add-init-script)
  - [clear\_cookies](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-clear-cookies)
  - [clear\_permissions](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-clear-permissions)
  - [close](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-close)
  - [cookies](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-cookies)
  - [expect\_console\_message](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-wait-for-console-message)
  - [expect\_event](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-wait-for-event)
  - [expect\_page](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-wait-for-page)
  - [expose\_binding](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-expose-binding)
  - [expose\_function](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-expose-function)
  - [grant\_permissions](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-grant-permissions)
  - [new\_cdp\_session](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-new-cdp-session)
  - [new\_page](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-new-page)
  - [route](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route)
  - [route\_from\_har](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route-from-har)
  - [route\_web\_socket](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route-web-socket)
  - [set\_default\_navigation\_timeout](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout)
  - [set\_default\_timeout](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout)
  - [set\_extra\_http\_headers](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-extra-http-headers)
  - [set\_geolocation](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-geolocation)
  - [set\_offline](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-offline)
  - [storage\_state](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-storage-state)
  - [unroute](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-unroute)
  - [unroute\_all](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-unroute-all)
  - [wait\_for\_event](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-wait-for-event-2)
- [Properties](https://playwright.dev/python/docs/api/class-browsercontext#properties)
  - [background\_pages](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-background-pages)
  - [browser](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-browser)
  - [clock](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-clock)
  - [pages](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-pages)
  - [request](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-request)
  - [service\_workers](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-service-workers)
  - [tracing](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-tracing)
- [Events](https://playwright.dev/python/docs/api/class-browsercontext#events)
  - [on("backgroundpage")](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-event-background-page)
  - [on("close")](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-event-close)
  - [on("console")](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-event-console)
  - [on("dialog")](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-event-dialog)
  - [on("page")](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-event-page)
  - [on("request")](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-event-request)
  - [on("requestfailed")](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-event-request-failed)
  - [on("requestfinished")](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-event-request-finished)
  - [on("response")](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-event-response)
  - [on("serviceworker")](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-event-service-worker)
  - [on("weberror")](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-event-web-error)

## Playwright Request API
[Skip to main content](https://playwright.dev/python/docs/api/class-request#__docusaurus_skipToContent_fallback)

On this page

Whenever the page sends a request for a network resource the following sequence of events are emitted by [Page](https://playwright.dev/python/docs/api/class-page "Page"):

- [page.on("request")](https://playwright.dev/python/docs/api/class-page#page-event-request) emitted when the request is issued by the page.
- [page.on("response")](https://playwright.dev/python/docs/api/class-page#page-event-response) emitted when/if the response status and headers are received for the request.
- [page.on("requestfinished")](https://playwright.dev/python/docs/api/class-page#page-event-request-finished) emitted when the response body is downloaded and the request is complete.

If request fails at some point, then instead of `'requestfinished'` event (and possibly instead of 'response' event), the [page.on("requestfailed")](https://playwright.dev/python/docs/api/class-page#page-event-request-failed) event is emitted.

note

HTTP Error responses, such as 404 or 503, are still successful responses from HTTP standpoint, so request will complete with `'requestfinished'` event.

If request gets a 'redirect' response, the request is successfully finished with the `requestfinished` event, and a new request is issued to a redirected url.

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-request\#methods "Direct link to Methods")

### all\_headers [​](https://playwright.dev/python/docs/api/class-request\#request-all-headers "Direct link to all_headers")

Added in: v1.15request.all\_headers

An object with all the request HTTP headers associated with this request. The header names are lower-cased.

**Usage**

```codeBlockLines_e6Vv
request.all_headers()

```

**Returns**

- [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] [#](https://playwright.dev/python/docs/api/class-request#request-all-headers-return)

* * *

### header\_value [​](https://playwright.dev/python/docs/api/class-request\#request-header-value "Direct link to header_value")

Added in: v1.15request.header\_value

Returns the value of the header matching the name. The name is case-insensitive.

**Usage**

```codeBlockLines_e6Vv
request.header_value(name)

```

**Arguments**

- `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-request#request-header-value-option-name)

Name of the header.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-request#request-header-value-return)

* * *

### headers\_array [​](https://playwright.dev/python/docs/api/class-request\#request-headers-array "Direct link to headers_array")

Added in: v1.15request.headers\_array

An array with all the request HTTP headers associated with this request. Unlike [request.all\_headers()](https://playwright.dev/python/docs/api/class-request#request-all-headers), header names are NOT lower-cased. Headers with multiple entries, such as `Set-Cookie`, appear in the array multiple times.

**Usage**

```codeBlockLines_e6Vv
request.headers_array()

```

**Returns**

- [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\] [#](https://playwright.dev/python/docs/api/class-request#request-headers-array-return)
  - `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    Name of the header.

  - `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    Value of the header.

* * *

### response [​](https://playwright.dev/python/docs/api/class-request\#request-response "Direct link to response")

Added before v1.9request.response

Returns the matching [Response](https://playwright.dev/python/docs/api/class-response "Response") object, or `null` if the response was not received due to error.

**Usage**

```codeBlockLines_e6Vv
request.response()

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [Response](https://playwright.dev/python/docs/api/class-response "Response") [#](https://playwright.dev/python/docs/api/class-request#request-response-return)

* * *

### sizes [​](https://playwright.dev/python/docs/api/class-request\#request-sizes "Direct link to sizes")

Added in: v1.15request.sizes

Returns resource size information for given request.

**Usage**

```codeBlockLines_e6Vv
request.sizes()

```

**Returns**

- [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-request#request-sizes-return)
  - `requestBodySize` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

    Size of the request body (POST data payload) in bytes. Set to 0 if there was no body.

  - `requestHeadersSize` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

    Total number of bytes from the start of the HTTP request message until (and including) the double CRLF before the body.

  - `responseBodySize` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

    Size of the received response body (encoded) in bytes.

  - `responseHeadersSize` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

    Total number of bytes from the start of the HTTP response message until (and including) the double CRLF before the body.

* * *

## Properties [​](https://playwright.dev/python/docs/api/class-request\#properties "Direct link to Properties")

### failure [​](https://playwright.dev/python/docs/api/class-request\#request-failure "Direct link to failure")

Added before v1.9request.failure

The method returns `null` unless this request has failed, as reported by `requestfailed` event.

**Usage**

Example of logging of all the failed requests:

```codeBlockLines_e6Vv
page.on("requestfailed", lambda request: print(request.url + " " + request.failure))

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-request#request-failure-return)

* * *

### frame [​](https://playwright.dev/python/docs/api/class-request\#request-frame "Direct link to frame")

Added before v1.9request.frame

Returns the [Frame](https://playwright.dev/python/docs/api/class-frame "Frame") that initiated this request.

**Usage**

```codeBlockLines_e6Vv
frame_url = request.frame.url

```

**Returns**

- [Frame](https://playwright.dev/python/docs/api/class-frame "Frame") [#](https://playwright.dev/python/docs/api/class-request#request-frame-return)

**Details**

Note that in some cases the frame is not available, and this method will throw.

- When request originates in the Service Worker. You can use `request.serviceWorker()` to check that.
- When navigation request is issued before the corresponding frame is created. You can use [request.is\_navigation\_request()](https://playwright.dev/python/docs/api/class-request#request-is-navigation-request) to check that.

Here is an example that handles all the cases:

* * *

### headers [​](https://playwright.dev/python/docs/api/class-request\#request-headers "Direct link to headers")

Added before v1.9request.headers

An object with the request HTTP headers. The header names are lower-cased. Note that this method does not return security-related headers, including cookie-related ones. You can use [request.all\_headers()](https://playwright.dev/python/docs/api/class-request#request-all-headers) for complete list of headers that include `cookie` information.

**Usage**

```codeBlockLines_e6Vv
request.headers

```

**Returns**

- [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] [#](https://playwright.dev/python/docs/api/class-request#request-headers-return)

* * *

### is\_navigation\_request [​](https://playwright.dev/python/docs/api/class-request\#request-is-navigation-request "Direct link to is_navigation_request")

Added before v1.9request.is\_navigation\_request

Whether this request is driving frame's navigation.

Some navigation requests are issued before the corresponding frame is created, and therefore do not have [request.frame](https://playwright.dev/python/docs/api/class-request#request-frame) available.

**Usage**

```codeBlockLines_e6Vv
request.is_navigation_request()

```

**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-request#request-is-navigation-request-return)

* * *

### method [​](https://playwright.dev/python/docs/api/class-request\#request-method "Direct link to method")

Added before v1.9request.method

Request's method (GET, POST, etc.)

**Usage**

```codeBlockLines_e6Vv
request.method

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-request#request-method-return)

* * *

### post\_data [​](https://playwright.dev/python/docs/api/class-request\#request-post-data "Direct link to post_data")

Added before v1.9request.post\_data

Request's post body, if any.

**Usage**

```codeBlockLines_e6Vv
request.post_data

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-request#request-post-data-return)

* * *

### post\_data\_buffer [​](https://playwright.dev/python/docs/api/class-request\#request-post-data-buffer "Direct link to post_data_buffer")

Added before v1.9request.post\_data\_buffer

Request's post body in a binary form, if any.

**Usage**

```codeBlockLines_e6Vv
request.post_data_buffer

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") [#](https://playwright.dev/python/docs/api/class-request#request-post-data-buffer-return)

* * *

### post\_data\_json [​](https://playwright.dev/python/docs/api/class-request\#request-post-data-json "Direct link to post_data_json")

Added before v1.9request.post\_data\_json

Returns parsed request's body for `form-urlencoded` and JSON as a fallback if any.

When the response is `application/x-www-form-urlencoded` then a key/value object of the values will be returned. Otherwise it will be parsed as JSON.

**Usage**

```codeBlockLines_e6Vv
request.post_data_json

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-request#request-post-data-json-return)

* * *

### redirected\_from [​](https://playwright.dev/python/docs/api/class-request\#request-redirected-from "Direct link to redirected_from")

Added before v1.9request.redirected\_from

Request that was redirected by the server to this one, if any.

When the server responds with a redirect, Playwright creates a new [Request](https://playwright.dev/python/docs/api/class-request "Request") object. The two requests are connected by `redirectedFrom()` and `redirectedTo()` methods. When multiple server redirects has happened, it is possible to construct the whole redirect chain by repeatedly calling `redirectedFrom()`.

**Usage**

For example, if the website `http://example.com` redirects to `https://example.com`:

- Sync
- Async

```codeBlockLines_e6Vv
response = page.goto("http://example.com")
print(response.request.redirected_from.url) # "http://example.com"

```

```codeBlockLines_e6Vv
response = await page.goto("http://example.com")
print(response.request.redirected_from.url) # "http://example.com"

```

If the website `https://google.com` has no redirects:

- Sync
- Async

```codeBlockLines_e6Vv
response = page.goto("https://google.com")
print(response.request.redirected_from) # None

```

```codeBlockLines_e6Vv
response = await page.goto("https://google.com")
print(response.request.redirected_from) # None

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [Request](https://playwright.dev/python/docs/api/class-request "Request") [#](https://playwright.dev/python/docs/api/class-request#request-redirected-from-return)

* * *

### redirected\_to [​](https://playwright.dev/python/docs/api/class-request\#request-redirected-to "Direct link to redirected_to")

Added before v1.9request.redirected\_to

New request issued by the browser if the server responded with redirect.

**Usage**

This method is the opposite of [request.redirected\_from](https://playwright.dev/python/docs/api/class-request#request-redirected-from):

```codeBlockLines_e6Vv
assert request.redirected_from.redirected_to == request

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [Request](https://playwright.dev/python/docs/api/class-request "Request") [#](https://playwright.dev/python/docs/api/class-request#request-redirected-to-return)

* * *

### resource\_type [​](https://playwright.dev/python/docs/api/class-request\#request-resource-type "Direct link to resource_type")

Added before v1.9request.resource\_type

Contains the request's resource type as it was perceived by the rendering engine. ResourceType will be one of the following: `document`, `stylesheet`, `image`, `media`, `font`, `script`, `texttrack`, `xhr`, `fetch`, `eventsource`, `websocket`, `manifest`, `other`.

**Usage**

```codeBlockLines_e6Vv
request.resource_type

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-request#request-resource-type-return)

* * *

### timing [​](https://playwright.dev/python/docs/api/class-request\#request-timing "Direct link to timing")

Added before v1.9request.timing

Returns resource timing information for given request. Most of the timing values become available upon the response, `responseEnd` becomes available when request finishes. Find more information at [Resource Timing API](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming).

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
with page.expect_event("requestfinished") as request_info:
    page.goto("http://example.com")
request = request_info.value
print(request.timing)

```

```codeBlockLines_e6Vv
async with page.expect_event("requestfinished") as request_info:
    await page.goto("http://example.com")
request = await request_info.value
print(request.timing)

```

**Returns**

- [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-request#request-timing-return)
  - `startTime` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    Request start time in milliseconds elapsed since January 1, 1970 00:00:00 UTC

  - `domainLookupStart` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    Time immediately before the browser starts the domain name lookup for the resource. The value is given in milliseconds relative to `startTime`, -1 if not available.

  - `domainLookupEnd` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    Time immediately after the browser starts the domain name lookup for the resource. The value is given in milliseconds relative to `startTime`, -1 if not available.

  - `connectStart` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    Time immediately before the user agent starts establishing the connection to the server to retrieve the resource. The value is given in milliseconds relative to `startTime`, -1 if not available.

  - `secureConnectionStart` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    Time immediately before the browser starts the handshake process to secure the current connection. The value is given in milliseconds relative to `startTime`, -1 if not available.

  - `connectEnd` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    Time immediately before the user agent starts establishing the connection to the server to retrieve the resource. The value is given in milliseconds relative to `startTime`, -1 if not available.

  - `requestStart` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    Time immediately before the browser starts requesting the resource from the server, cache, or local resource. The value is given in milliseconds relative to `startTime`, -1 if not available.

  - `responseStart` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    Time immediately after the browser receives the first byte of the response from the server, cache, or local resource. The value is given in milliseconds relative to `startTime`, -1 if not available.

  - `responseEnd` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    Time immediately after the browser receives the last byte of the resource or immediately before the transport connection is closed, whichever comes first. The value is given in milliseconds relative to `startTime`, -1 if not available.

* * *

### url [​](https://playwright.dev/python/docs/api/class-request\#request-url "Direct link to url")

Added before v1.9request.url

URL of the request.

**Usage**

```codeBlockLines_e6Vv
request.url

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-request#request-url-return)

- [Methods](https://playwright.dev/python/docs/api/class-request#methods)
  - [all\_headers](https://playwright.dev/python/docs/api/class-request#request-all-headers)
  - [header\_value](https://playwright.dev/python/docs/api/class-request#request-header-value)
  - [headers\_array](https://playwright.dev/python/docs/api/class-request#request-headers-array)
  - [response](https://playwright.dev/python/docs/api/class-request#request-response)
  - [sizes](https://playwright.dev/python/docs/api/class-request#request-sizes)
- [Properties](https://playwright.dev/python/docs/api/class-request#properties)
  - [failure](https://playwright.dev/python/docs/api/class-request#request-failure)
  - [frame](https://playwright.dev/python/docs/api/class-request#request-frame)
  - [headers](https://playwright.dev/python/docs/api/class-request#request-headers)
  - [is\_navigation\_request](https://playwright.dev/python/docs/api/class-request#request-is-navigation-request)
  - [method](https://playwright.dev/python/docs/api/class-request#request-method)
  - [post\_data](https://playwright.dev/python/docs/api/class-request#request-post-data)
  - [post\_data\_buffer](https://playwright.dev/python/docs/api/class-request#request-post-data-buffer)
  - [post\_data\_json](https://playwright.dev/python/docs/api/class-request#request-post-data-json)
  - [redirected\_from](https://playwright.dev/python/docs/api/class-request#request-redirected-from)
  - [redirected\_to](https://playwright.dev/python/docs/api/class-request#request-redirected-to)
  - [resource\_type](https://playwright.dev/python/docs/api/class-request#request-resource-type)
  - [timing](https://playwright.dev/python/docs/api/class-request#request-timing)
  - [url](https://playwright.dev/python/docs/api/class-request#request-url)

## API Request Context
[Skip to main content](https://playwright.dev/python/docs/api/class-apirequest#__docusaurus_skipToContent_fallback)

On this page

Exposes API that can be used for the Web API testing. This class is used for creating [APIRequestContext](https://playwright.dev/python/docs/api/class-apirequestcontext "APIRequestContext") instance which in turn can be used for sending web requests. An instance of this class can be obtained via [playwright.request](https://playwright.dev/python/docs/api/class-playwright#playwright-request). For more information see [APIRequestContext](https://playwright.dev/python/docs/api/class-apirequestcontext "APIRequestContext").

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-apirequest\#methods "Direct link to Methods")

### new\_context [​](https://playwright.dev/python/docs/api/class-apirequest\#api-request-new-context "Direct link to new_context")

Added in: v1.16apiRequest.new\_context

Creates new instances of [APIRequestContext](https://playwright.dev/python/docs/api/class-apirequestcontext "APIRequestContext").

**Usage**

```codeBlockLines_e6Vv
api_request.new_context()
api_request.new_context(**kwargs)

```

**Arguments**

- `base_url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequest#api-request-new-context-option-base-url)

Methods like [api\_request\_context.get()](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-get) take the base URL into consideration by using the [`URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor for building the corresponding URL. Examples:
  - baseURL: `http://localhost:3000` and sending request to `/bar.html` results in `http://localhost:3000/bar.html`
  - baseURL: `http://localhost:3000/foo/` and sending request to `./bar.html` results in `http://localhost:3000/foo/bar.html`
  - baseURL: `http://localhost:3000/foo` (without trailing slash) and navigating to `./bar.html` results in `http://localhost:3000/bar.html`
- `client_certificates` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\] _(optional)_ Added in: 1.46 [#](https://playwright.dev/python/docs/api/class-apirequest#api-request-new-context-option-client-certificates)


  - `origin` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    Exact origin that the certificate is valid for. Origin includes `https` protocol, a hostname and optionally a port.

  - `certPath` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_

    Path to the file with the certificate in PEM format.

  - `cert` [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") _(optional)_

    Direct value of the certificate in PEM format.

  - `keyPath` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_

    Path to the file with the private key in PEM format.

  - `key` [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") _(optional)_

    Direct value of the private key in PEM format.

  - `pfxPath` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_

    Path to the PFX or PKCS12 encoded private key and certificate chain.

  - `pfx` [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") _(optional)_

    Direct value of the PFX or PKCS12 encoded private key and certificate chain.

  - `passphrase` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_

    Passphrase for the private key (PEM or PFX).


TLS Client Authentication allows the server to request a client certificate and verify it.

**Details**

An array of client certificates to be used. Each certificate object must have either both `certPath` and `keyPath`, a single `pfxPath`, or their corresponding direct value equivalents ( `cert` and `key`, or `pfx`). Optionally, `passphrase` property should be provided if the certificate is encrypted. The `origin` property should be provided with an exact match to the request origin that the certificate is valid for.

note

When using WebKit on macOS, accessing `localhost` will not pick up client certificates. You can make it work by replacing `localhost` with `local.playwright`.

- `extra_http_headers` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequest#api-request-new-context-option-extra-http-headers)

An object containing additional HTTP headers to be sent with every request. Defaults to none.

- `fail_on_status_code` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.51 [#](https://playwright.dev/python/docs/api/class-apirequest#api-request-new-context-option-fail-on-status-code)

Whether to throw on response codes other than 2xx and 3xx. By default response object is returned for all status codes.

- `http_credentials` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequest#api-request-new-context-option-http-credentials)


  - `username` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

  - `password` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

  - `origin` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_

    Restrain sending http credentials on specific origin (scheme://host:port).

  - `send` "unauthorized" \| "always" _(optional)_

    This option only applies to the requests sent from corresponding [APIRequestContext](https://playwright.dev/python/docs/api/class-apirequestcontext "APIRequestContext") and does not affect requests sent from the browser. `'always'` \- `Authorization` header with basic authentication credentials will be sent with the each API request. `'unauthorized` \- the credentials are only sent when 401 (Unauthorized) response with `WWW-Authenticate` header is received. Defaults to `'unauthorized'`.


Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication). If no origin is specified, the username and password are sent to any servers upon unauthorized responses.

- `ignore_https_errors` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequest#api-request-new-context-option-ignore-https-errors)

Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.

- `proxy` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequest#api-request-new-context-option-proxy)


  - `server` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.

  - `bypass` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_

    Optional comma-separated domains to bypass proxy, for example `".com, chromium.org, .domain.com"`.

  - `username` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_

    Optional username to use if HTTP proxy requires authentication.

  - `password` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_

    Optional password to use if HTTP proxy requires authentication.


Network proxy settings.

- `storage_state` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequest#api-request-new-context-option-storage-state)


  - `cookies` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\]
    - `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    - `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    - `domain` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    - `path` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    - `expires` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

      Unix time in seconds.

    - `httpOnly` [bool](https://docs.python.org/3/library/stdtypes.html "bool")

    - `secure` [bool](https://docs.python.org/3/library/stdtypes.html "bool")

    - `sameSite` "Strict" \| "Lax" \| "None"
  - `origins` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\]
    - `origin` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    - `localStorage` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\]
      - `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

      - `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

Populates context with given storage state. This option can be used to initialize context with logged-in information obtained via [browser\_context.storage\_state()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-storage-state) or [api\_request\_context.storage\_state()](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-storage-state). Either a path to the file with saved storage, or the value returned by one of [browser\_context.storage\_state()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-storage-state) or [api\_request\_context.storage\_state()](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-storage-state) methods.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequest#api-request-new-context-option-timeout)

Maximum time in milliseconds to wait for the response. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.

- `user_agent` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequest#api-request-new-context-option-user-agent)

Specific user agent to use in this context.


**Returns**

- [APIRequestContext](https://playwright.dev/python/docs/api/class-apirequestcontext "APIRequestContext") [#](https://playwright.dev/python/docs/api/class-apirequest#api-request-new-context-return)

- [Methods](https://playwright.dev/python/docs/api/class-apirequest#methods)
  - [new\_context](https://playwright.dev/python/docs/api/class-apirequest#api-request-new-context)

## Touchscreen Class Overview
[Skip to main content](https://playwright.dev/python/docs/api/class-touchscreen#__docusaurus_skipToContent_fallback)

On this page

The Touchscreen class operates in main-frame CSS pixels relative to the top-left corner of the viewport. Methods on the touchscreen can only be used in browser contexts that have been initialized with `hasTouch` set to true.

This class is limited to emulating tap gestures. For examples of other gestures simulated by manually dispatching touch events, see the [emulating legacy touch events](https://playwright.dev/python/docs/touch-events) page.

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-touchscreen\#methods "Direct link to Methods")

### tap [​](https://playwright.dev/python/docs/api/class-touchscreen\#touchscreen-tap "Direct link to tap")

Added before v1.9touchscreen.tap

Dispatches a `touchstart` and `touchend` event with a single touch at the position ( [x](https://playwright.dev/python/docs/api/class-touchscreen#touchscreen-tap-option-x), [y](https://playwright.dev/python/docs/api/class-touchscreen#touchscreen-tap-option-y)).

note

[page.tap()](https://playwright.dev/python/docs/api/class-page#page-tap) the method will throw if [has\_touch](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-has-touch) option of the browser context is false.

**Usage**

```codeBlockLines_e6Vv
touchscreen.tap(x, y)

```

**Arguments**

- `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") [#](https://playwright.dev/python/docs/api/class-touchscreen#touchscreen-tap-option-x)

X coordinate relative to the main frame's viewport in CSS pixels.

- `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") [#](https://playwright.dev/python/docs/api/class-touchscreen#touchscreen-tap-option-y)

Y coordinate relative to the main frame's viewport in CSS pixels.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-touchscreen#touchscreen-tap-return)

- [Methods](https://playwright.dev/python/docs/api/class-touchscreen#methods)
  - [tap](https://playwright.dev/python/docs/api/class-touchscreen#touchscreen-tap)

## Playwright Locator Methods
[Skip to main content](https://playwright.dev/python/docs/api/class-locator#__docusaurus_skipToContent_fallback)

On this page

Locators are the central piece of Playwright's auto-waiting and retry-ability. In a nutshell, locators represent a way to find element(s) on the page at any moment. A locator can be created with the [page.locator()](https://playwright.dev/python/docs/api/class-page#page-locator) method.

[Learn more about locators](https://playwright.dev/python/docs/locators).

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-locator\#methods "Direct link to Methods")

### all [​](https://playwright.dev/python/docs/api/class-locator\#locator-all "Direct link to all")

Added in: v1.29locator.all

When the locator points to a list of elements, this returns an array of locators, pointing to their respective elements.

note

[locator.all()](https://playwright.dev/python/docs/api/class-locator#locator-all) does not wait for elements to match the locator, and instead immediately returns whatever is present in the page.

When the list of elements changes dynamically, [locator.all()](https://playwright.dev/python/docs/api/class-locator#locator-all) will produce unpredictable and flaky results.

When the list of elements is stable, but loaded dynamically, wait for the full list to finish loading before calling [locator.all()](https://playwright.dev/python/docs/api/class-locator#locator-all).

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
for li in page.get_by_role('listitem').all():
  li.click();

```

```codeBlockLines_e6Vv
for li in await page.get_by_role('listitem').all():
  await li.click();

```

**Returns**

- [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Locator](https://playwright.dev/python/docs/api/class-locator "Locator")\] [#](https://playwright.dev/python/docs/api/class-locator#locator-all-return)

* * *

### all\_inner\_texts [​](https://playwright.dev/python/docs/api/class-locator\#locator-all-inner-texts "Direct link to all_inner_texts")

Added in: v1.14locator.all\_inner\_texts

Returns an array of `node.innerText` values for all matching nodes.

Asserting text

If you need to assert text on the page, prefer [expect(locator).to\_have\_text()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-text) with [use\_inner\_text](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-text-option-use-inner-text) option to avoid flakiness. See [assertions guide](https://playwright.dev/python/docs/test-assertions) for more details.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
texts = page.get_by_role("link").all_inner_texts()

```

```codeBlockLines_e6Vv
texts = await page.get_by_role("link").all_inner_texts()

```

**Returns**

- [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] [#](https://playwright.dev/python/docs/api/class-locator#locator-all-inner-texts-return)

* * *

### all\_text\_contents [​](https://playwright.dev/python/docs/api/class-locator\#locator-all-text-contents "Direct link to all_text_contents")

Added in: v1.14locator.all\_text\_contents

Returns an array of `node.textContent` values for all matching nodes.

Asserting text

If you need to assert text on the page, prefer [expect(locator).to\_have\_text()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-text) to avoid flakiness. See [assertions guide](https://playwright.dev/python/docs/test-assertions) for more details.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
texts = page.get_by_role("link").all_text_contents()

```

```codeBlockLines_e6Vv
texts = await page.get_by_role("link").all_text_contents()

```

**Returns**

- [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] [#](https://playwright.dev/python/docs/api/class-locator#locator-all-text-contents-return)

* * *

### and\_ [​](https://playwright.dev/python/docs/api/class-locator\#locator-and "Direct link to and_")

Added in: v1.34locator.and\_

Creates a locator that matches both this locator and the argument locator.

**Usage**

The following example finds a button with a specific title.

- Sync
- Async

```codeBlockLines_e6Vv
button = page.get_by_role("button").and_(page.getByTitle("Subscribe"))

```

```codeBlockLines_e6Vv
button = page.get_by_role("button").and_(page.getByTitle("Subscribe"))

```

**Arguments**

- `locator` [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-locator#locator-and-option-locator)

Additional locator to match.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-locator#locator-and-return)

* * *

### aria\_snapshot [​](https://playwright.dev/python/docs/api/class-locator\#locator-aria-snapshot "Direct link to aria_snapshot")

Added in: v1.49locator.aria\_snapshot

Captures the aria snapshot of the given element. Read more about [aria snapshots](https://playwright.dev/python/docs/aria-snapshots) and [expect(locator).to\_match\_aria\_snapshot()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-match-aria-snapshot) for the corresponding assertion.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_role("link").aria_snapshot()

```

```codeBlockLines_e6Vv
await page.get_by_role("link").aria_snapshot()

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-aria-snapshot-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-locator#locator-aria-snapshot-return)

**Details**

This method captures the aria snapshot of the given element. The snapshot is a string that represents the state of the element and its children. The snapshot can be used to assert the state of the element in the test, or to compare it to state in the future.

The ARIA snapshot is represented using [YAML](https://yaml.org/spec/1.2.2/) markup language:

- The keys of the objects are the roles and optional accessible names of the elements.
- The values are either text content or an array of child elements.
- Generic static text can be represented with the `text` key.

Below is the HTML markup and the respective ARIA snapshot:

```codeBlockLines_e6Vv
<ul aria-label="Links">
  <li><a href="/">Home</a></li>
  <li><a href="/about">About</a></li>
<ul>

```

```codeBlockLines_e6Vv
- list "Links":
  - listitem:
    - link "Home"
  - listitem:
    - link "About"

```

* * *

### blur [​](https://playwright.dev/python/docs/api/class-locator\#locator-blur "Direct link to blur")

Added in: v1.28locator.blur

Calls [blur](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/blur) on the element.

**Usage**

```codeBlockLines_e6Vv
locator.blur()
locator.blur(**kwargs)

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-blur-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locator#locator-blur-return)

* * *

### bounding\_box [​](https://playwright.dev/python/docs/api/class-locator\#locator-bounding-box "Direct link to bounding_box")

Added in: v1.14locator.bounding\_box

This method returns the bounding box of the element matching the locator, or `null` if the element is not visible. The bounding box is calculated relative to the main frame viewport - which is usually the same as the browser window.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
box = page.get_by_role("button").bounding_box()
page.mouse.click(box["x"] + box["width"] / 2, box["y"] + box["height"] / 2)

```

```codeBlockLines_e6Vv
box = await page.get_by_role("button").bounding_box()
await page.mouse.click(box["x"] + box["width"] / 2, box["y"] + box["height"] / 2)

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-bounding-box-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-locator#locator-bounding-box-return)
  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    the x coordinate of the element in pixels.

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    the y coordinate of the element in pixels.

  - `width` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    the width of the element in pixels.

  - `height` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    the height of the element in pixels.

**Details**

Scrolling affects the returned bounding box, similarly to [Element.getBoundingClientRect](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect). That means `x` and/or `y` may be negative.

Elements from child frames return the bounding box relative to the main frame, unlike the [Element.getBoundingClientRect](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect).

Assuming the page is static, it is safe to use bounding box coordinates to perform input. For example, the following snippet should click the center of the element.

* * *

### check [​](https://playwright.dev/python/docs/api/class-locator\#locator-check "Direct link to check")

Added in: v1.14locator.check

Ensure that checkbox or radio element is checked.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_role("checkbox").check()

```

```codeBlockLines_e6Vv
await page.get_by_role("checkbox").check()

```

**Arguments**

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-check-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-check-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-check-option-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-check-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-check-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locator#locator-check-return)

**Details**

Performs the following steps:

1. Ensure that element is a checkbox or a radio input. If not, this method throws. If the element is already checked, this method returns immediately.
2. Wait for [actionability](https://playwright.dev/python/docs/actionability) checks on the element, unless [force](https://playwright.dev/python/docs/api/class-locator#locator-check-option-force) option is set.
3. Scroll the element into view if needed.
4. Use [page.mouse](https://playwright.dev/python/docs/api/class-page#page-mouse) to click in the center of the element.
5. Ensure that the element is now checked. If not, this method throws.

If the element is detached from the DOM at any moment during the action, this method throws.

When all steps combined have not finished during the specified [timeout](https://playwright.dev/python/docs/api/class-locator#locator-check-option-timeout), this method throws a [TimeoutError](https://playwright.dev/python/docs/api/class-timeouterror "TimeoutError"). Passing zero timeout disables this.

* * *

### clear [​](https://playwright.dev/python/docs/api/class-locator\#locator-clear "Direct link to clear")

Added in: v1.28locator.clear

Clear the input field.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_role("textbox").clear()

```

```codeBlockLines_e6Vv
await page.get_by_role("textbox").clear()

```

**Arguments**

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-clear-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-clear-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-clear-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locator#locator-clear-return)

**Details**

This method waits for [actionability](https://playwright.dev/python/docs/actionability) checks, focuses the element, clears it and triggers an `input` event after clearing.

If the target element is not an `<input>`, `<textarea>` or `[contenteditable]` element, this method throws an error. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be cleared instead.

* * *

### click [​](https://playwright.dev/python/docs/api/class-locator\#locator-click "Direct link to click")

Added in: v1.14locator.click

Click an element.

**Usage**

Click a button:

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_role("button").click()

```

```codeBlockLines_e6Vv
await page.get_by_role("button").click()

```

Shift-right-click at a specific position on a canvas:

- Sync
- Async

```codeBlockLines_e6Vv
page.locator("canvas").click(
    button="right", modifiers=["Shift"], position={"x": 23, "y": 32}
)

```

```codeBlockLines_e6Vv
await page.locator("canvas").click(
    button="right", modifiers=["Shift"], position={"x": 23, "y": 32}
)

```

**Arguments**

- `button` "left" \| "right" \| "middle" _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-click-option-button)

Defaults to `left`.

- `click_count` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-click-option-click-count)

defaults to 1. See [UIEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail "UIEvent.detail").

- `delay` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-click-option-delay)

Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-click-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `modifiers` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\["Alt" \| "Control" \| "ControlOrMeta" \| "Meta" \| "Shift"\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-click-option-modifiers)

Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to "Control" on Windows and Linux and to "Meta" on macOS.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-click-option-no-wait-after)



Deprecated





This option will default to `true` in the future.





Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.

- `position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-click-option-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-click-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-click-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it. Note that keyboard `modifiers` will be pressed regardless of `trial` to allow testing elements which are only visible when those keys are pressed.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locator#locator-click-return)

**Details**

This method clicks the element by performing the following steps:

1. Wait for [actionability](https://playwright.dev/python/docs/actionability) checks on the element, unless [force](https://playwright.dev/python/docs/api/class-locator#locator-click-option-force) option is set.
2. Scroll the element into view if needed.
3. Use [page.mouse](https://playwright.dev/python/docs/api/class-page#page-mouse) to click in the center of the element, or the specified [position](https://playwright.dev/python/docs/api/class-locator#locator-click-option-position).
4. Wait for initiated navigations to either succeed or fail, unless [no\_wait\_after](https://playwright.dev/python/docs/api/class-locator#locator-click-option-no-wait-after) option is set.

If the element is detached from the DOM at any moment during the action, this method throws.

When all steps combined have not finished during the specified [timeout](https://playwright.dev/python/docs/api/class-locator#locator-click-option-timeout), this method throws a [TimeoutError](https://playwright.dev/python/docs/api/class-timeouterror "TimeoutError"). Passing zero timeout disables this.

* * *

### count [​](https://playwright.dev/python/docs/api/class-locator\#locator-count "Direct link to count")

Added in: v1.14locator.count

Returns the number of elements matching the locator.

Asserting count

If you need to assert the number of elements on the page, prefer [expect(locator).to\_have\_count()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-count) to avoid flakiness. See [assertions guide](https://playwright.dev/python/docs/test-assertions) for more details.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
count = page.get_by_role("listitem").count()

```

```codeBlockLines_e6Vv
count = await page.get_by_role("listitem").count()

```

**Returns**

- [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") [#](https://playwright.dev/python/docs/api/class-locator#locator-count-return)

* * *

### dblclick [​](https://playwright.dev/python/docs/api/class-locator\#locator-dblclick "Direct link to dblclick")

Added in: v1.14locator.dblclick

Double-click an element.

**Usage**

```codeBlockLines_e6Vv
locator.dblclick()
locator.dblclick(**kwargs)

```

**Arguments**

- `button` "left" \| "right" \| "middle" _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-dblclick-option-button)

Defaults to `left`.

- `delay` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-dblclick-option-delay)

Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-dblclick-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `modifiers` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\["Alt" \| "Control" \| "ControlOrMeta" \| "Meta" \| "Shift"\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-dblclick-option-modifiers)

Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to "Control" on Windows and Linux and to "Meta" on macOS.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-dblclick-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-dblclick-option-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-dblclick-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-dblclick-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it. Note that keyboard `modifiers` will be pressed regardless of `trial` to allow testing elements which are only visible when those keys are pressed.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locator#locator-dblclick-return)

**Details**

This method double clicks the element by performing the following steps:

1. Wait for [actionability](https://playwright.dev/python/docs/actionability) checks on the element, unless [force](https://playwright.dev/python/docs/api/class-locator#locator-dblclick-option-force) option is set.
2. Scroll the element into view if needed.
3. Use [page.mouse](https://playwright.dev/python/docs/api/class-page#page-mouse) to double click in the center of the element, or the specified [position](https://playwright.dev/python/docs/api/class-locator#locator-dblclick-option-position).

If the element is detached from the DOM at any moment during the action, this method throws.

When all steps combined have not finished during the specified [timeout](https://playwright.dev/python/docs/api/class-locator#locator-dblclick-option-timeout), this method throws a [TimeoutError](https://playwright.dev/python/docs/api/class-timeouterror "TimeoutError"). Passing zero timeout disables this.

note

`element.dblclick()` dispatches two `click` events and a single `dblclick` event.

* * *

### dispatch\_event [​](https://playwright.dev/python/docs/api/class-locator\#locator-dispatch-event "Direct link to dispatch_event")

Added in: v1.14locator.dispatch\_event

Programmatically dispatch an event on the matching element.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
locator.dispatch_event("click")

```

```codeBlockLines_e6Vv
await locator.dispatch_event("click")

```

**Arguments**

- `type` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-locator#locator-dispatch-event-option-type)

DOM event type: `"click"`, `"dragstart"`, etc.

- `event_init` [EvaluationArgument](https://playwright.dev/python/docs/evaluating#evaluation-argument "EvaluationArgument") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-dispatch-event-option-event-init)

Optional event-specific initialization properties.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-dispatch-event-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locator#locator-dispatch-event-return)

**Details**

The snippet above dispatches the `click` event on the element. Regardless of the visibility state of the element, `click` is dispatched. This is equivalent to calling [element.click()](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click).

Under the hood, it creates an instance of an event based on the given [type](https://playwright.dev/python/docs/api/class-locator#locator-dispatch-event-option-type), initializes it with [event\_init](https://playwright.dev/python/docs/api/class-locator#locator-dispatch-event-option-event-init) properties and dispatches it on the element. Events are `composed`, `cancelable` and bubble by default.

Since [event\_init](https://playwright.dev/python/docs/api/class-locator#locator-dispatch-event-option-event-init) is event-specific, please refer to the events documentation for the lists of initial properties:

- [DeviceMotionEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent/DeviceMotionEvent)
- [DeviceOrientationEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent/DeviceOrientationEvent)
- [DragEvent](https://developer.mozilla.org/en-US/docs/Web/API/DragEvent/DragEvent)
- [Event](https://developer.mozilla.org/en-US/docs/Web/API/Event/Event)
- [FocusEvent](https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent/FocusEvent)
- [KeyboardEvent](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/KeyboardEvent)
- [MouseEvent](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/MouseEvent)
- [PointerEvent](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/PointerEvent)
- [TouchEvent](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/TouchEvent)
- [WheelEvent](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/WheelEvent)

You can also specify [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle") as the property value if you want live objects to be passed into the event:

- Sync
- Async

```codeBlockLines_e6Vv
data_transfer = page.evaluate_handle("new DataTransfer()")
locator.dispatch_event("#source", "dragstart", {"dataTransfer": data_transfer})

```

```codeBlockLines_e6Vv
data_transfer = await page.evaluate_handle("new DataTransfer()")
await locator.dispatch_event("#source", "dragstart", {"dataTransfer": data_transfer})

```

* * *

### drag\_to [​](https://playwright.dev/python/docs/api/class-locator\#locator-drag-to "Direct link to drag_to")

Added in: v1.18locator.drag\_to

Drag the source element towards the target element and drop it.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
source = page.locator("#source")
target = page.locator("#target")

source.drag_to(target)
# or specify exact positions relative to the top-left corners of the elements:
source.drag_to(
  target,
  source_position={"x": 34, "y": 7},
  target_position={"x": 10, "y": 20}
)

```

```codeBlockLines_e6Vv
source = page.locator("#source")
target = page.locator("#target")

await source.drag_to(target)
# or specify exact positions relative to the top-left corners of the elements:
await source.drag_to(
  target,
  source_position={"x": 34, "y": 7},
  target_position={"x": 10, "y": 20}
)

```

**Arguments**

- `target` [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-locator#locator-drag-to-option-target)

Locator of the element to drag to.

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-drag-to-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-drag-to-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `source_position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-drag-to-option-source-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


Clicks on the source element at this point relative to the top-left corner of the element's padding box. If not specified, some visible point of the element is used.

- `target_position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-drag-to-option-target-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


Drops on the target element at this point relative to the top-left corner of the element's padding box. If not specified, some visible point of the element is used.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-drag-to-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-drag-to-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locator#locator-drag-to-return)

**Details**

This method drags the locator to another target locator or target position. It will first move to the source element, perform a `mousedown`, then move to the target element or position and perform a `mouseup`.

* * *

### evaluate [​](https://playwright.dev/python/docs/api/class-locator\#locator-evaluate "Direct link to evaluate")

Added in: v1.14locator.evaluate

Execute JavaScript code in the page, taking the matching element as an argument.

**Usage**

**Arguments**

- `expression` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-option-expression)

JavaScript expression to be evaluated in the browser context. If the expression evaluates to a function, the function is automatically invoked.

- `arg` [EvaluationArgument](https://playwright.dev/python/docs/evaluating#evaluation-argument "EvaluationArgument") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-option-arg)

Optional argument to pass to [expression](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-option-expression).

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-return)

**Details**

Returns the return value of [expression](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-option-expression), called with the matching element as a first argument, and [arg](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-option-arg) as a second argument.

If [expression](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-option-expression) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), this method will wait for the promise to resolve and return its value.

If [expression](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-option-expression) throws or rejects, this method throws.

* * *

### evaluate\_all [​](https://playwright.dev/python/docs/api/class-locator\#locator-evaluate-all "Direct link to evaluate_all")

Added in: v1.14locator.evaluate\_all

Execute JavaScript code in the page, taking all matching elements as an argument.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
locator = page.locator("div")
more_than_ten = locator.evaluate_all("(divs, min) => divs.length > min", 10)

```

```codeBlockLines_e6Vv
locator = page.locator("div")
more_than_ten = await locator.evaluate_all("(divs, min) => divs.length > min", 10)

```

**Arguments**

- `expression` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-all-option-expression)

JavaScript expression to be evaluated in the browser context. If the expression evaluates to a function, the function is automatically invoked.

- `arg` [EvaluationArgument](https://playwright.dev/python/docs/evaluating#evaluation-argument "EvaluationArgument") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-all-option-arg)

Optional argument to pass to [expression](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-all-option-expression).


**Returns**

- [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-all-return)

**Details**

Returns the return value of [expression](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-all-option-expression), called with an array of all matching elements as a first argument, and [arg](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-all-option-arg) as a second argument.

If [expression](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-all-option-expression) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), this method will wait for the promise to resolve and return its value.

If [expression](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-all-option-expression) throws or rejects, this method throws.

* * *

### evaluate\_handle [​](https://playwright.dev/python/docs/api/class-locator\#locator-evaluate-handle "Direct link to evaluate_handle")

Added in: v1.14locator.evaluate\_handle

Execute JavaScript code in the page, taking the matching element as an argument, and return a [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle") with the result.

**Usage**

```codeBlockLines_e6Vv
locator.evaluate_handle(expression)
locator.evaluate_handle(expression, **kwargs)

```

**Arguments**

- `expression` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-handle-option-expression)

JavaScript expression to be evaluated in the browser context. If the expression evaluates to a function, the function is automatically invoked.

- `arg` [EvaluationArgument](https://playwright.dev/python/docs/evaluating#evaluation-argument "EvaluationArgument") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-handle-option-arg)

Optional argument to pass to [expression](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-handle-option-expression).

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-handle-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle") [#](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-handle-return)

**Details**

Returns the return value of [expression](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-handle-option-expression) as a [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle"), called with the matching element as a first argument, and [arg](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-handle-option-arg) as a second argument.

The only difference between [locator.evaluate()](https://playwright.dev/python/docs/api/class-locator#locator-evaluate) and [locator.evaluate\_handle()](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-handle) is that [locator.evaluate\_handle()](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-handle) returns [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle").

If [expression](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-handle-option-expression) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), this method will wait for the promise to resolve and return its value.

If [expression](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-handle-option-expression) throws or rejects, this method throws.

See [page.evaluate\_handle()](https://playwright.dev/python/docs/api/class-page#page-evaluate-handle) for more details.

* * *

### fill [​](https://playwright.dev/python/docs/api/class-locator\#locator-fill "Direct link to fill")

Added in: v1.14locator.fill

Set a value to the input field.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_role("textbox").fill("example value")

```

```codeBlockLines_e6Vv
await page.get_by_role("textbox").fill("example value")

```

**Arguments**

- `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-locator#locator-fill-option-value)

Value to set for the `<input>`, `<textarea>` or `[contenteditable]` element.

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-fill-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-fill-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-fill-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locator#locator-fill-return)

**Details**

This method waits for [actionability](https://playwright.dev/python/docs/actionability) checks, focuses the element, fills it and triggers an `input` event after filling. Note that you can pass an empty string to clear the input field.

If the target element is not an `<input>`, `<textarea>` or `[contenteditable]` element, this method throws an error. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be filled instead.

To send fine-grained keyboard events, use [locator.press\_sequentially()](https://playwright.dev/python/docs/api/class-locator#locator-press-sequentially).

* * *

### filter [​](https://playwright.dev/python/docs/api/class-locator\#locator-filter "Direct link to filter")

Added in: v1.22locator.filter

This method narrows existing locator according to the options, for example filters by text. It can be chained to filter multiple times.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
row_locator = page.locator("tr")
# ...
row_locator.filter(has_text="text in column 1").filter(
    has=page.get_by_role("button", name="column 2 button")
).screenshot()

```

```codeBlockLines_e6Vv
row_locator = page.locator("tr")
# ...
await row_locator.filter(has_text="text in column 1").filter(
    has=page.get_by_role("button", name="column 2 button")
).screenshot()

```

**Arguments**

- `has` [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-filter-option-has)

Narrows down the results of the method to those which contain elements matching this relative locator. For example, `article` that has `text=Playwright` matches `<article><div>Playwright</div></article>`.

Inner locator **must be relative** to the outer locator and is queried starting with the outer locator match, not the document root. For example, you can find `content` that has `div` in `<article><content><div>Playwright</div></content></article>`. However, looking for `content` that has `article div` will fail, because the inner locator must be relative and should not use any elements outside the `content`.

Note that outer and inner locators must belong to the same frame. Inner locator must not contain [FrameLocator](https://playwright.dev/python/docs/api/class-framelocator "FrameLocator") s.

- `has_not` [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") _(optional)_ Added in: v1.33 [#](https://playwright.dev/python/docs/api/class-locator#locator-filter-option-has-not)

Matches elements that do not contain an element that matches an inner locator. Inner locator is queried against the outer one. For example, `article` that does not have `div` matches `<article><span>Playwright</span></article>`.

Note that outer and inner locators must belong to the same frame. Inner locator must not contain [FrameLocator](https://playwright.dev/python/docs/api/class-framelocator "FrameLocator") s.

- `has_not_text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") _(optional)_ Added in: v1.33 [#](https://playwright.dev/python/docs/api/class-locator#locator-filter-option-has-not-text)

Matches elements that do not contain specified text somewhere inside, possibly in a child or a descendant element. When passed a \[string\], matching is case-insensitive and searches for a substring.

- `has_text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-filter-option-has-text)

Matches elements containing specified text somewhere inside, possibly in a child or a descendant element. When passed a \[string\], matching is case-insensitive and searches for a substring. For example, `"Playwright"` matches `<article><div>Playwright</div></article>`.

- `visible` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.51 [#](https://playwright.dev/python/docs/api/class-locator#locator-filter-option-visible)

Only matches visible or invisible elements.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-locator#locator-filter-return)

* * *

### focus [​](https://playwright.dev/python/docs/api/class-locator\#locator-focus "Direct link to focus")

Added in: v1.14locator.focus

Calls [focus](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus) on the matching element.

**Usage**

```codeBlockLines_e6Vv
locator.focus()
locator.focus(**kwargs)

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-focus-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locator#locator-focus-return)

* * *

### frame\_locator [​](https://playwright.dev/python/docs/api/class-locator\#locator-frame-locator "Direct link to frame_locator")

Added in: v1.17locator.frame\_locator

When working with iframes, you can create a frame locator that will enter the iframe and allow locating elements in that iframe:

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
locator = page.frame_locator("iframe").get_by_text("Submit")
locator.click()

```

```codeBlockLines_e6Vv
locator = page.frame_locator("iframe").get_by_text("Submit")
await locator.click()

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-locator#locator-frame-locator-option-selector)

A selector to use when resolving DOM element.


**Returns**

- [FrameLocator](https://playwright.dev/python/docs/api/class-framelocator "FrameLocator") [#](https://playwright.dev/python/docs/api/class-locator#locator-frame-locator-return)

* * *

### get\_attribute [​](https://playwright.dev/python/docs/api/class-locator\#locator-get-attribute "Direct link to get_attribute")

Added in: v1.14locator.get\_attribute

Returns the matching element's attribute value.

Asserting attributes

If you need to assert an element's attribute, prefer [expect(locator).to\_have\_attribute()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-attribute) to avoid flakiness. See [assertions guide](https://playwright.dev/python/docs/test-assertions) for more details.

**Usage**

```codeBlockLines_e6Vv
locator.get_attribute(name)
locator.get_attribute(name, **kwargs)

```

**Arguments**

- `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-locator#locator-get-attribute-option-name)

Attribute name to get the value for.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-get-attribute-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-locator#locator-get-attribute-return)

* * *

### get\_by\_alt\_text [​](https://playwright.dev/python/docs/api/class-locator\#locator-get-by-alt-text "Direct link to get_by_alt_text")

Added in: v1.27locator.get\_by\_alt\_text

Allows locating elements by their alt text.

**Usage**

For example, this method will find the image by alt text "Playwright logo":

```codeBlockLines_e6Vv
<img alt='Playwright logo'>

```

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_alt_text("Playwright logo").click()

```

```codeBlockLines_e6Vv
await page.get_by_alt_text("Playwright logo").click()

```

**Arguments**

- `text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-locator#locator-get-by-alt-text-option-text)

Text to locate the element for.

- `exact` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-get-by-alt-text-option-exact)

Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-locator#locator-get-by-alt-text-return)

* * *

### get\_by\_label [​](https://playwright.dev/python/docs/api/class-locator\#locator-get-by-label "Direct link to get_by_label")

Added in: v1.27locator.get\_by\_label

Allows locating input elements by the text of the associated `<label>` or `aria-labelledby` element, or by the `aria-label` attribute.

**Usage**

For example, this method will find inputs by label "Username" and "Password" in the following DOM:

```codeBlockLines_e6Vv
<input aria-label="Username">
<label for="password-input">Password:</label>
<input id="password-input">

```

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_label("Username").fill("john")
page.get_by_label("Password").fill("secret")

```

```codeBlockLines_e6Vv
await page.get_by_label("Username").fill("john")
await page.get_by_label("Password").fill("secret")

```

**Arguments**

- `text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-locator#locator-get-by-label-option-text)

Text to locate the element for.

- `exact` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-get-by-label-option-exact)

Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-locator#locator-get-by-label-return)

* * *

### get\_by\_placeholder [​](https://playwright.dev/python/docs/api/class-locator\#locator-get-by-placeholder "Direct link to get_by_placeholder")

Added in: v1.27locator.get\_by\_placeholder

Allows locating input elements by the placeholder text.

**Usage**

For example, consider the following DOM structure.

```codeBlockLines_e6Vv
<input type="email" placeholder="name@example.com" />

```

You can fill the input after locating it by the placeholder text:

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_placeholder("name@example.com").fill("playwright@microsoft.com")

```

```codeBlockLines_e6Vv
await page.get_by_placeholder("name@example.com").fill("playwright@microsoft.com")

```

**Arguments**

- `text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-locator#locator-get-by-placeholder-option-text)

Text to locate the element for.

- `exact` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-get-by-placeholder-option-exact)

Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-locator#locator-get-by-placeholder-return)

* * *

### get\_by\_role [​](https://playwright.dev/python/docs/api/class-locator\#locator-get-by-role "Direct link to get_by_role")

Added in: v1.27locator.get\_by\_role

Allows locating elements by their [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).

**Usage**

Consider the following DOM structure.

```codeBlockLines_e6Vv
<h3>Sign up</h3>
<label>
  <input type="checkbox" /> Subscribe
</label>
<br/>
<button>Submit</button>

```

You can locate each element by it's implicit role:

- Sync
- Async

```codeBlockLines_e6Vv
expect(page.get_by_role("heading", name="Sign up")).to_be_visible()

page.get_by_role("checkbox", name="Subscribe").check()

page.get_by_role("button", name=re.compile("submit", re.IGNORECASE)).click()

```

```codeBlockLines_e6Vv
await expect(page.get_by_role("heading", name="Sign up")).to_be_visible()

await page.get_by_role("checkbox", name="Subscribe").check()

await page.get_by_role("button", name=re.compile("submit", re.IGNORECASE)).click()

```

**Arguments**

- `role` "alert" \| "alertdialog" \| "application" \| "article" \| "banner" \| "blockquote" \| "button" \| "caption" \| "cell" \| "checkbox" \| "code" \| "columnheader" \| "combobox" \| "complementary" \| "contentinfo" \| "definition" \| "deletion" \| "dialog" \| "directory" \| "document" \| "emphasis" \| "feed" \| "figure" \| "form" \| "generic" \| "grid" \| "gridcell" \| "group" \| "heading" \| "img" \| "insertion" \| "link" \| "list" \| "listbox" \| "listitem" \| "log" \| "main" \| "marquee" \| "math" \| "meter" \| "menu" \| "menubar" \| "menuitem" \| "menuitemcheckbox" \| "menuitemradio" \| "navigation" \| "none" \| "note" \| "option" \| "paragraph" \| "presentation" \| "progressbar" \| "radio" \| "radiogroup" \| "region" \| "row" \| "rowgroup" \| "rowheader" \| "scrollbar" \| "search" \| "searchbox" \| "separator" \| "slider" \| "spinbutton" \| "status" \| "strong" \| "subscript" \| "superscript" \| "switch" \| "tab" \| "table" \| "tablist" \| "tabpanel" \| "term" \| "textbox" \| "time" \| "timer" \| "toolbar" \| "tooltip" \| "tree" \| "treegrid" \| "treeitem" [#](https://playwright.dev/python/docs/api/class-locator#locator-get-by-role-option-role)

Required aria role.

- `checked` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-get-by-role-option-checked)

An attribute that is usually set by `aria-checked` or native `<input type=checkbox>` controls.

Learn more about [`aria-checked`](https://www.w3.org/TR/wai-aria-1.2/#aria-checked).

- `disabled` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-get-by-role-option-disabled)

An attribute that is usually set by `aria-disabled` or `disabled`.



note





Unlike most other attributes, `disabled` is inherited through the DOM hierarchy. Learn more about [`aria-disabled`](https://www.w3.org/TR/wai-aria-1.2/#aria-disabled).

- `exact` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.28 [#](https://playwright.dev/python/docs/api/class-locator#locator-get-by-role-option-exact)

Whether [name](https://playwright.dev/python/docs/api/class-locator#locator-get-by-role-option-name) is matched exactly: case-sensitive and whole-string. Defaults to false. Ignored when [name](https://playwright.dev/python/docs/api/class-locator#locator-get-by-role-option-name) is a regular expression. Note that exact match still trims whitespace.

- `expanded` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-get-by-role-option-expanded)

An attribute that is usually set by `aria-expanded`.

Learn more about [`aria-expanded`](https://www.w3.org/TR/wai-aria-1.2/#aria-expanded).

- `include_hidden` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-get-by-role-option-include-hidden)

Option that controls whether hidden elements are matched. By default, only non-hidden elements, as [defined by ARIA](https://www.w3.org/TR/wai-aria-1.2/#tree_exclusion), are matched by role selector.

Learn more about [`aria-hidden`](https://www.w3.org/TR/wai-aria-1.2/#aria-hidden).

- `level` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-get-by-role-option-level)

A number attribute that is usually present for roles `heading`, `listitem`, `row`, `treeitem`, with default values for `<h1>-<h6>` elements.

Learn more about [`aria-level`](https://www.w3.org/TR/wai-aria-1.2/#aria-level).

- `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-get-by-role-option-name)

Option to match the [accessible name](https://w3c.github.io/accname/#dfn-accessible-name). By default, matching is case-insensitive and searches for a substring, use [exact](https://playwright.dev/python/docs/api/class-locator#locator-get-by-role-option-exact) to control this behavior.

Learn more about [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).

- `pressed` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-get-by-role-option-pressed)

An attribute that is usually set by `aria-pressed`.

Learn more about [`aria-pressed`](https://www.w3.org/TR/wai-aria-1.2/#aria-pressed).

- `selected` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-get-by-role-option-selected)

An attribute that is usually set by `aria-selected`.

Learn more about [`aria-selected`](https://www.w3.org/TR/wai-aria-1.2/#aria-selected).


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-locator#locator-get-by-role-return)

**Details**

Role selector **does not replace** accessibility audits and conformance tests, but rather gives early feedback about the ARIA guidelines.

Many html elements have an implicitly [defined role](https://w3c.github.io/html-aam/#html-element-role-mappings) that is recognized by the role selector. You can find all the [supported roles here](https://www.w3.org/TR/wai-aria-1.2/#role_definitions). ARIA guidelines **do not recommend** duplicating implicit roles and attributes by setting `role` and/or `aria-*` attributes to default values.

* * *

### get\_by\_test\_id [​](https://playwright.dev/python/docs/api/class-locator\#locator-get-by-test-id "Direct link to get_by_test_id")

Added in: v1.27locator.get\_by\_test\_id

Locate element by the test id.

**Usage**

Consider the following DOM structure.

```codeBlockLines_e6Vv
<button data-testid="directions">Itinéraire</button>

```

You can locate the element by it's test id:

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_test_id("directions").click()

```

```codeBlockLines_e6Vv
await page.get_by_test_id("directions").click()

```

**Arguments**

- `test_id` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-locator#locator-get-by-test-id-option-test-id)

Id to locate the element by.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-locator#locator-get-by-test-id-return)

**Details**

By default, the `data-testid` attribute is used as a test id. Use [selectors.set\_test\_id\_attribute()](https://playwright.dev/python/docs/api/class-selectors#selectors-set-test-id-attribute) to configure a different test id attribute if necessary.

* * *

### get\_by\_text [​](https://playwright.dev/python/docs/api/class-locator\#locator-get-by-text "Direct link to get_by_text")

Added in: v1.27locator.get\_by\_text

Allows locating elements that contain given text.

See also [locator.filter()](https://playwright.dev/python/docs/api/class-locator#locator-filter) that allows to match by another criteria, like an accessible role, and then filter by the text content.

**Usage**

Consider the following DOM structure:

```codeBlockLines_e6Vv
<div>Hello <span>world</span></div>
<div>Hello</div>

```

You can locate by text substring, exact string, or a regular expression:

- Sync
- Async

```codeBlockLines_e6Vv
# Matches <span>
page.get_by_text("world")

# Matches first <div>
page.get_by_text("Hello world")

# Matches second <div>
page.get_by_text("Hello", exact=True)

# Matches both <div>s
page.get_by_text(re.compile("Hello"))

# Matches second <div>
page.get_by_text(re.compile("^hello$", re.IGNORECASE))

```

```codeBlockLines_e6Vv
# Matches <span>
page.get_by_text("world")

# Matches first <div>
page.get_by_text("Hello world")

# Matches second <div>
page.get_by_text("Hello", exact=True)

# Matches both <div>s
page.get_by_text(re.compile("Hello"))

# Matches second <div>
page.get_by_text(re.compile("^hello$", re.IGNORECASE))

```

**Arguments**

- `text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-locator#locator-get-by-text-option-text)

Text to locate the element for.

- `exact` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-get-by-text-option-exact)

Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-locator#locator-get-by-text-return)

**Details**

Matching by text always normalizes whitespace, even with exact match. For example, it turns multiple spaces into one, turns line breaks into spaces and ignores leading and trailing whitespace.

Input elements of the type `button` and `submit` are matched by their `value` instead of the text content. For example, locating by text `"Log in"` matches `<input type=button value="Log in">`.

* * *

### get\_by\_title [​](https://playwright.dev/python/docs/api/class-locator\#locator-get-by-title "Direct link to get_by_title")

Added in: v1.27locator.get\_by\_title

Allows locating elements by their title attribute.

**Usage**

Consider the following DOM structure.

```codeBlockLines_e6Vv
<span title='Issues count'>25 issues</span>

```

You can check the issues count after locating it by the title text:

- Sync
- Async

```codeBlockLines_e6Vv
expect(page.get_by_title("Issues count")).to_have_text("25 issues")

```

```codeBlockLines_e6Vv
await expect(page.get_by_title("Issues count")).to_have_text("25 issues")

```

**Arguments**

- `text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-locator#locator-get-by-title-option-text)

Text to locate the element for.

- `exact` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-get-by-title-option-exact)

Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-locator#locator-get-by-title-return)

* * *

### highlight [​](https://playwright.dev/python/docs/api/class-locator\#locator-highlight "Direct link to highlight")

Added in: v1.20locator.highlight

Highlight the corresponding element(s) on the screen. Useful for debugging, don't commit the code that uses [locator.highlight()](https://playwright.dev/python/docs/api/class-locator#locator-highlight).

**Usage**

```codeBlockLines_e6Vv
locator.highlight()

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locator#locator-highlight-return)

* * *

### hover [​](https://playwright.dev/python/docs/api/class-locator\#locator-hover "Direct link to hover")

Added in: v1.14locator.hover

Hover over the matching element.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_role("link").hover()

```

```codeBlockLines_e6Vv
await page.get_by_role("link").hover()

```

**Arguments**

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-hover-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `modifiers` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\["Alt" \| "Control" \| "ControlOrMeta" \| "Meta" \| "Shift"\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-hover-option-modifiers)

Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to "Control" on Windows and Linux and to "Meta" on macOS.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.28 [#](https://playwright.dev/python/docs/api/class-locator#locator-hover-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-hover-option-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-hover-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-hover-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it. Note that keyboard `modifiers` will be pressed regardless of `trial` to allow testing elements which are only visible when those keys are pressed.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locator#locator-hover-return)

**Details**

This method hovers over the element by performing the following steps:

1. Wait for [actionability](https://playwright.dev/python/docs/actionability) checks on the element, unless [force](https://playwright.dev/python/docs/api/class-locator#locator-hover-option-force) option is set.
2. Scroll the element into view if needed.
3. Use [page.mouse](https://playwright.dev/python/docs/api/class-page#page-mouse) to hover over the center of the element, or the specified [position](https://playwright.dev/python/docs/api/class-locator#locator-hover-option-position).

If the element is detached from the DOM at any moment during the action, this method throws.

When all steps combined have not finished during the specified [timeout](https://playwright.dev/python/docs/api/class-locator#locator-hover-option-timeout), this method throws a [TimeoutError](https://playwright.dev/python/docs/api/class-timeouterror "TimeoutError"). Passing zero timeout disables this.

* * *

### inner\_html [​](https://playwright.dev/python/docs/api/class-locator\#locator-inner-html "Direct link to inner_html")

Added in: v1.14locator.inner\_html

Returns the [`element.innerHTML`](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML).

**Usage**

```codeBlockLines_e6Vv
locator.inner_html()
locator.inner_html(**kwargs)

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-inner-html-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-locator#locator-inner-html-return)

* * *

### inner\_text [​](https://playwright.dev/python/docs/api/class-locator\#locator-inner-text "Direct link to inner_text")

Added in: v1.14locator.inner\_text

Returns the [`element.innerText`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText).

Asserting text

If you need to assert text on the page, prefer [expect(locator).to\_have\_text()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-text) with [use\_inner\_text](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-text-option-use-inner-text) option to avoid flakiness. See [assertions guide](https://playwright.dev/python/docs/test-assertions) for more details.

**Usage**

```codeBlockLines_e6Vv
locator.inner_text()
locator.inner_text(**kwargs)

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-inner-text-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-locator#locator-inner-text-return)

* * *

### input\_value [​](https://playwright.dev/python/docs/api/class-locator\#locator-input-value "Direct link to input_value")

Added in: v1.14locator.input\_value

Returns the value for the matching `<input>` or `<textarea>` or `<select>` element.

Asserting value

If you need to assert input value, prefer [expect(locator).to\_have\_value()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-value) to avoid flakiness. See [assertions guide](https://playwright.dev/python/docs/test-assertions) for more details.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
value = page.get_by_role("textbox").input_value()

```

```codeBlockLines_e6Vv
value = await page.get_by_role("textbox").input_value()

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-input-value-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-locator#locator-input-value-return)

**Details**

Throws elements that are not an input, textarea or a select. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), returns the value of the control.

* * *

### is\_checked [​](https://playwright.dev/python/docs/api/class-locator\#locator-is-checked "Direct link to is_checked")

Added in: v1.14locator.is\_checked

Returns whether the element is checked. Throws if the element is not a checkbox or radio input.

Asserting checked state

If you need to assert that checkbox is checked, prefer [expect(locator).to\_be\_checked()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-checked) to avoid flakiness. See [assertions guide](https://playwright.dev/python/docs/test-assertions) for more details.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
checked = page.get_by_role("checkbox").is_checked()

```

```codeBlockLines_e6Vv
checked = await page.get_by_role("checkbox").is_checked()

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-is-checked-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-locator#locator-is-checked-return)

* * *

### is\_disabled [​](https://playwright.dev/python/docs/api/class-locator\#locator-is-disabled "Direct link to is_disabled")

Added in: v1.14locator.is\_disabled

Returns whether the element is disabled, the opposite of [enabled](https://playwright.dev/python/docs/actionability#enabled).

Asserting disabled state

If you need to assert that an element is disabled, prefer [expect(locator).to\_be\_disabled()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-disabled) to avoid flakiness. See [assertions guide](https://playwright.dev/python/docs/test-assertions) for more details.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
disabled = page.get_by_role("button").is_disabled()

```

```codeBlockLines_e6Vv
disabled = await page.get_by_role("button").is_disabled()

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-is-disabled-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-locator#locator-is-disabled-return)

* * *

### is\_editable [​](https://playwright.dev/python/docs/api/class-locator\#locator-is-editable "Direct link to is_editable")

Added in: v1.14locator.is\_editable

Returns whether the element is [editable](https://playwright.dev/python/docs/actionability#editable). If the target element is not an `<input>`, `<textarea>`, `<select>`, `[contenteditable]` and does not have a role allowing `[aria-readonly]`, this method throws an error.

Asserting editable state

If you need to assert that an element is editable, prefer [expect(locator).to\_be\_editable()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-editable) to avoid flakiness. See [assertions guide](https://playwright.dev/python/docs/test-assertions) for more details.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
editable = page.get_by_role("textbox").is_editable()

```

```codeBlockLines_e6Vv
editable = await page.get_by_role("textbox").is_editable()

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-is-editable-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-locator#locator-is-editable-return)

* * *

### is\_enabled [​](https://playwright.dev/python/docs/api/class-locator\#locator-is-enabled "Direct link to is_enabled")

Added in: v1.14locator.is\_enabled

Returns whether the element is [enabled](https://playwright.dev/python/docs/actionability#enabled).

Asserting enabled state

If you need to assert that an element is enabled, prefer [expect(locator).to\_be\_enabled()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-enabled) to avoid flakiness. See [assertions guide](https://playwright.dev/python/docs/test-assertions) for more details.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
enabled = page.get_by_role("button").is_enabled()

```

```codeBlockLines_e6Vv
enabled = await page.get_by_role("button").is_enabled()

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-is-enabled-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-locator#locator-is-enabled-return)

* * *

### is\_hidden [​](https://playwright.dev/python/docs/api/class-locator\#locator-is-hidden "Direct link to is_hidden")

Added in: v1.14locator.is\_hidden

Returns whether the element is hidden, the opposite of [visible](https://playwright.dev/python/docs/actionability#visible).

Asserting visibility

If you need to assert that element is hidden, prefer [expect(locator).to\_be\_hidden()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-hidden) to avoid flakiness. See [assertions guide](https://playwright.dev/python/docs/test-assertions) for more details.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
hidden = page.get_by_role("button").is_hidden()

```

```codeBlockLines_e6Vv
hidden = await page.get_by_role("button").is_hidden()

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-is-hidden-option-timeout)



Deprecated





This option is ignored. [locator.is\_hidden()](https://playwright.dev/python/docs/api/class-locator#locator-is-hidden) does not wait for the element to become hidden and returns immediately.


**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-locator#locator-is-hidden-return)

* * *

### is\_visible [​](https://playwright.dev/python/docs/api/class-locator\#locator-is-visible "Direct link to is_visible")

Added in: v1.14locator.is\_visible

Returns whether the element is [visible](https://playwright.dev/python/docs/actionability#visible).

Asserting visibility

If you need to assert that element is visible, prefer [expect(locator).to\_be\_visible()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-visible) to avoid flakiness. See [assertions guide](https://playwright.dev/python/docs/test-assertions) for more details.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
visible = page.get_by_role("button").is_visible()

```

```codeBlockLines_e6Vv
visible = await page.get_by_role("button").is_visible()

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-is-visible-option-timeout)



Deprecated





This option is ignored. [locator.is\_visible()](https://playwright.dev/python/docs/api/class-locator#locator-is-visible) does not wait for the element to become visible and returns immediately.


**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-locator#locator-is-visible-return)

* * *

### locator [​](https://playwright.dev/python/docs/api/class-locator\#locator-locator "Direct link to locator")

Added in: v1.14locator.locator

The method finds an element matching the specified selector in the locator's subtree. It also accepts filter options, similar to [locator.filter()](https://playwright.dev/python/docs/api/class-locator#locator-filter) method.

[Learn more about locators](https://playwright.dev/python/docs/locators).

**Usage**

```codeBlockLines_e6Vv
locator.locator(selector_or_locator)
locator.locator(selector_or_locator, **kwargs)

```

**Arguments**

- `selector_or_locator` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-locator#locator-locator-option-selector-or-locator)

A selector or locator to use when resolving DOM element.

- `has` [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-locator-option-has)

Narrows down the results of the method to those which contain elements matching this relative locator. For example, `article` that has `text=Playwright` matches `<article><div>Playwright</div></article>`.

Inner locator **must be relative** to the outer locator and is queried starting with the outer locator match, not the document root. For example, you can find `content` that has `div` in `<article><content><div>Playwright</div></content></article>`. However, looking for `content` that has `article div` will fail, because the inner locator must be relative and should not use any elements outside the `content`.

Note that outer and inner locators must belong to the same frame. Inner locator must not contain [FrameLocator](https://playwright.dev/python/docs/api/class-framelocator "FrameLocator") s.

- `has_not` [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") _(optional)_ Added in: v1.33 [#](https://playwright.dev/python/docs/api/class-locator#locator-locator-option-has-not)

Matches elements that do not contain an element that matches an inner locator. Inner locator is queried against the outer one. For example, `article` that does not have `div` matches `<article><span>Playwright</span></article>`.

Note that outer and inner locators must belong to the same frame. Inner locator must not contain [FrameLocator](https://playwright.dev/python/docs/api/class-framelocator "FrameLocator") s.

- `has_not_text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") _(optional)_ Added in: v1.33 [#](https://playwright.dev/python/docs/api/class-locator#locator-locator-option-has-not-text)

Matches elements that do not contain specified text somewhere inside, possibly in a child or a descendant element. When passed a \[string\], matching is case-insensitive and searches for a substring.

- `has_text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-locator-option-has-text)

Matches elements containing specified text somewhere inside, possibly in a child or a descendant element. When passed a \[string\], matching is case-insensitive and searches for a substring. For example, `"Playwright"` matches `<article><div>Playwright</div></article>`.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-locator#locator-locator-return)

* * *

### nth [​](https://playwright.dev/python/docs/api/class-locator\#locator-nth "Direct link to nth")

Added in: v1.14locator.nth

Returns locator to the n-th matching element. It's zero based, `nth(0)` selects the first element.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
banana = page.get_by_role("listitem").nth(2)

```

```codeBlockLines_e6Vv
banana = await page.get_by_role("listitem").nth(2)

```

**Arguments**

- `index` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") [#](https://playwright.dev/python/docs/api/class-locator#locator-nth-option-index)

**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-locator#locator-nth-return)

* * *

### or\_ [​](https://playwright.dev/python/docs/api/class-locator\#locator-or "Direct link to or_")

Added in: v1.33locator.or\_

Creates a locator matching all elements that match one or both of the two locators.

Note that when both locators match something, the resulting locator will have multiple matches, potentially causing a [locator strictness](https://playwright.dev/python/docs/locators#strictness) violation.

**Usage**

Consider a scenario where you'd like to click on a "New email" button, but sometimes a security settings dialog shows up instead. In this case, you can wait for either a "New email" button, or a dialog and act accordingly.

note

If both "New email" button and security dialog appear on screen, the "or" locator will match both of them, possibly throwing the ["strict mode violation" error](https://playwright.dev/python/docs/locators#strictness). In this case, you can use [locator.first](https://playwright.dev/python/docs/api/class-locator#locator-first) to only match one of them.

- Sync
- Async

```codeBlockLines_e6Vv
new_email = page.get_by_role("button", name="New")
dialog = page.get_by_text("Confirm security settings")
expect(new_email.or_(dialog).first).to_be_visible()
if (dialog.is_visible()):
  page.get_by_role("button", name="Dismiss").click()
new_email.click()

```

```codeBlockLines_e6Vv
new_email = page.get_by_role("button", name="New")
dialog = page.get_by_text("Confirm security settings")
await expect(new_email.or_(dialog).first).to_be_visible()
if (await dialog.is_visible()):
  await page.get_by_role("button", name="Dismiss").click()
await new_email.click()

```

**Arguments**

- `locator` [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-locator#locator-or-option-locator)

Alternative locator to match.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-locator#locator-or-return)

* * *

### press [​](https://playwright.dev/python/docs/api/class-locator\#locator-press "Direct link to press")

Added in: v1.14locator.press

Focuses the matching element and presses a combination of the keys.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_role("textbox").press("Backspace")

```

```codeBlockLines_e6Vv
await page.get_by_role("textbox").press("Backspace")

```

**Arguments**

- `key` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-locator#locator-press-option-key)

Name of the key to press or a character to generate, such as `ArrowLeft` or `a`.

- `delay` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-press-option-delay)

Time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-press-option-no-wait-after)



Deprecated





This option will default to `true` in the future.





Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-press-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locator#locator-press-return)

**Details**

Focuses the element, and then uses [keyboard.down()](https://playwright.dev/python/docs/api/class-keyboard#keyboard-down) and [keyboard.up()](https://playwright.dev/python/docs/api/class-keyboard#keyboard-up).

[key](https://playwright.dev/python/docs/api/class-locator#locator-press-option-key) can specify the intended [keyboardEvent.key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) value or a single character to generate the text for. A superset of the [key](https://playwright.dev/python/docs/api/class-locator#locator-press-option-key) values can be found [here](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values). Examples of the keys are:

`F1` \- `F12`, `Digit0`\- `Digit9`, `KeyA`\- `KeyZ`, `Backquote`, `Minus`, `Equal`, `Backslash`, `Backspace`, `Tab`, `Delete`, `Escape`, `ArrowDown`, `End`, `Enter`, `Home`, `Insert`, `PageDown`, `PageUp`, `ArrowRight`, `ArrowUp`, etc.

Following modification shortcuts are also supported: `Shift`, `Control`, `Alt`, `Meta`, `ShiftLeft`, `ControlOrMeta`. `ControlOrMeta` resolves to `Control` on Windows and Linux and to `Meta` on macOS.

Holding down `Shift` will type the text that corresponds to the [key](https://playwright.dev/python/docs/api/class-locator#locator-press-option-key) in the upper case.

If [key](https://playwright.dev/python/docs/api/class-locator#locator-press-option-key) is a single character, it is case-sensitive, so the values `a` and `A` will generate different respective texts.

Shortcuts such as `key: "Control+o"`, `key: "Control++` or `key: "Control+Shift+T"` are supported as well. When specified with the modifier, modifier is pressed and being held while the subsequent key is being pressed.

* * *

### press\_sequentially [​](https://playwright.dev/python/docs/api/class-locator\#locator-press-sequentially "Direct link to press_sequentially")

Added in: v1.38locator.press\_sequentially

tip

In most cases, you should use [locator.fill()](https://playwright.dev/python/docs/api/class-locator#locator-fill) instead. You only need to press keys one by one if there is special keyboard handling on the page.

Focuses the element, and then sends a `keydown`, `keypress`/ `input`, and `keyup` event for each character in the text.

To press a special key, like `Control` or `ArrowDown`, use [locator.press()](https://playwright.dev/python/docs/api/class-locator#locator-press).

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
locator.press_sequentially("hello") # types instantly
locator.press_sequentially("world", delay=100) # types slower, like a user

```

```codeBlockLines_e6Vv
await locator.press_sequentially("hello") # types instantly
await locator.press_sequentially("world", delay=100) # types slower, like a user

```

An example of typing into a text field and then submitting the form:

- Sync
- Async

```codeBlockLines_e6Vv
locator = page.get_by_label("Password")
locator.press_sequentially("my password")
locator.press("Enter")

```

```codeBlockLines_e6Vv
locator = page.get_by_label("Password")
await locator.press_sequentially("my password")
await locator.press("Enter")

```

**Arguments**

- `text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-locator#locator-press-sequentially-option-text)

String of characters to sequentially press into a focused element.

- `delay` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-press-sequentially-option-delay)

Time to wait between key presses in milliseconds. Defaults to 0.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-press-sequentially-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-press-sequentially-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locator#locator-press-sequentially-return)

* * *

### screenshot [​](https://playwright.dev/python/docs/api/class-locator\#locator-screenshot "Direct link to screenshot")

Added in: v1.14locator.screenshot

Take a screenshot of the element matching the locator.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_role("link").screenshot()

```

```codeBlockLines_e6Vv
await page.get_by_role("link").screenshot()

```

Disable animations and save screenshot to a file:

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_role("link").screenshot(animations="disabled", path="link.png")

```

```codeBlockLines_e6Vv
await page.get_by_role("link").screenshot(animations="disabled", path="link.png")

```

**Arguments**

- `animations` "disabled" \| "allow" _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-screenshot-option-animations)

When set to `"disabled"`, stops CSS animations, CSS transitions and Web Animations. Animations get different treatment depending on their duration:


  - finite animations are fast-forwarded to completion, so they'll fire `transitionend` event.
  - infinite animations are canceled to initial state, and then played over after the screenshot.

Defaults to `"allow"` that leaves animations untouched.

- `caret` "hide" \| "initial" _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-screenshot-option-caret)

When set to `"hide"`, screenshot will hide text caret. When set to `"initial"`, text caret behavior will not be changed. Defaults to `"hide"`.

- `mask` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Locator](https://playwright.dev/python/docs/api/class-locator "Locator")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-screenshot-option-mask)

Specify locators that should be masked when the screenshot is taken. Masked elements will be overlaid with a pink box `#FF00FF` (customized by [mask\_color](https://playwright.dev/python/docs/api/class-locator#locator-screenshot-option-mask-color)) that completely covers its bounding box. The mask is also applied to invisible elements, see [Matching only visible elements](https://playwright.dev/python/docs/locators#matching-only-visible-elements) to disable that.

- `mask_color` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ Added in: v1.35 [#](https://playwright.dev/python/docs/api/class-locator#locator-screenshot-option-mask-color)

Specify the color of the overlay box for masked elements, in [CSS color format](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value). Default color is pink `#FF00FF`.

- `omit_background` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-screenshot-option-omit-background)

Hides default white background and allows capturing screenshots with transparency. Not applicable to `jpeg` images. Defaults to `false`.

- `path` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-screenshot-option-path)

The file path to save the image to. The screenshot type will be inferred from file extension. If [path](https://playwright.dev/python/docs/api/class-locator#locator-screenshot-option-path) is a relative path, then it is resolved relative to the current working directory. If no path is provided, the image won't be saved to the disk.

- `quality` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-screenshot-option-quality)

The quality of the image, between 0-100. Not applicable to `png` images.

- `scale` "css" \| "device" _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-screenshot-option-scale)

When set to `"css"`, screenshot will have a single pixel per each css pixel on the page. For high-dpi devices, this will keep screenshots small. Using `"device"` option will produce a single pixel per each device pixel, so screenshots of high-dpi devices will be twice as large or even larger.

Defaults to `"device"`.

- `style` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ Added in: v1.41 [#](https://playwright.dev/python/docs/api/class-locator#locator-screenshot-option-style)

Text of the stylesheet to apply while making the screenshot. This is where you can hide dynamic elements, make elements invisible or change their properties to help you creating repeatable screenshots. This stylesheet pierces the Shadow DOM and applies to the inner frames.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-screenshot-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `type` "png" \| "jpeg" _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-screenshot-option-type)

Specify screenshot type, defaults to `png`.


**Returns**

- [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") [#](https://playwright.dev/python/docs/api/class-locator#locator-screenshot-return)

**Details**

This method captures a screenshot of the page, clipped to the size and position of a particular element matching the locator. If the element is covered by other elements, it will not be actually visible on the screenshot. If the element is a scrollable container, only the currently scrolled content will be visible on the screenshot.

This method waits for the [actionability](https://playwright.dev/python/docs/actionability) checks, then scrolls element into view before taking a screenshot. If the element is detached from DOM, the method throws an error.

Returns the buffer with the captured screenshot.

* * *

### scroll\_into\_view\_if\_needed [​](https://playwright.dev/python/docs/api/class-locator\#locator-scroll-into-view-if-needed "Direct link to scroll_into_view_if_needed")

Added in: v1.14locator.scroll\_into\_view\_if\_needed

This method waits for [actionability](https://playwright.dev/python/docs/actionability) checks, then tries to scroll element into view, unless it is completely visible as defined by [IntersectionObserver](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API)'s `ratio`.

See [scrolling](https://playwright.dev/python/docs/input#scrolling) for alternative ways to scroll.

**Usage**

```codeBlockLines_e6Vv
locator.scroll_into_view_if_needed()
locator.scroll_into_view_if_needed(**kwargs)

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-scroll-into-view-if-needed-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locator#locator-scroll-into-view-if-needed-return)

* * *

### select\_option [​](https://playwright.dev/python/docs/api/class-locator\#locator-select-option "Direct link to select_option")

Added in: v1.14locator.select\_option

Selects option or options in `<select>`.

**Usage**

```codeBlockLines_e6Vv
<select multiple>
  <option value="red">Red</option>
  <option value="green">Green</option>
  <option value="blue">Blue</option>
</select>

```

- Sync
- Async

```codeBlockLines_e6Vv
# single selection matching the value or label
element.select_option("blue")
# single selection matching the label
element.select_option(label="blue")
# multiple selection for blue, red and second option
element.select_option(value=["red", "green", "blue"])

```

```codeBlockLines_e6Vv
# single selection matching the value or label
await element.select_option("blue")
# single selection matching the label
await element.select_option(label="blue")
# multiple selection for blue, red and second option
await element.select_option(value=["red", "green", "blue"])

```

**Arguments**

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-select-option-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-select-option-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-select-option-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `element` [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-select-option-option-element)

Option elements to select. Optional.

- `index` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-select-option-option-index)

Options to select by index. Optional.

- `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-select-option-option-value)

Options to select by value. If the `<select>` has the `multiple` attribute, all given options are selected, otherwise only the first option matching one of the passed options is selected. Optional.

- `label` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-select-option-option-label)

Options to select by label. If the `<select>` has the `multiple` attribute, all given options are selected, otherwise only the first option matching one of the passed options is selected. Optional.


**Returns**

- [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] [#](https://playwright.dev/python/docs/api/class-locator#locator-select-option-return)

**Details**

This method waits for [actionability](https://playwright.dev/python/docs/actionability) checks, waits until all specified options are present in the `<select>` element and selects these options.

If the target element is not a `<select>` element, this method throws an error. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be used instead.

Returns the array of option values that have been successfully selected.

Triggers a `change` and `input` event once all the provided options have been selected.

* * *

### select\_text [​](https://playwright.dev/python/docs/api/class-locator\#locator-select-text "Direct link to select_text")

Added in: v1.14locator.select\_text

This method waits for [actionability](https://playwright.dev/python/docs/actionability) checks, then focuses the element and selects all its text content.

If the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), focuses and selects text in the control instead.

**Usage**

```codeBlockLines_e6Vv
locator.select_text()
locator.select_text(**kwargs)

```

**Arguments**

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-select-text-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-select-text-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locator#locator-select-text-return)

* * *

### set\_checked [​](https://playwright.dev/python/docs/api/class-locator\#locator-set-checked "Direct link to set_checked")

Added in: v1.15locator.set\_checked

Set the state of a checkbox or a radio element.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_role("checkbox").set_checked(True)

```

```codeBlockLines_e6Vv
await page.get_by_role("checkbox").set_checked(True)

```

**Arguments**

- `checked` [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-locator#locator-set-checked-option-checked)

Whether to check or uncheck the checkbox.

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-set-checked-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-set-checked-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-set-checked-option-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-set-checked-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-set-checked-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locator#locator-set-checked-return)

**Details**

This method checks or unchecks an element by performing the following steps:

1. Ensure that matched element is a checkbox or a radio input. If not, this method throws.
2. If the element already has the right checked state, this method returns immediately.
3. Wait for [actionability](https://playwright.dev/python/docs/actionability) checks on the matched element, unless [force](https://playwright.dev/python/docs/api/class-locator#locator-set-checked-option-force) option is set. If the element is detached during the checks, the whole action is retried.
4. Scroll the element into view if needed.
5. Use [page.mouse](https://playwright.dev/python/docs/api/class-page#page-mouse) to click in the center of the element.
6. Ensure that the element is now checked or unchecked. If not, this method throws.

When all steps combined have not finished during the specified [timeout](https://playwright.dev/python/docs/api/class-locator#locator-set-checked-option-timeout), this method throws a [TimeoutError](https://playwright.dev/python/docs/api/class-timeouterror "TimeoutError"). Passing zero timeout disables this.

* * *

### set\_input\_files [​](https://playwright.dev/python/docs/api/class-locator\#locator-set-input-files "Direct link to set_input_files")

Added in: v1.14locator.set\_input\_files

Upload file or multiple files into `<input type=file>`. For inputs with a `[webkitdirectory]` attribute, only a single directory path is supported.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
# Select one file
page.get_by_label("Upload file").set_input_files('myfile.pdf')

# Select multiple files
page.get_by_label("Upload files").set_input_files(['file1.txt', 'file2.txt'])

# Select a directory
page.get_by_label("Upload directory").set_input_files('mydir')

# Remove all the selected files
page.get_by_label("Upload file").set_input_files([])

# Upload buffer from memory
page.get_by_label("Upload file").set_input_files(
    files=[\
        {"name": "test.txt", "mimeType": "text/plain", "buffer": b"this is a test"}\
    ],
)

```

```codeBlockLines_e6Vv
# Select one file
await page.get_by_label("Upload file").set_input_files('myfile.pdf')

# Select multiple files
await page.get_by_label("Upload files").set_input_files(['file1.txt', 'file2.txt'])

# Select a directory
await page.get_by_label("Upload directory").set_input_files('mydir')

# Remove all the selected files
await page.get_by_label("Upload file").set_input_files([])

# Upload buffer from memory
await page.get_by_label("Upload file").set_input_files(
    files=[\
        {"name": "test.txt", "mimeType": "text/plain", "buffer": b"this is a test"}\
    ],
)

```

**Arguments**

- `files` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\]\] \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\] [#](https://playwright.dev/python/docs/api/class-locator#locator-set-input-files-option-files)
  - `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    File name

  - `mimeType` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    File type

  - `buffer` [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes")

    File content
- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-set-input-files-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-set-input-files-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locator#locator-set-input-files-return)

**Details**

Sets the value of the file input to these file paths or files. If some of the `filePaths` are relative paths, then they are resolved relative to the current working directory. For empty array, clears the selected files.

This method expects [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") to point to an [input element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input). However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), targets the control instead.

* * *

### tap [​](https://playwright.dev/python/docs/api/class-locator\#locator-tap "Direct link to tap")

Added in: v1.14locator.tap

Perform a tap gesture on the element matching the locator. For examples of emulating other gestures by manually dispatching touch events, see the [emulating legacy touch events](https://playwright.dev/python/docs/touch-events) page.

**Usage**

```codeBlockLines_e6Vv
locator.tap()
locator.tap(**kwargs)

```

**Arguments**

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-tap-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `modifiers` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\["Alt" \| "Control" \| "ControlOrMeta" \| "Meta" \| "Shift"\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-tap-option-modifiers)

Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to "Control" on Windows and Linux and to "Meta" on macOS.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-tap-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-tap-option-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-tap-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-tap-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it. Note that keyboard `modifiers` will be pressed regardless of `trial` to allow testing elements which are only visible when those keys are pressed.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locator#locator-tap-return)

**Details**

This method taps the element by performing the following steps:

1. Wait for [actionability](https://playwright.dev/python/docs/actionability) checks on the element, unless [force](https://playwright.dev/python/docs/api/class-locator#locator-tap-option-force) option is set.
2. Scroll the element into view if needed.
3. Use [page.touchscreen](https://playwright.dev/python/docs/api/class-page#page-touchscreen) to tap the center of the element, or the specified [position](https://playwright.dev/python/docs/api/class-locator#locator-tap-option-position).

If the element is detached from the DOM at any moment during the action, this method throws.

When all steps combined have not finished during the specified [timeout](https://playwright.dev/python/docs/api/class-locator#locator-tap-option-timeout), this method throws a [TimeoutError](https://playwright.dev/python/docs/api/class-timeouterror "TimeoutError"). Passing zero timeout disables this.

note

`element.tap()` requires that the `hasTouch` option of the browser context be set to true.

* * *

### text\_content [​](https://playwright.dev/python/docs/api/class-locator\#locator-text-content "Direct link to text_content")

Added in: v1.14locator.text\_content

Returns the [`node.textContent`](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent).

Asserting text

If you need to assert text on the page, prefer [expect(locator).to\_have\_text()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-text) to avoid flakiness. See [assertions guide](https://playwright.dev/python/docs/test-assertions) for more details.

**Usage**

```codeBlockLines_e6Vv
locator.text_content()
locator.text_content(**kwargs)

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-text-content-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-locator#locator-text-content-return)

* * *

### uncheck [​](https://playwright.dev/python/docs/api/class-locator\#locator-uncheck "Direct link to uncheck")

Added in: v1.14locator.uncheck

Ensure that checkbox or radio element is unchecked.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_role("checkbox").uncheck()

```

```codeBlockLines_e6Vv
await page.get_by_role("checkbox").uncheck()

```

**Arguments**

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-uncheck-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-uncheck-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-uncheck-option-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-uncheck-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-uncheck-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locator#locator-uncheck-return)

**Details**

This method unchecks the element by performing the following steps:

1. Ensure that element is a checkbox or a radio input. If not, this method throws. If the element is already unchecked, this method returns immediately.
2. Wait for [actionability](https://playwright.dev/python/docs/actionability) checks on the element, unless [force](https://playwright.dev/python/docs/api/class-locator#locator-uncheck-option-force) option is set.
3. Scroll the element into view if needed.
4. Use [page.mouse](https://playwright.dev/python/docs/api/class-page#page-mouse) to click in the center of the element.
5. Ensure that the element is now unchecked. If not, this method throws.

If the element is detached from the DOM at any moment during the action, this method throws.

When all steps combined have not finished during the specified [timeout](https://playwright.dev/python/docs/api/class-locator#locator-uncheck-option-timeout), this method throws a [TimeoutError](https://playwright.dev/python/docs/api/class-timeouterror "TimeoutError"). Passing zero timeout disables this.

* * *

### wait\_for [​](https://playwright.dev/python/docs/api/class-locator\#locator-wait-for "Direct link to wait_for")

Added in: v1.16locator.wait\_for

Returns when element specified by locator satisfies the [state](https://playwright.dev/python/docs/api/class-locator#locator-wait-for-option-state) option.

If target element already satisfies the condition, the method returns immediately. Otherwise, waits for up to [timeout](https://playwright.dev/python/docs/api/class-locator#locator-wait-for-option-timeout) milliseconds until the condition is met.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
order_sent = page.locator("#order-sent")
order_sent.wait_for()

```

```codeBlockLines_e6Vv
order_sent = page.locator("#order-sent")
await order_sent.wait_for()

```

**Arguments**

- `state` "attached" \| "detached" \| "visible" \| "hidden" _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-wait-for-option-state)

Defaults to `'visible'`. Can be either:
  - `'attached'` \- wait for element to be present in DOM.
  - `'detached'` \- wait for element to not be present in DOM.
  - `'visible'` \- wait for element to have non-empty bounding box and no `visibility:hidden`. Note that element without any content or with `display:none` has an empty bounding box and is not considered visible.
  - `'hidden'` \- wait for element to be either detached from DOM, or have an empty bounding box or `visibility:hidden`. This is opposite to the `'visible'` option.
- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-wait-for-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locator#locator-wait-for-return)

* * *

## Properties [​](https://playwright.dev/python/docs/api/class-locator\#properties "Direct link to Properties")

### content\_frame [​](https://playwright.dev/python/docs/api/class-locator\#locator-content-frame "Direct link to content_frame")

Added in: v1.43locator.content\_frame

Returns a [FrameLocator](https://playwright.dev/python/docs/api/class-framelocator "FrameLocator") object pointing to the same `iframe` as this locator.

Useful when you have a [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") object obtained somewhere, and later on would like to interact with the content inside the frame.

For a reverse operation, use [frame\_locator.owner](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-owner).

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
locator = page.locator("iframe[name=\"embedded\"]")
# ...
frame_locator = locator.content_frame
frame_locator.get_by_role("button").click()

```

```codeBlockLines_e6Vv
locator = page.locator("iframe[name=\"embedded\"]")
# ...
frame_locator = locator.content_frame
await frame_locator.get_by_role("button").click()

```

**Returns**

- [FrameLocator](https://playwright.dev/python/docs/api/class-framelocator "FrameLocator") [#](https://playwright.dev/python/docs/api/class-locator#locator-content-frame-return)

* * *

### first [​](https://playwright.dev/python/docs/api/class-locator\#locator-first "Direct link to first")

Added in: v1.14locator.first

Returns locator to the first matching element.

**Usage**

```codeBlockLines_e6Vv
locator.first

```

**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-locator#locator-first-return)

* * *

### last [​](https://playwright.dev/python/docs/api/class-locator\#locator-last "Direct link to last")

Added in: v1.14locator.last

Returns locator to the last matching element.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
banana = page.get_by_role("listitem").last

```

```codeBlockLines_e6Vv
banana = await page.get_by_role("listitem").last

```

**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-locator#locator-last-return)

* * *

### page [​](https://playwright.dev/python/docs/api/class-locator\#locator-page "Direct link to page")

Added in: v1.19locator.page

A page this locator belongs to.

**Usage**

```codeBlockLines_e6Vv
locator.page

```

**Returns**

- [Page](https://playwright.dev/python/docs/api/class-page "Page") [#](https://playwright.dev/python/docs/api/class-locator#locator-page-return)

* * *

## Deprecated [​](https://playwright.dev/python/docs/api/class-locator\#deprecated "Direct link to Deprecated")

### element\_handle [​](https://playwright.dev/python/docs/api/class-locator\#locator-element-handle "Direct link to element_handle")

Added in: v1.14locator.element\_handle

Discouraged

Always prefer using [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") s and web assertions over [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") s because latter are inherently racy.

Resolves given locator to the first matching DOM element. If there are no matching elements, waits for one. If multiple elements match the locator, throws.

**Usage**

```codeBlockLines_e6Vv
locator.element_handle()
locator.element_handle(**kwargs)

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-element-handle-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") [#](https://playwright.dev/python/docs/api/class-locator#locator-element-handle-return)

* * *

### element\_handles [​](https://playwright.dev/python/docs/api/class-locator\#locator-element-handles "Direct link to element_handles")

Added in: v1.14locator.element\_handles

Discouraged

Always prefer using [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") s and web assertions over [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") s because latter are inherently racy.

Resolves given locator to all matching DOM elements. If there are no matching elements, returns an empty list.

**Usage**

```codeBlockLines_e6Vv
locator.element_handles()

```

**Returns**

- [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle")\] [#](https://playwright.dev/python/docs/api/class-locator#locator-element-handles-return)

* * *

### type [​](https://playwright.dev/python/docs/api/class-locator\#locator-type "Direct link to type")

Added in: v1.14locator.type

Deprecated

In most cases, you should use [locator.fill()](https://playwright.dev/python/docs/api/class-locator#locator-fill) instead. You only need to press keys one by one if there is special keyboard handling on the page - in this case use [locator.press\_sequentially()](https://playwright.dev/python/docs/api/class-locator#locator-press-sequentially).

Focuses the element, and then sends a `keydown`, `keypress`/ `input`, and `keyup` event for each character in the text.

To press a special key, like `Control` or `ArrowDown`, use [locator.press()](https://playwright.dev/python/docs/api/class-locator#locator-press).

**Usage**

**Arguments**

- `text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-locator#locator-type-option-text)

A text to type into a focused element.

- `delay` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-type-option-delay)

Time to wait between key presses in milliseconds. Defaults to 0.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-type-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-locator#locator-type-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-locator#locator-type-return)

- [Methods](https://playwright.dev/python/docs/api/class-locator#methods)
  - [all](https://playwright.dev/python/docs/api/class-locator#locator-all)
  - [all\_inner\_texts](https://playwright.dev/python/docs/api/class-locator#locator-all-inner-texts)
  - [all\_text\_contents](https://playwright.dev/python/docs/api/class-locator#locator-all-text-contents)
  - [and\_](https://playwright.dev/python/docs/api/class-locator#locator-and)
  - [aria\_snapshot](https://playwright.dev/python/docs/api/class-locator#locator-aria-snapshot)
  - [blur](https://playwright.dev/python/docs/api/class-locator#locator-blur)
  - [bounding\_box](https://playwright.dev/python/docs/api/class-locator#locator-bounding-box)
  - [check](https://playwright.dev/python/docs/api/class-locator#locator-check)
  - [clear](https://playwright.dev/python/docs/api/class-locator#locator-clear)
  - [click](https://playwright.dev/python/docs/api/class-locator#locator-click)
  - [count](https://playwright.dev/python/docs/api/class-locator#locator-count)
  - [dblclick](https://playwright.dev/python/docs/api/class-locator#locator-dblclick)
  - [dispatch\_event](https://playwright.dev/python/docs/api/class-locator#locator-dispatch-event)
  - [drag\_to](https://playwright.dev/python/docs/api/class-locator#locator-drag-to)
  - [evaluate](https://playwright.dev/python/docs/api/class-locator#locator-evaluate)
  - [evaluate\_all](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-all)
  - [evaluate\_handle](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-handle)
  - [fill](https://playwright.dev/python/docs/api/class-locator#locator-fill)
  - [filter](https://playwright.dev/python/docs/api/class-locator#locator-filter)
  - [focus](https://playwright.dev/python/docs/api/class-locator#locator-focus)
  - [frame\_locator](https://playwright.dev/python/docs/api/class-locator#locator-frame-locator)
  - [get\_attribute](https://playwright.dev/python/docs/api/class-locator#locator-get-attribute)
  - [get\_by\_alt\_text](https://playwright.dev/python/docs/api/class-locator#locator-get-by-alt-text)
  - [get\_by\_label](https://playwright.dev/python/docs/api/class-locator#locator-get-by-label)
  - [get\_by\_placeholder](https://playwright.dev/python/docs/api/class-locator#locator-get-by-placeholder)
  - [get\_by\_role](https://playwright.dev/python/docs/api/class-locator#locator-get-by-role)
  - [get\_by\_test\_id](https://playwright.dev/python/docs/api/class-locator#locator-get-by-test-id)
  - [get\_by\_text](https://playwright.dev/python/docs/api/class-locator#locator-get-by-text)
  - [get\_by\_title](https://playwright.dev/python/docs/api/class-locator#locator-get-by-title)
  - [highlight](https://playwright.dev/python/docs/api/class-locator#locator-highlight)
  - [hover](https://playwright.dev/python/docs/api/class-locator#locator-hover)
  - [inner\_html](https://playwright.dev/python/docs/api/class-locator#locator-inner-html)
  - [inner\_text](https://playwright.dev/python/docs/api/class-locator#locator-inner-text)
  - [input\_value](https://playwright.dev/python/docs/api/class-locator#locator-input-value)
  - [is\_checked](https://playwright.dev/python/docs/api/class-locator#locator-is-checked)
  - [is\_disabled](https://playwright.dev/python/docs/api/class-locator#locator-is-disabled)
  - [is\_editable](https://playwright.dev/python/docs/api/class-locator#locator-is-editable)
  - [is\_enabled](https://playwright.dev/python/docs/api/class-locator#locator-is-enabled)
  - [is\_hidden](https://playwright.dev/python/docs/api/class-locator#locator-is-hidden)
  - [is\_visible](https://playwright.dev/python/docs/api/class-locator#locator-is-visible)
  - [locator](https://playwright.dev/python/docs/api/class-locator#locator-locator)
  - [nth](https://playwright.dev/python/docs/api/class-locator#locator-nth)
  - [or\_](https://playwright.dev/python/docs/api/class-locator#locator-or)
  - [press](https://playwright.dev/python/docs/api/class-locator#locator-press)
  - [press\_sequentially](https://playwright.dev/python/docs/api/class-locator#locator-press-sequentially)
  - [screenshot](https://playwright.dev/python/docs/api/class-locator#locator-screenshot)
  - [scroll\_into\_view\_if\_needed](https://playwright.dev/python/docs/api/class-locator#locator-scroll-into-view-if-needed)
  - [select\_option](https://playwright.dev/python/docs/api/class-locator#locator-select-option)
  - [select\_text](https://playwright.dev/python/docs/api/class-locator#locator-select-text)
  - [set\_checked](https://playwright.dev/python/docs/api/class-locator#locator-set-checked)
  - [set\_input\_files](https://playwright.dev/python/docs/api/class-locator#locator-set-input-files)
  - [tap](https://playwright.dev/python/docs/api/class-locator#locator-tap)
  - [text\_content](https://playwright.dev/python/docs/api/class-locator#locator-text-content)
  - [uncheck](https://playwright.dev/python/docs/api/class-locator#locator-uncheck)
  - [wait\_for](https://playwright.dev/python/docs/api/class-locator#locator-wait-for)
- [Properties](https://playwright.dev/python/docs/api/class-locator#properties)
  - [content\_frame](https://playwright.dev/python/docs/api/class-locator#locator-content-frame)
  - [first](https://playwright.dev/python/docs/api/class-locator#locator-first)
  - [last](https://playwright.dev/python/docs/api/class-locator#locator-last)
  - [page](https://playwright.dev/python/docs/api/class-locator#locator-page)
- [Deprecated](https://playwright.dev/python/docs/api/class-locator#deprecated)
  - [element\_handle](https://playwright.dev/python/docs/api/class-locator#locator-element-handle)
  - [element\_handles](https://playwright.dev/python/docs/api/class-locator#locator-element-handles)
  - [type](https://playwright.dev/python/docs/api/class-locator#locator-type)

## TimeoutError in Playwright
[Skip to main content](https://playwright.dev/python/docs/api/class-timeouterror#__docusaurus_skipToContent_fallback)

- extends: [Error](https://playwright.dev/python/docs/api/class-error "Error")

TimeoutError is emitted whenever certain operations are terminated due to timeout, e.g. [locator.wait\_for()](https://playwright.dev/python/docs/api/class-locator#locator-wait-for) or [browser\_type.launch()](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch).

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright, TimeoutError as PlaywrightTimeoutError

with sync_playwright() as p:
    browser = p.chromium.launch()
    page = browser.new_page()
    try:
      page.locator("text=Example").click(timeout=100)
    except PlaywrightTimeoutError:
      print("Timeout!")
    browser.close()

```

```codeBlockLines_e6Vv
import asyncio
from playwright.async_api import async_playwright, TimeoutError as PlaywrightTimeoutError, Playwright

async def run(playwright: Playwright):
    browser = await playwright.chromium.launch()
    page = await browser.new_page()
    try:
      await page.locator("text=Example").click(timeout=100)
    except PlaywrightTimeoutError:
      print("Timeout!")
    await browser.close()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)

asyncio.run(main())

```

## Playwright Dialog Handling
[Skip to main content](https://playwright.dev/python/docs/api/class-dialog#__docusaurus_skipToContent_fallback)

On this page

[Dialog](https://playwright.dev/python/docs/api/class-dialog "Dialog") objects are dispatched by page via the [page.on("dialog")](https://playwright.dev/python/docs/api/class-page#page-event-dialog) event.

An example of using `Dialog` class:

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright, Playwright

def handle_dialog(dialog):
    print(dialog.message)
    dialog.dismiss()

def run(playwright: Playwright):
    chromium = playwright.chromium
    browser = chromium.launch()
    page = browser.new_page()
    page.on("dialog", handle_dialog)
    page.evaluate("alert('1')")
    browser.close()

with sync_playwright() as playwright:
    run(playwright)

```

```codeBlockLines_e6Vv
import asyncio
from playwright.async_api import async_playwright, Playwright

async def handle_dialog(dialog):
    print(dialog.message)
    await dialog.dismiss()

async def run(playwright: Playwright):
    chromium = playwright.chromium
    browser = await chromium.launch()
    page = await browser.new_page()
    page.on("dialog", handle_dialog)
    page.evaluate("alert('1')")
    await browser.close()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())

```

note

Dialogs are dismissed automatically, unless there is a [page.on("dialog")](https://playwright.dev/python/docs/api/class-page#page-event-dialog) listener. When listener is present, it **must** either [dialog.accept()](https://playwright.dev/python/docs/api/class-dialog#dialog-accept) or [dialog.dismiss()](https://playwright.dev/python/docs/api/class-dialog#dialog-dismiss) the dialog - otherwise the page will [freeze](https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#never_blocking) waiting for the dialog, and actions like click will never finish.

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-dialog\#methods "Direct link to Methods")

### accept [​](https://playwright.dev/python/docs/api/class-dialog\#dialog-accept "Direct link to accept")

Added before v1.9dialog.accept

Returns when the dialog has been accepted.

**Usage**

```codeBlockLines_e6Vv
dialog.accept()
dialog.accept(**kwargs)

```

**Arguments**

- `prompt_text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-dialog#dialog-accept-option-prompt-text)

A text to enter in prompt. Does not cause any effects if the dialog's `type` is not prompt. Optional.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-dialog#dialog-accept-return)

* * *

### dismiss [​](https://playwright.dev/python/docs/api/class-dialog\#dialog-dismiss "Direct link to dismiss")

Added before v1.9dialog.dismiss

Returns when the dialog has been dismissed.

**Usage**

```codeBlockLines_e6Vv
dialog.dismiss()

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-dialog#dialog-dismiss-return)

* * *

## Properties [​](https://playwright.dev/python/docs/api/class-dialog\#properties "Direct link to Properties")

### default\_value [​](https://playwright.dev/python/docs/api/class-dialog\#dialog-default-value "Direct link to default_value")

Added before v1.9dialog.default\_value

If dialog is prompt, returns default prompt value. Otherwise, returns empty string.

**Usage**

```codeBlockLines_e6Vv
dialog.default_value

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-dialog#dialog-default-value-return)

* * *

### message [​](https://playwright.dev/python/docs/api/class-dialog\#dialog-message "Direct link to message")

Added before v1.9dialog.message

A message displayed in the dialog.

**Usage**

```codeBlockLines_e6Vv
dialog.message

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-dialog#dialog-message-return)

* * *

### page [​](https://playwright.dev/python/docs/api/class-dialog\#dialog-page "Direct link to page")

Added in: v1.34dialog.page

The page that initiated this dialog, if available.

**Usage**

```codeBlockLines_e6Vv
dialog.page

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [Page](https://playwright.dev/python/docs/api/class-page "Page") [#](https://playwright.dev/python/docs/api/class-dialog#dialog-page-return)

* * *

### type [​](https://playwright.dev/python/docs/api/class-dialog\#dialog-type "Direct link to type")

Added before v1.9dialog.type

Returns dialog's type, can be one of `alert`, `beforeunload`, `confirm` or `prompt`.

**Usage**

```codeBlockLines_e6Vv
dialog.type

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-dialog#dialog-type-return)

- [Methods](https://playwright.dev/python/docs/api/class-dialog#methods)
  - [accept](https://playwright.dev/python/docs/api/class-dialog#dialog-accept)
  - [dismiss](https://playwright.dev/python/docs/api/class-dialog#dialog-dismiss)
- [Properties](https://playwright.dev/python/docs/api/class-dialog#properties)
  - [default\_value](https://playwright.dev/python/docs/api/class-dialog#dialog-default-value)
  - [message](https://playwright.dev/python/docs/api/class-dialog#dialog-message)
  - [page](https://playwright.dev/python/docs/api/class-dialog#dialog-page)
  - [type](https://playwright.dev/python/docs/api/class-dialog#dialog-type)

## FileChooser in Playwright
[Skip to main content](https://playwright.dev/python/docs/api/class-filechooser#__docusaurus_skipToContent_fallback)

On this page

[FileChooser](https://playwright.dev/python/docs/api/class-filechooser "FileChooser") objects are dispatched by the page in the [page.on("filechooser")](https://playwright.dev/python/docs/api/class-page#page-event-file-chooser) event.

- Sync
- Async

```codeBlockLines_e6Vv
with page.expect_file_chooser() as fc_info:
    page.get_by_text("Upload file").click()
file_chooser = fc_info.value
file_chooser.set_files("myfile.pdf")

```

```codeBlockLines_e6Vv
async with page.expect_file_chooser() as fc_info:
    await page.get_by_text("Upload file").click()
file_chooser = await fc_info.value
await file_chooser.set_files("myfile.pdf")

```

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-filechooser\#methods "Direct link to Methods")

### set\_files [​](https://playwright.dev/python/docs/api/class-filechooser\#file-chooser-set-files "Direct link to set_files")

Added before v1.9fileChooser.set\_files

Sets the value of the file input this chooser is associated with. If some of the `filePaths` are relative paths, then they are resolved relative to the current working directory. For empty array, clears the selected files.

**Usage**

```codeBlockLines_e6Vv
file_chooser.set_files(files)
file_chooser.set_files(files, **kwargs)

```

**Arguments**

- `files` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\]\] \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\] [#](https://playwright.dev/python/docs/api/class-filechooser#file-chooser-set-files-option-files)
  - `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    File name

  - `mimeType` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    File type

  - `buffer` [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes")

    File content
- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-filechooser#file-chooser-set-files-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-filechooser#file-chooser-set-files-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-filechooser#file-chooser-set-files-return)

* * *

## Properties [​](https://playwright.dev/python/docs/api/class-filechooser\#properties "Direct link to Properties")

### element [​](https://playwright.dev/python/docs/api/class-filechooser\#file-chooser-element "Direct link to element")

Added before v1.9fileChooser.element

Returns input element associated with this file chooser.

**Usage**

```codeBlockLines_e6Vv
file_chooser.element

```

**Returns**

- [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") [#](https://playwright.dev/python/docs/api/class-filechooser#file-chooser-element-return)

* * *

### is\_multiple [​](https://playwright.dev/python/docs/api/class-filechooser\#file-chooser-is-multiple "Direct link to is_multiple")

Added before v1.9fileChooser.is\_multiple

Returns whether this file chooser accepts multiple files.

**Usage**

```codeBlockLines_e6Vv
file_chooser.is_multiple()

```

**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-filechooser#file-chooser-is-multiple-return)

* * *

### page [​](https://playwright.dev/python/docs/api/class-filechooser\#file-chooser-page "Direct link to page")

Added before v1.9fileChooser.page

Returns page this file chooser belongs to.

**Usage**

```codeBlockLines_e6Vv
file_chooser.page

```

**Returns**

- [Page](https://playwright.dev/python/docs/api/class-page "Page") [#](https://playwright.dev/python/docs/api/class-filechooser#file-chooser-page-return)

- [Methods](https://playwright.dev/python/docs/api/class-filechooser#methods)
  - [set\_files](https://playwright.dev/python/docs/api/class-filechooser#file-chooser-set-files)
- [Properties](https://playwright.dev/python/docs/api/class-filechooser#properties)
  - [element](https://playwright.dev/python/docs/api/class-filechooser#file-chooser-element)
  - [is\_multiple](https://playwright.dev/python/docs/api/class-filechooser#file-chooser-is-multiple)
  - [page](https://playwright.dev/python/docs/api/class-filechooser#file-chooser-page)

## Playwright ConsoleMessage
[Skip to main content](https://playwright.dev/python/docs/api/class-consolemessage#__docusaurus_skipToContent_fallback)

On this page

[ConsoleMessage](https://playwright.dev/python/docs/api/class-consolemessage "ConsoleMessage") objects are dispatched by page via the [page.on("console")](https://playwright.dev/python/docs/api/class-page#page-event-console) event. For each console message logged in the page there will be corresponding event in the Playwright context.

- Sync
- Async

```codeBlockLines_e6Vv
# Listen for all console logs
page.on("console", lambda msg: print(msg.text))

# Listen for all console events and handle errors
page.on("console", lambda msg: print(f"error: {msg.text}") if msg.type == "error" else None)

# Get the next console log
with page.expect_console_message() as msg_info:
    # Issue console.log inside the page
    page.evaluate("console.log('hello', 42, { foo: 'bar' })")
msg = msg_info.value

# Deconstruct print arguments
msg.args[0].json_value() # hello
msg.args[1].json_value() # 42

```

```codeBlockLines_e6Vv
# Listen for all console logs
page.on("console", lambda msg: print(msg.text))

# Listen for all console events and handle errors
page.on("console", lambda msg: print(f"error: {msg.text}") if msg.type == "error" else None)

# Get the next console log
async with page.expect_console_message() as msg_info:
    # Issue console.log inside the page
    await page.evaluate("console.log('hello', 42, { foo: 'bar' })")
msg = await msg_info.value

# Deconstruct print arguments
await msg.args[0].json_value() # hello
await msg.args[1].json_value() # 42

```

* * *

## Properties [​](https://playwright.dev/python/docs/api/class-consolemessage\#properties "Direct link to Properties")

### args [​](https://playwright.dev/python/docs/api/class-consolemessage\#console-message-args "Direct link to args")

Added before v1.9consoleMessage.args

List of arguments passed to a `console` function call. See also [page.on("console")](https://playwright.dev/python/docs/api/class-page#page-event-console).

**Usage**

```codeBlockLines_e6Vv
console_message.args

```

**Returns**

- [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle")\] [#](https://playwright.dev/python/docs/api/class-consolemessage#console-message-args-return)

* * *

### location [​](https://playwright.dev/python/docs/api/class-consolemessage\#console-message-location "Direct link to location")

Added before v1.9consoleMessage.location

**Usage**

```codeBlockLines_e6Vv
console_message.location

```

**Returns**

- [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-consolemessage#console-message-location-return)
  - `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    URL of the resource.

  - `lineNumber` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

    0-based line number in the resource.

  - `columnNumber` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

    0-based column number in the resource.

* * *

### page [​](https://playwright.dev/python/docs/api/class-consolemessage\#console-message-page "Direct link to page")

Added in: v1.34consoleMessage.page

The page that produced this console message, if any.

**Usage**

```codeBlockLines_e6Vv
console_message.page

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [Page](https://playwright.dev/python/docs/api/class-page "Page") [#](https://playwright.dev/python/docs/api/class-consolemessage#console-message-page-return)

* * *

### text [​](https://playwright.dev/python/docs/api/class-consolemessage\#console-message-text "Direct link to text")

Added before v1.9consoleMessage.text

The text of the console message.

**Usage**

```codeBlockLines_e6Vv
console_message.text

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-consolemessage#console-message-text-return)

* * *

### type [​](https://playwright.dev/python/docs/api/class-consolemessage\#console-message-type "Direct link to type")

Added before v1.9consoleMessage.type

One of the following values: `'log'`, `'debug'`, `'info'`, `'error'`, `'warning'`, `'dir'`, `'dirxml'`, `'table'`, `'trace'`, `'clear'`, `'startGroup'`, `'startGroupCollapsed'`, `'endGroup'`, `'assert'`, `'profile'`, `'profileEnd'`, `'count'`, `'timeEnd'`.

**Usage**

```codeBlockLines_e6Vv
console_message.type

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-consolemessage#console-message-type-return)

- [Properties](https://playwright.dev/python/docs/api/class-consolemessage#properties)
  - [args](https://playwright.dev/python/docs/api/class-consolemessage#console-message-args)
  - [location](https://playwright.dev/python/docs/api/class-consolemessage#console-message-location)
  - [page](https://playwright.dev/python/docs/api/class-consolemessage#console-message-page)
  - [text](https://playwright.dev/python/docs/api/class-consolemessage#console-message-text)
  - [type](https://playwright.dev/python/docs/api/class-consolemessage#console-message-type)

## Playwright Python API
[Skip to main content](https://playwright.dev/python/docs/api/class-playwright#__docusaurus_skipToContent_fallback)

On this page

Playwright module provides a method to launch a browser instance. The following is a typical example of using Playwright to drive automation:

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    chromium = playwright.chromium # or "firefox" or "webkit".
    browser = chromium.launch()
    page = browser.new_page()
    page.goto("http://example.com")
    # other actions...
    browser.close()

with sync_playwright() as playwright:
    run(playwright)

```

```codeBlockLines_e6Vv
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    chromium = playwright.chromium # or "firefox" or "webkit".
    browser = await chromium.launch()
    page = await browser.new_page()
    await page.goto("http://example.com")
    # other actions...
    await browser.close()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())

```

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-playwright\#methods "Direct link to Methods")

### stop [​](https://playwright.dev/python/docs/api/class-playwright\#playwright-stop "Direct link to stop")

Added before v1.9playwright.stop

Terminates this instance of Playwright in case it was created bypassing the Python context manager. This is useful in REPL applications.

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright

playwright = sync_playwright().start()

browser = playwright.chromium.launch()
page = browser.new_page()
page.goto("https://playwright.dev/")
page.screenshot(path="example.png")
browser.close()

playwright.stop()

```

**Usage**

```codeBlockLines_e6Vv
playwright.stop()

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-playwright#playwright-stop-return)

* * *

## Properties [​](https://playwright.dev/python/docs/api/class-playwright\#properties "Direct link to Properties")

### chromium [​](https://playwright.dev/python/docs/api/class-playwright\#playwright-chromium "Direct link to chromium")

Added before v1.9playwright.chromium

This object can be used to launch or connect to Chromium, returning instances of [Browser](https://playwright.dev/python/docs/api/class-browser "Browser").

**Usage**

```codeBlockLines_e6Vv
playwright.chromium

```

**Type**

- [BrowserType](https://playwright.dev/python/docs/api/class-browsertype "BrowserType")

* * *

### devices [​](https://playwright.dev/python/docs/api/class-playwright\#playwright-devices "Direct link to devices")

Added before v1.9playwright.devices

Returns a dictionary of devices to be used with [browser.new\_context()](https://playwright.dev/python/docs/api/class-browser#browser-new-context) or [browser.new\_page()](https://playwright.dev/python/docs/api/class-browser#browser-new-page).

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    webkit = playwright.webkit
    iphone = playwright.devices["iPhone 6"]
    browser = webkit.launch()
    context = browser.new_context(**iphone)
    page = context.new_page()
    page.goto("http://example.com")
    # other actions...
    browser.close()

with sync_playwright() as playwright:
    run(playwright)

```

```codeBlockLines_e6Vv
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    webkit = playwright.webkit
    iphone = playwright.devices["iPhone 6"]
    browser = await webkit.launch()
    context = await browser.new_context(**iphone)
    page = await context.new_page()
    await page.goto("http://example.com")
    # other actions...
    await browser.close()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())

```

**Usage**

```codeBlockLines_e6Vv
playwright.devices

```

**Type**

- [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")

* * *

### firefox [​](https://playwright.dev/python/docs/api/class-playwright\#playwright-firefox "Direct link to firefox")

Added before v1.9playwright.firefox

This object can be used to launch or connect to Firefox, returning instances of [Browser](https://playwright.dev/python/docs/api/class-browser "Browser").

**Usage**

```codeBlockLines_e6Vv
playwright.firefox

```

**Type**

- [BrowserType](https://playwright.dev/python/docs/api/class-browsertype "BrowserType")

* * *

### request [​](https://playwright.dev/python/docs/api/class-playwright\#playwright-request "Direct link to request")

Added in: v1.16playwright.request

Exposes API that can be used for the Web API testing.

**Usage**

```codeBlockLines_e6Vv
playwright.request

```

**Type**

- [APIRequest](https://playwright.dev/python/docs/api/class-apirequest "APIRequest")

* * *

### selectors [​](https://playwright.dev/python/docs/api/class-playwright\#playwright-selectors "Direct link to selectors")

Added before v1.9playwright.selectors

Selectors can be used to install custom selector engines. See [extensibility](https://playwright.dev/python/docs/extensibility) for more information.

**Usage**

```codeBlockLines_e6Vv
playwright.selectors

```

**Type**

- [Selectors](https://playwright.dev/python/docs/api/class-selectors "Selectors")

* * *

### webkit [​](https://playwright.dev/python/docs/api/class-playwright\#playwright-webkit "Direct link to webkit")

Added before v1.9playwright.webkit

This object can be used to launch or connect to WebKit, returning instances of [Browser](https://playwright.dev/python/docs/api/class-browser "Browser").

**Usage**

```codeBlockLines_e6Vv
playwright.webkit

```

**Type**

- [BrowserType](https://playwright.dev/python/docs/api/class-browsertype "BrowserType")

- [Methods](https://playwright.dev/python/docs/api/class-playwright#methods)
  - [stop](https://playwright.dev/python/docs/api/class-playwright#playwright-stop)
- [Properties](https://playwright.dev/python/docs/api/class-playwright#properties)
  - [chromium](https://playwright.dev/python/docs/api/class-playwright#playwright-chromium)
  - [devices](https://playwright.dev/python/docs/api/class-playwright#playwright-devices)
  - [firefox](https://playwright.dev/python/docs/api/class-playwright#playwright-firefox)
  - [request](https://playwright.dev/python/docs/api/class-playwright#playwright-request)
  - [selectors](https://playwright.dev/python/docs/api/class-playwright#playwright-selectors)
  - [webkit](https://playwright.dev/python/docs/api/class-playwright#playwright-webkit)

## Worker Class Overview
[Skip to main content](https://playwright.dev/python/docs/api/class-worker#__docusaurus_skipToContent_fallback)

On this page

The Worker class represents a [WebWorker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API). `worker` event is emitted on the page object to signal a worker creation. `close` event is emitted on the worker object when the worker is gone.

```codeBlockLines_e6Vv
def handle_worker(worker):
    print("worker created: " + worker.url)
    worker.on("close", lambda: print("worker destroyed: " + worker.url))

page.on('worker', handle_worker)

print("current workers:")
for worker in page.workers:
    print("    " + worker.url)

```

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-worker\#methods "Direct link to Methods")

### evaluate [​](https://playwright.dev/python/docs/api/class-worker\#worker-evaluate "Direct link to evaluate")

Added before v1.9worker.evaluate

Returns the return value of [expression](https://playwright.dev/python/docs/api/class-worker#worker-evaluate-option-expression).

If the function passed to the [worker.evaluate()](https://playwright.dev/python/docs/api/class-worker#worker-evaluate) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then [worker.evaluate()](https://playwright.dev/python/docs/api/class-worker#worker-evaluate) would wait for the promise to resolve and return its value.

If the function passed to the [worker.evaluate()](https://playwright.dev/python/docs/api/class-worker#worker-evaluate) returns a non- [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable") value, then [worker.evaluate()](https://playwright.dev/python/docs/api/class-worker#worker-evaluate) returns `undefined`. Playwright also supports transferring some additional values that are not serializable by `JSON`: `-0`, `NaN`, `Infinity`, `-Infinity`.

**Usage**

```codeBlockLines_e6Vv
worker.evaluate(expression)
worker.evaluate(expression, **kwargs)

```

**Arguments**

- `expression` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-worker#worker-evaluate-option-expression)

JavaScript expression to be evaluated in the browser context. If the expression evaluates to a function, the function is automatically invoked.

- `arg` [EvaluationArgument](https://playwright.dev/python/docs/evaluating#evaluation-argument "EvaluationArgument") _(optional)_ [#](https://playwright.dev/python/docs/api/class-worker#worker-evaluate-option-arg)

Optional argument to pass to [expression](https://playwright.dev/python/docs/api/class-worker#worker-evaluate-option-expression).


**Returns**

- [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-worker#worker-evaluate-return)

* * *

### evaluate\_handle [​](https://playwright.dev/python/docs/api/class-worker\#worker-evaluate-handle "Direct link to evaluate_handle")

Added before v1.9worker.evaluate\_handle

Returns the return value of [expression](https://playwright.dev/python/docs/api/class-worker#worker-evaluate-handle-option-expression) as a [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle").

The only difference between [worker.evaluate()](https://playwright.dev/python/docs/api/class-worker#worker-evaluate) and [worker.evaluate\_handle()](https://playwright.dev/python/docs/api/class-worker#worker-evaluate-handle) is that [worker.evaluate\_handle()](https://playwright.dev/python/docs/api/class-worker#worker-evaluate-handle) returns [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle").

If the function passed to the [worker.evaluate\_handle()](https://playwright.dev/python/docs/api/class-worker#worker-evaluate-handle) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then [worker.evaluate\_handle()](https://playwright.dev/python/docs/api/class-worker#worker-evaluate-handle) would wait for the promise to resolve and return its value.

**Usage**

```codeBlockLines_e6Vv
worker.evaluate_handle(expression)
worker.evaluate_handle(expression, **kwargs)

```

**Arguments**

- `expression` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-worker#worker-evaluate-handle-option-expression)

JavaScript expression to be evaluated in the browser context. If the expression evaluates to a function, the function is automatically invoked.

- `arg` [EvaluationArgument](https://playwright.dev/python/docs/evaluating#evaluation-argument "EvaluationArgument") _(optional)_ [#](https://playwright.dev/python/docs/api/class-worker#worker-evaluate-handle-option-arg)

Optional argument to pass to [expression](https://playwright.dev/python/docs/api/class-worker#worker-evaluate-handle-option-expression).


**Returns**

- [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle") [#](https://playwright.dev/python/docs/api/class-worker#worker-evaluate-handle-return)

* * *

## Properties [​](https://playwright.dev/python/docs/api/class-worker\#properties "Direct link to Properties")

### url [​](https://playwright.dev/python/docs/api/class-worker\#worker-url "Direct link to url")

Added before v1.9worker.url

**Usage**

```codeBlockLines_e6Vv
worker.url

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-worker#worker-url-return)

* * *

## Events [​](https://playwright.dev/python/docs/api/class-worker\#events "Direct link to Events")

### on("close") [​](https://playwright.dev/python/docs/api/class-worker\#worker-event-close "Direct link to on(\"close\")")

Added before v1.9worker.on("close")

Emitted when this dedicated [WebWorker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) is terminated.

**Usage**

```codeBlockLines_e6Vv
worker.on("close", handler)

```

**Event data**

- [Worker](https://playwright.dev/python/docs/api/class-worker "Worker")

- [Methods](https://playwright.dev/python/docs/api/class-worker#methods)
  - [evaluate](https://playwright.dev/python/docs/api/class-worker#worker-evaluate)
  - [evaluate\_handle](https://playwright.dev/python/docs/api/class-worker#worker-evaluate-handle)
- [Properties](https://playwright.dev/python/docs/api/class-worker#properties)
  - [url](https://playwright.dev/python/docs/api/class-worker#worker-url)
- [Events](https://playwright.dev/python/docs/api/class-worker#events)
  - [on("close")](https://playwright.dev/python/docs/api/class-worker#worker-event-close)

## Playwright Browser API
[Skip to main content](https://playwright.dev/python/docs/api/class-browser#__docusaurus_skipToContent_fallback)

On this page

A Browser is created via [browser\_type.launch()](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch). An example of using a [Browser](https://playwright.dev/python/docs/api/class-browser "Browser") to create a [Page](https://playwright.dev/python/docs/api/class-page "Page"):

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    firefox = playwright.firefox
    browser = firefox.launch()
    page = browser.new_page()
    page.goto("https://example.com")
    browser.close()

with sync_playwright() as playwright:
    run(playwright)

```

```codeBlockLines_e6Vv
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    firefox = playwright.firefox
    browser = await firefox.launch()
    page = await browser.new_page()
    await page.goto("https://example.com")
    await browser.close()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())

```

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-browser\#methods "Direct link to Methods")

### close [​](https://playwright.dev/python/docs/api/class-browser\#browser-close "Direct link to close")

Added before v1.9browser.close

In case this browser is obtained using [browser\_type.launch()](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch), closes the browser and all of its pages (if any were opened).

In case this browser is connected to, clears all created contexts belonging to this browser and disconnects from the browser server.

note

This is similar to force-quitting the browser. To close pages gracefully and ensure you receive page close events, call [browser\_context.close()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-close) on any [BrowserContext](https://playwright.dev/python/docs/api/class-browsercontext "BrowserContext") instances you explicitly created earlier using [browser.new\_context()](https://playwright.dev/python/docs/api/class-browser#browser-new-context) **before** calling [browser.close()](https://playwright.dev/python/docs/api/class-browser#browser-close).

The [Browser](https://playwright.dev/python/docs/api/class-browser "Browser") object itself is considered to be disposed and cannot be used anymore.

**Usage**

```codeBlockLines_e6Vv
browser.close()
browser.close(**kwargs)

```

**Arguments**

- `reason` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ Added in: v1.40 [#](https://playwright.dev/python/docs/api/class-browser#browser-close-option-reason)

The reason to be reported to the operations interrupted by the browser closure.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-browser#browser-close-return)

* * *

### new\_browser\_cdp\_session [​](https://playwright.dev/python/docs/api/class-browser\#browser-new-browser-cdp-session "Direct link to new_browser_cdp_session")

Added in: v1.11browser.new\_browser\_cdp\_session

note

CDP Sessions are only supported on Chromium-based browsers.

Returns the newly created browser session.

**Usage**

```codeBlockLines_e6Vv
browser.new_browser_cdp_session()

```

**Returns**

- [CDPSession](https://playwright.dev/python/docs/api/class-cdpsession "CDPSession") [#](https://playwright.dev/python/docs/api/class-browser#browser-new-browser-cdp-session-return)

* * *

### new\_context [​](https://playwright.dev/python/docs/api/class-browser\#browser-new-context "Direct link to new_context")

Added before v1.9browser.new\_context

Creates a new browser context. It won't share cookies/cache with other browser contexts.

note

If directly using this method to create [BrowserContext](https://playwright.dev/python/docs/api/class-browsercontext "BrowserContext") s, it is best practice to explicitly close the returned context via [browser\_context.close()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-close) when your code is done with the [BrowserContext](https://playwright.dev/python/docs/api/class-browsercontext "BrowserContext"), and before calling [browser.close()](https://playwright.dev/python/docs/api/class-browser#browser-close). This will ensure the `context` is closed gracefully and any artifacts—like HARs and videos—are fully flushed and saved.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
browser = playwright.firefox.launch() # or "chromium" or "webkit".
# create a new incognito browser context.
context = browser.new_context()
# create a new page in a pristine context.
page = context.new_page()
page.goto("https://example.com")

# gracefully close up everything
context.close()
browser.close()

```

```codeBlockLines_e6Vv
browser = await playwright.firefox.launch() # or "chromium" or "webkit".
# create a new incognito browser context.
context = await browser.new_context()
# create a new page in a pristine context.
page = await context.new_page()
await page.goto("https://example.com")

# gracefully close up everything
await context.close()
await browser.close()

```

**Arguments**

- `accept_downloads` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-accept-downloads)

Whether to automatically download all the attachments. Defaults to `true` where all the downloads are accepted.

- `base_url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-base-url)

When using [page.goto()](https://playwright.dev/python/docs/api/class-page#page-goto), [page.route()](https://playwright.dev/python/docs/api/class-page#page-route), [page.wait\_for\_url()](https://playwright.dev/python/docs/api/class-page#page-wait-for-url), [page.expect\_request()](https://playwright.dev/python/docs/api/class-page#page-wait-for-request), or [page.expect\_response()](https://playwright.dev/python/docs/api/class-page#page-wait-for-response) it takes the base URL in consideration by using the [`URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor for building the corresponding URL. Unset by default. Examples:
  - baseURL: `http://localhost:3000` and navigating to `/bar.html` results in `http://localhost:3000/bar.html`
  - baseURL: `http://localhost:3000/foo/` and navigating to `./bar.html` results in `http://localhost:3000/foo/bar.html`
  - baseURL: `http://localhost:3000/foo` (without trailing slash) and navigating to `./bar.html` results in `http://localhost:3000/bar.html`
- `bypass_csp` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-bypass-csp)

Toggles bypassing page's Content-Security-Policy. Defaults to `false`.

- `client_certificates` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\] _(optional)_ Added in: 1.46 [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-client-certificates)


  - `origin` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    Exact origin that the certificate is valid for. Origin includes `https` protocol, a hostname and optionally a port.

  - `certPath` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_

    Path to the file with the certificate in PEM format.

  - `cert` [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") _(optional)_

    Direct value of the certificate in PEM format.

  - `keyPath` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_

    Path to the file with the private key in PEM format.

  - `key` [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") _(optional)_

    Direct value of the private key in PEM format.

  - `pfxPath` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_

    Path to the PFX or PKCS12 encoded private key and certificate chain.

  - `pfx` [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") _(optional)_

    Direct value of the PFX or PKCS12 encoded private key and certificate chain.

  - `passphrase` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_

    Passphrase for the private key (PEM or PFX).


TLS Client Authentication allows the server to request a client certificate and verify it.

**Details**

An array of client certificates to be used. Each certificate object must have either both `certPath` and `keyPath`, a single `pfxPath`, or their corresponding direct value equivalents ( `cert` and `key`, or `pfx`). Optionally, `passphrase` property should be provided if the certificate is encrypted. The `origin` property should be provided with an exact match to the request origin that the certificate is valid for.

note

When using WebKit on macOS, accessing `localhost` will not pick up client certificates. You can make it work by replacing `localhost` with `local.playwright`.

- `color_scheme` "light" \| "dark" \| "no-preference" \| "null" _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-color-scheme)

Emulates [prefers-colors-scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme) media feature, supported values are `'light'` and `'dark'`. See [page.emulate\_media()](https://playwright.dev/python/docs/api/class-page#page-emulate-media) for more details. Passing `'null'` resets emulation to system defaults. Defaults to `'light'`.

- `contrast` "no-preference" \| "more" \| "null" _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-contrast)

Emulates `'prefers-contrast'` media feature, supported values are `'no-preference'`, `'more'`. See [page.emulate\_media()](https://playwright.dev/python/docs/api/class-page#page-emulate-media) for more details. Passing `'null'` resets emulation to system defaults. Defaults to `'no-preference'`.

- `device_scale_factor` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-device-scale-factor)

Specify device scale factor (can be thought of as dpr). Defaults to `1`. Learn more about [emulating devices with device scale factor](https://playwright.dev/python/docs/emulation#devices).

- `extra_http_headers` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-extra-http-headers)

An object containing additional HTTP headers to be sent with every request. Defaults to none.

- `forced_colors` "active" \| "none" \| "null" _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-forced-colors)

Emulates `'forced-colors'` media feature, supported values are `'active'`, `'none'`. See [page.emulate\_media()](https://playwright.dev/python/docs/api/class-page#page-emulate-media) for more details. Passing `'null'` resets emulation to system defaults. Defaults to `'none'`.

- `geolocation` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-geolocation)
  - `latitude` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    Latitude between -90 and 90.

  - `longitude` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    Longitude between -180 and 180.

  - `accuracy` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_

    Non-negative accuracy value. Defaults to `0`.
- `has_touch` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-has-touch)

Specifies if viewport supports touch events. Defaults to false. Learn more about [mobile emulation](https://playwright.dev/python/docs/emulation#devices).

- `http_credentials` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-http-credentials)


  - `username` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

  - `password` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

  - `origin` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_

    Restrain sending http credentials on specific origin (scheme://host:port).

  - `send` "unauthorized" \| "always" _(optional)_

    This option only applies to the requests sent from corresponding [APIRequestContext](https://playwright.dev/python/docs/api/class-apirequestcontext "APIRequestContext") and does not affect requests sent from the browser. `'always'` \- `Authorization` header with basic authentication credentials will be sent with the each API request. `'unauthorized` \- the credentials are only sent when 401 (Unauthorized) response with `WWW-Authenticate` header is received. Defaults to `'unauthorized'`.


Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication). If no origin is specified, the username and password are sent to any servers upon unauthorized responses.

- `ignore_https_errors` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-ignore-https-errors)

Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.

- `is_mobile` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-is-mobile)

Whether the `meta viewport` tag is taken into account and touch events are enabled. isMobile is a part of device, so you don't actually need to set it manually. Defaults to `false` and is not supported in Firefox. Learn more about [mobile emulation](https://playwright.dev/python/docs/emulation#ismobile).

- `java_script_enabled` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-java-script-enabled)

Whether or not to enable JavaScript in the context. Defaults to `true`. Learn more about [disabling JavaScript](https://playwright.dev/python/docs/emulation#javascript-enabled).

- `locale` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-locale)

Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value, `Accept-Language` request header value as well as number and date formatting rules. Defaults to the system default locale. Learn more about emulation in our [emulation guide](https://playwright.dev/python/docs/emulation#locale--timezone).

- `no_viewport` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-no-viewport)

Does not enforce fixed viewport, allows resizing window in the headed mode.

- `offline` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-offline)

Whether to emulate network being offline. Defaults to `false`. Learn more about [network emulation](https://playwright.dev/python/docs/emulation#offline).

- `permissions` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-permissions)

A list of permissions to grant to all pages in this context. See [browser\_context.grant\_permissions()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-grant-permissions) for more details. Defaults to none.

- `proxy` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-proxy)


  - `server` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.

  - `bypass` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_

    Optional comma-separated domains to bypass proxy, for example `".com, chromium.org, .domain.com"`.

  - `username` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_

    Optional username to use if HTTP proxy requires authentication.

  - `password` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_

    Optional password to use if HTTP proxy requires authentication.


Network proxy settings to use with this context. Defaults to none.

- `record_har_content` "omit" \| "embed" \| "attach" _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-record-har-content)

Optional setting to control resource content management. If `omit` is specified, content is not persisted. If `attach` is specified, resources are persisted as separate files and all of these files are archived along with the HAR file. Defaults to `embed`, which stores content inline the HAR file as per HAR specification.

- `record_har_mode` "full" \| "minimal" _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-record-har-mode)

When set to `minimal`, only record information necessary for routing from HAR. This omits sizes, timing, page, cookies, security and other types of HAR information that are not used when replaying from HAR. Defaults to `full`.

- `record_har_omit_content` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-record-har-omit-content)

Optional setting to control whether to omit request content from the HAR. Defaults to `false`.

- `record_har_path` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-record-har-path)

Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into the specified HAR file on the filesystem. If not specified, the HAR is not recorded. Make sure to call [browser\_context.close()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-close) for the HAR to be saved.

- `record_har_url_filter` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-record-har-url-filter)

- `record_video_dir` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-record-video-dir)

Enables video recording for all pages into the specified directory. If not specified videos are not recorded. Make sure to call [browser\_context.close()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-close) for videos to be saved.

- `record_video_size` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-record-video-size)


  - `width` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

    Video frame width.

  - `height` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

    Video frame height.


Dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will be scaled down if necessary to fit the specified size.

- `reduced_motion` "reduce" \| "no-preference" \| "null" _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-reduced-motion)

Emulates `'prefers-reduced-motion'` media feature, supported values are `'reduce'`, `'no-preference'`. See [page.emulate\_media()](https://playwright.dev/python/docs/api/class-page#page-emulate-media) for more details. Passing `'null'` resets emulation to system defaults. Defaults to `'no-preference'`.

- `screen` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-screen)


  - `width` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

    page width in pixels.

  - `height` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

    page height in pixels.


Emulates consistent window screen size available inside web page via `window.screen`. Is only used when the [viewport](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-viewport) is set.

- `service_workers` "allow" \| "block" _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-service-workers)

Whether to allow sites to register Service workers. Defaults to `'allow'`.
  - `'allow'`: [Service Workers](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API) can be registered.
  - `'block'`: Playwright will block all registration of Service Workers.
- `storage_state` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-storage-state)


  - `cookies` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\]
    - `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    - `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    - `domain` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

      Domain and path are required. For the cookie to apply to all subdomains as well, prefix domain with a dot, like this: ".example.com"

    - `path` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

      Domain and path are required

    - `expires` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

      Unix time in seconds.

    - `httpOnly` [bool](https://docs.python.org/3/library/stdtypes.html "bool")

    - `secure` [bool](https://docs.python.org/3/library/stdtypes.html "bool")

    - `sameSite` "Strict" \| "Lax" \| "None"

      sameSite flagCookies to set for context
  - `origins` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\]
    - `origin` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    - `localStorage` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\]


      - `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

      - `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")


localStorage to set for context

Learn more about [storage state and auth](https://playwright.dev/python/docs/auth).

Populates context with given storage state. This option can be used to initialize context with logged-in information obtained via [browser\_context.storage\_state()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-storage-state).

- `strict_selectors` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-strict-selectors)

If set to true, enables strict selectors mode for this context. In the strict selectors mode all operations on selectors that imply single target DOM element will throw when more than one element matches the selector. This option does not affect any Locator APIs (Locators are always strict). Defaults to `false`. See [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") to learn more about the strict mode.

- `timezone_id` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-timezone-id)

Changes the timezone of the context. See [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1) for a list of supported timezone IDs. Defaults to the system timezone.

- `user_agent` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-user-agent)

Specific user agent to use in this context.

- `viewport` [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-viewport)


  - `width` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

    page width in pixels.

  - `height` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

    page height in pixels.


Sets a consistent viewport for each page. Defaults to an 1280x720 viewport. `no_viewport` disables the fixed viewport. Learn more about [viewport emulation](https://playwright.dev/python/docs/emulation#viewport).

**Returns**

- [BrowserContext](https://playwright.dev/python/docs/api/class-browsercontext "BrowserContext") [#](https://playwright.dev/python/docs/api/class-browser#browser-new-context-return)

* * *

### new\_page [​](https://playwright.dev/python/docs/api/class-browser\#browser-new-page "Direct link to new_page")

Added before v1.9browser.new\_page

Creates a new page in a new browser context. Closing this page will close the context as well.

This is a convenience API that should only be used for the single-page scenarios and short snippets. Production code and testing frameworks should explicitly create [browser.new\_context()](https://playwright.dev/python/docs/api/class-browser#browser-new-context) followed by the [browser\_context.new\_page()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-new-page) to control their exact life times.

**Usage**

```codeBlockLines_e6Vv
browser.new_page()
browser.new_page(**kwargs)

```

**Arguments**

- `accept_downloads` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-accept-downloads)

Whether to automatically download all the attachments. Defaults to `true` where all the downloads are accepted.

- `base_url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-base-url)

When using [page.goto()](https://playwright.dev/python/docs/api/class-page#page-goto), [page.route()](https://playwright.dev/python/docs/api/class-page#page-route), [page.wait\_for\_url()](https://playwright.dev/python/docs/api/class-page#page-wait-for-url), [page.expect\_request()](https://playwright.dev/python/docs/api/class-page#page-wait-for-request), or [page.expect\_response()](https://playwright.dev/python/docs/api/class-page#page-wait-for-response) it takes the base URL in consideration by using the [`URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor for building the corresponding URL. Unset by default. Examples:
  - baseURL: `http://localhost:3000` and navigating to `/bar.html` results in `http://localhost:3000/bar.html`
  - baseURL: `http://localhost:3000/foo/` and navigating to `./bar.html` results in `http://localhost:3000/foo/bar.html`
  - baseURL: `http://localhost:3000/foo` (without trailing slash) and navigating to `./bar.html` results in `http://localhost:3000/bar.html`
- `bypass_csp` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-bypass-csp)

Toggles bypassing page's Content-Security-Policy. Defaults to `false`.

- `client_certificates` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\] _(optional)_ Added in: 1.46 [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-client-certificates)


  - `origin` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    Exact origin that the certificate is valid for. Origin includes `https` protocol, a hostname and optionally a port.

  - `certPath` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_

    Path to the file with the certificate in PEM format.

  - `cert` [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") _(optional)_

    Direct value of the certificate in PEM format.

  - `keyPath` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_

    Path to the file with the private key in PEM format.

  - `key` [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") _(optional)_

    Direct value of the private key in PEM format.

  - `pfxPath` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_

    Path to the PFX or PKCS12 encoded private key and certificate chain.

  - `pfx` [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") _(optional)_

    Direct value of the PFX or PKCS12 encoded private key and certificate chain.

  - `passphrase` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_

    Passphrase for the private key (PEM or PFX).


TLS Client Authentication allows the server to request a client certificate and verify it.

**Details**

An array of client certificates to be used. Each certificate object must have either both `certPath` and `keyPath`, a single `pfxPath`, or their corresponding direct value equivalents ( `cert` and `key`, or `pfx`). Optionally, `passphrase` property should be provided if the certificate is encrypted. The `origin` property should be provided with an exact match to the request origin that the certificate is valid for.

note

When using WebKit on macOS, accessing `localhost` will not pick up client certificates. You can make it work by replacing `localhost` with `local.playwright`.

- `color_scheme` "light" \| "dark" \| "no-preference" \| "null" _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-color-scheme)

Emulates [prefers-colors-scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme) media feature, supported values are `'light'` and `'dark'`. See [page.emulate\_media()](https://playwright.dev/python/docs/api/class-page#page-emulate-media) for more details. Passing `'null'` resets emulation to system defaults. Defaults to `'light'`.

- `contrast` "no-preference" \| "more" \| "null" _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-contrast)

Emulates `'prefers-contrast'` media feature, supported values are `'no-preference'`, `'more'`. See [page.emulate\_media()](https://playwright.dev/python/docs/api/class-page#page-emulate-media) for more details. Passing `'null'` resets emulation to system defaults. Defaults to `'no-preference'`.

- `device_scale_factor` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-device-scale-factor)

Specify device scale factor (can be thought of as dpr). Defaults to `1`. Learn more about [emulating devices with device scale factor](https://playwright.dev/python/docs/emulation#devices).

- `extra_http_headers` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-extra-http-headers)

An object containing additional HTTP headers to be sent with every request. Defaults to none.

- `forced_colors` "active" \| "none" \| "null" _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-forced-colors)

Emulates `'forced-colors'` media feature, supported values are `'active'`, `'none'`. See [page.emulate\_media()](https://playwright.dev/python/docs/api/class-page#page-emulate-media) for more details. Passing `'null'` resets emulation to system defaults. Defaults to `'none'`.

- `geolocation` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-geolocation)
  - `latitude` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    Latitude between -90 and 90.

  - `longitude` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    Longitude between -180 and 180.

  - `accuracy` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_

    Non-negative accuracy value. Defaults to `0`.
- `has_touch` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-has-touch)

Specifies if viewport supports touch events. Defaults to false. Learn more about [mobile emulation](https://playwright.dev/python/docs/emulation#devices).

- `http_credentials` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-http-credentials)


  - `username` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

  - `password` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

  - `origin` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_

    Restrain sending http credentials on specific origin (scheme://host:port).

  - `send` "unauthorized" \| "always" _(optional)_

    This option only applies to the requests sent from corresponding [APIRequestContext](https://playwright.dev/python/docs/api/class-apirequestcontext "APIRequestContext") and does not affect requests sent from the browser. `'always'` \- `Authorization` header with basic authentication credentials will be sent with the each API request. `'unauthorized` \- the credentials are only sent when 401 (Unauthorized) response with `WWW-Authenticate` header is received. Defaults to `'unauthorized'`.


Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication). If no origin is specified, the username and password are sent to any servers upon unauthorized responses.

- `ignore_https_errors` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-ignore-https-errors)

Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.

- `is_mobile` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-is-mobile)

Whether the `meta viewport` tag is taken into account and touch events are enabled. isMobile is a part of device, so you don't actually need to set it manually. Defaults to `false` and is not supported in Firefox. Learn more about [mobile emulation](https://playwright.dev/python/docs/emulation#ismobile).

- `java_script_enabled` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-java-script-enabled)

Whether or not to enable JavaScript in the context. Defaults to `true`. Learn more about [disabling JavaScript](https://playwright.dev/python/docs/emulation#javascript-enabled).

- `locale` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-locale)

Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value, `Accept-Language` request header value as well as number and date formatting rules. Defaults to the system default locale. Learn more about emulation in our [emulation guide](https://playwright.dev/python/docs/emulation#locale--timezone).

- `no_viewport` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-no-viewport)

Does not enforce fixed viewport, allows resizing window in the headed mode.

- `offline` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-offline)

Whether to emulate network being offline. Defaults to `false`. Learn more about [network emulation](https://playwright.dev/python/docs/emulation#offline).

- `permissions` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-permissions)

A list of permissions to grant to all pages in this context. See [browser\_context.grant\_permissions()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-grant-permissions) for more details. Defaults to none.

- `proxy` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-proxy)


  - `server` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.

  - `bypass` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_

    Optional comma-separated domains to bypass proxy, for example `".com, chromium.org, .domain.com"`.

  - `username` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_

    Optional username to use if HTTP proxy requires authentication.

  - `password` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_

    Optional password to use if HTTP proxy requires authentication.


Network proxy settings to use with this context. Defaults to none.

- `record_har_content` "omit" \| "embed" \| "attach" _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-record-har-content)

Optional setting to control resource content management. If `omit` is specified, content is not persisted. If `attach` is specified, resources are persisted as separate files and all of these files are archived along with the HAR file. Defaults to `embed`, which stores content inline the HAR file as per HAR specification.

- `record_har_mode` "full" \| "minimal" _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-record-har-mode)

When set to `minimal`, only record information necessary for routing from HAR. This omits sizes, timing, page, cookies, security and other types of HAR information that are not used when replaying from HAR. Defaults to `full`.

- `record_har_omit_content` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-record-har-omit-content)

Optional setting to control whether to omit request content from the HAR. Defaults to `false`.

- `record_har_path` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-record-har-path)

Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into the specified HAR file on the filesystem. If not specified, the HAR is not recorded. Make sure to call [browser\_context.close()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-close) for the HAR to be saved.

- `record_har_url_filter` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-record-har-url-filter)

- `record_video_dir` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-record-video-dir)

Enables video recording for all pages into the specified directory. If not specified videos are not recorded. Make sure to call [browser\_context.close()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-close) for videos to be saved.

- `record_video_size` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-record-video-size)


  - `width` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

    Video frame width.

  - `height` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

    Video frame height.


Dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will be scaled down if necessary to fit the specified size.

- `reduced_motion` "reduce" \| "no-preference" \| "null" _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-reduced-motion)

Emulates `'prefers-reduced-motion'` media feature, supported values are `'reduce'`, `'no-preference'`. See [page.emulate\_media()](https://playwright.dev/python/docs/api/class-page#page-emulate-media) for more details. Passing `'null'` resets emulation to system defaults. Defaults to `'no-preference'`.

- `screen` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-screen)


  - `width` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

    page width in pixels.

  - `height` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

    page height in pixels.


Emulates consistent window screen size available inside web page via `window.screen`. Is only used when the [viewport](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-viewport) is set.

- `service_workers` "allow" \| "block" _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-service-workers)

Whether to allow sites to register Service workers. Defaults to `'allow'`.
  - `'allow'`: [Service Workers](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API) can be registered.
  - `'block'`: Playwright will block all registration of Service Workers.
- `storage_state` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-storage-state)


  - `cookies` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\]
    - `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    - `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    - `domain` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

      Domain and path are required. For the cookie to apply to all subdomains as well, prefix domain with a dot, like this: ".example.com"

    - `path` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

      Domain and path are required

    - `expires` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

      Unix time in seconds.

    - `httpOnly` [bool](https://docs.python.org/3/library/stdtypes.html "bool")

    - `secure` [bool](https://docs.python.org/3/library/stdtypes.html "bool")

    - `sameSite` "Strict" \| "Lax" \| "None"

      sameSite flagCookies to set for context
  - `origins` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\]
    - `origin` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    - `localStorage` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\]


      - `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

      - `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")


localStorage to set for context

Learn more about [storage state and auth](https://playwright.dev/python/docs/auth).

Populates context with given storage state. This option can be used to initialize context with logged-in information obtained via [browser\_context.storage\_state()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-storage-state).

- `strict_selectors` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-strict-selectors)

If set to true, enables strict selectors mode for this context. In the strict selectors mode all operations on selectors that imply single target DOM element will throw when more than one element matches the selector. This option does not affect any Locator APIs (Locators are always strict). Defaults to `false`. See [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") to learn more about the strict mode.

- `timezone_id` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-timezone-id)

Changes the timezone of the context. See [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1) for a list of supported timezone IDs. Defaults to the system timezone.

- `user_agent` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-user-agent)

Specific user agent to use in this context.

- `viewport` [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-option-viewport)


  - `width` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

    page width in pixels.

  - `height` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

    page height in pixels.


Sets a consistent viewport for each page. Defaults to an 1280x720 viewport. `no_viewport` disables the fixed viewport. Learn more about [viewport emulation](https://playwright.dev/python/docs/emulation#viewport).

**Returns**

- [Page](https://playwright.dev/python/docs/api/class-page "Page") [#](https://playwright.dev/python/docs/api/class-browser#browser-new-page-return)

* * *

### start\_tracing [​](https://playwright.dev/python/docs/api/class-browser\#browser-start-tracing "Direct link to start_tracing")

Added in: v1.11browser.start\_tracing

note

This API controls [Chromium Tracing](https://www.chromium.org/developers/how-tos/trace-event-profiling-tool) which is a low-level chromium-specific debugging tool. API to control [Playwright Tracing](https://playwright.dev/python/docs/trace-viewer) could be found [here](https://playwright.dev/python/docs/api/class-tracing).

You can use [browser.start\_tracing()](https://playwright.dev/python/docs/api/class-browser#browser-start-tracing) and [browser.stop\_tracing()](https://playwright.dev/python/docs/api/class-browser#browser-stop-tracing) to create a trace file that can be opened in Chrome DevTools performance panel.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
browser.start_tracing(page, path="trace.json")
page.goto("https://www.google.com")
browser.stop_tracing()

```

```codeBlockLines_e6Vv
await browser.start_tracing(page, path="trace.json")
await page.goto("https://www.google.com")
await browser.stop_tracing()

```

**Arguments**

- `page` [Page](https://playwright.dev/python/docs/api/class-page "Page") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-start-tracing-option-page)

Optional, if specified, tracing includes screenshots of the given page.

- `categories` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-start-tracing-option-categories)

specify custom categories to use instead of default.

- `path` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-start-tracing-option-path)

A path to write the trace file to.

- `screenshots` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browser#browser-start-tracing-option-screenshots)

captures screenshots in the trace.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-browser#browser-start-tracing-return)

* * *

### stop\_tracing [​](https://playwright.dev/python/docs/api/class-browser\#browser-stop-tracing "Direct link to stop_tracing")

Added in: v1.11browser.stop\_tracing

note

This API controls [Chromium Tracing](https://www.chromium.org/developers/how-tos/trace-event-profiling-tool) which is a low-level chromium-specific debugging tool. API to control [Playwright Tracing](https://playwright.dev/python/docs/trace-viewer) could be found [here](https://playwright.dev/python/docs/api/class-tracing).

Returns the buffer with trace data.

**Usage**

```codeBlockLines_e6Vv
browser.stop_tracing()

```

**Returns**

- [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") [#](https://playwright.dev/python/docs/api/class-browser#browser-stop-tracing-return)

* * *

## Properties [​](https://playwright.dev/python/docs/api/class-browser\#properties "Direct link to Properties")

### browser\_type [​](https://playwright.dev/python/docs/api/class-browser\#browser-browser-type "Direct link to browser_type")

Added in: v1.23browser.browser\_type

Get the browser type (chromium, firefox or webkit) that the browser belongs to.

**Usage**

```codeBlockLines_e6Vv
browser.browser_type

```

**Returns**

- [BrowserType](https://playwright.dev/python/docs/api/class-browsertype "BrowserType") [#](https://playwright.dev/python/docs/api/class-browser#browser-browser-type-return)

* * *

### contexts [​](https://playwright.dev/python/docs/api/class-browser\#browser-contexts "Direct link to contexts")

Added before v1.9browser.contexts

Returns an array of all open browser contexts. In a newly created browser, this will return zero browser contexts.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
browser = pw.webkit.launch()
print(len(browser.contexts)) # prints `0`
context = browser.new_context()
print(len(browser.contexts)) # prints `1`

```

```codeBlockLines_e6Vv
browser = await pw.webkit.launch()
print(len(browser.contexts)) # prints `0`
context = await browser.new_context()
print(len(browser.contexts)) # prints `1`

```

**Returns**

- [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [BrowserContext](https://playwright.dev/python/docs/api/class-browsercontext "BrowserContext")\] [#](https://playwright.dev/python/docs/api/class-browser#browser-contexts-return)

* * *

### is\_connected [​](https://playwright.dev/python/docs/api/class-browser\#browser-is-connected "Direct link to is_connected")

Added before v1.9browser.is\_connected

Indicates that the browser is connected.

**Usage**

```codeBlockLines_e6Vv
browser.is_connected()

```

**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-browser#browser-is-connected-return)

* * *

### version [​](https://playwright.dev/python/docs/api/class-browser\#browser-version "Direct link to version")

Added before v1.9browser.version

Returns the browser version.

**Usage**

```codeBlockLines_e6Vv
browser.version

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-browser#browser-version-return)

* * *

## Events [​](https://playwright.dev/python/docs/api/class-browser\#events "Direct link to Events")

### on("disconnected") [​](https://playwright.dev/python/docs/api/class-browser\#browser-event-disconnected "Direct link to on(\"disconnected\")")

Added before v1.9browser.on("disconnected")

Emitted when Browser gets disconnected from the browser application. This might happen because of one of the following:

- Browser application is closed or crashed.
- The [browser.close()](https://playwright.dev/python/docs/api/class-browser#browser-close) method was called.

**Usage**

```codeBlockLines_e6Vv
browser.on("disconnected", handler)

```

**Event data**

- [Browser](https://playwright.dev/python/docs/api/class-browser "Browser")

- [Methods](https://playwright.dev/python/docs/api/class-browser#methods)
  - [close](https://playwright.dev/python/docs/api/class-browser#browser-close)
  - [new\_browser\_cdp\_session](https://playwright.dev/python/docs/api/class-browser#browser-new-browser-cdp-session)
  - [new\_context](https://playwright.dev/python/docs/api/class-browser#browser-new-context)
  - [new\_page](https://playwright.dev/python/docs/api/class-browser#browser-new-page)
  - [start\_tracing](https://playwright.dev/python/docs/api/class-browser#browser-start-tracing)
  - [stop\_tracing](https://playwright.dev/python/docs/api/class-browser#browser-stop-tracing)
- [Properties](https://playwright.dev/python/docs/api/class-browser#properties)
  - [browser\_type](https://playwright.dev/python/docs/api/class-browser#browser-browser-type)
  - [contexts](https://playwright.dev/python/docs/api/class-browser#browser-contexts)
  - [is\_connected](https://playwright.dev/python/docs/api/class-browser#browser-is-connected)
  - [version](https://playwright.dev/python/docs/api/class-browser#browser-version)
- [Events](https://playwright.dev/python/docs/api/class-browser#events)
  - [on("disconnected")](https://playwright.dev/python/docs/api/class-browser#browser-event-disconnected)

## Playwright Accessibility Class
[Skip to main content](https://playwright.dev/python/docs/api/class-accessibility#__docusaurus_skipToContent_fallback)

On this page

The Accessibility class provides methods for inspecting Chromium's accessibility tree. The accessibility tree is used by assistive technology such as [screen readers](https://en.wikipedia.org/wiki/Screen_reader) or [switches](https://en.wikipedia.org/wiki/Switch_access).

Accessibility is a very platform-specific thing. On different platforms, there are different screen readers that might have wildly different output.

Rendering engines of Chromium, Firefox and WebKit have a concept of "accessibility tree", which is then translated into different platform-specific APIs. Accessibility namespace gives access to this Accessibility Tree.

Most of the accessibility tree gets filtered out when converting from internal browser AX Tree to Platform-specific AX-Tree or by assistive technologies themselves. By default, Playwright tries to approximate this filtering, exposing only the "interesting" nodes of the tree.

* * *

## Deprecated [​](https://playwright.dev/python/docs/api/class-accessibility\#deprecated "Direct link to Deprecated")

### snapshot [​](https://playwright.dev/python/docs/api/class-accessibility\#accessibility-snapshot "Direct link to snapshot")

Added before v1.9accessibility.snapshot

Deprecated

This method is deprecated. Please use other libraries such as [Axe](https://www.deque.com/axe/) if you need to test page accessibility. See our Node.js [guide](https://playwright.dev/docs/accessibility-testing) for integration with Axe.

Captures the current state of the accessibility tree. The returned object represents the root accessible node of the page.

note

The Chromium accessibility tree contains nodes that go unused on most platforms and by most screen readers. Playwright will discard them as well for an easier to process tree, unless [interesting\_only](https://playwright.dev/python/docs/api/class-accessibility#accessibility-snapshot-option-interesting-only) is set to `false`.

**Usage**

An example of dumping the entire accessibility tree:

- Sync
- Async

```codeBlockLines_e6Vv
snapshot = page.accessibility.snapshot()
print(snapshot)

```

```codeBlockLines_e6Vv
snapshot = await page.accessibility.snapshot()
print(snapshot)

```

An example of logging the focused node's name:

- Sync
- Async

```codeBlockLines_e6Vv
def find_focused_node(node):
    if node.get("focused"):
        return node
    for child in (node.get("children") or []):
        found_node = find_focused_node(child)
        if found_node:
            return found_node
    return None

snapshot = page.accessibility.snapshot()
node = find_focused_node(snapshot)
if node:
    print(node["name"])

```

```codeBlockLines_e6Vv
def find_focused_node(node):
    if node.get("focused"):
        return node
    for child in (node.get("children") or []):
        found_node = find_focused_node(child)
        if found_node:
            return found_node
    return None

snapshot = await page.accessibility.snapshot()
node = find_focused_node(snapshot)
if node:
    print(node["name"])

```

**Arguments**

- `interesting_only` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-accessibility#accessibility-snapshot-option-interesting-only)

Prune uninteresting nodes from the tree. Defaults to `true`.

- `root` [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") _(optional)_ [#](https://playwright.dev/python/docs/api/class-accessibility#accessibility-snapshot-option-root)

The root DOM element for the snapshot. Defaults to the whole page.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-accessibility#accessibility-snapshot-return)
  - `role` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    The [role](https://www.w3.org/TR/wai-aria/#usage_intro).

  - `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    A human readable name for the node.

  - `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    The current value of the node, if applicable.

  - `description` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    An additional human readable description of the node, if applicable.

  - `keyshortcuts` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    Keyboard shortcuts associated with this node, if applicable.

  - `roledescription` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    A human readable alternative to the role, if applicable.

  - `valuetext` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    A description of the current value, if applicable.

  - `disabled` [bool](https://docs.python.org/3/library/stdtypes.html "bool")

    Whether the node is disabled, if applicable.

  - `expanded` [bool](https://docs.python.org/3/library/stdtypes.html "bool")

    Whether the node is expanded or collapsed, if applicable.

  - `focused` [bool](https://docs.python.org/3/library/stdtypes.html "bool")

    Whether the node is focused, if applicable.

  - `modal` [bool](https://docs.python.org/3/library/stdtypes.html "bool")

    Whether the node is [modal](https://en.wikipedia.org/wiki/Modal_window), if applicable.

  - `multiline` [bool](https://docs.python.org/3/library/stdtypes.html "bool")

    Whether the node text input supports multiline, if applicable.

  - `multiselectable` [bool](https://docs.python.org/3/library/stdtypes.html "bool")

    Whether more than one child can be selected, if applicable.

  - `readonly` [bool](https://docs.python.org/3/library/stdtypes.html "bool")

    Whether the node is read only, if applicable.

  - `required` [bool](https://docs.python.org/3/library/stdtypes.html "bool")

    Whether the node is required, if applicable.

  - `selected` [bool](https://docs.python.org/3/library/stdtypes.html "bool")

    Whether the node is selected in its parent node, if applicable.

  - `checked` [bool](https://docs.python.org/3/library/stdtypes.html "bool") \| "mixed"

    Whether the checkbox is checked, or "mixed", if applicable.

  - `pressed` [bool](https://docs.python.org/3/library/stdtypes.html "bool") \| "mixed"

    Whether the toggle button is checked, or "mixed", if applicable.

  - `level` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

    The level of a heading, if applicable.

  - `valuemin` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    The minimum value in a node, if applicable.

  - `valuemax` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    The maximum value in a node, if applicable.

  - `autocomplete` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    What kind of autocomplete is supported by a control, if applicable.

  - `haspopup` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    What kind of popup is currently being shown for a node, if applicable.

  - `invalid` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    Whether and in what way this node's value is invalid, if applicable.

  - `orientation` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    Whether the node is oriented horizontally or vertically, if applicable.

  - `children` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\]

    Child nodes, if any, if applicable.

- [Deprecated](https://playwright.dev/python/docs/api/class-accessibility#deprecated)
  - [snapshot](https://playwright.dev/python/docs/api/class-accessibility#accessibility-snapshot)

## Playwright Video API
[Skip to main content](https://playwright.dev/python/docs/api/class-video#__docusaurus_skipToContent_fallback)

On this page

When browser context is created with the `recordVideo` option, each page has a video object associated with it.

- Sync
- Async

```codeBlockLines_e6Vv
print(page.video.path())

```

```codeBlockLines_e6Vv
print(await page.video.path())

```

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-video\#methods "Direct link to Methods")

### delete [​](https://playwright.dev/python/docs/api/class-video\#video-delete "Direct link to delete")

Added in: v1.11video.delete

Deletes the video file. Will wait for the video to finish if necessary.

**Usage**

```codeBlockLines_e6Vv
video.delete()

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-video#video-delete-return)

* * *

### path [​](https://playwright.dev/python/docs/api/class-video\#video-path "Direct link to path")

Added before v1.9video.path

Returns the file system path this video will be recorded to. The video is guaranteed to be written to the filesystem upon closing the browser context. This method throws when connected remotely.

**Usage**

```codeBlockLines_e6Vv
video.path()

```

**Returns**

- [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path") [#](https://playwright.dev/python/docs/api/class-video#video-path-return)

* * *

### save\_as [​](https://playwright.dev/python/docs/api/class-video\#video-save-as "Direct link to save_as")

Added in: v1.11video.save\_as

Saves the video to a user-specified path. It is safe to call this method while the video is still in progress, or after the page has closed. This method waits until the page is closed and the video is fully saved.

**Usage**

```codeBlockLines_e6Vv
video.save_as(path)

```

**Arguments**

- `path` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] [#](https://playwright.dev/python/docs/api/class-video#video-save-as-option-path)

Path where the video should be saved.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-video#video-save-as-return)

- [Methods](https://playwright.dev/python/docs/api/class-video#methods)
  - [delete](https://playwright.dev/python/docs/api/class-video#video-delete)
  - [path](https://playwright.dev/python/docs/api/class-video#video-path)
  - [save\_as](https://playwright.dev/python/docs/api/class-video#video-save-as)

## BrowserType API Overview
[Skip to main content](https://playwright.dev/python/docs/api/class-browsertype#__docusaurus_skipToContent_fallback)

On this page

BrowserType provides methods to launch a specific browser instance or connect to an existing one. The following is a typical example of using Playwright to drive automation:

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    chromium = playwright.chromium
    browser = chromium.launch()
    page = browser.new_page()
    page.goto("https://example.com")
    # other actions...
    browser.close()

with sync_playwright() as playwright:
    run(playwright)

```

```codeBlockLines_e6Vv
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    chromium = playwright.chromium
    browser = await chromium.launch()
    page = await browser.new_page()
    await page.goto("https://example.com")
    # other actions...
    await browser.close()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())

```

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-browsertype\#methods "Direct link to Methods")

### connect [​](https://playwright.dev/python/docs/api/class-browsertype\#browser-type-connect "Direct link to connect")

Added before v1.9browserType.connect

This method attaches Playwright to an existing browser instance created via `BrowserType.launchServer` in Node.js.

note

The major and minor version of the Playwright instance that connects needs to match the version of Playwright that launches the browser (1.2.3 → is compatible with 1.2.x).

**Usage**

```codeBlockLines_e6Vv
browser_type.connect(ws_endpoint)
browser_type.connect(ws_endpoint, **kwargs)

```

**Arguments**

- `ws_endpoint` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") Added in: v1.10 [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-connect-option-ws-endpoint)

A Playwright browser websocket endpoint to connect to. You obtain this endpoint via `BrowserServer.wsEndpoint`.

- `expose_network` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ Added in: v1.37 [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-connect-option-expose-network)

This option exposes network available on the connecting client to the browser being connected to. Consists of a list of rules separated by comma.

Available rules:


1. Hostname pattern, for example: `example.com`, `*.org:99`, `x.*.y.com`, `*foo.org`.
2. IP literal, for example: `127.0.0.1`, `0.0.0.0:99`, `[::1]`, `[0:0::1]:99`.
3. `<loopback>` that matches local loopback interfaces: `localhost`, `*.localhost`, `127.0.0.1`, `[::1]`.

Some common examples:
1. `"*"` to expose all network.
2. `"<loopback>"` to expose localhost network.
3. `"*.test.internal-domain,*.staging.internal-domain,<loopback>"` to expose test/staging deployments and localhost.
- `headers` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ Added in: v1.11 [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-connect-option-headers)

Additional HTTP headers to be sent with web socket connect request. Optional.

- `slow_mo` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.10 [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-connect-option-slow-mo)

Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going on. Defaults to 0.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.10 [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-connect-option-timeout)

Maximum time in milliseconds to wait for the connection to be established. Defaults to `0` (no timeout).


**Returns**

- [Browser](https://playwright.dev/python/docs/api/class-browser "Browser") [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-connect-return)

* * *

### connect\_over\_cdp [​](https://playwright.dev/python/docs/api/class-browsertype\#browser-type-connect-over-cdp "Direct link to connect_over_cdp")

Added in: v1.9browserType.connect\_over\_cdp

This method attaches Playwright to an existing browser instance using the Chrome DevTools Protocol.

The default browser context is accessible via [browser.contexts](https://playwright.dev/python/docs/api/class-browser#browser-contexts).

note

Connecting over the Chrome DevTools Protocol is only supported for Chromium-based browsers.

note

This connection is significantly lower fidelity than the Playwright protocol connection via [browser\_type.connect()](https://playwright.dev/python/docs/api/class-browsertype#browser-type-connect). If you are experiencing issues or attempting to use advanced functionality, you probably want to use [browser\_type.connect()](https://playwright.dev/python/docs/api/class-browsertype#browser-type-connect).

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
browser = playwright.chromium.connect_over_cdp("http://localhost:9222")
default_context = browser.contexts[0]
page = default_context.pages[0]

```

```codeBlockLines_e6Vv
browser = await playwright.chromium.connect_over_cdp("http://localhost:9222")
default_context = browser.contexts[0]
page = default_context.pages[0]

```

**Arguments**

- `endpoint_url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") Added in: v1.11 [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-connect-over-cdp-option-endpoint-url)

A CDP websocket endpoint or http url to connect to. For example `http://localhost:9222/` or `ws://127.0.0.1:9222/devtools/browser/387adf4c-243f-4051-a181-46798f4a46f4`.

- `headers` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ Added in: v1.11 [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-connect-over-cdp-option-headers)

Additional HTTP headers to be sent with connect request. Optional.

- `slow_mo` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.11 [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-connect-over-cdp-option-slow-mo)

Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going on. Defaults to 0.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.11 [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-connect-over-cdp-option-timeout)

Maximum time in milliseconds to wait for the connection to be established. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.


**Returns**

- [Browser](https://playwright.dev/python/docs/api/class-browser "Browser") [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-connect-over-cdp-return)

* * *

### launch [​](https://playwright.dev/python/docs/api/class-browsertype\#browser-type-launch "Direct link to launch")

Added before v1.9browserType.launch

Returns the browser instance.

**Usage**

You can use [ignore\_default\_args](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-ignore-default-args) to filter out `--mute-audio` from default arguments:

- Sync
- Async

```codeBlockLines_e6Vv
browser = playwright.chromium.launch( # or "firefox" or "webkit".
    ignore_default_args=["--mute-audio"]
)

```

```codeBlockLines_e6Vv
browser = await playwright.chromium.launch( # or "firefox" or "webkit".
    ignore_default_args=["--mute-audio"]
)

```

> **Chromium-only** Playwright can also be used to control the Google Chrome or Microsoft Edge browsers, but it works best with the version of Chromium it is bundled with. There is no guarantee it will work with any other version. Use [executable\_path](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-executable-path) option with extreme caution.
>
> If Google Chrome (rather than Chromium) is preferred, a [Chrome Canary](https://www.google.com/chrome/browser/canary.html) or [Dev Channel](https://www.chromium.org/getting-involved/dev-channel) build is suggested.
>
> Stock browsers like Google Chrome and Microsoft Edge are suitable for tests that require proprietary media codecs for video playback. See [this article](https://www.howtogeek.com/202825/what%E2%80%99s-the-difference-between-chromium-and-chrome/) for other differences between Chromium and Chrome. [This article](https://chromium.googlesource.com/chromium/src/+/lkgr/docs/chromium_browser_vs_google_chrome.md) describes some differences for Linux users.

**Arguments**

- `args` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-args)



warning





Use custom browser args at your own risk, as some of them may break Playwright functionality.





Additional arguments to pass to the browser instance. The list of Chromium flags can be found [here](https://peter.sh/experiments/chromium-command-line-switches/).

- `channel` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-channel)

Browser distribution channel.

Use "chromium" to [opt in to new headless mode](https://playwright.dev/python/docs/browsers#chromium-new-headless-mode).

Use "chrome", "chrome-beta", "chrome-dev", "chrome-canary", "msedge", "msedge-beta", "msedge-dev", or "msedge-canary" to use branded [Google Chrome and Microsoft Edge](https://playwright.dev/python/docs/browsers#google-chrome--microsoft-edge).

- `chromium_sandbox` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-chromium-sandbox)

Enable Chromium sandboxing. Defaults to `false`.

- `devtools` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-devtools)



Deprecated





Use [debugging tools](https://playwright.dev/python/docs/debug) instead.





**Chromium-only** Whether to auto-open a Developer Tools panel for each tab. If this option is `true`, the [headless](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-headless) option will be set `false`.

- `downloads_path` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-downloads-path)

If specified, accepted downloads are downloaded into this directory. Otherwise, temporary directory is created and is deleted when browser is closed. In either case, the downloads are deleted when the browser context they were created in is closed.

- `env` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| [bool](https://docs.python.org/3/library/stdtypes.html "bool")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-env)

Specify environment variables that will be visible to the browser. Defaults to `process.env`.

- `executable_path` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-executable-path)

Path to a browser executable to run instead of the bundled one. If [executable\_path](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-executable-path) is a relative path, then it is resolved relative to the current working directory. Note that Playwright only works with the bundled Chromium, Firefox or WebKit, use at your own risk.

- `firefox_user_prefs` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| [bool](https://docs.python.org/3/library/stdtypes.html "bool")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-firefox-user-prefs)

Firefox user preferences. Learn more about the Firefox user preferences at [`about:config`](https://support.mozilla.org/en-US/kb/about-config-editor-firefox).

- `handle_sighup` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-handle-sighup)

Close the browser process on SIGHUP. Defaults to `true`.

- `handle_sigint` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-handle-sigint)

Close the browser process on Ctrl-C. Defaults to `true`.

- `handle_sigterm` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-handle-sigterm)

Close the browser process on SIGTERM. Defaults to `true`.

- `headless` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-headless)

Whether to run browser in headless mode. More details for [Chromium](https://developers.google.com/web/updates/2017/04/headless-chrome) and [Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Headless_mode). Defaults to `true` unless the [devtools](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-devtools) option is `true`.

- `ignore_default_args` [bool](https://docs.python.org/3/library/stdtypes.html "bool") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-ignore-default-args)

If `true`, Playwright does not pass its own configurations args and only uses the ones from [args](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-args). If an array is given, then filters out the given default arguments. Dangerous option; use with care. Defaults to `false`.

- `proxy` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-proxy)


  - `server` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.

  - `bypass` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_

    Optional comma-separated domains to bypass proxy, for example `".com, chromium.org, .domain.com"`.

  - `username` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_

    Optional username to use if HTTP proxy requires authentication.

  - `password` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_

    Optional password to use if HTTP proxy requires authentication.


Network proxy settings.

- `slow_mo` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-slow-mo)

Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going on.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-timeout)

Maximum time in milliseconds to wait for the browser instance to start. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.

- `traces_dir` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-traces-dir)

If specified, traces are saved into this directory.


**Returns**

- [Browser](https://playwright.dev/python/docs/api/class-browser "Browser") [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-return)

* * *

### launch\_persistent\_context [​](https://playwright.dev/python/docs/api/class-browsertype\#browser-type-launch-persistent-context "Direct link to launch_persistent_context")

Added before v1.9browserType.launch\_persistent\_context

Returns the persistent browser context instance.

Launches browser that uses persistent storage located at [user\_data\_dir](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-user-data-dir) and returns the only context. Closing this context will automatically close the browser.

**Usage**

```codeBlockLines_e6Vv
browser_type.launch_persistent_context(user_data_dir)
browser_type.launch_persistent_context(user_data_dir, **kwargs)

```

**Arguments**

- `user_data_dir` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-user-data-dir)

Path to a User Data Directory, which stores browser session data like cookies and local storage. More details for [Chromium](https://chromium.googlesource.com/chromium/src/+/master/docs/user_data_dir.md#introduction) and [Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Command_Line_Options#User_Profile). Note that Chromium's user data directory is the **parent** directory of the "Profile Path" seen at `chrome://version`. Pass an empty string to use a temporary directory instead.

- `accept_downloads` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-accept-downloads)

Whether to automatically download all the attachments. Defaults to `true` where all the downloads are accepted.

- `args` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-args)



warning





Use custom browser args at your own risk, as some of them may break Playwright functionality.





Additional arguments to pass to the browser instance. The list of Chromium flags can be found [here](https://peter.sh/experiments/chromium-command-line-switches/).

- `base_url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-base-url)

When using [page.goto()](https://playwright.dev/python/docs/api/class-page#page-goto), [page.route()](https://playwright.dev/python/docs/api/class-page#page-route), [page.wait\_for\_url()](https://playwright.dev/python/docs/api/class-page#page-wait-for-url), [page.expect\_request()](https://playwright.dev/python/docs/api/class-page#page-wait-for-request), or [page.expect\_response()](https://playwright.dev/python/docs/api/class-page#page-wait-for-response) it takes the base URL in consideration by using the [`URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor for building the corresponding URL. Unset by default. Examples:
  - baseURL: `http://localhost:3000` and navigating to `/bar.html` results in `http://localhost:3000/bar.html`
  - baseURL: `http://localhost:3000/foo/` and navigating to `./bar.html` results in `http://localhost:3000/foo/bar.html`
  - baseURL: `http://localhost:3000/foo` (without trailing slash) and navigating to `./bar.html` results in `http://localhost:3000/bar.html`
- `bypass_csp` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-bypass-csp)

Toggles bypassing page's Content-Security-Policy. Defaults to `false`.

- `channel` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-channel)

Browser distribution channel.

Use "chromium" to [opt in to new headless mode](https://playwright.dev/python/docs/browsers#chromium-new-headless-mode).

Use "chrome", "chrome-beta", "chrome-dev", "chrome-canary", "msedge", "msedge-beta", "msedge-dev", or "msedge-canary" to use branded [Google Chrome and Microsoft Edge](https://playwright.dev/python/docs/browsers#google-chrome--microsoft-edge).

- `chromium_sandbox` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-chromium-sandbox)

Enable Chromium sandboxing. Defaults to `false`.

- `client_certificates` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\] _(optional)_ Added in: 1.46 [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-client-certificates)


  - `origin` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    Exact origin that the certificate is valid for. Origin includes `https` protocol, a hostname and optionally a port.

  - `certPath` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_

    Path to the file with the certificate in PEM format.

  - `cert` [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") _(optional)_

    Direct value of the certificate in PEM format.

  - `keyPath` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_

    Path to the file with the private key in PEM format.

  - `key` [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") _(optional)_

    Direct value of the private key in PEM format.

  - `pfxPath` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_

    Path to the PFX or PKCS12 encoded private key and certificate chain.

  - `pfx` [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") _(optional)_

    Direct value of the PFX or PKCS12 encoded private key and certificate chain.

  - `passphrase` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_

    Passphrase for the private key (PEM or PFX).


TLS Client Authentication allows the server to request a client certificate and verify it.

**Details**

An array of client certificates to be used. Each certificate object must have either both `certPath` and `keyPath`, a single `pfxPath`, or their corresponding direct value equivalents ( `cert` and `key`, or `pfx`). Optionally, `passphrase` property should be provided if the certificate is encrypted. The `origin` property should be provided with an exact match to the request origin that the certificate is valid for.

note

When using WebKit on macOS, accessing `localhost` will not pick up client certificates. You can make it work by replacing `localhost` with `local.playwright`.

- `color_scheme` "light" \| "dark" \| "no-preference" \| "null" _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-color-scheme)

Emulates [prefers-colors-scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme) media feature, supported values are `'light'` and `'dark'`. See [page.emulate\_media()](https://playwright.dev/python/docs/api/class-page#page-emulate-media) for more details. Passing `'null'` resets emulation to system defaults. Defaults to `'light'`.

- `contrast` "no-preference" \| "more" \| "null" _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-contrast)

Emulates `'prefers-contrast'` media feature, supported values are `'no-preference'`, `'more'`. See [page.emulate\_media()](https://playwright.dev/python/docs/api/class-page#page-emulate-media) for more details. Passing `'null'` resets emulation to system defaults. Defaults to `'no-preference'`.

- `device_scale_factor` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-device-scale-factor)

Specify device scale factor (can be thought of as dpr). Defaults to `1`. Learn more about [emulating devices with device scale factor](https://playwright.dev/python/docs/emulation#devices).

- `devtools` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-devtools)



Deprecated





Use [debugging tools](https://playwright.dev/python/docs/debug) instead.





**Chromium-only** Whether to auto-open a Developer Tools panel for each tab. If this option is `true`, the [headless](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-headless) option will be set `false`.

- `downloads_path` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-downloads-path)

If specified, accepted downloads are downloaded into this directory. Otherwise, temporary directory is created and is deleted when browser is closed. In either case, the downloads are deleted when the browser context they were created in is closed.

- `env` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| [bool](https://docs.python.org/3/library/stdtypes.html "bool")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-env)

Specify environment variables that will be visible to the browser. Defaults to `process.env`.

- `executable_path` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-executable-path)

Path to a browser executable to run instead of the bundled one. If [executable\_path](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-executable-path) is a relative path, then it is resolved relative to the current working directory. Note that Playwright only works with the bundled Chromium, Firefox or WebKit, use at your own risk.

- `extra_http_headers` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-extra-http-headers)

An object containing additional HTTP headers to be sent with every request. Defaults to none.

- `firefox_user_prefs` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| [bool](https://docs.python.org/3/library/stdtypes.html "bool")\] _(optional)_ Added in: v1.40 [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-firefox-user-prefs)

Firefox user preferences. Learn more about the Firefox user preferences at [`about:config`](https://support.mozilla.org/en-US/kb/about-config-editor-firefox).

- `forced_colors` "active" \| "none" \| "null" _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-forced-colors)

Emulates `'forced-colors'` media feature, supported values are `'active'`, `'none'`. See [page.emulate\_media()](https://playwright.dev/python/docs/api/class-page#page-emulate-media) for more details. Passing `'null'` resets emulation to system defaults. Defaults to `'none'`.

- `geolocation` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-geolocation)
  - `latitude` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    Latitude between -90 and 90.

  - `longitude` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    Longitude between -180 and 180.

  - `accuracy` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_

    Non-negative accuracy value. Defaults to `0`.
- `handle_sighup` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-handle-sighup)

Close the browser process on SIGHUP. Defaults to `true`.

- `handle_sigint` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-handle-sigint)

Close the browser process on Ctrl-C. Defaults to `true`.

- `handle_sigterm` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-handle-sigterm)

Close the browser process on SIGTERM. Defaults to `true`.

- `has_touch` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-has-touch)

Specifies if viewport supports touch events. Defaults to false. Learn more about [mobile emulation](https://playwright.dev/python/docs/emulation#devices).

- `headless` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-headless)

Whether to run browser in headless mode. More details for [Chromium](https://developers.google.com/web/updates/2017/04/headless-chrome) and [Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Headless_mode). Defaults to `true` unless the [devtools](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-devtools) option is `true`.

- `http_credentials` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-http-credentials)


  - `username` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

  - `password` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

  - `origin` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_

    Restrain sending http credentials on specific origin (scheme://host:port).

  - `send` "unauthorized" \| "always" _(optional)_

    This option only applies to the requests sent from corresponding [APIRequestContext](https://playwright.dev/python/docs/api/class-apirequestcontext "APIRequestContext") and does not affect requests sent from the browser. `'always'` \- `Authorization` header with basic authentication credentials will be sent with the each API request. `'unauthorized` \- the credentials are only sent when 401 (Unauthorized) response with `WWW-Authenticate` header is received. Defaults to `'unauthorized'`.


Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication). If no origin is specified, the username and password are sent to any servers upon unauthorized responses.

- `ignore_default_args` [bool](https://docs.python.org/3/library/stdtypes.html "bool") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-ignore-default-args)

If `true`, Playwright does not pass its own configurations args and only uses the ones from [args](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-args). If an array is given, then filters out the given default arguments. Dangerous option; use with care. Defaults to `false`.

- `ignore_https_errors` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-ignore-https-errors)

Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.

- `is_mobile` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-is-mobile)

Whether the `meta viewport` tag is taken into account and touch events are enabled. isMobile is a part of device, so you don't actually need to set it manually. Defaults to `false` and is not supported in Firefox. Learn more about [mobile emulation](https://playwright.dev/python/docs/emulation#ismobile).

- `java_script_enabled` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-java-script-enabled)

Whether or not to enable JavaScript in the context. Defaults to `true`. Learn more about [disabling JavaScript](https://playwright.dev/python/docs/emulation#javascript-enabled).

- `locale` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-locale)

Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value, `Accept-Language` request header value as well as number and date formatting rules. Defaults to the system default locale. Learn more about emulation in our [emulation guide](https://playwright.dev/python/docs/emulation#locale--timezone).

- `no_viewport` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-no-viewport)

Does not enforce fixed viewport, allows resizing window in the headed mode.

- `offline` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-offline)

Whether to emulate network being offline. Defaults to `false`. Learn more about [network emulation](https://playwright.dev/python/docs/emulation#offline).

- `permissions` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-permissions)

A list of permissions to grant to all pages in this context. See [browser\_context.grant\_permissions()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-grant-permissions) for more details. Defaults to none.

- `proxy` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-proxy)


  - `server` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.

  - `bypass` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_

    Optional comma-separated domains to bypass proxy, for example `".com, chromium.org, .domain.com"`.

  - `username` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_

    Optional username to use if HTTP proxy requires authentication.

  - `password` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_

    Optional password to use if HTTP proxy requires authentication.


Network proxy settings.

- `record_har_content` "omit" \| "embed" \| "attach" _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-record-har-content)

Optional setting to control resource content management. If `omit` is specified, content is not persisted. If `attach` is specified, resources are persisted as separate files and all of these files are archived along with the HAR file. Defaults to `embed`, which stores content inline the HAR file as per HAR specification.

- `record_har_mode` "full" \| "minimal" _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-record-har-mode)

When set to `minimal`, only record information necessary for routing from HAR. This omits sizes, timing, page, cookies, security and other types of HAR information that are not used when replaying from HAR. Defaults to `full`.

- `record_har_omit_content` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-record-har-omit-content)

Optional setting to control whether to omit request content from the HAR. Defaults to `false`.

- `record_har_path` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-record-har-path)

Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into the specified HAR file on the filesystem. If not specified, the HAR is not recorded. Make sure to call [browser\_context.close()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-close) for the HAR to be saved.

- `record_har_url_filter` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-record-har-url-filter)

- `record_video_dir` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-record-video-dir)

Enables video recording for all pages into the specified directory. If not specified videos are not recorded. Make sure to call [browser\_context.close()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-close) for videos to be saved.

- `record_video_size` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-record-video-size)


  - `width` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

    Video frame width.

  - `height` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

    Video frame height.


Dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will be scaled down if necessary to fit the specified size.

- `reduced_motion` "reduce" \| "no-preference" \| "null" _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-reduced-motion)

Emulates `'prefers-reduced-motion'` media feature, supported values are `'reduce'`, `'no-preference'`. See [page.emulate\_media()](https://playwright.dev/python/docs/api/class-page#page-emulate-media) for more details. Passing `'null'` resets emulation to system defaults. Defaults to `'no-preference'`.

- `screen` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-screen)


  - `width` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

    page width in pixels.

  - `height` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

    page height in pixels.


Emulates consistent window screen size available inside web page via `window.screen`. Is only used when the [viewport](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-viewport) is set.

- `service_workers` "allow" \| "block" _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-service-workers)

Whether to allow sites to register Service workers. Defaults to `'allow'`.
  - `'allow'`: [Service Workers](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API) can be registered.
  - `'block'`: Playwright will block all registration of Service Workers.
- `slow_mo` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-slow-mo)

Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going on.

- `strict_selectors` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-strict-selectors)

If set to true, enables strict selectors mode for this context. In the strict selectors mode all operations on selectors that imply single target DOM element will throw when more than one element matches the selector. This option does not affect any Locator APIs (Locators are always strict). Defaults to `false`. See [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") to learn more about the strict mode.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-timeout)

Maximum time in milliseconds to wait for the browser instance to start. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.

- `timezone_id` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-timezone-id)

Changes the timezone of the context. See [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1) for a list of supported timezone IDs. Defaults to the system timezone.

- `traces_dir` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-traces-dir)

If specified, traces are saved into this directory.

- `user_agent` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-user-agent)

Specific user agent to use in this context.

- `viewport` [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-viewport)


  - `width` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

    page width in pixels.

  - `height` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

    page height in pixels.


Sets a consistent viewport for each page. Defaults to an 1280x720 viewport. `no_viewport` disables the fixed viewport. Learn more about [viewport emulation](https://playwright.dev/python/docs/emulation#viewport).

**Returns**

- [BrowserContext](https://playwright.dev/python/docs/api/class-browsercontext "BrowserContext") [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-return)

* * *

## Properties [​](https://playwright.dev/python/docs/api/class-browsertype\#properties "Direct link to Properties")

### executable\_path [​](https://playwright.dev/python/docs/api/class-browsertype\#browser-type-executable-path "Direct link to executable_path")

Added before v1.9browserType.executable\_path

A path where Playwright expects to find a bundled browser executable.

**Usage**

```codeBlockLines_e6Vv
browser_type.executable_path

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-executable-path-return)

* * *

### name [​](https://playwright.dev/python/docs/api/class-browsertype\#browser-type-name "Direct link to name")

Added before v1.9browserType.name

Returns browser name. For example: `'chromium'`, `'webkit'` or `'firefox'`.

**Usage**

```codeBlockLines_e6Vv
browser_type.name

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-browsertype#browser-type-name-return)

- [Methods](https://playwright.dev/python/docs/api/class-browsertype#methods)
  - [connect](https://playwright.dev/python/docs/api/class-browsertype#browser-type-connect)
  - [connect\_over\_cdp](https://playwright.dev/python/docs/api/class-browsertype#browser-type-connect-over-cdp)
  - [launch](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch)
  - [launch\_persistent\_context](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context)
- [Properties](https://playwright.dev/python/docs/api/class-browsertype#properties)
  - [executable\_path](https://playwright.dev/python/docs/api/class-browsertype#browser-type-executable-path)
  - [name](https://playwright.dev/python/docs/api/class-browsertype#browser-type-name)

## ElementHandle Class
[Skip to main content](https://playwright.dev/python/docs/api/class-elementhandle#__docusaurus_skipToContent_fallback)

On this page

- extends: [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle")

ElementHandle represents an in-page DOM element. ElementHandles can be created with the [page.query\_selector()](https://playwright.dev/python/docs/api/class-page#page-query-selector) method.

Discouraged

The use of ElementHandle is discouraged, use [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") objects and web-first assertions instead.

- Sync
- Async

```codeBlockLines_e6Vv
href_element = page.query_selector("a")
href_element.click()

```

```codeBlockLines_e6Vv
href_element = await page.query_selector("a")
await href_element.click()

```

ElementHandle prevents DOM element from garbage collection unless the handle is disposed with [js\_handle.dispose()](https://playwright.dev/python/docs/api/class-jshandle#js-handle-dispose). ElementHandles are auto-disposed when their origin frame gets navigated.

ElementHandle instances can be used as an argument in [page.eval\_on\_selector()](https://playwright.dev/python/docs/api/class-page#page-eval-on-selector) and [page.evaluate()](https://playwright.dev/python/docs/api/class-page#page-evaluate) methods.

The difference between the [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") and ElementHandle is that the ElementHandle points to a particular element, while [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") captures the logic of how to retrieve an element.

In the example below, handle points to a particular DOM element on page. If that element changes text or is used by React to render an entirely different component, handle is still pointing to that very DOM element. This can lead to unexpected behaviors.

- Sync
- Async

```codeBlockLines_e6Vv
handle = page.query_selector("text=Submit")
handle.hover()
handle.click()

```

```codeBlockLines_e6Vv
handle = await page.query_selector("text=Submit")
await handle.hover()
await handle.click()

```

With the locator, every time the `element` is used, up-to-date DOM element is located in the page using the selector. So in the snippet below, underlying DOM element is going to be located twice.

- Sync
- Async

```codeBlockLines_e6Vv
locator = page.get_by_text("Submit")
locator.hover()
locator.click()

```

```codeBlockLines_e6Vv
locator = page.get_by_text("Submit")
await locator.hover()
await locator.click()

```

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-elementhandle\#methods "Direct link to Methods")

### bounding\_box [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-bounding-box "Direct link to bounding_box")

Added before v1.9elementHandle.bounding\_box

This method returns the bounding box of the element, or `null` if the element is not visible. The bounding box is calculated relative to the main frame viewport - which is usually the same as the browser window.

Scrolling affects the returned bounding box, similarly to [Element.getBoundingClientRect](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect). That means `x` and/or `y` may be negative.

Elements from child frames return the bounding box relative to the main frame, unlike the [Element.getBoundingClientRect](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect).

Assuming the page is static, it is safe to use bounding box coordinates to perform input. For example, the following snippet should click the center of the element.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
box = element_handle.bounding_box()
page.mouse.click(box["x"] + box["width"] / 2, box["y"] + box["height"] / 2)

```

```codeBlockLines_e6Vv
box = await element_handle.bounding_box()
await page.mouse.click(box["x"] + box["width"] / 2, box["y"] + box["height"] / 2)

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-bounding-box-return)
  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    the x coordinate of the element in pixels.

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    the y coordinate of the element in pixels.

  - `width` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    the width of the element in pixels.

  - `height` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    the height of the element in pixels.

* * *

### content\_frame [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-content-frame "Direct link to content_frame")

Added before v1.9elementHandle.content\_frame

Returns the content frame for element handles referencing iframe nodes, or `null` otherwise

**Usage**

```codeBlockLines_e6Vv
element_handle.content_frame()

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [Frame](https://playwright.dev/python/docs/api/class-frame "Frame") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-content-frame-return)

* * *

### owner\_frame [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-owner-frame "Direct link to owner_frame")

Added before v1.9elementHandle.owner\_frame

Returns the frame containing the given element.

**Usage**

```codeBlockLines_e6Vv
element_handle.owner_frame()

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [Frame](https://playwright.dev/python/docs/api/class-frame "Frame") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-owner-frame-return)

* * *

### wait\_for\_element\_state [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-wait-for-element-state "Direct link to wait_for_element_state")

Added before v1.9elementHandle.wait\_for\_element\_state

Returns when the element satisfies the [state](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-wait-for-element-state-option-state).

Depending on the [state](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-wait-for-element-state-option-state) parameter, this method waits for one of the [actionability](https://playwright.dev/python/docs/actionability) checks to pass. This method throws when the element is detached while waiting, unless waiting for the `"hidden"` state.

- `"visible"` Wait until the element is [visible](https://playwright.dev/python/docs/actionability#visible).
- `"hidden"` Wait until the element is [not visible](https://playwright.dev/python/docs/actionability#visible) or not attached. Note that waiting for hidden does not throw when the element detaches.
- `"stable"` Wait until the element is both [visible](https://playwright.dev/python/docs/actionability#visible) and [stable](https://playwright.dev/python/docs/actionability#stable).
- `"enabled"` Wait until the element is [enabled](https://playwright.dev/python/docs/actionability#enabled).
- `"disabled"` Wait until the element is [not enabled](https://playwright.dev/python/docs/actionability#enabled).
- `"editable"` Wait until the element is [editable](https://playwright.dev/python/docs/actionability#editable).

If the element does not satisfy the condition for the [timeout](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-wait-for-element-state-option-timeout) milliseconds, this method will throw.

**Usage**

```codeBlockLines_e6Vv
element_handle.wait_for_element_state(state)
element_handle.wait_for_element_state(state, **kwargs)

```

**Arguments**

- `state` "visible" \| "hidden" \| "stable" \| "enabled" \| "disabled" \| "editable" [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-wait-for-element-state-option-state)

A state to wait for, see below for more details.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-wait-for-element-state-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-wait-for-element-state-return)

* * *

## Deprecated [​](https://playwright.dev/python/docs/api/class-elementhandle\#deprecated "Direct link to Deprecated")

### check [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-check "Direct link to check")

Added before v1.9elementHandle.check

Discouraged

Use locator-based [locator.check()](https://playwright.dev/python/docs/api/class-locator#locator-check) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method checks the element by performing the following steps:

1. Ensure that element is a checkbox or a radio input. If not, this method throws. If the element is already checked, this method returns immediately.
2. Wait for [actionability](https://playwright.dev/python/docs/actionability) checks on the element, unless [force](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-check-option-force) option is set.
3. Scroll the element into view if needed.
4. Use [page.mouse](https://playwright.dev/python/docs/api/class-page#page-mouse) to click in the center of the element.
5. Ensure that the element is now checked. If not, this method throws.

If the element is detached from the DOM at any moment during the action, this method throws.

When all steps combined have not finished during the specified [timeout](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-check-option-timeout), this method throws a [TimeoutError](https://playwright.dev/python/docs/api/class-timeouterror "TimeoutError"). Passing zero timeout disables this.

**Usage**

```codeBlockLines_e6Vv
element_handle.check()
element_handle.check(**kwargs)

```

**Arguments**

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-check-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-check-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ Added in: v1.11 [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-check-option-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-check-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.11 [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-check-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-check-return)

* * *

### click [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-click "Direct link to click")

Added before v1.9elementHandle.click

Discouraged

Use locator-based [locator.click()](https://playwright.dev/python/docs/api/class-locator#locator-click) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method clicks the element by performing the following steps:

1. Wait for [actionability](https://playwright.dev/python/docs/actionability) checks on the element, unless [force](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-click-option-force) option is set.
2. Scroll the element into view if needed.
3. Use [page.mouse](https://playwright.dev/python/docs/api/class-page#page-mouse) to click in the center of the element, or the specified [position](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-click-option-position).
4. Wait for initiated navigations to either succeed or fail, unless [no\_wait\_after](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-click-option-no-wait-after) option is set.

If the element is detached from the DOM at any moment during the action, this method throws.

When all steps combined have not finished during the specified [timeout](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-click-option-timeout), this method throws a [TimeoutError](https://playwright.dev/python/docs/api/class-timeouterror "TimeoutError"). Passing zero timeout disables this.

**Usage**

```codeBlockLines_e6Vv
element_handle.click()
element_handle.click(**kwargs)

```

**Arguments**

- `button` "left" \| "right" \| "middle" _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-click-option-button)

Defaults to `left`.

- `click_count` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-click-option-click-count)

defaults to 1. See [UIEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail "UIEvent.detail").

- `delay` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-click-option-delay)

Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-click-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `modifiers` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\["Alt" \| "Control" \| "ControlOrMeta" \| "Meta" \| "Shift"\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-click-option-modifiers)

Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to "Control" on Windows and Linux and to "Meta" on macOS.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-click-option-no-wait-after)



Deprecated





This option will default to `true` in the future.





Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.

- `position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-click-option-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-click-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.11 [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-click-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-click-return)

* * *

### dblclick [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-dblclick "Direct link to dblclick")

Added before v1.9elementHandle.dblclick

Discouraged

Use locator-based [locator.dblclick()](https://playwright.dev/python/docs/api/class-locator#locator-dblclick) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method double clicks the element by performing the following steps:

1. Wait for [actionability](https://playwright.dev/python/docs/actionability) checks on the element, unless [force](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-dblclick-option-force) option is set.
2. Scroll the element into view if needed.
3. Use [page.mouse](https://playwright.dev/python/docs/api/class-page#page-mouse) to double click in the center of the element, or the specified [position](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-dblclick-option-position).

If the element is detached from the DOM at any moment during the action, this method throws.

When all steps combined have not finished during the specified [timeout](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-dblclick-option-timeout), this method throws a [TimeoutError](https://playwright.dev/python/docs/api/class-timeouterror "TimeoutError"). Passing zero timeout disables this.

note

`elementHandle.dblclick()` dispatches two `click` events and a single `dblclick` event.

**Usage**

```codeBlockLines_e6Vv
element_handle.dblclick()
element_handle.dblclick(**kwargs)

```

**Arguments**

- `button` "left" \| "right" \| "middle" _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-dblclick-option-button)

Defaults to `left`.

- `delay` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-dblclick-option-delay)

Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-dblclick-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `modifiers` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\["Alt" \| "Control" \| "ControlOrMeta" \| "Meta" \| "Shift"\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-dblclick-option-modifiers)

Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to "Control" on Windows and Linux and to "Meta" on macOS.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-dblclick-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-dblclick-option-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-dblclick-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.11 [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-dblclick-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-dblclick-return)

* * *

### dispatch\_event [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-dispatch-event "Direct link to dispatch_event")

Added before v1.9elementHandle.dispatch\_event

Discouraged

Use locator-based [locator.dispatch\_event()](https://playwright.dev/python/docs/api/class-locator#locator-dispatch-event) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

The snippet below dispatches the `click` event on the element. Regardless of the visibility state of the element, `click` is dispatched. This is equivalent to calling [element.click()](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click).

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
element_handle.dispatch_event("click")

```

```codeBlockLines_e6Vv
await element_handle.dispatch_event("click")

```

Under the hood, it creates an instance of an event based on the given [type](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-dispatch-event-option-type), initializes it with [event\_init](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-dispatch-event-option-event-init) properties and dispatches it on the element. Events are `composed`, `cancelable` and bubble by default.

Since [event\_init](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-dispatch-event-option-event-init) is event-specific, please refer to the events documentation for the lists of initial properties:

- [DeviceMotionEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent/DeviceMotionEvent)
- [DeviceOrientationEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent/DeviceOrientationEvent)
- [DragEvent](https://developer.mozilla.org/en-US/docs/Web/API/DragEvent/DragEvent)
- [Event](https://developer.mozilla.org/en-US/docs/Web/API/Event/Event)
- [FocusEvent](https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent/FocusEvent)
- [KeyboardEvent](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/KeyboardEvent)
- [MouseEvent](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/MouseEvent)
- [PointerEvent](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/PointerEvent)
- [TouchEvent](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/TouchEvent)
- [WheelEvent](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/WheelEvent)

You can also specify `JSHandle` as the property value if you want live objects to be passed into the event:

- Sync
- Async

```codeBlockLines_e6Vv
# note you can only create data_transfer in chromium and firefox
data_transfer = page.evaluate_handle("new DataTransfer()")
element_handle.dispatch_event("#source", "dragstart", {"dataTransfer": data_transfer})

```

```codeBlockLines_e6Vv
# note you can only create data_transfer in chromium and firefox
data_transfer = await page.evaluate_handle("new DataTransfer()")
await element_handle.dispatch_event("#source", "dragstart", {"dataTransfer": data_transfer})

```

**Arguments**

- `type` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-dispatch-event-option-type)

DOM event type: `"click"`, `"dragstart"`, etc.

- `event_init` [EvaluationArgument](https://playwright.dev/python/docs/evaluating#evaluation-argument "EvaluationArgument") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-dispatch-event-option-event-init)

Optional event-specific initialization properties.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-dispatch-event-return)

* * *

### eval\_on\_selector [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-eval-on-selector "Direct link to eval_on_selector")

Added in: v1.9elementHandle.eval\_on\_selector

Discouraged

This method does not wait for the element to pass actionability checks and therefore can lead to the flaky tests. Use [locator.evaluate()](https://playwright.dev/python/docs/api/class-locator#locator-evaluate), other [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") helper methods or web-first assertions instead.

Returns the return value of [expression](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-eval-on-selector-option-expression).

The method finds an element matching the specified selector in the `ElementHandle` s subtree and passes it as a first argument to [expression](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-eval-on-selector-option-expression). If no elements match the selector, the method throws an error.

If [expression](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-eval-on-selector-option-expression) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then [element\_handle.eval\_on\_selector()](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-eval-on-selector) would wait for the promise to resolve and return its value.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
tweet_handle = page.query_selector(".tweet")
assert tweet_handle.eval_on_selector(".like", "node => node.innerText") == "100"
assert tweet_handle.eval_on_selector(".retweets", "node => node.innerText") == "10"

```

```codeBlockLines_e6Vv
tweet_handle = await page.query_selector(".tweet")
assert await tweet_handle.eval_on_selector(".like", "node => node.innerText") == "100"
assert await tweet_handle.eval_on_selector(".retweets", "node => node.innerText") == "10"

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-eval-on-selector-option-selector)

A selector to query for.

- `expression` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-eval-on-selector-option-expression)

JavaScript expression to be evaluated in the browser context. If the expression evaluates to a function, the function is automatically invoked.

- `arg` [EvaluationArgument](https://playwright.dev/python/docs/evaluating#evaluation-argument "EvaluationArgument") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-eval-on-selector-option-arg)

Optional argument to pass to [expression](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-eval-on-selector-option-expression).


**Returns**

- [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-eval-on-selector-return)

* * *

### eval\_on\_selector\_all [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-eval-on-selector-all "Direct link to eval_on_selector_all")

Added in: v1.9elementHandle.eval\_on\_selector\_all

Discouraged

In most cases, [locator.evaluate\_all()](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-all), other [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") helper methods and web-first assertions do a better job.

Returns the return value of [expression](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-eval-on-selector-all-option-expression).

The method finds all elements matching the specified selector in the `ElementHandle`'s subtree and passes an array of matched elements as a first argument to [expression](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-eval-on-selector-all-option-expression).

If [expression](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-eval-on-selector-all-option-expression) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then [element\_handle.eval\_on\_selector\_all()](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-eval-on-selector-all) would wait for the promise to resolve and return its value.

**Usage**

```codeBlockLines_e6Vv
<div class="feed">
  <div class="tweet">Hello!</div>
  <div class="tweet">Hi!</div>
</div>

```

- Sync
- Async

```codeBlockLines_e6Vv
feed_handle = page.query_selector(".feed")
assert feed_handle.eval_on_selector_all(".tweet", "nodes => nodes.map(n => n.innerText)") == ["hello!", "hi!"]

```

```codeBlockLines_e6Vv
feed_handle = await page.query_selector(".feed")
assert await feed_handle.eval_on_selector_all(".tweet", "nodes => nodes.map(n => n.innerText)") == ["hello!", "hi!"]

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-eval-on-selector-all-option-selector)

A selector to query for.

- `expression` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-eval-on-selector-all-option-expression)

JavaScript expression to be evaluated in the browser context. If the expression evaluates to a function, the function is automatically invoked.

- `arg` [EvaluationArgument](https://playwright.dev/python/docs/evaluating#evaluation-argument "EvaluationArgument") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-eval-on-selector-all-option-arg)

Optional argument to pass to [expression](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-eval-on-selector-all-option-expression).


**Returns**

- [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-eval-on-selector-all-return)

* * *

### fill [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-fill "Direct link to fill")

Added before v1.9elementHandle.fill

Discouraged

Use locator-based [locator.fill()](https://playwright.dev/python/docs/api/class-locator#locator-fill) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method waits for [actionability](https://playwright.dev/python/docs/actionability) checks, focuses the element, fills it and triggers an `input` event after filling. Note that you can pass an empty string to clear the input field.

If the target element is not an `<input>`, `<textarea>` or `[contenteditable]` element, this method throws an error. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be filled instead.

To send fine-grained keyboard events, use [locator.press\_sequentially()](https://playwright.dev/python/docs/api/class-locator#locator-press-sequentially).

**Usage**

```codeBlockLines_e6Vv
element_handle.fill(value)
element_handle.fill(value, **kwargs)

```

**Arguments**

- `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-fill-option-value)

Value to set for the `<input>`, `<textarea>` or `[contenteditable]` element.

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.13 [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-fill-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-fill-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-fill-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-fill-return)

* * *

### focus [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-focus "Direct link to focus")

Added before v1.9elementHandle.focus

Discouraged

Use locator-based [locator.focus()](https://playwright.dev/python/docs/api/class-locator#locator-focus) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Calls [focus](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus) on the element.

**Usage**

```codeBlockLines_e6Vv
element_handle.focus()

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-focus-return)

* * *

### get\_attribute [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-get-attribute "Direct link to get_attribute")

Added before v1.9elementHandle.get\_attribute

Discouraged

Use locator-based [locator.get\_attribute()](https://playwright.dev/python/docs/api/class-locator#locator-get-attribute) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns element attribute value.

**Usage**

```codeBlockLines_e6Vv
element_handle.get_attribute(name)

```

**Arguments**

- `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-get-attribute-option-name)

Attribute name to get the value for.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-get-attribute-return)

* * *

### hover [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-hover "Direct link to hover")

Added before v1.9elementHandle.hover

Discouraged

Use locator-based [locator.hover()](https://playwright.dev/python/docs/api/class-locator#locator-hover) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method hovers over the element by performing the following steps:

1. Wait for [actionability](https://playwright.dev/python/docs/actionability) checks on the element, unless [force](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-hover-option-force) option is set.
2. Scroll the element into view if needed.
3. Use [page.mouse](https://playwright.dev/python/docs/api/class-page#page-mouse) to hover over the center of the element, or the specified [position](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-hover-option-position).

If the element is detached from the DOM at any moment during the action, this method throws.

When all steps combined have not finished during the specified [timeout](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-hover-option-timeout), this method throws a [TimeoutError](https://playwright.dev/python/docs/api/class-timeouterror "TimeoutError"). Passing zero timeout disables this.

**Usage**

```codeBlockLines_e6Vv
element_handle.hover()
element_handle.hover(**kwargs)

```

**Arguments**

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-hover-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `modifiers` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\["Alt" \| "Control" \| "ControlOrMeta" \| "Meta" \| "Shift"\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-hover-option-modifiers)

Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to "Control" on Windows and Linux and to "Meta" on macOS.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.28 [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-hover-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-hover-option-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-hover-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.11 [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-hover-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-hover-return)

* * *

### inner\_html [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-inner-html "Direct link to inner_html")

Added before v1.9elementHandle.inner\_html

Discouraged

Use locator-based [locator.inner\_html()](https://playwright.dev/python/docs/api/class-locator#locator-inner-html) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns the `element.innerHTML`.

**Usage**

```codeBlockLines_e6Vv
element_handle.inner_html()

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-inner-html-return)

* * *

### inner\_text [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-inner-text "Direct link to inner_text")

Added before v1.9elementHandle.inner\_text

Discouraged

Use locator-based [locator.inner\_text()](https://playwright.dev/python/docs/api/class-locator#locator-inner-text) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns the `element.innerText`.

**Usage**

```codeBlockLines_e6Vv
element_handle.inner_text()

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-inner-text-return)

* * *

### input\_value [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-input-value "Direct link to input_value")

Added in: v1.13elementHandle.input\_value

Discouraged

Use locator-based [locator.input\_value()](https://playwright.dev/python/docs/api/class-locator#locator-input-value) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns `input.value` for the selected `<input>` or `<textarea>` or `<select>` element.

Throws for non-input elements. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), returns the value of the control.

**Usage**

```codeBlockLines_e6Vv
element_handle.input_value()
element_handle.input_value(**kwargs)

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-input-value-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-input-value-return)

* * *

### is\_checked [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-is-checked "Direct link to is_checked")

Added before v1.9elementHandle.is\_checked

Discouraged

Use locator-based [locator.is\_checked()](https://playwright.dev/python/docs/api/class-locator#locator-is-checked) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns whether the element is checked. Throws if the element is not a checkbox or radio input.

**Usage**

```codeBlockLines_e6Vv
element_handle.is_checked()

```

**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-is-checked-return)

* * *

### is\_disabled [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-is-disabled "Direct link to is_disabled")

Added before v1.9elementHandle.is\_disabled

Discouraged

Use locator-based [locator.is\_disabled()](https://playwright.dev/python/docs/api/class-locator#locator-is-disabled) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns whether the element is disabled, the opposite of [enabled](https://playwright.dev/python/docs/actionability#enabled).

**Usage**

```codeBlockLines_e6Vv
element_handle.is_disabled()

```

**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-is-disabled-return)

* * *

### is\_editable [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-is-editable "Direct link to is_editable")

Added before v1.9elementHandle.is\_editable

Discouraged

Use locator-based [locator.is\_editable()](https://playwright.dev/python/docs/api/class-locator#locator-is-editable) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns whether the element is [editable](https://playwright.dev/python/docs/actionability#editable).

**Usage**

```codeBlockLines_e6Vv
element_handle.is_editable()

```

**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-is-editable-return)

* * *

### is\_enabled [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-is-enabled "Direct link to is_enabled")

Added before v1.9elementHandle.is\_enabled

Discouraged

Use locator-based [locator.is\_enabled()](https://playwright.dev/python/docs/api/class-locator#locator-is-enabled) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns whether the element is [enabled](https://playwright.dev/python/docs/actionability#enabled).

**Usage**

```codeBlockLines_e6Vv
element_handle.is_enabled()

```

**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-is-enabled-return)

* * *

### is\_hidden [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-is-hidden "Direct link to is_hidden")

Added before v1.9elementHandle.is\_hidden

Discouraged

Use locator-based [locator.is\_hidden()](https://playwright.dev/python/docs/api/class-locator#locator-is-hidden) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns whether the element is hidden, the opposite of [visible](https://playwright.dev/python/docs/actionability#visible).

**Usage**

```codeBlockLines_e6Vv
element_handle.is_hidden()

```

**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-is-hidden-return)

* * *

### is\_visible [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-is-visible "Direct link to is_visible")

Added before v1.9elementHandle.is\_visible

Discouraged

Use locator-based [locator.is\_visible()](https://playwright.dev/python/docs/api/class-locator#locator-is-visible) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns whether the element is [visible](https://playwright.dev/python/docs/actionability#visible).

**Usage**

```codeBlockLines_e6Vv
element_handle.is_visible()

```

**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-is-visible-return)

* * *

### press [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-press "Direct link to press")

Added before v1.9elementHandle.press

Discouraged

Use locator-based [locator.press()](https://playwright.dev/python/docs/api/class-locator#locator-press) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Focuses the element, and then uses [keyboard.down()](https://playwright.dev/python/docs/api/class-keyboard#keyboard-down) and [keyboard.up()](https://playwright.dev/python/docs/api/class-keyboard#keyboard-up).

[key](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-press-option-key) can specify the intended [keyboardEvent.key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) value or a single character to generate the text for. A superset of the [key](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-press-option-key) values can be found [here](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values). Examples of the keys are:

`F1` \- `F12`, `Digit0`\- `Digit9`, `KeyA`\- `KeyZ`, `Backquote`, `Minus`, `Equal`, `Backslash`, `Backspace`, `Tab`, `Delete`, `Escape`, `ArrowDown`, `End`, `Enter`, `Home`, `Insert`, `PageDown`, `PageUp`, `ArrowRight`, `ArrowUp`, etc.

Following modification shortcuts are also supported: `Shift`, `Control`, `Alt`, `Meta`, `ShiftLeft`, `ControlOrMeta`.

Holding down `Shift` will type the text that corresponds to the [key](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-press-option-key) in the upper case.

If [key](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-press-option-key) is a single character, it is case-sensitive, so the values `a` and `A` will generate different respective texts.

Shortcuts such as `key: "Control+o"`, `key: "Control++` or `key: "Control+Shift+T"` are supported as well. When specified with the modifier, modifier is pressed and being held while the subsequent key is being pressed.

**Usage**

```codeBlockLines_e6Vv
element_handle.press(key)
element_handle.press(key, **kwargs)

```

**Arguments**

- `key` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-press-option-key)

Name of the key to press or a character to generate, such as `ArrowLeft` or `a`.

- `delay` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-press-option-delay)

Time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-press-option-no-wait-after)



Deprecated





This option will default to `true` in the future.





Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-press-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-press-return)

* * *

### query\_selector [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-query-selector "Direct link to query_selector")

Added in: v1.9elementHandle.query\_selector

Discouraged

Use locator-based [page.locator()](https://playwright.dev/python/docs/api/class-page#page-locator) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

The method finds an element matching the specified selector in the `ElementHandle`'s subtree. If no elements match the selector, returns `null`.

**Usage**

```codeBlockLines_e6Vv
element_handle.query_selector(selector)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-query-selector-option-selector)

A selector to query for.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-query-selector-return)

* * *

### query\_selector\_all [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-query-selector-all "Direct link to query_selector_all")

Added in: v1.9elementHandle.query\_selector\_all

Discouraged

Use locator-based [page.locator()](https://playwright.dev/python/docs/api/class-page#page-locator) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

The method finds all elements matching the specified selector in the `ElementHandle` s subtree. If no elements match the selector, returns empty array.

**Usage**

```codeBlockLines_e6Vv
element_handle.query_selector_all(selector)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-query-selector-all-option-selector)

A selector to query for.


**Returns**

- [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle")\] [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-query-selector-all-return)

* * *

### screenshot [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-screenshot "Direct link to screenshot")

Added before v1.9elementHandle.screenshot

Discouraged

Use locator-based [locator.screenshot()](https://playwright.dev/python/docs/api/class-locator#locator-screenshot) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method captures a screenshot of the page, clipped to the size and position of this particular element. If the element is covered by other elements, it will not be actually visible on the screenshot. If the element is a scrollable container, only the currently scrolled content will be visible on the screenshot.

This method waits for the [actionability](https://playwright.dev/python/docs/actionability) checks, then scrolls element into view before taking a screenshot. If the element is detached from DOM, the method throws an error.

Returns the buffer with the captured screenshot.

**Usage**

```codeBlockLines_e6Vv
element_handle.screenshot()
element_handle.screenshot(**kwargs)

```

**Arguments**

- `animations` "disabled" \| "allow" _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-screenshot-option-animations)

When set to `"disabled"`, stops CSS animations, CSS transitions and Web Animations. Animations get different treatment depending on their duration:


  - finite animations are fast-forwarded to completion, so they'll fire `transitionend` event.
  - infinite animations are canceled to initial state, and then played over after the screenshot.

Defaults to `"allow"` that leaves animations untouched.

- `caret` "hide" \| "initial" _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-screenshot-option-caret)

When set to `"hide"`, screenshot will hide text caret. When set to `"initial"`, text caret behavior will not be changed. Defaults to `"hide"`.

- `mask` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Locator](https://playwright.dev/python/docs/api/class-locator "Locator")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-screenshot-option-mask)

Specify locators that should be masked when the screenshot is taken. Masked elements will be overlaid with a pink box `#FF00FF` (customized by [mask\_color](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-screenshot-option-mask-color)) that completely covers its bounding box. The mask is also applied to invisible elements, see [Matching only visible elements](https://playwright.dev/python/docs/locators#matching-only-visible-elements) to disable that.

- `mask_color` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ Added in: v1.35 [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-screenshot-option-mask-color)

Specify the color of the overlay box for masked elements, in [CSS color format](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value). Default color is pink `#FF00FF`.

- `omit_background` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-screenshot-option-omit-background)

Hides default white background and allows capturing screenshots with transparency. Not applicable to `jpeg` images. Defaults to `false`.

- `path` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-screenshot-option-path)

The file path to save the image to. The screenshot type will be inferred from file extension. If [path](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-screenshot-option-path) is a relative path, then it is resolved relative to the current working directory. If no path is provided, the image won't be saved to the disk.

- `quality` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-screenshot-option-quality)

The quality of the image, between 0-100. Not applicable to `png` images.

- `scale` "css" \| "device" _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-screenshot-option-scale)

When set to `"css"`, screenshot will have a single pixel per each css pixel on the page. For high-dpi devices, this will keep screenshots small. Using `"device"` option will produce a single pixel per each device pixel, so screenshots of high-dpi devices will be twice as large or even larger.

Defaults to `"device"`.

- `style` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ Added in: v1.41 [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-screenshot-option-style)

Text of the stylesheet to apply while making the screenshot. This is where you can hide dynamic elements, make elements invisible or change their properties to help you creating repeatable screenshots. This stylesheet pierces the Shadow DOM and applies to the inner frames.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-screenshot-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `type` "png" \| "jpeg" _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-screenshot-option-type)

Specify screenshot type, defaults to `png`.


**Returns**

- [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-screenshot-return)

* * *

### scroll\_into\_view\_if\_needed [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-scroll-into-view-if-needed "Direct link to scroll_into_view_if_needed")

Added before v1.9elementHandle.scroll\_into\_view\_if\_needed

Discouraged

Use locator-based [locator.scroll\_into\_view\_if\_needed()](https://playwright.dev/python/docs/api/class-locator#locator-scroll-into-view-if-needed) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method waits for [actionability](https://playwright.dev/python/docs/actionability) checks, then tries to scroll element into view, unless it is completely visible as defined by [IntersectionObserver](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API)'s `ratio`.

Throws when `elementHandle` does not point to an element [connected](https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected) to a Document or a ShadowRoot.

See [scrolling](https://playwright.dev/python/docs/input#scrolling) for alternative ways to scroll.

**Usage**

```codeBlockLines_e6Vv
element_handle.scroll_into_view_if_needed()
element_handle.scroll_into_view_if_needed(**kwargs)

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-scroll-into-view-if-needed-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-scroll-into-view-if-needed-return)

* * *

### select\_option [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-select-option "Direct link to select_option")

Added before v1.9elementHandle.select\_option

Discouraged

Use locator-based [locator.select\_option()](https://playwright.dev/python/docs/api/class-locator#locator-select-option) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method waits for [actionability](https://playwright.dev/python/docs/actionability) checks, waits until all specified options are present in the `<select>` element and selects these options.

If the target element is not a `<select>` element, this method throws an error. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be used instead.

Returns the array of option values that have been successfully selected.

Triggers a `change` and `input` event once all the provided options have been selected.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
# Single selection matching the value or label
handle.select_option("blue")
# single selection matching both the label
handle.select_option(label="blue")
# multiple selection
handle.select_option(value=["red", "green", "blue"])

```

```codeBlockLines_e6Vv
# Single selection matching the value or label
await handle.select_option("blue")
# single selection matching the label
await handle.select_option(label="blue")
# multiple selection
await handle.select_option(value=["red", "green", "blue"])

```

**Arguments**

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.13 [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-select-option-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-select-option-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-select-option-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `element` [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-select-option-option-element)

Option elements to select. Optional.

- `index` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-select-option-option-index)

Options to select by index. Optional.

- `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-select-option-option-value)

Options to select by value. If the `<select>` has the `multiple` attribute, all given options are selected, otherwise only the first option matching one of the passed options is selected. Optional.

- `label` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-select-option-option-label)

Options to select by label. If the `<select>` has the `multiple` attribute, all given options are selected, otherwise only the first option matching one of the passed options is selected. Optional.


**Returns**

- [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-select-option-return)

* * *

### select\_text [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-select-text "Direct link to select_text")

Added before v1.9elementHandle.select\_text

Discouraged

Use locator-based [locator.select\_text()](https://playwright.dev/python/docs/api/class-locator#locator-select-text) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method waits for [actionability](https://playwright.dev/python/docs/actionability) checks, then focuses the element and selects all its text content.

If the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), focuses and selects text in the control instead.

**Usage**

```codeBlockLines_e6Vv
element_handle.select_text()
element_handle.select_text(**kwargs)

```

**Arguments**

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.13 [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-select-text-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-select-text-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-select-text-return)

* * *

### set\_checked [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-set-checked "Direct link to set_checked")

Added in: v1.15elementHandle.set\_checked

Discouraged

Use locator-based [locator.set\_checked()](https://playwright.dev/python/docs/api/class-locator#locator-set-checked) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method checks or unchecks an element by performing the following steps:

1. Ensure that element is a checkbox or a radio input. If not, this method throws.
2. If the element already has the right checked state, this method returns immediately.
3. Wait for [actionability](https://playwright.dev/python/docs/actionability) checks on the matched element, unless [force](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-set-checked-option-force) option is set. If the element is detached during the checks, the whole action is retried.
4. Scroll the element into view if needed.
5. Use [page.mouse](https://playwright.dev/python/docs/api/class-page#page-mouse) to click in the center of the element.
6. Ensure that the element is now checked or unchecked. If not, this method throws.

When all steps combined have not finished during the specified [timeout](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-set-checked-option-timeout), this method throws a [TimeoutError](https://playwright.dev/python/docs/api/class-timeouterror "TimeoutError"). Passing zero timeout disables this.

**Usage**

```codeBlockLines_e6Vv
element_handle.set_checked(checked)
element_handle.set_checked(checked, **kwargs)

```

**Arguments**

- `checked` [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-set-checked-option-checked)

Whether to check or uncheck the checkbox.

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-set-checked-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-set-checked-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-set-checked-option-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-set-checked-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-set-checked-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-set-checked-return)

* * *

### set\_input\_files [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-set-input-files "Direct link to set_input_files")

Added before v1.9elementHandle.set\_input\_files

Discouraged

Use locator-based [locator.set\_input\_files()](https://playwright.dev/python/docs/api/class-locator#locator-set-input-files) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Sets the value of the file input to these file paths or files. If some of the `filePaths` are relative paths, then they are resolved relative to the current working directory. For empty array, clears the selected files. For inputs with a `[webkitdirectory]` attribute, only a single directory path is supported.

This method expects [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") to point to an [input element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input). However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), targets the control instead.

**Usage**

```codeBlockLines_e6Vv
element_handle.set_input_files(files)
element_handle.set_input_files(files, **kwargs)

```

**Arguments**

- `files` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\]\] \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\] [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-set-input-files-option-files)
  - `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    File name

  - `mimeType` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    File type

  - `buffer` [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes")

    File content
- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-set-input-files-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-set-input-files-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-set-input-files-return)

* * *

### tap [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-tap "Direct link to tap")

Added before v1.9elementHandle.tap

Discouraged

Use locator-based [locator.tap()](https://playwright.dev/python/docs/api/class-locator#locator-tap) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method taps the element by performing the following steps:

1. Wait for [actionability](https://playwright.dev/python/docs/actionability) checks on the element, unless [force](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-tap-option-force) option is set.
2. Scroll the element into view if needed.
3. Use [page.touchscreen](https://playwright.dev/python/docs/api/class-page#page-touchscreen) to tap the center of the element, or the specified [position](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-tap-option-position).

If the element is detached from the DOM at any moment during the action, this method throws.

When all steps combined have not finished during the specified [timeout](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-tap-option-timeout), this method throws a [TimeoutError](https://playwright.dev/python/docs/api/class-timeouterror "TimeoutError"). Passing zero timeout disables this.

note

`elementHandle.tap()` requires that the `hasTouch` option of the browser context be set to true.

**Usage**

```codeBlockLines_e6Vv
element_handle.tap()
element_handle.tap(**kwargs)

```

**Arguments**

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-tap-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `modifiers` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\["Alt" \| "Control" \| "ControlOrMeta" \| "Meta" \| "Shift"\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-tap-option-modifiers)

Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to "Control" on Windows and Linux and to "Meta" on macOS.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-tap-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-tap-option-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-tap-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.11 [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-tap-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-tap-return)

* * *

### text\_content [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-text-content "Direct link to text_content")

Added before v1.9elementHandle.text\_content

Discouraged

Use locator-based [locator.text\_content()](https://playwright.dev/python/docs/api/class-locator#locator-text-content) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns the `node.textContent`.

**Usage**

```codeBlockLines_e6Vv
element_handle.text_content()

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-text-content-return)

* * *

### type [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-type "Direct link to type")

Added before v1.9elementHandle.type

Deprecated

In most cases, you should use [locator.fill()](https://playwright.dev/python/docs/api/class-locator#locator-fill) instead. You only need to press keys one by one if there is special keyboard handling on the page - in this case use [locator.press\_sequentially()](https://playwright.dev/python/docs/api/class-locator#locator-press-sequentially).

Focuses the element, and then sends a `keydown`, `keypress`/ `input`, and `keyup` event for each character in the text.

To press a special key, like `Control` or `ArrowDown`, use [element\_handle.press()](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-press).

**Usage**

**Arguments**

- `text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-type-option-text)

A text to type into a focused element.

- `delay` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-type-option-delay)

Time to wait between key presses in milliseconds. Defaults to 0.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-type-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-type-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-type-return)

* * *

### uncheck [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-uncheck "Direct link to uncheck")

Added before v1.9elementHandle.uncheck

Discouraged

Use locator-based [locator.uncheck()](https://playwright.dev/python/docs/api/class-locator#locator-uncheck) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method checks the element by performing the following steps:

1. Ensure that element is a checkbox or a radio input. If not, this method throws. If the element is already unchecked, this method returns immediately.
2. Wait for [actionability](https://playwright.dev/python/docs/actionability) checks on the element, unless [force](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-uncheck-option-force) option is set.
3. Scroll the element into view if needed.
4. Use [page.mouse](https://playwright.dev/python/docs/api/class-page#page-mouse) to click in the center of the element.
5. Ensure that the element is now unchecked. If not, this method throws.

If the element is detached from the DOM at any moment during the action, this method throws.

When all steps combined have not finished during the specified [timeout](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-uncheck-option-timeout), this method throws a [TimeoutError](https://playwright.dev/python/docs/api/class-timeouterror "TimeoutError"). Passing zero timeout disables this.

**Usage**

```codeBlockLines_e6Vv
element_handle.uncheck()
element_handle.uncheck(**kwargs)

```

**Arguments**

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-uncheck-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-uncheck-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ Added in: v1.11 [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-uncheck-option-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-uncheck-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.11 [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-uncheck-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-uncheck-return)

* * *

### wait\_for\_selector [​](https://playwright.dev/python/docs/api/class-elementhandle\#element-handle-wait-for-selector "Direct link to wait_for_selector")

Added before v1.9elementHandle.wait\_for\_selector

Discouraged

Use web assertions that assert visibility or a locator-based [locator.wait\_for()](https://playwright.dev/python/docs/api/class-locator#locator-wait-for) instead.

Returns element specified by selector when it satisfies [state](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-wait-for-selector-option-state) option. Returns `null` if waiting for `hidden` or `detached`.

Wait for the [selector](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-wait-for-selector-option-selector) relative to the element handle to satisfy [state](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-wait-for-selector-option-state) option (either appear/disappear from dom, or become visible/hidden). If at the moment of calling the method [selector](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-wait-for-selector-option-selector) already satisfies the condition, the method will return immediately. If the selector doesn't satisfy the condition for the [timeout](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-wait-for-selector-option-timeout) milliseconds, the function will throw.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
page.set_content("<div><span></span></div>")
div = page.query_selector("div")
# waiting for the "span" selector relative to the div.
span = div.wait_for_selector("span", state="attached")

```

```codeBlockLines_e6Vv
await page.set_content("<div><span></span></div>")
div = await page.query_selector("div")
# waiting for the "span" selector relative to the div.
span = await div.wait_for_selector("span", state="attached")

```

note

This method does not work across navigations, use [page.wait\_for\_selector()](https://playwright.dev/python/docs/api/class-page#page-wait-for-selector) instead.

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-wait-for-selector-option-selector)

A selector to query for.

- `state` "attached" \| "detached" \| "visible" \| "hidden" _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-wait-for-selector-option-state)

Defaults to `'visible'`. Can be either:
  - `'attached'` \- wait for element to be present in DOM.
  - `'detached'` \- wait for element to not be present in DOM.
  - `'visible'` \- wait for element to have non-empty bounding box and no `visibility:hidden`. Note that element without any content or with `display:none` has an empty bounding box and is not considered visible.
  - `'hidden'` \- wait for element to be either detached from DOM, or have an empty bounding box or `visibility:hidden`. This is opposite to the `'visible'` option.
- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.15 [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-wait-for-selector-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-wait-for-selector-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") [#](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-wait-for-selector-return)

- [Methods](https://playwright.dev/python/docs/api/class-elementhandle#methods)
  - [bounding\_box](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-bounding-box)
  - [content\_frame](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-content-frame)
  - [owner\_frame](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-owner-frame)
  - [wait\_for\_element\_state](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-wait-for-element-state)
- [Deprecated](https://playwright.dev/python/docs/api/class-elementhandle#deprecated)
  - [check](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-check)
  - [click](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-click)
  - [dblclick](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-dblclick)
  - [dispatch\_event](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-dispatch-event)
  - [eval\_on\_selector](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-eval-on-selector)
  - [eval\_on\_selector\_all](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-eval-on-selector-all)
  - [fill](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-fill)
  - [focus](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-focus)
  - [get\_attribute](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-get-attribute)
  - [hover](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-hover)
  - [inner\_html](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-inner-html)
  - [inner\_text](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-inner-text)
  - [input\_value](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-input-value)
  - [is\_checked](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-is-checked)
  - [is\_disabled](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-is-disabled)
  - [is\_editable](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-is-editable)
  - [is\_enabled](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-is-enabled)
  - [is\_hidden](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-is-hidden)
  - [is\_visible](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-is-visible)
  - [press](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-press)
  - [query\_selector](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-query-selector)
  - [query\_selector\_all](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-query-selector-all)
  - [screenshot](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-screenshot)
  - [scroll\_into\_view\_if\_needed](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-scroll-into-view-if-needed)
  - [select\_option](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-select-option)
  - [select\_text](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-select-text)
  - [set\_checked](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-set-checked)
  - [set\_input\_files](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-set-input-files)
  - [tap](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-tap)
  - [text\_content](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-text-content)
  - [type](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-type)
  - [uncheck](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-uncheck)
  - [wait\_for\_selector](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-wait-for-selector)

## Playwright Frame API
[Skip to main content](https://playwright.dev/python/docs/api/class-frame#__docusaurus_skipToContent_fallback)

On this page

At every point of time, page exposes its current frame tree via the [page.main\_frame](https://playwright.dev/python/docs/api/class-page#page-main-frame) and [frame.child\_frames](https://playwright.dev/python/docs/api/class-frame#frame-child-frames) methods.

[Frame](https://playwright.dev/python/docs/api/class-frame "Frame") object's lifecycle is controlled by three events, dispatched on the page object:

- [page.on("frameattached")](https://playwright.dev/python/docs/api/class-page#page-event-frame-attached) \- fired when the frame gets attached to the page. A Frame can be attached to the page only once.
- [page.on("framenavigated")](https://playwright.dev/python/docs/api/class-page#page-event-frame-navigated) \- fired when the frame commits navigation to a different URL.
- [page.on("framedetached")](https://playwright.dev/python/docs/api/class-page#page-event-frame-detached) \- fired when the frame gets detached from the page. A Frame can be detached from the page only once.

An example of dumping frame tree:

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    firefox = playwright.firefox
    browser = firefox.launch()
    page = browser.new_page()
    page.goto("https://www.theverge.com")
    dump_frame_tree(page.main_frame, "")
    browser.close()

def dump_frame_tree(frame, indent):
    print(indent + frame.name + '@' + frame.url)
    for child in frame.child_frames:
        dump_frame_tree(child, indent + "    ")

with sync_playwright() as playwright:
    run(playwright)

```

```codeBlockLines_e6Vv
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    firefox = playwright.firefox
    browser = await firefox.launch()
    page = await browser.new_page()
    await page.goto("https://www.theverge.com")
    dump_frame_tree(page.main_frame, "")
    await browser.close()

def dump_frame_tree(frame, indent):
    print(indent + frame.name + '@' + frame.url)
    for child in frame.child_frames:
        dump_frame_tree(child, indent + "    ")

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())

```

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-frame\#methods "Direct link to Methods")

### add\_script\_tag [​](https://playwright.dev/python/docs/api/class-frame\#frame-add-script-tag "Direct link to add_script_tag")

Added before v1.9frame.add\_script\_tag

Returns the added tag when the script's onload fires or when the script content was injected into frame.

Adds a `<script>` tag into the page with the desired url or content.

**Usage**

```codeBlockLines_e6Vv
frame.add_script_tag()
frame.add_script_tag(**kwargs)

```

**Arguments**

- `content` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-add-script-tag-option-content)

Raw JavaScript content to be injected into frame.

- `path` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-add-script-tag-option-path)

Path to the JavaScript file to be injected into frame. If `path` is a relative path, then it is resolved relative to the current working directory.

- `type` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-add-script-tag-option-type)

Script type. Use 'module' in order to load a JavaScript ES6 module. See [script](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script) for more details.

- `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-add-script-tag-option-url)

URL of a script to be added.


**Returns**

- [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") [#](https://playwright.dev/python/docs/api/class-frame#frame-add-script-tag-return)

* * *

### add\_style\_tag [​](https://playwright.dev/python/docs/api/class-frame\#frame-add-style-tag "Direct link to add_style_tag")

Added before v1.9frame.add\_style\_tag

Returns the added tag when the stylesheet's onload fires or when the CSS content was injected into frame.

Adds a `<link rel="stylesheet">` tag into the page with the desired url or a `<style type="text/css">` tag with the content.

**Usage**

```codeBlockLines_e6Vv
frame.add_style_tag()
frame.add_style_tag(**kwargs)

```

**Arguments**

- `content` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-add-style-tag-option-content)

Raw CSS content to be injected into frame.

- `path` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-add-style-tag-option-path)

Path to the CSS file to be injected into frame. If `path` is a relative path, then it is resolved relative to the current working directory.

- `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-add-style-tag-option-url)

URL of the `<link>` tag.


**Returns**

- [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") [#](https://playwright.dev/python/docs/api/class-frame#frame-add-style-tag-return)

* * *

### content [​](https://playwright.dev/python/docs/api/class-frame\#frame-content "Direct link to content")

Added before v1.9frame.content

Gets the full HTML contents of the frame, including the doctype.

**Usage**

```codeBlockLines_e6Vv
frame.content()

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-content-return)

* * *

### drag\_and\_drop [​](https://playwright.dev/python/docs/api/class-frame\#frame-drag-and-drop "Direct link to drag_and_drop")

Added in: v1.13frame.drag\_and\_drop

**Usage**

```codeBlockLines_e6Vv
frame.drag_and_drop(source, target)
frame.drag_and_drop(source, target, **kwargs)

```

**Arguments**

- `source` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-drag-and-drop-option-source)

A selector to search for an element to drag. If there are multiple elements satisfying the selector, the first will be used.

- `target` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-drag-and-drop-option-target)

A selector to search for an element to drop onto. If there are multiple elements satisfying the selector, the first will be used.

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-drag-and-drop-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-drag-and-drop-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `source_position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-drag-and-drop-option-source-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


Clicks on the source element at this point relative to the top-left corner of the element's padding box. If not specified, some visible point of the element is used.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-drag-and-drop-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `target_position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-drag-and-drop-option-target-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


Drops on the target element at this point relative to the top-left corner of the element's padding box. If not specified, some visible point of the element is used.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-drag-and-drop-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-drag-and-drop-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-frame#frame-drag-and-drop-return)

* * *

### evaluate [​](https://playwright.dev/python/docs/api/class-frame\#frame-evaluate "Direct link to evaluate")

Added before v1.9frame.evaluate

Returns the return value of [expression](https://playwright.dev/python/docs/api/class-frame#frame-evaluate-option-expression).

If the function passed to the [frame.evaluate()](https://playwright.dev/python/docs/api/class-frame#frame-evaluate) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then [frame.evaluate()](https://playwright.dev/python/docs/api/class-frame#frame-evaluate) would wait for the promise to resolve and return its value.

If the function passed to the [frame.evaluate()](https://playwright.dev/python/docs/api/class-frame#frame-evaluate) returns a non- [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable") value, then [frame.evaluate()](https://playwright.dev/python/docs/api/class-frame#frame-evaluate) returns `undefined`. Playwright also supports transferring some additional values that are not serializable by `JSON`: `-0`, `NaN`, `Infinity`, `-Infinity`.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
result = frame.evaluate("([x, y]) => Promise.resolve(x * y)", [7, 8])
print(result) # prints "56"

```

```codeBlockLines_e6Vv
result = await frame.evaluate("([x, y]) => Promise.resolve(x * y)", [7, 8])
print(result) # prints "56"

```

A string can also be passed in instead of a function.

- Sync
- Async

```codeBlockLines_e6Vv
print(frame.evaluate("1 + 2")) # prints "3"
x = 10
print(frame.evaluate(f"1 + {x}")) # prints "11"

```

```codeBlockLines_e6Vv
print(await frame.evaluate("1 + 2")) # prints "3"
x = 10
print(await frame.evaluate(f"1 + {x}")) # prints "11"

```

[ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") instances can be passed as an argument to the [frame.evaluate()](https://playwright.dev/python/docs/api/class-frame#frame-evaluate):

- Sync
- Async

```codeBlockLines_e6Vv
body_handle = frame.evaluate("document.body")
html = frame.evaluate("([body, suffix]) => body.innerHTML + suffix", [body_handle, "hello"])
body_handle.dispose()

```

```codeBlockLines_e6Vv
body_handle = await frame.evaluate("document.body")
html = await frame.evaluate("([body, suffix]) => body.innerHTML + suffix", [body_handle, "hello"])
await body_handle.dispose()

```

**Arguments**

- `expression` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-evaluate-option-expression)

JavaScript expression to be evaluated in the browser context. If the expression evaluates to a function, the function is automatically invoked.

- `arg` [EvaluationArgument](https://playwright.dev/python/docs/evaluating#evaluation-argument "EvaluationArgument") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-evaluate-option-arg)

Optional argument to pass to [expression](https://playwright.dev/python/docs/api/class-frame#frame-evaluate-option-expression).


**Returns**

- [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-frame#frame-evaluate-return)

* * *

### evaluate\_handle [​](https://playwright.dev/python/docs/api/class-frame\#frame-evaluate-handle "Direct link to evaluate_handle")

Added before v1.9frame.evaluate\_handle

Returns the return value of [expression](https://playwright.dev/python/docs/api/class-frame#frame-evaluate-handle-option-expression) as a [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle").

The only difference between [frame.evaluate()](https://playwright.dev/python/docs/api/class-frame#frame-evaluate) and [frame.evaluate\_handle()](https://playwright.dev/python/docs/api/class-frame#frame-evaluate-handle) is that [frame.evaluate\_handle()](https://playwright.dev/python/docs/api/class-frame#frame-evaluate-handle) returns [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle").

If the function, passed to the [frame.evaluate\_handle()](https://playwright.dev/python/docs/api/class-frame#frame-evaluate-handle), returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then [frame.evaluate\_handle()](https://playwright.dev/python/docs/api/class-frame#frame-evaluate-handle) would wait for the promise to resolve and return its value.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
a_window_handle = frame.evaluate_handle("Promise.resolve(window)")
a_window_handle # handle for the window object.

```

```codeBlockLines_e6Vv
a_window_handle = await frame.evaluate_handle("Promise.resolve(window)")
a_window_handle # handle for the window object.

```

A string can also be passed in instead of a function.

- Sync
- Async

```codeBlockLines_e6Vv
a_handle = page.evaluate_handle("document") # handle for the "document"

```

```codeBlockLines_e6Vv
a_handle = await page.evaluate_handle("document") # handle for the "document"

```

[JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle") instances can be passed as an argument to the [frame.evaluate\_handle()](https://playwright.dev/python/docs/api/class-frame#frame-evaluate-handle):

- Sync
- Async

```codeBlockLines_e6Vv
a_handle = page.evaluate_handle("document.body")
result_handle = page.evaluate_handle("body => body.innerHTML", a_handle)
print(result_handle.json_value())
result_handle.dispose()

```

```codeBlockLines_e6Vv
a_handle = await page.evaluate_handle("document.body")
result_handle = await page.evaluate_handle("body => body.innerHTML", a_handle)
print(await result_handle.json_value())
await result_handle.dispose()

```

**Arguments**

- `expression` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-evaluate-handle-option-expression)

JavaScript expression to be evaluated in the browser context. If the expression evaluates to a function, the function is automatically invoked.

- `arg` [EvaluationArgument](https://playwright.dev/python/docs/evaluating#evaluation-argument "EvaluationArgument") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-evaluate-handle-option-arg)

Optional argument to pass to [expression](https://playwright.dev/python/docs/api/class-frame#frame-evaluate-handle-option-expression).


**Returns**

- [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle") [#](https://playwright.dev/python/docs/api/class-frame#frame-evaluate-handle-return)

* * *

### frame\_element [​](https://playwright.dev/python/docs/api/class-frame\#frame-frame-element "Direct link to frame_element")

Added before v1.9frame.frame\_element

Returns the `frame` or `iframe` element handle which corresponds to this frame.

This is an inverse of [element\_handle.content\_frame()](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-content-frame). Note that returned handle actually belongs to the parent frame.

This method throws an error if the frame has been detached before `frameElement()` returns.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
frame_element = frame.frame_element()
content_frame = frame_element.content_frame()
assert frame == content_frame

```

```codeBlockLines_e6Vv
frame_element = await frame.frame_element()
content_frame = await frame_element.content_frame()
assert frame == content_frame

```

**Returns**

- [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") [#](https://playwright.dev/python/docs/api/class-frame#frame-frame-element-return)

* * *

### frame\_locator [​](https://playwright.dev/python/docs/api/class-frame\#frame-frame-locator "Direct link to frame_locator")

Added in: v1.17frame.frame\_locator

When working with iframes, you can create a frame locator that will enter the iframe and allow selecting elements in that iframe.

**Usage**

Following snippet locates element with text "Submit" in the iframe with id `my-frame`, like `<iframe id="my-frame">`:

- Sync
- Async

```codeBlockLines_e6Vv
locator = frame.frame_locator("#my-iframe").get_by_text("Submit")
locator.click()

```

```codeBlockLines_e6Vv
locator = frame.frame_locator("#my-iframe").get_by_text("Submit")
await locator.click()

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-frame-locator-option-selector)

A selector to use when resolving DOM element.


**Returns**

- [FrameLocator](https://playwright.dev/python/docs/api/class-framelocator "FrameLocator") [#](https://playwright.dev/python/docs/api/class-frame#frame-frame-locator-return)

* * *

### get\_by\_alt\_text [​](https://playwright.dev/python/docs/api/class-frame\#frame-get-by-alt-text "Direct link to get_by_alt_text")

Added in: v1.27frame.get\_by\_alt\_text

Allows locating elements by their alt text.

**Usage**

For example, this method will find the image by alt text "Playwright logo":

```codeBlockLines_e6Vv
<img alt='Playwright logo'>

```

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_alt_text("Playwright logo").click()

```

```codeBlockLines_e6Vv
await page.get_by_alt_text("Playwright logo").click()

```

**Arguments**

- `text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-frame#frame-get-by-alt-text-option-text)

Text to locate the element for.

- `exact` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-get-by-alt-text-option-exact)

Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-frame#frame-get-by-alt-text-return)

* * *

### get\_by\_label [​](https://playwright.dev/python/docs/api/class-frame\#frame-get-by-label "Direct link to get_by_label")

Added in: v1.27frame.get\_by\_label

Allows locating input elements by the text of the associated `<label>` or `aria-labelledby` element, or by the `aria-label` attribute.

**Usage**

For example, this method will find inputs by label "Username" and "Password" in the following DOM:

```codeBlockLines_e6Vv
<input aria-label="Username">
<label for="password-input">Password:</label>
<input id="password-input">

```

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_label("Username").fill("john")
page.get_by_label("Password").fill("secret")

```

```codeBlockLines_e6Vv
await page.get_by_label("Username").fill("john")
await page.get_by_label("Password").fill("secret")

```

**Arguments**

- `text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-frame#frame-get-by-label-option-text)

Text to locate the element for.

- `exact` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-get-by-label-option-exact)

Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-frame#frame-get-by-label-return)

* * *

### get\_by\_placeholder [​](https://playwright.dev/python/docs/api/class-frame\#frame-get-by-placeholder "Direct link to get_by_placeholder")

Added in: v1.27frame.get\_by\_placeholder

Allows locating input elements by the placeholder text.

**Usage**

For example, consider the following DOM structure.

```codeBlockLines_e6Vv
<input type="email" placeholder="name@example.com" />

```

You can fill the input after locating it by the placeholder text:

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_placeholder("name@example.com").fill("playwright@microsoft.com")

```

```codeBlockLines_e6Vv
await page.get_by_placeholder("name@example.com").fill("playwright@microsoft.com")

```

**Arguments**

- `text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-frame#frame-get-by-placeholder-option-text)

Text to locate the element for.

- `exact` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-get-by-placeholder-option-exact)

Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-frame#frame-get-by-placeholder-return)

* * *

### get\_by\_role [​](https://playwright.dev/python/docs/api/class-frame\#frame-get-by-role "Direct link to get_by_role")

Added in: v1.27frame.get\_by\_role

Allows locating elements by their [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).

**Usage**

Consider the following DOM structure.

```codeBlockLines_e6Vv
<h3>Sign up</h3>
<label>
  <input type="checkbox" /> Subscribe
</label>
<br/>
<button>Submit</button>

```

You can locate each element by it's implicit role:

- Sync
- Async

```codeBlockLines_e6Vv
expect(page.get_by_role("heading", name="Sign up")).to_be_visible()

page.get_by_role("checkbox", name="Subscribe").check()

page.get_by_role("button", name=re.compile("submit", re.IGNORECASE)).click()

```

```codeBlockLines_e6Vv
await expect(page.get_by_role("heading", name="Sign up")).to_be_visible()

await page.get_by_role("checkbox", name="Subscribe").check()

await page.get_by_role("button", name=re.compile("submit", re.IGNORECASE)).click()

```

**Arguments**

- `role` "alert" \| "alertdialog" \| "application" \| "article" \| "banner" \| "blockquote" \| "button" \| "caption" \| "cell" \| "checkbox" \| "code" \| "columnheader" \| "combobox" \| "complementary" \| "contentinfo" \| "definition" \| "deletion" \| "dialog" \| "directory" \| "document" \| "emphasis" \| "feed" \| "figure" \| "form" \| "generic" \| "grid" \| "gridcell" \| "group" \| "heading" \| "img" \| "insertion" \| "link" \| "list" \| "listbox" \| "listitem" \| "log" \| "main" \| "marquee" \| "math" \| "meter" \| "menu" \| "menubar" \| "menuitem" \| "menuitemcheckbox" \| "menuitemradio" \| "navigation" \| "none" \| "note" \| "option" \| "paragraph" \| "presentation" \| "progressbar" \| "radio" \| "radiogroup" \| "region" \| "row" \| "rowgroup" \| "rowheader" \| "scrollbar" \| "search" \| "searchbox" \| "separator" \| "slider" \| "spinbutton" \| "status" \| "strong" \| "subscript" \| "superscript" \| "switch" \| "tab" \| "table" \| "tablist" \| "tabpanel" \| "term" \| "textbox" \| "time" \| "timer" \| "toolbar" \| "tooltip" \| "tree" \| "treegrid" \| "treeitem" [#](https://playwright.dev/python/docs/api/class-frame#frame-get-by-role-option-role)

Required aria role.

- `checked` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-get-by-role-option-checked)

An attribute that is usually set by `aria-checked` or native `<input type=checkbox>` controls.

Learn more about [`aria-checked`](https://www.w3.org/TR/wai-aria-1.2/#aria-checked).

- `disabled` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-get-by-role-option-disabled)

An attribute that is usually set by `aria-disabled` or `disabled`.



note





Unlike most other attributes, `disabled` is inherited through the DOM hierarchy. Learn more about [`aria-disabled`](https://www.w3.org/TR/wai-aria-1.2/#aria-disabled).

- `exact` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.28 [#](https://playwright.dev/python/docs/api/class-frame#frame-get-by-role-option-exact)

Whether [name](https://playwright.dev/python/docs/api/class-frame#frame-get-by-role-option-name) is matched exactly: case-sensitive and whole-string. Defaults to false. Ignored when [name](https://playwright.dev/python/docs/api/class-frame#frame-get-by-role-option-name) is a regular expression. Note that exact match still trims whitespace.

- `expanded` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-get-by-role-option-expanded)

An attribute that is usually set by `aria-expanded`.

Learn more about [`aria-expanded`](https://www.w3.org/TR/wai-aria-1.2/#aria-expanded).

- `include_hidden` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-get-by-role-option-include-hidden)

Option that controls whether hidden elements are matched. By default, only non-hidden elements, as [defined by ARIA](https://www.w3.org/TR/wai-aria-1.2/#tree_exclusion), are matched by role selector.

Learn more about [`aria-hidden`](https://www.w3.org/TR/wai-aria-1.2/#aria-hidden).

- `level` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-get-by-role-option-level)

A number attribute that is usually present for roles `heading`, `listitem`, `row`, `treeitem`, with default values for `<h1>-<h6>` elements.

Learn more about [`aria-level`](https://www.w3.org/TR/wai-aria-1.2/#aria-level).

- `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-get-by-role-option-name)

Option to match the [accessible name](https://w3c.github.io/accname/#dfn-accessible-name). By default, matching is case-insensitive and searches for a substring, use [exact](https://playwright.dev/python/docs/api/class-frame#frame-get-by-role-option-exact) to control this behavior.

Learn more about [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).

- `pressed` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-get-by-role-option-pressed)

An attribute that is usually set by `aria-pressed`.

Learn more about [`aria-pressed`](https://www.w3.org/TR/wai-aria-1.2/#aria-pressed).

- `selected` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-get-by-role-option-selected)

An attribute that is usually set by `aria-selected`.

Learn more about [`aria-selected`](https://www.w3.org/TR/wai-aria-1.2/#aria-selected).


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-frame#frame-get-by-role-return)

**Details**

Role selector **does not replace** accessibility audits and conformance tests, but rather gives early feedback about the ARIA guidelines.

Many html elements have an implicitly [defined role](https://w3c.github.io/html-aam/#html-element-role-mappings) that is recognized by the role selector. You can find all the [supported roles here](https://www.w3.org/TR/wai-aria-1.2/#role_definitions). ARIA guidelines **do not recommend** duplicating implicit roles and attributes by setting `role` and/or `aria-*` attributes to default values.

* * *

### get\_by\_test\_id [​](https://playwright.dev/python/docs/api/class-frame\#frame-get-by-test-id "Direct link to get_by_test_id")

Added in: v1.27frame.get\_by\_test\_id

Locate element by the test id.

**Usage**

Consider the following DOM structure.

```codeBlockLines_e6Vv
<button data-testid="directions">Itinéraire</button>

```

You can locate the element by it's test id:

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_test_id("directions").click()

```

```codeBlockLines_e6Vv
await page.get_by_test_id("directions").click()

```

**Arguments**

- `test_id` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-frame#frame-get-by-test-id-option-test-id)

Id to locate the element by.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-frame#frame-get-by-test-id-return)

**Details**

By default, the `data-testid` attribute is used as a test id. Use [selectors.set\_test\_id\_attribute()](https://playwright.dev/python/docs/api/class-selectors#selectors-set-test-id-attribute) to configure a different test id attribute if necessary.

* * *

### get\_by\_text [​](https://playwright.dev/python/docs/api/class-frame\#frame-get-by-text "Direct link to get_by_text")

Added in: v1.27frame.get\_by\_text

Allows locating elements that contain given text.

See also [locator.filter()](https://playwright.dev/python/docs/api/class-locator#locator-filter) that allows to match by another criteria, like an accessible role, and then filter by the text content.

**Usage**

Consider the following DOM structure:

```codeBlockLines_e6Vv
<div>Hello <span>world</span></div>
<div>Hello</div>

```

You can locate by text substring, exact string, or a regular expression:

- Sync
- Async

```codeBlockLines_e6Vv
# Matches <span>
page.get_by_text("world")

# Matches first <div>
page.get_by_text("Hello world")

# Matches second <div>
page.get_by_text("Hello", exact=True)

# Matches both <div>s
page.get_by_text(re.compile("Hello"))

# Matches second <div>
page.get_by_text(re.compile("^hello$", re.IGNORECASE))

```

```codeBlockLines_e6Vv
# Matches <span>
page.get_by_text("world")

# Matches first <div>
page.get_by_text("Hello world")

# Matches second <div>
page.get_by_text("Hello", exact=True)

# Matches both <div>s
page.get_by_text(re.compile("Hello"))

# Matches second <div>
page.get_by_text(re.compile("^hello$", re.IGNORECASE))

```

**Arguments**

- `text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-frame#frame-get-by-text-option-text)

Text to locate the element for.

- `exact` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-get-by-text-option-exact)

Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-frame#frame-get-by-text-return)

**Details**

Matching by text always normalizes whitespace, even with exact match. For example, it turns multiple spaces into one, turns line breaks into spaces and ignores leading and trailing whitespace.

Input elements of the type `button` and `submit` are matched by their `value` instead of the text content. For example, locating by text `"Log in"` matches `<input type=button value="Log in">`.

* * *

### get\_by\_title [​](https://playwright.dev/python/docs/api/class-frame\#frame-get-by-title "Direct link to get_by_title")

Added in: v1.27frame.get\_by\_title

Allows locating elements by their title attribute.

**Usage**

Consider the following DOM structure.

```codeBlockLines_e6Vv
<span title='Issues count'>25 issues</span>

```

You can check the issues count after locating it by the title text:

- Sync
- Async

```codeBlockLines_e6Vv
expect(page.get_by_title("Issues count")).to_have_text("25 issues")

```

```codeBlockLines_e6Vv
await expect(page.get_by_title("Issues count")).to_have_text("25 issues")

```

**Arguments**

- `text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-frame#frame-get-by-title-option-text)

Text to locate the element for.

- `exact` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-get-by-title-option-exact)

Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-frame#frame-get-by-title-return)

* * *

### goto [​](https://playwright.dev/python/docs/api/class-frame\#frame-goto "Direct link to goto")

Added before v1.9frame.goto

Returns the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect.

The method will throw an error if:

- there's an SSL error (e.g. in case of self-signed certificates).
- target URL is invalid.
- the [timeout](https://playwright.dev/python/docs/api/class-frame#frame-goto-option-timeout) is exceeded during navigation.
- the remote server does not respond or is unreachable.
- the main resource failed to load.

The method will not throw an error when any valid HTTP status code is returned by the remote server, including 404 "Not Found" and 500 "Internal Server Error". The status code for such responses can be retrieved by calling [response.status](https://playwright.dev/python/docs/api/class-response#response-status).

note

The method either throws an error or returns a main resource response. The only exceptions are navigation to `about:blank` or navigation to the same URL with a different hash, which would succeed and return `null`.

note

Headless mode doesn't support navigation to a PDF document. See the [upstream issue](https://bugs.chromium.org/p/chromium/issues/detail?id=761295).

**Usage**

```codeBlockLines_e6Vv
frame.goto(url)
frame.goto(url, **kwargs)

```

**Arguments**

- `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-goto-option-url)

URL to navigate frame to. The url should include scheme, e.g. `https://`.

- `referer` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-goto-option-referer)

Referer header value. If provided it will take preference over the referer header value set by [page.set\_extra\_http\_headers()](https://playwright.dev/python/docs/api/class-page#page-set-extra-http-headers).

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-goto-option-timeout)

Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout), [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout), [page.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-navigation-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `wait_until` "load" \| "domcontentloaded" \| "networkidle" \| "commit" _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-goto-option-wait-until)

When to consider operation succeeded, defaults to `load`. Events can be either:
  - `'domcontentloaded'` \- consider operation to be finished when the `DOMContentLoaded` event is fired.
  - `'load'` \- consider operation to be finished when the `load` event is fired.
  - `'networkidle'` \- **DISCOURAGED** consider operation to be finished when there are no network connections for at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.
  - `'commit'` \- consider operation to be finished when network response is received and the document started loading.

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [Response](https://playwright.dev/python/docs/api/class-response "Response") [#](https://playwright.dev/python/docs/api/class-frame#frame-goto-return)

* * *

### is\_enabled [​](https://playwright.dev/python/docs/api/class-frame\#frame-is-enabled "Direct link to is_enabled")

Added before v1.9frame.is\_enabled

Returns whether the element is [enabled](https://playwright.dev/python/docs/actionability#enabled).

**Usage**

```codeBlockLines_e6Vv
frame.is_enabled(selector)
frame.is_enabled(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-is-enabled-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-is-enabled-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-is-enabled-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-frame#frame-is-enabled-return)

* * *

### locator [​](https://playwright.dev/python/docs/api/class-frame\#frame-locator "Direct link to locator")

Added in: v1.14frame.locator

The method returns an element locator that can be used to perform actions on this page / frame. Locator is resolved to the element immediately before performing an action, so a series of actions on the same locator can in fact be performed on different DOM elements. That would happen if the DOM structure between those actions has changed.

[Learn more about locators](https://playwright.dev/python/docs/locators).

[Learn more about locators](https://playwright.dev/python/docs/locators).

**Usage**

```codeBlockLines_e6Vv
frame.locator(selector)
frame.locator(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-locator-option-selector)

A selector to use when resolving DOM element.

- `has` [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-locator-option-has)

Narrows down the results of the method to those which contain elements matching this relative locator. For example, `article` that has `text=Playwright` matches `<article><div>Playwright</div></article>`.

Inner locator **must be relative** to the outer locator and is queried starting with the outer locator match, not the document root. For example, you can find `content` that has `div` in `<article><content><div>Playwright</div></content></article>`. However, looking for `content` that has `article div` will fail, because the inner locator must be relative and should not use any elements outside the `content`.

Note that outer and inner locators must belong to the same frame. Inner locator must not contain [FrameLocator](https://playwright.dev/python/docs/api/class-framelocator "FrameLocator") s.

- `has_not` [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") _(optional)_ Added in: v1.33 [#](https://playwright.dev/python/docs/api/class-frame#frame-locator-option-has-not)

Matches elements that do not contain an element that matches an inner locator. Inner locator is queried against the outer one. For example, `article` that does not have `div` matches `<article><span>Playwright</span></article>`.

Note that outer and inner locators must belong to the same frame. Inner locator must not contain [FrameLocator](https://playwright.dev/python/docs/api/class-framelocator "FrameLocator") s.

- `has_not_text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") _(optional)_ Added in: v1.33 [#](https://playwright.dev/python/docs/api/class-frame#frame-locator-option-has-not-text)

Matches elements that do not contain specified text somewhere inside, possibly in a child or a descendant element. When passed a \[string\], matching is case-insensitive and searches for a substring.

- `has_text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-locator-option-has-text)

Matches elements containing specified text somewhere inside, possibly in a child or a descendant element. When passed a \[string\], matching is case-insensitive and searches for a substring. For example, `"Playwright"` matches `<article><div>Playwright</div></article>`.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-frame#frame-locator-return)

* * *

### set\_content [​](https://playwright.dev/python/docs/api/class-frame\#frame-set-content "Direct link to set_content")

Added before v1.9frame.set\_content

This method internally calls [document.write()](https://developer.mozilla.org/en-US/docs/Web/API/Document/write), inheriting all its specific characteristics and behaviors.

**Usage**

```codeBlockLines_e6Vv
frame.set_content(html)
frame.set_content(html, **kwargs)

```

**Arguments**

- `html` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-set-content-option-html)

HTML markup to assign to the page.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-set-content-option-timeout)

Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout), [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout), [page.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-navigation-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `wait_until` "load" \| "domcontentloaded" \| "networkidle" \| "commit" _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-set-content-option-wait-until)

When to consider operation succeeded, defaults to `load`. Events can be either:
  - `'domcontentloaded'` \- consider operation to be finished when the `DOMContentLoaded` event is fired.
  - `'load'` \- consider operation to be finished when the `load` event is fired.
  - `'networkidle'` \- **DISCOURAGED** consider operation to be finished when there are no network connections for at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.
  - `'commit'` \- consider operation to be finished when network response is received and the document started loading.

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-frame#frame-set-content-return)

* * *

### title [​](https://playwright.dev/python/docs/api/class-frame\#frame-title "Direct link to title")

Added before v1.9frame.title

Returns the page title.

**Usage**

```codeBlockLines_e6Vv
frame.title()

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-title-return)

* * *

### wait\_for\_function [​](https://playwright.dev/python/docs/api/class-frame\#frame-wait-for-function "Direct link to wait_for_function")

Added before v1.9frame.wait\_for\_function

Returns when the [expression](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-function-option-expression) returns a truthy value, returns that value.

**Usage**

The [frame.wait\_for\_function()](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-function) can be used to observe viewport size change:

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    webkit = playwright.webkit
    browser = webkit.launch()
    page = browser.new_page()
    page.evaluate("window.x = 0; setTimeout(() => { window.x = 100 }, 1000);")
    page.main_frame.wait_for_function("() => window.x > 0")
    browser.close()

with sync_playwright() as playwright:
    run(playwright)

```

```codeBlockLines_e6Vv
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    webkit = playwright.webkit
    browser = await webkit.launch()
    page = await browser.new_page()
    await page.evaluate("window.x = 0; setTimeout(() => { window.x = 100 }, 1000);")
    await page.main_frame.wait_for_function("() => window.x > 0")
    await browser.close()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())

```

To pass an argument to the predicate of `frame.waitForFunction` function:

- Sync
- Async

```codeBlockLines_e6Vv
selector = ".foo"
frame.wait_for_function("selector => !!document.querySelector(selector)", selector)

```

```codeBlockLines_e6Vv
selector = ".foo"
await frame.wait_for_function("selector => !!document.querySelector(selector)", selector)

```

**Arguments**

- `expression` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-function-option-expression)

JavaScript expression to be evaluated in the browser context. If the expression evaluates to a function, the function is automatically invoked.

- `arg` [EvaluationArgument](https://playwright.dev/python/docs/evaluating#evaluation-argument "EvaluationArgument") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-function-option-arg)

Optional argument to pass to [expression](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-function-option-expression).

- `polling` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| "raf" _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-function-option-polling)

If [polling](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-function-option-polling) is `'raf'`, then [expression](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-function-option-expression) is constantly executed in `requestAnimationFrame` callback. If [polling](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-function-option-polling) is a number, then it is treated as an interval in milliseconds at which the function would be executed. Defaults to `raf`.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-function-option-timeout)

Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle") [#](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-function-return)

* * *

### wait\_for\_load\_state [​](https://playwright.dev/python/docs/api/class-frame\#frame-wait-for-load-state "Direct link to wait_for_load_state")

Added before v1.9frame.wait\_for\_load\_state

Waits for the required load state to be reached.

This returns when the frame reaches a required load state, `load` by default. The navigation must have been committed when this method is called. If current document has already reached the required state, resolves immediately.

note

Most of the time, this method is not needed because Playwright [auto-waits before every action](https://playwright.dev/python/docs/actionability).

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
frame.click("button") # click triggers navigation.
frame.wait_for_load_state() # the promise resolves after "load" event.

```

```codeBlockLines_e6Vv
await frame.click("button") # click triggers navigation.
await frame.wait_for_load_state() # the promise resolves after "load" event.

```

**Arguments**

- `state` "load" \| "domcontentloaded" \| "networkidle" _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-load-state-option-state)

Optional load state to wait for, defaults to `load`. If the state has been already reached while loading current document, the method resolves immediately. Can be one of:
  - `'load'` \- wait for the `load` event to be fired.
  - `'domcontentloaded'` \- wait for the `DOMContentLoaded` event to be fired.
  - `'networkidle'` \- **DISCOURAGED** wait until there are no network connections for at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.
- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-load-state-option-timeout)

Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout), [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout), [page.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-navigation-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-load-state-return)

* * *

### wait\_for\_url [​](https://playwright.dev/python/docs/api/class-frame\#frame-wait-for-url "Direct link to wait_for_url")

Added in: v1.11frame.wait\_for\_url

Waits for the frame to navigate to the given URL.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
frame.click("a.delayed-navigation") # clicking the link will indirectly cause a navigation
frame.wait_for_url("**/target.html")

```

```codeBlockLines_e6Vv
await frame.click("a.delayed-navigation") # clicking the link will indirectly cause a navigation
await frame.wait_for_url("**/target.html")

```

**Arguments**

- `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") \| [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [URL](https://en.wikipedia.org/wiki/URL "URL")\]: [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-url-option-url)

A glob pattern, regex pattern or predicate receiving [URL](https://en.wikipedia.org/wiki/URL "URL") to match while waiting for the navigation. Note that if the parameter is a string without wildcard characters, the method will wait for navigation to URL that is exactly equal to the string.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-url-option-timeout)

Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout), [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout), [page.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-navigation-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `wait_until` "load" \| "domcontentloaded" \| "networkidle" \| "commit" _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-url-option-wait-until)

When to consider operation succeeded, defaults to `load`. Events can be either:
  - `'domcontentloaded'` \- consider operation to be finished when the `DOMContentLoaded` event is fired.
  - `'load'` \- consider operation to be finished when the `load` event is fired.
  - `'networkidle'` \- **DISCOURAGED** consider operation to be finished when there are no network connections for at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.
  - `'commit'` \- consider operation to be finished when network response is received and the document started loading.

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-url-return)

* * *

## Properties [​](https://playwright.dev/python/docs/api/class-frame\#properties "Direct link to Properties")

### child\_frames [​](https://playwright.dev/python/docs/api/class-frame\#frame-child-frames "Direct link to child_frames")

Added before v1.9frame.child\_frames

**Usage**

```codeBlockLines_e6Vv
frame.child_frames

```

**Returns**

- [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Frame](https://playwright.dev/python/docs/api/class-frame "Frame")\] [#](https://playwright.dev/python/docs/api/class-frame#frame-child-frames-return)

* * *

### is\_detached [​](https://playwright.dev/python/docs/api/class-frame\#frame-is-detached "Direct link to is_detached")

Added before v1.9frame.is\_detached

Returns `true` if the frame has been detached, or `false` otherwise.

**Usage**

```codeBlockLines_e6Vv
frame.is_detached()

```

**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-frame#frame-is-detached-return)

* * *

### name [​](https://playwright.dev/python/docs/api/class-frame\#frame-name "Direct link to name")

Added before v1.9frame.name

Returns frame's name attribute as specified in the tag.

If the name is empty, returns the id attribute instead.

note

This value is calculated once when the frame is created, and will not update if the attribute is changed later.

**Usage**

```codeBlockLines_e6Vv
frame.name

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-name-return)

* * *

### page [​](https://playwright.dev/python/docs/api/class-frame\#frame-page "Direct link to page")

Added before v1.9frame.page

Returns the page containing this frame.

**Usage**

```codeBlockLines_e6Vv
frame.page

```

**Returns**

- [Page](https://playwright.dev/python/docs/api/class-page "Page") [#](https://playwright.dev/python/docs/api/class-frame#frame-page-return)

* * *

### parent\_frame [​](https://playwright.dev/python/docs/api/class-frame\#frame-parent-frame "Direct link to parent_frame")

Added before v1.9frame.parent\_frame

Parent frame, if any. Detached frames and main frames return `null`.

**Usage**

```codeBlockLines_e6Vv
frame.parent_frame

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [Frame](https://playwright.dev/python/docs/api/class-frame "Frame") [#](https://playwright.dev/python/docs/api/class-frame#frame-parent-frame-return)

* * *

### url [​](https://playwright.dev/python/docs/api/class-frame\#frame-url "Direct link to url")

Added before v1.9frame.url

Returns frame's url.

**Usage**

```codeBlockLines_e6Vv
frame.url

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-url-return)

* * *

## Deprecated [​](https://playwright.dev/python/docs/api/class-frame\#deprecated "Direct link to Deprecated")

### check [​](https://playwright.dev/python/docs/api/class-frame\#frame-check "Direct link to check")

Added before v1.9frame.check

Discouraged

Use locator-based [locator.check()](https://playwright.dev/python/docs/api/class-locator#locator-check) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method checks an element matching [selector](https://playwright.dev/python/docs/api/class-frame#frame-check-option-selector) by performing the following steps:

1. Find an element matching [selector](https://playwright.dev/python/docs/api/class-frame#frame-check-option-selector). If there is none, wait until a matching element is attached to the DOM.
2. Ensure that matched element is a checkbox or a radio input. If not, this method throws. If the element is already checked, this method returns immediately.
3. Wait for [actionability](https://playwright.dev/python/docs/actionability) checks on the matched element, unless [force](https://playwright.dev/python/docs/api/class-frame#frame-check-option-force) option is set. If the element is detached during the checks, the whole action is retried.
4. Scroll the element into view if needed.
5. Use [page.mouse](https://playwright.dev/python/docs/api/class-page#page-mouse) to click in the center of the element.
6. Ensure that the element is now checked. If not, this method throws.

When all steps combined have not finished during the specified [timeout](https://playwright.dev/python/docs/api/class-frame#frame-check-option-timeout), this method throws a [TimeoutError](https://playwright.dev/python/docs/api/class-timeouterror "TimeoutError"). Passing zero timeout disables this.

**Usage**

```codeBlockLines_e6Vv
frame.check(selector)
frame.check(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-check-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-check-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-check-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ Added in: v1.11 [#](https://playwright.dev/python/docs/api/class-frame#frame-check-option-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-check-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-check-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.11 [#](https://playwright.dev/python/docs/api/class-frame#frame-check-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-frame#frame-check-return)

* * *

### click [​](https://playwright.dev/python/docs/api/class-frame\#frame-click "Direct link to click")

Added before v1.9frame.click

Discouraged

Use locator-based [locator.click()](https://playwright.dev/python/docs/api/class-locator#locator-click) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method clicks an element matching [selector](https://playwright.dev/python/docs/api/class-frame#frame-click-option-selector) by performing the following steps:

1. Find an element matching [selector](https://playwright.dev/python/docs/api/class-frame#frame-click-option-selector). If there is none, wait until a matching element is attached to the DOM.
2. Wait for [actionability](https://playwright.dev/python/docs/actionability) checks on the matched element, unless [force](https://playwright.dev/python/docs/api/class-frame#frame-click-option-force) option is set. If the element is detached during the checks, the whole action is retried.
3. Scroll the element into view if needed.
4. Use [page.mouse](https://playwright.dev/python/docs/api/class-page#page-mouse) to click in the center of the element, or the specified [position](https://playwright.dev/python/docs/api/class-frame#frame-click-option-position).
5. Wait for initiated navigations to either succeed or fail, unless [no\_wait\_after](https://playwright.dev/python/docs/api/class-frame#frame-click-option-no-wait-after) option is set.

When all steps combined have not finished during the specified [timeout](https://playwright.dev/python/docs/api/class-frame#frame-click-option-timeout), this method throws a [TimeoutError](https://playwright.dev/python/docs/api/class-timeouterror "TimeoutError"). Passing zero timeout disables this.

**Usage**

```codeBlockLines_e6Vv
frame.click(selector)
frame.click(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-click-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `button` "left" \| "right" \| "middle" _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-click-option-button)

Defaults to `left`.

- `click_count` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-click-option-click-count)

defaults to 1. See [UIEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail "UIEvent.detail").

- `delay` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-click-option-delay)

Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-click-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `modifiers` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\["Alt" \| "Control" \| "ControlOrMeta" \| "Meta" \| "Shift"\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-click-option-modifiers)

Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to "Control" on Windows and Linux and to "Meta" on macOS.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-click-option-no-wait-after)



Deprecated





This option will default to `true` in the future.





Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.

- `position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-click-option-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-click-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-click-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.11 [#](https://playwright.dev/python/docs/api/class-frame#frame-click-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it. Note that keyboard `modifiers` will be pressed regardless of `trial` to allow testing elements which are only visible when those keys are pressed.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-frame#frame-click-return)

* * *

### dblclick [​](https://playwright.dev/python/docs/api/class-frame\#frame-dblclick "Direct link to dblclick")

Added before v1.9frame.dblclick

Discouraged

Use locator-based [locator.dblclick()](https://playwright.dev/python/docs/api/class-locator#locator-dblclick) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method double clicks an element matching [selector](https://playwright.dev/python/docs/api/class-frame#frame-dblclick-option-selector) by performing the following steps:

1. Find an element matching [selector](https://playwright.dev/python/docs/api/class-frame#frame-dblclick-option-selector). If there is none, wait until a matching element is attached to the DOM.
2. Wait for [actionability](https://playwright.dev/python/docs/actionability) checks on the matched element, unless [force](https://playwright.dev/python/docs/api/class-frame#frame-dblclick-option-force) option is set. If the element is detached during the checks, the whole action is retried.
3. Scroll the element into view if needed.
4. Use [page.mouse](https://playwright.dev/python/docs/api/class-page#page-mouse) to double click in the center of the element, or the specified [position](https://playwright.dev/python/docs/api/class-frame#frame-dblclick-option-position). if the first click of the `dblclick()` triggers a navigation event, this method will throw.

When all steps combined have not finished during the specified [timeout](https://playwright.dev/python/docs/api/class-frame#frame-dblclick-option-timeout), this method throws a [TimeoutError](https://playwright.dev/python/docs/api/class-timeouterror "TimeoutError"). Passing zero timeout disables this.

note

`frame.dblclick()` dispatches two `click` events and a single `dblclick` event.

**Usage**

```codeBlockLines_e6Vv
frame.dblclick(selector)
frame.dblclick(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-dblclick-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `button` "left" \| "right" \| "middle" _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-dblclick-option-button)

Defaults to `left`.

- `delay` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-dblclick-option-delay)

Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-dblclick-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `modifiers` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\["Alt" \| "Control" \| "ControlOrMeta" \| "Meta" \| "Shift"\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-dblclick-option-modifiers)

Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to "Control" on Windows and Linux and to "Meta" on macOS.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-dblclick-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-dblclick-option-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-dblclick-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-dblclick-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.11 [#](https://playwright.dev/python/docs/api/class-frame#frame-dblclick-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it. Note that keyboard `modifiers` will be pressed regardless of `trial` to allow testing elements which are only visible when those keys are pressed.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-frame#frame-dblclick-return)

* * *

### dispatch\_event [​](https://playwright.dev/python/docs/api/class-frame\#frame-dispatch-event "Direct link to dispatch_event")

Added before v1.9frame.dispatch\_event

Discouraged

Use locator-based [locator.dispatch\_event()](https://playwright.dev/python/docs/api/class-locator#locator-dispatch-event) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

The snippet below dispatches the `click` event on the element. Regardless of the visibility state of the element, `click` is dispatched. This is equivalent to calling [element.click()](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click).

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
frame.dispatch_event("button#submit", "click")

```

```codeBlockLines_e6Vv
await frame.dispatch_event("button#submit", "click")

```

Under the hood, it creates an instance of an event based on the given [type](https://playwright.dev/python/docs/api/class-frame#frame-dispatch-event-option-type), initializes it with [event\_init](https://playwright.dev/python/docs/api/class-frame#frame-dispatch-event-option-event-init) properties and dispatches it on the element. Events are `composed`, `cancelable` and bubble by default.

Since [event\_init](https://playwright.dev/python/docs/api/class-frame#frame-dispatch-event-option-event-init) is event-specific, please refer to the events documentation for the lists of initial properties:

- [DeviceMotionEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent/DeviceMotionEvent)
- [DeviceOrientationEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent/DeviceOrientationEvent)
- [DragEvent](https://developer.mozilla.org/en-US/docs/Web/API/DragEvent/DragEvent)
- [Event](https://developer.mozilla.org/en-US/docs/Web/API/Event/Event)
- [FocusEvent](https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent/FocusEvent)
- [KeyboardEvent](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/KeyboardEvent)
- [MouseEvent](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/MouseEvent)
- [PointerEvent](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/PointerEvent)
- [TouchEvent](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/TouchEvent)
- [WheelEvent](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/WheelEvent)

You can also specify `JSHandle` as the property value if you want live objects to be passed into the event:

- Sync
- Async

```codeBlockLines_e6Vv
# note you can only create data_transfer in chromium and firefox
data_transfer = frame.evaluate_handle("new DataTransfer()")
frame.dispatch_event("#source", "dragstart", { "dataTransfer": data_transfer })

```

```codeBlockLines_e6Vv
# note you can only create data_transfer in chromium and firefox
data_transfer = await frame.evaluate_handle("new DataTransfer()")
await frame.dispatch_event("#source", "dragstart", { "dataTransfer": data_transfer })

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-dispatch-event-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `type` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-dispatch-event-option-type)

DOM event type: `"click"`, `"dragstart"`, etc.

- `event_init` [EvaluationArgument](https://playwright.dev/python/docs/evaluating#evaluation-argument "EvaluationArgument") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-dispatch-event-option-event-init)

Optional event-specific initialization properties.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-dispatch-event-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-dispatch-event-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-frame#frame-dispatch-event-return)

* * *

### eval\_on\_selector [​](https://playwright.dev/python/docs/api/class-frame\#frame-eval-on-selector "Direct link to eval_on_selector")

Added in: v1.9frame.eval\_on\_selector

Discouraged

This method does not wait for the element to pass the actionability checks and therefore can lead to the flaky tests. Use [locator.evaluate()](https://playwright.dev/python/docs/api/class-locator#locator-evaluate), other [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") helper methods or web-first assertions instead.

Returns the return value of [expression](https://playwright.dev/python/docs/api/class-frame#frame-eval-on-selector-option-expression).

The method finds an element matching the specified selector within the frame and passes it as a first argument to [expression](https://playwright.dev/python/docs/api/class-frame#frame-eval-on-selector-option-expression). If no elements match the selector, the method throws an error.

If [expression](https://playwright.dev/python/docs/api/class-frame#frame-eval-on-selector-option-expression) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then [frame.eval\_on\_selector()](https://playwright.dev/python/docs/api/class-frame#frame-eval-on-selector) would wait for the promise to resolve and return its value.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
search_value = frame.eval_on_selector("#search", "el => el.value")
preload_href = frame.eval_on_selector("link[rel=preload]", "el => el.href")
html = frame.eval_on_selector(".main-container", "(e, suffix) => e.outerHTML + suffix", "hello")

```

```codeBlockLines_e6Vv
search_value = await frame.eval_on_selector("#search", "el => el.value")
preload_href = await frame.eval_on_selector("link[rel=preload]", "el => el.href")
html = await frame.eval_on_selector(".main-container", "(e, suffix) => e.outerHTML + suffix", "hello")

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-eval-on-selector-option-selector)

A selector to query for.

- `expression` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-eval-on-selector-option-expression)

JavaScript expression to be evaluated in the browser context. If the expression evaluates to a function, the function is automatically invoked.

- `arg` [EvaluationArgument](https://playwright.dev/python/docs/evaluating#evaluation-argument "EvaluationArgument") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-eval-on-selector-option-arg)

Optional argument to pass to [expression](https://playwright.dev/python/docs/api/class-frame#frame-eval-on-selector-option-expression).

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-eval-on-selector-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.


**Returns**

- [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-frame#frame-eval-on-selector-return)

* * *

### eval\_on\_selector\_all [​](https://playwright.dev/python/docs/api/class-frame\#frame-eval-on-selector-all "Direct link to eval_on_selector_all")

Added in: v1.9frame.eval\_on\_selector\_all

Discouraged

In most cases, [locator.evaluate\_all()](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-all), other [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") helper methods and web-first assertions do a better job.

Returns the return value of [expression](https://playwright.dev/python/docs/api/class-frame#frame-eval-on-selector-all-option-expression).

The method finds all elements matching the specified selector within the frame and passes an array of matched elements as a first argument to [expression](https://playwright.dev/python/docs/api/class-frame#frame-eval-on-selector-all-option-expression).

If [expression](https://playwright.dev/python/docs/api/class-frame#frame-eval-on-selector-all-option-expression) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then [frame.eval\_on\_selector\_all()](https://playwright.dev/python/docs/api/class-frame#frame-eval-on-selector-all) would wait for the promise to resolve and return its value.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
divs_counts = frame.eval_on_selector_all("div", "(divs, min) => divs.length >= min", 10)

```

```codeBlockLines_e6Vv
divs_counts = await frame.eval_on_selector_all("div", "(divs, min) => divs.length >= min", 10)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-eval-on-selector-all-option-selector)

A selector to query for.

- `expression` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-eval-on-selector-all-option-expression)

JavaScript expression to be evaluated in the browser context. If the expression evaluates to a function, the function is automatically invoked.

- `arg` [EvaluationArgument](https://playwright.dev/python/docs/evaluating#evaluation-argument "EvaluationArgument") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-eval-on-selector-all-option-arg)

Optional argument to pass to [expression](https://playwright.dev/python/docs/api/class-frame#frame-eval-on-selector-all-option-expression).


**Returns**

- [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-frame#frame-eval-on-selector-all-return)

* * *

### expect\_navigation [​](https://playwright.dev/python/docs/api/class-frame\#frame-wait-for-navigation "Direct link to expect_navigation")

Added before v1.9frame.expect\_navigation

Deprecated

This method is inherently racy, please use [frame.wait\_for\_url()](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-url) instead.

Waits for the frame navigation and returns the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with `null`.

**Usage**

This method waits for the frame to navigate to a new URL. It is useful for when you run code which will indirectly cause the frame to navigate. Consider this example:

- Sync
- Async

```codeBlockLines_e6Vv
with frame.expect_navigation():
    frame.click("a.delayed-navigation") # clicking the link will indirectly cause a navigation
# Resolves after navigation has finished

```

```codeBlockLines_e6Vv
async with frame.expect_navigation():
    await frame.click("a.delayed-navigation") # clicking the link will indirectly cause a navigation
# Resolves after navigation has finished

```

note

Usage of the [History API](https://developer.mozilla.org/en-US/docs/Web/API/History_API) to change the URL is considered a navigation.

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-navigation-option-timeout)

Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout), [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout), [page.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-navigation-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") \| [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [URL](https://en.wikipedia.org/wiki/URL "URL")\]: [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-navigation-option-url)

A glob pattern, regex pattern or predicate receiving [URL](https://en.wikipedia.org/wiki/URL "URL") to match while waiting for the navigation. Note that if the parameter is a string without wildcard characters, the method will wait for navigation to URL that is exactly equal to the string.

- `wait_until` "load" \| "domcontentloaded" \| "networkidle" \| "commit" _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-navigation-option-wait-until)

When to consider operation succeeded, defaults to `load`. Events can be either:
  - `'domcontentloaded'` \- consider operation to be finished when the `DOMContentLoaded` event is fired.
  - `'load'` \- consider operation to be finished when the `load` event is fired.
  - `'networkidle'` \- **DISCOURAGED** consider operation to be finished when there are no network connections for at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.
  - `'commit'` \- consider operation to be finished when network response is received and the document started loading.

**Returns**

- [EventContextManager](https://docs.python.org/3/reference/datamodel.html#context-managers "Event context manager")\[ [Response](https://playwright.dev/python/docs/api/class-response "Response")\] [#](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-navigation-return)

* * *

### fill [​](https://playwright.dev/python/docs/api/class-frame\#frame-fill "Direct link to fill")

Added before v1.9frame.fill

Discouraged

Use locator-based [locator.fill()](https://playwright.dev/python/docs/api/class-locator#locator-fill) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method waits for an element matching [selector](https://playwright.dev/python/docs/api/class-frame#frame-fill-option-selector), waits for [actionability](https://playwright.dev/python/docs/actionability) checks, focuses the element, fills it and triggers an `input` event after filling. Note that you can pass an empty string to clear the input field.

If the target element is not an `<input>`, `<textarea>` or `[contenteditable]` element, this method throws an error. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be filled instead.

To send fine-grained keyboard events, use [locator.press\_sequentially()](https://playwright.dev/python/docs/api/class-locator#locator-press-sequentially).

**Usage**

```codeBlockLines_e6Vv
frame.fill(selector, value)
frame.fill(selector, value, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-fill-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-fill-option-value)

Value to fill for the `<input>`, `<textarea>` or `[contenteditable]` element.

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.13 [#](https://playwright.dev/python/docs/api/class-frame#frame-fill-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-fill-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-fill-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-fill-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-frame#frame-fill-return)

* * *

### focus [​](https://playwright.dev/python/docs/api/class-frame\#frame-focus "Direct link to focus")

Added before v1.9frame.focus

Discouraged

Use locator-based [locator.focus()](https://playwright.dev/python/docs/api/class-locator#locator-focus) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method fetches an element with [selector](https://playwright.dev/python/docs/api/class-frame#frame-focus-option-selector) and focuses it. If there's no element matching [selector](https://playwright.dev/python/docs/api/class-frame#frame-focus-option-selector), the method waits until a matching element appears in the DOM.

**Usage**

```codeBlockLines_e6Vv
frame.focus(selector)
frame.focus(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-focus-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-focus-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-focus-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-frame#frame-focus-return)

* * *

### get\_attribute [​](https://playwright.dev/python/docs/api/class-frame\#frame-get-attribute "Direct link to get_attribute")

Added before v1.9frame.get\_attribute

Discouraged

Use locator-based [locator.get\_attribute()](https://playwright.dev/python/docs/api/class-locator#locator-get-attribute) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns element attribute value.

**Usage**

```codeBlockLines_e6Vv
frame.get_attribute(selector, name)
frame.get_attribute(selector, name, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-get-attribute-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-get-attribute-option-name)

Attribute name to get the value for.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-get-attribute-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-get-attribute-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-get-attribute-return)

* * *

### hover [​](https://playwright.dev/python/docs/api/class-frame\#frame-hover "Direct link to hover")

Added before v1.9frame.hover

Discouraged

Use locator-based [locator.hover()](https://playwright.dev/python/docs/api/class-locator#locator-hover) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method hovers over an element matching [selector](https://playwright.dev/python/docs/api/class-frame#frame-hover-option-selector) by performing the following steps:

1. Find an element matching [selector](https://playwright.dev/python/docs/api/class-frame#frame-hover-option-selector). If there is none, wait until a matching element is attached to the DOM.
2. Wait for [actionability](https://playwright.dev/python/docs/actionability) checks on the matched element, unless [force](https://playwright.dev/python/docs/api/class-frame#frame-hover-option-force) option is set. If the element is detached during the checks, the whole action is retried.
3. Scroll the element into view if needed.
4. Use [page.mouse](https://playwright.dev/python/docs/api/class-page#page-mouse) to hover over the center of the element, or the specified [position](https://playwright.dev/python/docs/api/class-frame#frame-hover-option-position).

When all steps combined have not finished during the specified [timeout](https://playwright.dev/python/docs/api/class-frame#frame-hover-option-timeout), this method throws a [TimeoutError](https://playwright.dev/python/docs/api/class-timeouterror "TimeoutError"). Passing zero timeout disables this.

**Usage**

```codeBlockLines_e6Vv
frame.hover(selector)
frame.hover(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-hover-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-hover-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `modifiers` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\["Alt" \| "Control" \| "ControlOrMeta" \| "Meta" \| "Shift"\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-hover-option-modifiers)

Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to "Control" on Windows and Linux and to "Meta" on macOS.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.28 [#](https://playwright.dev/python/docs/api/class-frame#frame-hover-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-hover-option-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-hover-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-hover-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.11 [#](https://playwright.dev/python/docs/api/class-frame#frame-hover-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it. Note that keyboard `modifiers` will be pressed regardless of `trial` to allow testing elements which are only visible when those keys are pressed.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-frame#frame-hover-return)

* * *

### inner\_html [​](https://playwright.dev/python/docs/api/class-frame\#frame-inner-html "Direct link to inner_html")

Added before v1.9frame.inner\_html

Discouraged

Use locator-based [locator.inner\_html()](https://playwright.dev/python/docs/api/class-locator#locator-inner-html) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns `element.innerHTML`.

**Usage**

```codeBlockLines_e6Vv
frame.inner_html(selector)
frame.inner_html(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-inner-html-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-inner-html-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-inner-html-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-inner-html-return)

* * *

### inner\_text [​](https://playwright.dev/python/docs/api/class-frame\#frame-inner-text "Direct link to inner_text")

Added before v1.9frame.inner\_text

Discouraged

Use locator-based [locator.inner\_text()](https://playwright.dev/python/docs/api/class-locator#locator-inner-text) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns `element.innerText`.

**Usage**

```codeBlockLines_e6Vv
frame.inner_text(selector)
frame.inner_text(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-inner-text-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-inner-text-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-inner-text-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-inner-text-return)

* * *

### input\_value [​](https://playwright.dev/python/docs/api/class-frame\#frame-input-value "Direct link to input_value")

Added in: v1.13frame.input\_value

Discouraged

Use locator-based [locator.input\_value()](https://playwright.dev/python/docs/api/class-locator#locator-input-value) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns `input.value` for the selected `<input>` or `<textarea>` or `<select>` element.

Throws for non-input elements. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), returns the value of the control.

**Usage**

```codeBlockLines_e6Vv
frame.input_value(selector)
frame.input_value(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-input-value-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-input-value-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-input-value-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-input-value-return)

* * *

### is\_checked [​](https://playwright.dev/python/docs/api/class-frame\#frame-is-checked "Direct link to is_checked")

Added before v1.9frame.is\_checked

Discouraged

Use locator-based [locator.is\_checked()](https://playwright.dev/python/docs/api/class-locator#locator-is-checked) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns whether the element is checked. Throws if the element is not a checkbox or radio input.

**Usage**

```codeBlockLines_e6Vv
frame.is_checked(selector)
frame.is_checked(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-is-checked-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-is-checked-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-is-checked-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-frame#frame-is-checked-return)

* * *

### is\_disabled [​](https://playwright.dev/python/docs/api/class-frame\#frame-is-disabled "Direct link to is_disabled")

Added before v1.9frame.is\_disabled

Discouraged

Use locator-based [locator.is\_disabled()](https://playwright.dev/python/docs/api/class-locator#locator-is-disabled) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns whether the element is disabled, the opposite of [enabled](https://playwright.dev/python/docs/actionability#enabled).

**Usage**

```codeBlockLines_e6Vv
frame.is_disabled(selector)
frame.is_disabled(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-is-disabled-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-is-disabled-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-is-disabled-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-frame#frame-is-disabled-return)

* * *

### is\_editable [​](https://playwright.dev/python/docs/api/class-frame\#frame-is-editable "Direct link to is_editable")

Added before v1.9frame.is\_editable

Discouraged

Use locator-based [locator.is\_editable()](https://playwright.dev/python/docs/api/class-locator#locator-is-editable) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns whether the element is [editable](https://playwright.dev/python/docs/actionability#editable).

**Usage**

```codeBlockLines_e6Vv
frame.is_editable(selector)
frame.is_editable(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-is-editable-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-is-editable-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-is-editable-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-frame#frame-is-editable-return)

* * *

### is\_hidden [​](https://playwright.dev/python/docs/api/class-frame\#frame-is-hidden "Direct link to is_hidden")

Added before v1.9frame.is\_hidden

Discouraged

Use locator-based [locator.is\_hidden()](https://playwright.dev/python/docs/api/class-locator#locator-is-hidden) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns whether the element is hidden, the opposite of [visible](https://playwright.dev/python/docs/actionability#visible). [selector](https://playwright.dev/python/docs/api/class-frame#frame-is-hidden-option-selector) that does not match any elements is considered hidden.

**Usage**

```codeBlockLines_e6Vv
frame.is_hidden(selector)
frame.is_hidden(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-is-hidden-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-is-hidden-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-is-hidden-option-timeout)



Deprecated





This option is ignored. [frame.is\_hidden()](https://playwright.dev/python/docs/api/class-frame#frame-is-hidden) does not wait for the element to become hidden and returns immediately.


**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-frame#frame-is-hidden-return)

* * *

### is\_visible [​](https://playwright.dev/python/docs/api/class-frame\#frame-is-visible "Direct link to is_visible")

Added before v1.9frame.is\_visible

Discouraged

Use locator-based [locator.is\_visible()](https://playwright.dev/python/docs/api/class-locator#locator-is-visible) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns whether the element is [visible](https://playwright.dev/python/docs/actionability#visible). [selector](https://playwright.dev/python/docs/api/class-frame#frame-is-visible-option-selector) that does not match any elements is considered not visible.

**Usage**

```codeBlockLines_e6Vv
frame.is_visible(selector)
frame.is_visible(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-is-visible-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-is-visible-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-is-visible-option-timeout)



Deprecated





This option is ignored. [frame.is\_visible()](https://playwright.dev/python/docs/api/class-frame#frame-is-visible) does not wait for the element to become visible and returns immediately.


**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-frame#frame-is-visible-return)

* * *

### press [​](https://playwright.dev/python/docs/api/class-frame\#frame-press "Direct link to press")

Added before v1.9frame.press

Discouraged

Use locator-based [locator.press()](https://playwright.dev/python/docs/api/class-locator#locator-press) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

[key](https://playwright.dev/python/docs/api/class-frame#frame-press-option-key) can specify the intended [keyboardEvent.key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) value or a single character to generate the text for. A superset of the [key](https://playwright.dev/python/docs/api/class-frame#frame-press-option-key) values can be found [here](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values). Examples of the keys are:

`F1` \- `F12`, `Digit0`\- `Digit9`, `KeyA`\- `KeyZ`, `Backquote`, `Minus`, `Equal`, `Backslash`, `Backspace`, `Tab`, `Delete`, `Escape`, `ArrowDown`, `End`, `Enter`, `Home`, `Insert`, `PageDown`, `PageUp`, `ArrowRight`, `ArrowUp`, etc.

Following modification shortcuts are also supported: `Shift`, `Control`, `Alt`, `Meta`, `ShiftLeft`, `ControlOrMeta`. `ControlOrMeta` resolves to `Control` on Windows and Linux and to `Meta` on macOS.

Holding down `Shift` will type the text that corresponds to the [key](https://playwright.dev/python/docs/api/class-frame#frame-press-option-key) in the upper case.

If [key](https://playwright.dev/python/docs/api/class-frame#frame-press-option-key) is a single character, it is case-sensitive, so the values `a` and `A` will generate different respective texts.

Shortcuts such as `key: "Control+o"`, `key: "Control++` or `key: "Control+Shift+T"` are supported as well. When specified with the modifier, modifier is pressed and being held while the subsequent key is being pressed.

**Usage**

```codeBlockLines_e6Vv
frame.press(selector, key)
frame.press(selector, key, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-press-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `key` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-press-option-key)

Name of the key to press or a character to generate, such as `ArrowLeft` or `a`.

- `delay` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-press-option-delay)

Time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-press-option-no-wait-after)



Deprecated





This option will default to `true` in the future.





Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-press-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-press-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-frame#frame-press-return)

* * *

### query\_selector [​](https://playwright.dev/python/docs/api/class-frame\#frame-query-selector "Direct link to query_selector")

Added in: v1.9frame.query\_selector

Discouraged

Use locator-based [frame.locator()](https://playwright.dev/python/docs/api/class-frame#frame-locator) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns the ElementHandle pointing to the frame element.

caution

The use of [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") is discouraged, use [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") objects and web-first assertions instead.

The method finds an element matching the specified selector within the frame. If no elements match the selector, returns `null`.

**Usage**

```codeBlockLines_e6Vv
frame.query_selector(selector)
frame.query_selector(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-query-selector-option-selector)

A selector to query for.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-query-selector-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") [#](https://playwright.dev/python/docs/api/class-frame#frame-query-selector-return)

* * *

### query\_selector\_all [​](https://playwright.dev/python/docs/api/class-frame\#frame-query-selector-all "Direct link to query_selector_all")

Added in: v1.9frame.query\_selector\_all

Discouraged

Use locator-based [frame.locator()](https://playwright.dev/python/docs/api/class-frame#frame-locator) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns the ElementHandles pointing to the frame elements.

caution

The use of [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") is discouraged, use [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") objects instead.

The method finds all elements matching the specified selector within the frame. If no elements match the selector, returns empty array.

**Usage**

```codeBlockLines_e6Vv
frame.query_selector_all(selector)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-query-selector-all-option-selector)

A selector to query for.


**Returns**

- [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle")\] [#](https://playwright.dev/python/docs/api/class-frame#frame-query-selector-all-return)

* * *

### select\_option [​](https://playwright.dev/python/docs/api/class-frame\#frame-select-option "Direct link to select_option")

Added before v1.9frame.select\_option

Discouraged

Use locator-based [locator.select\_option()](https://playwright.dev/python/docs/api/class-locator#locator-select-option) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method waits for an element matching [selector](https://playwright.dev/python/docs/api/class-frame#frame-select-option-option-selector), waits for [actionability](https://playwright.dev/python/docs/actionability) checks, waits until all specified options are present in the `<select>` element and selects these options.

If the target element is not a `<select>` element, this method throws an error. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be used instead.

Returns the array of option values that have been successfully selected.

Triggers a `change` and `input` event once all the provided options have been selected.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
# Single selection matching the value or label
frame.select_option("select#colors", "blue")
# single selection matching both the label
frame.select_option("select#colors", label="blue")
# multiple selection
frame.select_option("select#colors", value=["red", "green", "blue"])

```

```codeBlockLines_e6Vv
# Single selection matching the value or label
await frame.select_option("select#colors", "blue")
# single selection matching the label
await frame.select_option("select#colors", label="blue")
# multiple selection
await frame.select_option("select#colors", value=["red", "green", "blue"])

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-select-option-option-selector)

A selector to query for.

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.13 [#](https://playwright.dev/python/docs/api/class-frame#frame-select-option-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-select-option-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-select-option-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-select-option-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `element` [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-select-option-option-element)

Option elements to select. Optional.

- `index` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-select-option-option-index)

Options to select by index. Optional.

- `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-select-option-option-value)

Options to select by value. If the `<select>` has the `multiple` attribute, all given options are selected, otherwise only the first option matching one of the passed options is selected. Optional.

- `label` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-select-option-option-label)

Options to select by label. If the `<select>` has the `multiple` attribute, all given options are selected, otherwise only the first option matching one of the passed options is selected. Optional.


**Returns**

- [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] [#](https://playwright.dev/python/docs/api/class-frame#frame-select-option-return)

* * *

### set\_checked [​](https://playwright.dev/python/docs/api/class-frame\#frame-set-checked "Direct link to set_checked")

Added in: v1.15frame.set\_checked

Discouraged

Use locator-based [locator.set\_checked()](https://playwright.dev/python/docs/api/class-locator#locator-set-checked) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method checks or unchecks an element matching [selector](https://playwright.dev/python/docs/api/class-frame#frame-set-checked-option-selector) by performing the following steps:

1. Find an element matching [selector](https://playwright.dev/python/docs/api/class-frame#frame-set-checked-option-selector). If there is none, wait until a matching element is attached to the DOM.
2. Ensure that matched element is a checkbox or a radio input. If not, this method throws.
3. If the element already has the right checked state, this method returns immediately.
4. Wait for [actionability](https://playwright.dev/python/docs/actionability) checks on the matched element, unless [force](https://playwright.dev/python/docs/api/class-frame#frame-set-checked-option-force) option is set. If the element is detached during the checks, the whole action is retried.
5. Scroll the element into view if needed.
6. Use [page.mouse](https://playwright.dev/python/docs/api/class-page#page-mouse) to click in the center of the element.
7. Ensure that the element is now checked or unchecked. If not, this method throws.

When all steps combined have not finished during the specified [timeout](https://playwright.dev/python/docs/api/class-frame#frame-set-checked-option-timeout), this method throws a [TimeoutError](https://playwright.dev/python/docs/api/class-timeouterror "TimeoutError"). Passing zero timeout disables this.

**Usage**

```codeBlockLines_e6Vv
frame.set_checked(selector, checked)
frame.set_checked(selector, checked, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-set-checked-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `checked` [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-frame#frame-set-checked-option-checked)

Whether to check or uncheck the checkbox.

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-set-checked-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-set-checked-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-set-checked-option-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-set-checked-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-set-checked-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-set-checked-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-frame#frame-set-checked-return)

* * *

### set\_input\_files [​](https://playwright.dev/python/docs/api/class-frame\#frame-set-input-files "Direct link to set_input_files")

Added before v1.9frame.set\_input\_files

Discouraged

Use locator-based [locator.set\_input\_files()](https://playwright.dev/python/docs/api/class-locator#locator-set-input-files) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Sets the value of the file input to these file paths or files. If some of the `filePaths` are relative paths, then they are resolved relative to the current working directory. For empty array, clears the selected files.

This method expects [selector](https://playwright.dev/python/docs/api/class-frame#frame-set-input-files-option-selector) to point to an [input element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input). However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), targets the control instead.

**Usage**

```codeBlockLines_e6Vv
frame.set_input_files(selector, files)
frame.set_input_files(selector, files, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-set-input-files-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `files` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\]\] \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\] [#](https://playwright.dev/python/docs/api/class-frame#frame-set-input-files-option-files)
  - `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    File name

  - `mimeType` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    File type

  - `buffer` [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes")

    File content
- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-set-input-files-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-set-input-files-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-set-input-files-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-frame#frame-set-input-files-return)

* * *

### tap [​](https://playwright.dev/python/docs/api/class-frame\#frame-tap "Direct link to tap")

Added before v1.9frame.tap

Discouraged

Use locator-based [locator.tap()](https://playwright.dev/python/docs/api/class-locator#locator-tap) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method taps an element matching [selector](https://playwright.dev/python/docs/api/class-frame#frame-tap-option-selector) by performing the following steps:

1. Find an element matching [selector](https://playwright.dev/python/docs/api/class-frame#frame-tap-option-selector). If there is none, wait until a matching element is attached to the DOM.
2. Wait for [actionability](https://playwright.dev/python/docs/actionability) checks on the matched element, unless [force](https://playwright.dev/python/docs/api/class-frame#frame-tap-option-force) option is set. If the element is detached during the checks, the whole action is retried.
3. Scroll the element into view if needed.
4. Use [page.touchscreen](https://playwright.dev/python/docs/api/class-page#page-touchscreen) to tap the center of the element, or the specified [position](https://playwright.dev/python/docs/api/class-frame#frame-tap-option-position).

When all steps combined have not finished during the specified [timeout](https://playwright.dev/python/docs/api/class-frame#frame-tap-option-timeout), this method throws a [TimeoutError](https://playwright.dev/python/docs/api/class-timeouterror "TimeoutError"). Passing zero timeout disables this.

note

`frame.tap()` requires that the `hasTouch` option of the browser context be set to true.

**Usage**

```codeBlockLines_e6Vv
frame.tap(selector)
frame.tap(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-tap-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-tap-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `modifiers` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\["Alt" \| "Control" \| "ControlOrMeta" \| "Meta" \| "Shift"\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-tap-option-modifiers)

Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to "Control" on Windows and Linux and to "Meta" on macOS.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-tap-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-tap-option-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-tap-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-tap-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.11 [#](https://playwright.dev/python/docs/api/class-frame#frame-tap-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it. Note that keyboard `modifiers` will be pressed regardless of `trial` to allow testing elements which are only visible when those keys are pressed.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-frame#frame-tap-return)

* * *

### text\_content [​](https://playwright.dev/python/docs/api/class-frame\#frame-text-content "Direct link to text_content")

Added before v1.9frame.text\_content

Discouraged

Use locator-based [locator.text\_content()](https://playwright.dev/python/docs/api/class-locator#locator-text-content) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns `element.textContent`.

**Usage**

```codeBlockLines_e6Vv
frame.text_content(selector)
frame.text_content(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-text-content-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-text-content-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-text-content-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-text-content-return)

* * *

### type [​](https://playwright.dev/python/docs/api/class-frame\#frame-type "Direct link to type")

Added before v1.9frame.type

Deprecated

In most cases, you should use [locator.fill()](https://playwright.dev/python/docs/api/class-locator#locator-fill) instead. You only need to press keys one by one if there is special keyboard handling on the page - in this case use [locator.press\_sequentially()](https://playwright.dev/python/docs/api/class-locator#locator-press-sequentially).

Sends a `keydown`, `keypress`/ `input`, and `keyup` event for each character in the text. `frame.type` can be used to send fine-grained keyboard events. To fill values in form fields, use [frame.fill()](https://playwright.dev/python/docs/api/class-frame#frame-fill).

To press a special key, like `Control` or `ArrowDown`, use [keyboard.press()](https://playwright.dev/python/docs/api/class-keyboard#keyboard-press).

**Usage**

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-type-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-type-option-text)

A text to type into a focused element.

- `delay` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-type-option-delay)

Time to wait between key presses in milliseconds. Defaults to 0.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-type-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-type-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-type-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-frame#frame-type-return)

* * *

### uncheck [​](https://playwright.dev/python/docs/api/class-frame\#frame-uncheck "Direct link to uncheck")

Added before v1.9frame.uncheck

Discouraged

Use locator-based [locator.uncheck()](https://playwright.dev/python/docs/api/class-locator#locator-uncheck) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method checks an element matching [selector](https://playwright.dev/python/docs/api/class-frame#frame-uncheck-option-selector) by performing the following steps:

1. Find an element matching [selector](https://playwright.dev/python/docs/api/class-frame#frame-uncheck-option-selector). If there is none, wait until a matching element is attached to the DOM.
2. Ensure that matched element is a checkbox or a radio input. If not, this method throws. If the element is already unchecked, this method returns immediately.
3. Wait for [actionability](https://playwright.dev/python/docs/actionability) checks on the matched element, unless [force](https://playwright.dev/python/docs/api/class-frame#frame-uncheck-option-force) option is set. If the element is detached during the checks, the whole action is retried.
4. Scroll the element into view if needed.
5. Use [page.mouse](https://playwright.dev/python/docs/api/class-page#page-mouse) to click in the center of the element.
6. Ensure that the element is now unchecked. If not, this method throws.

When all steps combined have not finished during the specified [timeout](https://playwright.dev/python/docs/api/class-frame#frame-uncheck-option-timeout), this method throws a [TimeoutError](https://playwright.dev/python/docs/api/class-timeouterror "TimeoutError"). Passing zero timeout disables this.

**Usage**

```codeBlockLines_e6Vv
frame.uncheck(selector)
frame.uncheck(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-uncheck-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-uncheck-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-uncheck-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ Added in: v1.11 [#](https://playwright.dev/python/docs/api/class-frame#frame-uncheck-option-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-uncheck-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-uncheck-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.11 [#](https://playwright.dev/python/docs/api/class-frame#frame-uncheck-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-frame#frame-uncheck-return)

* * *

### wait\_for\_selector [​](https://playwright.dev/python/docs/api/class-frame\#frame-wait-for-selector "Direct link to wait_for_selector")

Added before v1.9frame.wait\_for\_selector

Discouraged

Use web assertions that assert visibility or a locator-based [locator.wait\_for()](https://playwright.dev/python/docs/api/class-locator#locator-wait-for) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns when element specified by selector satisfies [state](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-selector-option-state) option. Returns `null` if waiting for `hidden` or `detached`.

note

Playwright automatically waits for element to be ready before performing an action. Using [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") objects and web-first assertions make the code wait-for-selector-free.

Wait for the [selector](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-selector-option-selector) to satisfy [state](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-selector-option-state) option (either appear/disappear from dom, or become visible/hidden). If at the moment of calling the method [selector](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-selector-option-selector) already satisfies the condition, the method will return immediately. If the selector doesn't satisfy the condition for the [timeout](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-selector-option-timeout) milliseconds, the function will throw.

**Usage**

This method works across navigations:

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    chromium = playwright.chromium
    browser = chromium.launch()
    page = browser.new_page()
    for current_url in ["https://google.com", "https://bbc.com"]:
        page.goto(current_url, wait_until="domcontentloaded")
        element = page.main_frame.wait_for_selector("img")
        print("Loaded image: " + str(element.get_attribute("src")))
    browser.close()

with sync_playwright() as playwright:
    run(playwright)

```

```codeBlockLines_e6Vv
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    chromium = playwright.chromium
    browser = await chromium.launch()
    page = await browser.new_page()
    for current_url in ["https://google.com", "https://bbc.com"]:
        await page.goto(current_url, wait_until="domcontentloaded")
        element = await page.main_frame.wait_for_selector("img")
        print("Loaded image: " + str(await element.get_attribute("src")))
    await browser.close()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-selector-option-selector)

A selector to query for.

- `state` "attached" \| "detached" \| "visible" \| "hidden" _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-selector-option-state)

Defaults to `'visible'`. Can be either:
  - `'attached'` \- wait for element to be present in DOM.
  - `'detached'` \- wait for element to not be present in DOM.
  - `'visible'` \- wait for element to have non-empty bounding box and no `visibility:hidden`. Note that element without any content or with `display:none` has an empty bounding box and is not considered visible.
  - `'hidden'` \- wait for element to be either detached from DOM, or have an empty bounding box or `visibility:hidden`. This is opposite to the `'visible'` option.
- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-selector-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-selector-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") [#](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-selector-return)

* * *

### wait\_for\_timeout [​](https://playwright.dev/python/docs/api/class-frame\#frame-wait-for-timeout "Direct link to wait_for_timeout")

Added before v1.9frame.wait\_for\_timeout

Discouraged

Never wait for timeout in production. Tests that wait for time are inherently flaky. Use [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") actions and web assertions that wait automatically.

Waits for the given [timeout](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-timeout-option-timeout) in milliseconds.

Note that `frame.waitForTimeout()` should only be used for debugging. Tests using the timer in production are going to be flaky. Use signals such as network events, selectors becoming visible and others instead.

**Usage**

```codeBlockLines_e6Vv
frame.wait_for_timeout(timeout)

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") [#](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-timeout-option-timeout)

A timeout to wait for


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-timeout-return)

- [Methods](https://playwright.dev/python/docs/api/class-frame#methods)
  - [add\_script\_tag](https://playwright.dev/python/docs/api/class-frame#frame-add-script-tag)
  - [add\_style\_tag](https://playwright.dev/python/docs/api/class-frame#frame-add-style-tag)
  - [content](https://playwright.dev/python/docs/api/class-frame#frame-content)
  - [drag\_and\_drop](https://playwright.dev/python/docs/api/class-frame#frame-drag-and-drop)
  - [evaluate](https://playwright.dev/python/docs/api/class-frame#frame-evaluate)
  - [evaluate\_handle](https://playwright.dev/python/docs/api/class-frame#frame-evaluate-handle)
  - [frame\_element](https://playwright.dev/python/docs/api/class-frame#frame-frame-element)
  - [frame\_locator](https://playwright.dev/python/docs/api/class-frame#frame-frame-locator)
  - [get\_by\_alt\_text](https://playwright.dev/python/docs/api/class-frame#frame-get-by-alt-text)
  - [get\_by\_label](https://playwright.dev/python/docs/api/class-frame#frame-get-by-label)
  - [get\_by\_placeholder](https://playwright.dev/python/docs/api/class-frame#frame-get-by-placeholder)
  - [get\_by\_role](https://playwright.dev/python/docs/api/class-frame#frame-get-by-role)
  - [get\_by\_test\_id](https://playwright.dev/python/docs/api/class-frame#frame-get-by-test-id)
  - [get\_by\_text](https://playwright.dev/python/docs/api/class-frame#frame-get-by-text)
  - [get\_by\_title](https://playwright.dev/python/docs/api/class-frame#frame-get-by-title)
  - [goto](https://playwright.dev/python/docs/api/class-frame#frame-goto)
  - [is\_enabled](https://playwright.dev/python/docs/api/class-frame#frame-is-enabled)
  - [locator](https://playwright.dev/python/docs/api/class-frame#frame-locator)
  - [set\_content](https://playwright.dev/python/docs/api/class-frame#frame-set-content)
  - [title](https://playwright.dev/python/docs/api/class-frame#frame-title)
  - [wait\_for\_function](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-function)
  - [wait\_for\_load\_state](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-load-state)
  - [wait\_for\_url](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-url)
- [Properties](https://playwright.dev/python/docs/api/class-frame#properties)
  - [child\_frames](https://playwright.dev/python/docs/api/class-frame#frame-child-frames)
  - [is\_detached](https://playwright.dev/python/docs/api/class-frame#frame-is-detached)
  - [name](https://playwright.dev/python/docs/api/class-frame#frame-name)
  - [page](https://playwright.dev/python/docs/api/class-frame#frame-page)
  - [parent\_frame](https://playwright.dev/python/docs/api/class-frame#frame-parent-frame)
  - [url](https://playwright.dev/python/docs/api/class-frame#frame-url)
- [Deprecated](https://playwright.dev/python/docs/api/class-frame#deprecated)
  - [check](https://playwright.dev/python/docs/api/class-frame#frame-check)
  - [click](https://playwright.dev/python/docs/api/class-frame#frame-click)
  - [dblclick](https://playwright.dev/python/docs/api/class-frame#frame-dblclick)
  - [dispatch\_event](https://playwright.dev/python/docs/api/class-frame#frame-dispatch-event)
  - [eval\_on\_selector](https://playwright.dev/python/docs/api/class-frame#frame-eval-on-selector)
  - [eval\_on\_selector\_all](https://playwright.dev/python/docs/api/class-frame#frame-eval-on-selector-all)
  - [expect\_navigation](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-navigation)
  - [fill](https://playwright.dev/python/docs/api/class-frame#frame-fill)
  - [focus](https://playwright.dev/python/docs/api/class-frame#frame-focus)
  - [get\_attribute](https://playwright.dev/python/docs/api/class-frame#frame-get-attribute)
  - [hover](https://playwright.dev/python/docs/api/class-frame#frame-hover)
  - [inner\_html](https://playwright.dev/python/docs/api/class-frame#frame-inner-html)
  - [inner\_text](https://playwright.dev/python/docs/api/class-frame#frame-inner-text)
  - [input\_value](https://playwright.dev/python/docs/api/class-frame#frame-input-value)
  - [is\_checked](https://playwright.dev/python/docs/api/class-frame#frame-is-checked)
  - [is\_disabled](https://playwright.dev/python/docs/api/class-frame#frame-is-disabled)
  - [is\_editable](https://playwright.dev/python/docs/api/class-frame#frame-is-editable)
  - [is\_hidden](https://playwright.dev/python/docs/api/class-frame#frame-is-hidden)
  - [is\_visible](https://playwright.dev/python/docs/api/class-frame#frame-is-visible)
  - [press](https://playwright.dev/python/docs/api/class-frame#frame-press)
  - [query\_selector](https://playwright.dev/python/docs/api/class-frame#frame-query-selector)
  - [query\_selector\_all](https://playwright.dev/python/docs/api/class-frame#frame-query-selector-all)
  - [select\_option](https://playwright.dev/python/docs/api/class-frame#frame-select-option)
  - [set\_checked](https://playwright.dev/python/docs/api/class-frame#frame-set-checked)
  - [set\_input\_files](https://playwright.dev/python/docs/api/class-frame#frame-set-input-files)
  - [tap](https://playwright.dev/python/docs/api/class-frame#frame-tap)
  - [text\_content](https://playwright.dev/python/docs/api/class-frame#frame-text-content)
  - [type](https://playwright.dev/python/docs/api/class-frame#frame-type)
  - [uncheck](https://playwright.dev/python/docs/api/class-frame#frame-uncheck)
  - [wait\_for\_selector](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-selector)
  - [wait\_for\_timeout](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-timeout)

## Playwright APIResponse Class
[Skip to main content](https://playwright.dev/python/docs/api/class-apiresponse#__docusaurus_skipToContent_fallback)

On this page

[APIResponse](https://playwright.dev/python/docs/api/class-apiresponse "APIResponse") class represents responses returned by [api\_request\_context.get()](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-get) and similar methods.

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright

with sync_playwright() as p:
    context = playwright.request.new_context()
    response = context.get("https://example.com/user/repos")
    assert response.ok
    assert response.status == 200
    assert response.headers["content-type"] == "application/json; charset=utf-8"
    assert response.json()["name"] == "foobar"
    assert response.body() == '{"status": "ok"}'

```

```codeBlockLines_e6Vv
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    context = await playwright.request.new_context()
    response = await context.get("https://example.com/user/repos")
    assert response.ok
    assert response.status == 200
    assert response.headers["content-type"] == "application/json; charset=utf-8"
    assert response.json()["name"] == "foobar"
    assert await response.body() == '{"status": "ok"}'

async def main():
    async with async_playwright() as playwright:
        await run(playwright)

asyncio.run(main())

```

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-apiresponse\#methods "Direct link to Methods")

### body [​](https://playwright.dev/python/docs/api/class-apiresponse\#api-response-body "Direct link to body")

Added in: v1.16apiResponse.body

Returns the buffer with response body.

**Usage**

```codeBlockLines_e6Vv
api_response.body()

```

**Returns**

- [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") [#](https://playwright.dev/python/docs/api/class-apiresponse#api-response-body-return)

* * *

### dispose [​](https://playwright.dev/python/docs/api/class-apiresponse\#api-response-dispose "Direct link to dispose")

Added in: v1.16apiResponse.dispose

Disposes the body of this response. If not called then the body will stay in memory until the context closes.

**Usage**

```codeBlockLines_e6Vv
api_response.dispose()

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-apiresponse#api-response-dispose-return)

* * *

### json [​](https://playwright.dev/python/docs/api/class-apiresponse\#api-response-json "Direct link to json")

Added in: v1.16apiResponse.json

Returns the JSON representation of response body.

This method will throw if the response body is not parsable via `JSON.parse`.

**Usage**

```codeBlockLines_e6Vv
api_response.json()

```

**Returns**

- [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-apiresponse#api-response-json-return)

* * *

### text [​](https://playwright.dev/python/docs/api/class-apiresponse\#api-response-text "Direct link to text")

Added in: v1.16apiResponse.text

Returns the text representation of response body.

**Usage**

```codeBlockLines_e6Vv
api_response.text()

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-apiresponse#api-response-text-return)

* * *

## Properties [​](https://playwright.dev/python/docs/api/class-apiresponse\#properties "Direct link to Properties")

### headers [​](https://playwright.dev/python/docs/api/class-apiresponse\#api-response-headers "Direct link to headers")

Added in: v1.16apiResponse.headers

An object with all the response HTTP headers associated with this response.

**Usage**

```codeBlockLines_e6Vv
api_response.headers

```

**Returns**

- [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] [#](https://playwright.dev/python/docs/api/class-apiresponse#api-response-headers-return)

* * *

### headers\_array [​](https://playwright.dev/python/docs/api/class-apiresponse\#api-response-headers-array "Direct link to headers_array")

Added in: v1.16apiResponse.headers\_array

An array with all the response HTTP headers associated with this response. Header names are not lower-cased. Headers with multiple entries, such as `Set-Cookie`, appear in the array multiple times.

**Usage**

```codeBlockLines_e6Vv
api_response.headers_array

```

**Returns**

- [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\] [#](https://playwright.dev/python/docs/api/class-apiresponse#api-response-headers-array-return)
  - `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    Name of the header.

  - `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    Value of the header.

* * *

### ok [​](https://playwright.dev/python/docs/api/class-apiresponse\#api-response-ok "Direct link to ok")

Added in: v1.16apiResponse.ok

Contains a boolean stating whether the response was successful (status in the range 200-299) or not.

**Usage**

```codeBlockLines_e6Vv
api_response.ok

```

**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-apiresponse#api-response-ok-return)

* * *

### status [​](https://playwright.dev/python/docs/api/class-apiresponse\#api-response-status "Direct link to status")

Added in: v1.16apiResponse.status

Contains the status code of the response (e.g., 200 for a success).

**Usage**

```codeBlockLines_e6Vv
api_response.status

```

**Returns**

- [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") [#](https://playwright.dev/python/docs/api/class-apiresponse#api-response-status-return)

* * *

### status\_text [​](https://playwright.dev/python/docs/api/class-apiresponse\#api-response-status-text "Direct link to status_text")

Added in: v1.16apiResponse.status\_text

Contains the status text of the response (e.g. usually an "OK" for a success).

**Usage**

```codeBlockLines_e6Vv
api_response.status_text

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-apiresponse#api-response-status-text-return)

* * *

### url [​](https://playwright.dev/python/docs/api/class-apiresponse\#api-response-url "Direct link to url")

Added in: v1.16apiResponse.url

Contains the URL of the response.

**Usage**

```codeBlockLines_e6Vv
api_response.url

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-apiresponse#api-response-url-return)

- [Methods](https://playwright.dev/python/docs/api/class-apiresponse#methods)
  - [body](https://playwright.dev/python/docs/api/class-apiresponse#api-response-body)
  - [dispose](https://playwright.dev/python/docs/api/class-apiresponse#api-response-dispose)
  - [json](https://playwright.dev/python/docs/api/class-apiresponse#api-response-json)
  - [text](https://playwright.dev/python/docs/api/class-apiresponse#api-response-text)
- [Properties](https://playwright.dev/python/docs/api/class-apiresponse#properties)
  - [headers](https://playwright.dev/python/docs/api/class-apiresponse#api-response-headers)
  - [headers\_array](https://playwright.dev/python/docs/api/class-apiresponse#api-response-headers-array)
  - [ok](https://playwright.dev/python/docs/api/class-apiresponse#api-response-ok)
  - [status](https://playwright.dev/python/docs/api/class-apiresponse#api-response-status)
  - [status\_text](https://playwright.dev/python/docs/api/class-apiresponse#api-response-status-text)
  - [url](https://playwright.dev/python/docs/api/class-apiresponse#api-response-url)

## WebError Class Overview
[Skip to main content](https://playwright.dev/python/docs/api/class-weberror#__docusaurus_skipToContent_fallback)

On this page

[WebError](https://playwright.dev/python/docs/api/class-weberror "WebError") class represents an unhandled exception thrown in the page. It is dispatched via the [browser\_context.on("weberror")](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-event-web-error) event.

- Sync
- Async

```codeBlockLines_e6Vv
# Log all uncaught errors to the terminal
context.on("weberror", lambda web_error: print(f"uncaught exception: {web_error.error}"))

# Navigate to a page with an exception.
page.goto("data:text/html,<script>throw new Error('test')</script>")

```

```codeBlockLines_e6Vv
# Log all uncaught errors to the terminal
context.on("weberror", lambda web_error: print(f"uncaught exception: {web_error.error}"))

# Navigate to a page with an exception.
await page.goto("data:text/html,<script>throw new Error('test')</script>")

```

* * *

## Properties [​](https://playwright.dev/python/docs/api/class-weberror\#properties "Direct link to Properties")

### error [​](https://playwright.dev/python/docs/api/class-weberror\#web-error-error "Direct link to error")

Added in: v1.38webError.error

Unhandled error that was thrown.

**Usage**

```codeBlockLines_e6Vv
web_error.error

```

**Returns**

- [Error](https://playwright.dev/python/docs/api/class-error "Error") [#](https://playwright.dev/python/docs/api/class-weberror#web-error-error-return)

* * *

### page [​](https://playwright.dev/python/docs/api/class-weberror\#web-error-page "Direct link to page")

Added in: v1.38webError.page

The page that produced this unhandled exception, if any.

**Usage**

```codeBlockLines_e6Vv
web_error.page

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [Page](https://playwright.dev/python/docs/api/class-page "Page") [#](https://playwright.dev/python/docs/api/class-weberror#web-error-page-return)

- [Properties](https://playwright.dev/python/docs/api/class-weberror#properties)
  - [error](https://playwright.dev/python/docs/api/class-weberror#web-error-error)
  - [page](https://playwright.dev/python/docs/api/class-weberror#web-error-page)

## Playwright Mouse Class
[Skip to main content](https://playwright.dev/python/docs/api/class-mouse#__docusaurus_skipToContent_fallback)

On this page

The Mouse class operates in main-frame CSS pixels relative to the top-left corner of the viewport.

Every `page` object has its own Mouse, accessible with [page.mouse](https://playwright.dev/python/docs/api/class-page#page-mouse).

- Sync
- Async

```codeBlockLines_e6Vv
# using ‘page.mouse’ to trace a 100x100 square.
page.mouse.move(0, 0)
page.mouse.down()
page.mouse.move(0, 100)
page.mouse.move(100, 100)
page.mouse.move(100, 0)
page.mouse.move(0, 0)
page.mouse.up()

```

```codeBlockLines_e6Vv
# using ‘page.mouse’ to trace a 100x100 square.
await page.mouse.move(0, 0)
await page.mouse.down()
await page.mouse.move(0, 100)
await page.mouse.move(100, 100)
await page.mouse.move(100, 0)
await page.mouse.move(0, 0)
await page.mouse.up()

```

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-mouse\#methods "Direct link to Methods")

### click [​](https://playwright.dev/python/docs/api/class-mouse\#mouse-click "Direct link to click")

Added before v1.9mouse.click

Shortcut for [mouse.move()](https://playwright.dev/python/docs/api/class-mouse#mouse-move), [mouse.down()](https://playwright.dev/python/docs/api/class-mouse#mouse-down), [mouse.up()](https://playwright.dev/python/docs/api/class-mouse#mouse-up).

**Usage**

```codeBlockLines_e6Vv
mouse.click(x, y)
mouse.click(x, y, **kwargs)

```

**Arguments**

- `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") [#](https://playwright.dev/python/docs/api/class-mouse#mouse-click-option-x)

X coordinate relative to the main frame's viewport in CSS pixels.

- `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") [#](https://playwright.dev/python/docs/api/class-mouse#mouse-click-option-y)

Y coordinate relative to the main frame's viewport in CSS pixels.

- `button` "left" \| "right" \| "middle" _(optional)_ [#](https://playwright.dev/python/docs/api/class-mouse#mouse-click-option-button)

Defaults to `left`.

- `click_count` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ [#](https://playwright.dev/python/docs/api/class-mouse#mouse-click-option-click-count)

defaults to 1. See [UIEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail "UIEvent.detail").

- `delay` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-mouse#mouse-click-option-delay)

Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-mouse#mouse-click-return)

* * *

### dblclick [​](https://playwright.dev/python/docs/api/class-mouse\#mouse-dblclick "Direct link to dblclick")

Added before v1.9mouse.dblclick

Shortcut for [mouse.move()](https://playwright.dev/python/docs/api/class-mouse#mouse-move), [mouse.down()](https://playwright.dev/python/docs/api/class-mouse#mouse-down), [mouse.up()](https://playwright.dev/python/docs/api/class-mouse#mouse-up), [mouse.down()](https://playwright.dev/python/docs/api/class-mouse#mouse-down) and [mouse.up()](https://playwright.dev/python/docs/api/class-mouse#mouse-up).

**Usage**

```codeBlockLines_e6Vv
mouse.dblclick(x, y)
mouse.dblclick(x, y, **kwargs)

```

**Arguments**

- `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") [#](https://playwright.dev/python/docs/api/class-mouse#mouse-dblclick-option-x)

X coordinate relative to the main frame's viewport in CSS pixels.

- `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") [#](https://playwright.dev/python/docs/api/class-mouse#mouse-dblclick-option-y)

Y coordinate relative to the main frame's viewport in CSS pixels.

- `button` "left" \| "right" \| "middle" _(optional)_ [#](https://playwright.dev/python/docs/api/class-mouse#mouse-dblclick-option-button)

Defaults to `left`.

- `delay` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-mouse#mouse-dblclick-option-delay)

Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-mouse#mouse-dblclick-return)

* * *

### down [​](https://playwright.dev/python/docs/api/class-mouse\#mouse-down "Direct link to down")

Added before v1.9mouse.down

Dispatches a `mousedown` event.

**Usage**

```codeBlockLines_e6Vv
mouse.down()
mouse.down(**kwargs)

```

**Arguments**

- `button` "left" \| "right" \| "middle" _(optional)_ [#](https://playwright.dev/python/docs/api/class-mouse#mouse-down-option-button)

Defaults to `left`.

- `click_count` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ [#](https://playwright.dev/python/docs/api/class-mouse#mouse-down-option-click-count)

defaults to 1. See [UIEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail "UIEvent.detail").


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-mouse#mouse-down-return)

* * *

### move [​](https://playwright.dev/python/docs/api/class-mouse\#mouse-move "Direct link to move")

Added before v1.9mouse.move

Dispatches a `mousemove` event.

**Usage**

```codeBlockLines_e6Vv
mouse.move(x, y)
mouse.move(x, y, **kwargs)

```

**Arguments**

- `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") [#](https://playwright.dev/python/docs/api/class-mouse#mouse-move-option-x)

X coordinate relative to the main frame's viewport in CSS pixels.

- `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") [#](https://playwright.dev/python/docs/api/class-mouse#mouse-move-option-y)

Y coordinate relative to the main frame's viewport in CSS pixels.

- `steps` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ [#](https://playwright.dev/python/docs/api/class-mouse#mouse-move-option-steps)

Defaults to 1. Sends intermediate `mousemove` events.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-mouse#mouse-move-return)

* * *

### up [​](https://playwright.dev/python/docs/api/class-mouse\#mouse-up "Direct link to up")

Added before v1.9mouse.up

Dispatches a `mouseup` event.

**Usage**

```codeBlockLines_e6Vv
mouse.up()
mouse.up(**kwargs)

```

**Arguments**

- `button` "left" \| "right" \| "middle" _(optional)_ [#](https://playwright.dev/python/docs/api/class-mouse#mouse-up-option-button)

Defaults to `left`.

- `click_count` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ [#](https://playwright.dev/python/docs/api/class-mouse#mouse-up-option-click-count)

defaults to 1. See [UIEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail "UIEvent.detail").


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-mouse#mouse-up-return)

* * *

### wheel [​](https://playwright.dev/python/docs/api/class-mouse\#mouse-wheel "Direct link to wheel")

Added in: v1.15mouse.wheel

Dispatches a `wheel` event. This method is usually used to manually scroll the page. See [scrolling](https://playwright.dev/python/docs/input#scrolling) for alternative ways to scroll.

note

Wheel events may cause scrolling if they are not handled, and this method does not wait for the scrolling to finish before returning.

**Usage**

```codeBlockLines_e6Vv
mouse.wheel(delta_x, delta_y)

```

**Arguments**

- `delta_x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") [#](https://playwright.dev/python/docs/api/class-mouse#mouse-wheel-option-delta-x)

Pixels to scroll horizontally.

- `delta_y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") [#](https://playwright.dev/python/docs/api/class-mouse#mouse-wheel-option-delta-y)

Pixels to scroll vertically.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-mouse#mouse-wheel-return)

- [Methods](https://playwright.dev/python/docs/api/class-mouse#methods)
  - [click](https://playwright.dev/python/docs/api/class-mouse#mouse-click)
  - [dblclick](https://playwright.dev/python/docs/api/class-mouse#mouse-dblclick)
  - [down](https://playwright.dev/python/docs/api/class-mouse#mouse-down)
  - [move](https://playwright.dev/python/docs/api/class-mouse#mouse-move)
  - [up](https://playwright.dev/python/docs/api/class-mouse#mouse-up)
  - [wheel](https://playwright.dev/python/docs/api/class-mouse#mouse-wheel)

## WebSocket Class Overview
[Skip to main content](https://playwright.dev/python/docs/api/class-websocket#__docusaurus_skipToContent_fallback)

On this page

The [WebSocket](https://playwright.dev/python/docs/api/class-websocket "WebSocket") class represents WebSocket connections within a page. It provides the ability to inspect and manipulate the data being transmitted and received.

If you want to intercept or modify WebSocket frames, consider using [WebSocketRoute](https://playwright.dev/python/docs/api/class-websocketroute "WebSocketRoute").

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-websocket\#methods "Direct link to Methods")

### expect\_event [​](https://playwright.dev/python/docs/api/class-websocket\#web-socket-wait-for-event "Direct link to expect_event")

Added before v1.9webSocket.expect\_event

Waits for event to fire and passes its value into the predicate function. Returns when the predicate returns truthy value. Will throw an error if the webSocket is closed before the event is fired. Returns the event data value.

**Usage**

```codeBlockLines_e6Vv
web_socket.expect_event(event)
web_socket.expect_event(event, **kwargs)

```

**Arguments**

- `event` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-websocket#web-socket-wait-for-event-option-event)

Event name, same one would pass into `webSocket.on(event)`.

- `predicate` [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable") _(optional)_ [#](https://playwright.dev/python/docs/api/class-websocket#web-socket-wait-for-event-option-predicate)

Receives the event data and resolves to truthy value when the waiting should resolve.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-websocket#web-socket-wait-for-event-option-timeout)

Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout).


**Returns**

- [EventContextManager](https://docs.python.org/3/reference/datamodel.html#context-managers "Event context manager") [#](https://playwright.dev/python/docs/api/class-websocket#web-socket-wait-for-event-return)

* * *

### wait\_for\_event [​](https://playwright.dev/python/docs/api/class-websocket\#web-socket-wait-for-event-2 "Direct link to wait_for_event")

Added before v1.9webSocket.wait\_for\_event

note

In most cases, you should use [web\_socket.expect\_event()](https://playwright.dev/python/docs/api/class-websocket#web-socket-wait-for-event).

Waits for given `event` to fire. If predicate is provided, it passes event's value into the `predicate` function and waits for `predicate(event)` to return a truthy value. Will throw an error if the socket is closed before the `event` is fired.

**Usage**

```codeBlockLines_e6Vv
web_socket.wait_for_event(event)
web_socket.wait_for_event(event, **kwargs)

```

**Arguments**

- `event` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-websocket#web-socket-wait-for-event-2-option-event)

Event name, same one typically passed into `*.on(event)`.

- `predicate` [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable") _(optional)_ [#](https://playwright.dev/python/docs/api/class-websocket#web-socket-wait-for-event-2-option-predicate)

Receives the event data and resolves to truthy value when the waiting should resolve.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-websocket#web-socket-wait-for-event-2-option-timeout)

Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout).


**Returns**

- [Any](https://docs.python.org/3/library/typing.html#typing.Any "Any") [#](https://playwright.dev/python/docs/api/class-websocket#web-socket-wait-for-event-2-return)

* * *

## Properties [​](https://playwright.dev/python/docs/api/class-websocket\#properties "Direct link to Properties")

### is\_closed [​](https://playwright.dev/python/docs/api/class-websocket\#web-socket-is-closed "Direct link to is_closed")

Added before v1.9webSocket.is\_closed

Indicates that the web socket has been closed.

**Usage**

```codeBlockLines_e6Vv
web_socket.is_closed()

```

**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-websocket#web-socket-is-closed-return)

* * *

### url [​](https://playwright.dev/python/docs/api/class-websocket\#web-socket-url "Direct link to url")

Added before v1.9webSocket.url

Contains the URL of the WebSocket.

**Usage**

```codeBlockLines_e6Vv
web_socket.url

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-websocket#web-socket-url-return)

* * *

## Events [​](https://playwright.dev/python/docs/api/class-websocket\#events "Direct link to Events")

### on("close") [​](https://playwright.dev/python/docs/api/class-websocket\#web-socket-event-close "Direct link to on(\"close\")")

Added before v1.9webSocket.on("close")

Fired when the websocket closes.

**Usage**

```codeBlockLines_e6Vv
web_socket.on("close", handler)

```

**Event data**

- [WebSocket](https://playwright.dev/python/docs/api/class-websocket "WebSocket")

* * *

### on("framereceived") [​](https://playwright.dev/python/docs/api/class-websocket\#web-socket-event-frame-received "Direct link to on(\"framereceived\")")

Added in: v1.9webSocket.on("framereceived")

Fired when the websocket receives a frame.

**Usage**

```codeBlockLines_e6Vv
web_socket.on("framereceived", handler)

```

**Event data**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes")

* * *

### on("framesent") [​](https://playwright.dev/python/docs/api/class-websocket\#web-socket-event-frame-sent "Direct link to on(\"framesent\")")

Added in: v1.9webSocket.on("framesent")

Fired when the websocket sends a frame.

**Usage**

```codeBlockLines_e6Vv
web_socket.on("framesent", handler)

```

**Event data**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes")

* * *

### on("socketerror") [​](https://playwright.dev/python/docs/api/class-websocket\#web-socket-event-socket-error "Direct link to on(\"socketerror\")")

Added in: v1.9webSocket.on("socketerror")

Fired when the websocket has an error.

**Usage**

```codeBlockLines_e6Vv
web_socket.on("socketerror", handler)

```

**Event data**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

- [Methods](https://playwright.dev/python/docs/api/class-websocket#methods)
  - [expect\_event](https://playwright.dev/python/docs/api/class-websocket#web-socket-wait-for-event)
  - [wait\_for\_event](https://playwright.dev/python/docs/api/class-websocket#web-socket-wait-for-event-2)
- [Properties](https://playwright.dev/python/docs/api/class-websocket#properties)
  - [is\_closed](https://playwright.dev/python/docs/api/class-websocket#web-socket-is-closed)
  - [url](https://playwright.dev/python/docs/api/class-websocket#web-socket-url)
- [Events](https://playwright.dev/python/docs/api/class-websocket#events)
  - [on("close")](https://playwright.dev/python/docs/api/class-websocket#web-socket-event-close)
  - [on("framereceived")](https://playwright.dev/python/docs/api/class-websocket#web-socket-event-frame-received)
  - [on("framesent")](https://playwright.dev/python/docs/api/class-websocket#web-socket-event-frame-sent)
  - [on("socketerror")](https://playwright.dev/python/docs/api/class-websocket#web-socket-event-socket-error)

## Page Assertions Methods
[Skip to main content](https://playwright.dev/python/docs/api/class-pageassertions#__docusaurus_skipToContent_fallback)

On this page

The [PageAssertions](https://playwright.dev/python/docs/api/class-pageassertions "PageAssertions") class provides assertion methods that can be used to make assertions about the [Page](https://playwright.dev/python/docs/api/class-page "Page") state in the tests.

- Sync
- Async

```codeBlockLines_e6Vv
import re
from playwright.sync_api import Page, expect

def test_navigates_to_login_page(page: Page) -> None:
    # ..
    page.get_by_text("Sign in").click()
    expect(page).to_have_url(re.compile(r".*/login"))

```

```codeBlockLines_e6Vv
import re
from playwright.async_api import Page, expect

async def test_navigates_to_login_page(page: Page) -> None:
    # ..
    await page.get_by_text("Sign in").click()
    await expect(page).to_have_url(re.compile(r".*/login"))

```

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-pageassertions\#methods "Direct link to Methods")

### not\_to\_have\_title [​](https://playwright.dev/python/docs/api/class-pageassertions\#page-assertions-not-to-have-title "Direct link to not_to_have_title")

Added in: v1.20pageAssertions.not\_to\_have\_title

The opposite of [expect(page).to\_have\_title()](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-to-have-title).

**Usage**

```codeBlockLines_e6Vv
expect(page).not_to_have_title(title_or_reg_exp)
expect(page).not_to_have_title(title_or_reg_exp, **kwargs)

```

**Arguments**

- `title_or_reg_exp` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-not-to-have-title-option-title-or-reg-exp)

Expected title or RegExp.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-not-to-have-title-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-not-to-have-title-return)

* * *

### not\_to\_have\_url [​](https://playwright.dev/python/docs/api/class-pageassertions\#page-assertions-not-to-have-url "Direct link to not_to_have_url")

Added in: v1.20pageAssertions.not\_to\_have\_url

The opposite of [expect(page).to\_have\_url()](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-to-have-url).

**Usage**

```codeBlockLines_e6Vv
expect(page).not_to_have_url(url_or_reg_exp)
expect(page).not_to_have_url(url_or_reg_exp, **kwargs)

```

**Arguments**

- `url_or_reg_exp` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-not-to-have-url-option-url-or-reg-exp)

Expected URL string or RegExp.

- `ignore_case` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.44 [#](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-not-to-have-url-option-ignore-case)

Whether to perform case-insensitive match. [ignore\_case](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-not-to-have-url-option-ignore-case) option takes precedence over the corresponding regular expression flag if specified.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-not-to-have-url-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-not-to-have-url-return)

* * *

### to\_have\_title [​](https://playwright.dev/python/docs/api/class-pageassertions\#page-assertions-to-have-title "Direct link to to_have_title")

Added in: v1.20pageAssertions.to\_have\_title

Ensures the page has the given title.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
import re
from playwright.sync_api import expect

# ...
expect(page).to_have_title(re.compile(r".*checkout"))

```

```codeBlockLines_e6Vv
import re
from playwright.async_api import expect

# ...
await expect(page).to_have_title(re.compile(r".*checkout"))

```

**Arguments**

- `title_or_reg_exp` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-to-have-title-option-title-or-reg-exp)

Expected title or RegExp.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-to-have-title-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-to-have-title-return)

* * *

### to\_have\_url [​](https://playwright.dev/python/docs/api/class-pageassertions\#page-assertions-to-have-url "Direct link to to_have_url")

Added in: v1.20pageAssertions.to\_have\_url

Ensures the page is navigated to the given URL.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
import re
from playwright.sync_api import expect

# ...
expect(page).to_have_url(re.compile(".*checkout"))

```

```codeBlockLines_e6Vv
import re
from playwright.async_api import expect

# ...
await expect(page).to_have_url(re.compile(".*checkout"))

```

**Arguments**

- `url_or_reg_exp` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-to-have-url-option-url-or-reg-exp)

Expected URL string or RegExp.

- `ignore_case` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.44 [#](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-to-have-url-option-ignore-case)

Whether to perform case-insensitive match. [ignore\_case](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-to-have-url-option-ignore-case) option takes precedence over the corresponding regular expression parameter if specified. A provided predicate ignores this flag.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.18 [#](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-to-have-url-option-timeout)

Time to retry the assertion for in milliseconds. Defaults to `5000`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-to-have-url-return)

- [Methods](https://playwright.dev/python/docs/api/class-pageassertions#methods)
  - [not\_to\_have\_title](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-not-to-have-title)
  - [not\_to\_have\_url](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-not-to-have-url)
  - [to\_have\_title](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-to-have-title)
  - [to\_have\_url](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-to-have-url)

## Playwright Route Class
[Skip to main content](https://playwright.dev/python/docs/api/class-route#__docusaurus_skipToContent_fallback)

On this page

Whenever a network route is set up with [page.route()](https://playwright.dev/python/docs/api/class-page#page-route) or [browser\_context.route()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route), the `Route` object allows to handle the route.

Learn more about [networking](https://playwright.dev/python/docs/network).

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-route\#methods "Direct link to Methods")

### abort [​](https://playwright.dev/python/docs/api/class-route\#route-abort "Direct link to abort")

Added before v1.9route.abort

Aborts the route's request.

**Usage**

```codeBlockLines_e6Vv
route.abort()
route.abort(**kwargs)

```

**Arguments**

- `error_code` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-route#route-abort-option-error-code)

Optional error code. Defaults to `failed`, could be one of the following:
  - `'aborted'` \- An operation was aborted (due to user action)
  - `'accessdenied'` \- Permission to access a resource, other than the network, was denied
  - `'addressunreachable'` \- The IP address is unreachable. This usually means that there is no route to the specified host or network.
  - `'blockedbyclient'` \- The client chose to block the request.
  - `'blockedbyresponse'` \- The request failed because the response was delivered along with requirements which are not met ('X-Frame-Options' and 'Content-Security-Policy' ancestor checks, for instance).
  - `'connectionaborted'` \- A connection timed out as a result of not receiving an ACK for data sent.
  - `'connectionclosed'` \- A connection was closed (corresponding to a TCP FIN).
  - `'connectionfailed'` \- A connection attempt failed.
  - `'connectionrefused'` \- A connection attempt was refused.
  - `'connectionreset'` \- A connection was reset (corresponding to a TCP RST).
  - `'internetdisconnected'` \- The Internet connection has been lost.
  - `'namenotresolved'` \- The host name could not be resolved.
  - `'timedout'` \- An operation timed out.
  - `'failed'` \- A generic failure occurred.

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-route#route-abort-return)

* * *

### continue\_ [​](https://playwright.dev/python/docs/api/class-route\#route-continue "Direct link to continue_")

Added before v1.9route.continue\_

Sends route's request to the network with optional overrides.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
def handle(route, request):
    # override headers
    headers = {
        **request.headers,
        "foo": "foo-value", # set "foo" header
        "bar": None # remove "bar" header
    }
    route.continue_(headers=headers)

page.route("**/*", handle)

```

```codeBlockLines_e6Vv
async def handle(route, request):
    # override headers
    headers = {
        **request.headers,
        "foo": "foo-value", # set "foo" header
        "bar": None # remove "bar" header
    }
    await route.continue_(headers=headers)

await page.route("**/*", handle)

```

**Arguments**

- `headers` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-route#route-continue-option-headers)

If set changes the request HTTP headers. Header values will be converted to a string.

- `method` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-route#route-continue-option-method)

If set changes the request method (e.g. GET or POST).

- `post_data` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-route#route-continue-option-post-data)

If set changes the post data of request.

- `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-route#route-continue-option-url)

If set changes the request URL. New URL must have same protocol as original one.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-route#route-continue-return)

**Details**

The [headers](https://playwright.dev/python/docs/api/class-route#route-continue-option-headers) option applies to both the routed request and any redirects it initiates. However, [url](https://playwright.dev/python/docs/api/class-route#route-continue-option-url), [method](https://playwright.dev/python/docs/api/class-route#route-continue-option-method), and [post\_data](https://playwright.dev/python/docs/api/class-route#route-continue-option-post-data) only apply to the original request and are not carried over to redirected requests.

[route.continue\_()](https://playwright.dev/python/docs/api/class-route#route-continue) will immediately send the request to the network, other matching handlers won't be invoked. Use [route.fallback()](https://playwright.dev/python/docs/api/class-route#route-fallback) If you want next matching handler in the chain to be invoked.

* * *

### fallback [​](https://playwright.dev/python/docs/api/class-route\#route-fallback "Direct link to fallback")

Added in: v1.23route.fallback

Continues route's request with optional overrides. The method is similar to [route.continue\_()](https://playwright.dev/python/docs/api/class-route#route-continue) with the difference that other matching handlers will be invoked before sending the request.

**Usage**

When several routes match the given pattern, they run in the order opposite to their registration. That way the last registered route can always override all the previous ones. In the example below, request will be handled by the bottom-most handler first, then it'll fall back to the previous one and in the end will be aborted by the first registered route.

- Sync
- Async

```codeBlockLines_e6Vv
page.route("**/*", lambda route: route.abort())  # Runs last.
page.route("**/*", lambda route: route.fallback())  # Runs second.
page.route("**/*", lambda route: route.fallback())  # Runs first.

```

```codeBlockLines_e6Vv
await page.route("**/*", lambda route: route.abort())  # Runs last.
await page.route("**/*", lambda route: route.fallback())  # Runs second.
await page.route("**/*", lambda route: route.fallback())  # Runs first.

```

Registering multiple routes is useful when you want separate handlers to handle different kinds of requests, for example API calls vs page resources or GET requests vs POST requests as in the example below.

- Sync
- Async

```codeBlockLines_e6Vv
# Handle GET requests.
def handle_get(route):
    if route.request.method != "GET":
        route.fallback()
        return
  # Handling GET only.
  # ...

# Handle POST requests.
def handle_post(route):
    if route.request.method != "POST":
        route.fallback()
        return
  # Handling POST only.
  # ...

page.route("**/*", handle_get)
page.route("**/*", handle_post)

```

```codeBlockLines_e6Vv
# Handle GET requests.
async def handle_get(route):
    if route.request.method != "GET":
        await route.fallback()
        return
  # Handling GET only.
  # ...

# Handle POST requests.
async def handle_post(route):
    if route.request.method != "POST":
        await route.fallback()
        return
  # Handling POST only.
  # ...

await page.route("**/*", handle_get)
await page.route("**/*", handle_post)

```

One can also modify request while falling back to the subsequent handler, that way intermediate route handler can modify url, method, headers and postData of the request.

- Sync
- Async

```codeBlockLines_e6Vv
def handle(route, request):
    # override headers
    headers = {
        **request.headers,
        "foo": "foo-value", # set "foo" header
        "bar": None # remove "bar" header
    }
    route.fallback(headers=headers)

page.route("**/*", handle)

```

```codeBlockLines_e6Vv
async def handle(route, request):
    # override headers
    headers = {
        **request.headers,
        "foo": "foo-value", # set "foo" header
        "bar": None # remove "bar" header
    }
    await route.fallback(headers=headers)

await page.route("**/*", handle)

```

Use [route.continue\_()](https://playwright.dev/python/docs/api/class-route#route-continue) to immediately send the request to the network, other matching handlers won't be invoked in that case.

**Arguments**

- `headers` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-route#route-fallback-option-headers)

If set changes the request HTTP headers. Header values will be converted to a string.

- `method` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-route#route-fallback-option-method)

If set changes the request method (e.g. GET or POST).

- `post_data` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-route#route-fallback-option-post-data)

If set changes the post data of request.

- `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-route#route-fallback-option-url)

If set changes the request URL. New URL must have same protocol as original one. Changing the URL won't affect the route matching, all the routes are matched using the original request URL.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-route#route-fallback-return)

* * *

### fetch [​](https://playwright.dev/python/docs/api/class-route\#route-fetch "Direct link to fetch")

Added in: v1.29route.fetch

Performs the request and fetches result without fulfilling it, so that the response could be modified and then fulfilled.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
def handle(route):
    response = route.fetch()
    json = response.json()
    json["message"]["big_red_dog"] = []
    route.fulfill(response=response, json=json)

page.route("https://dog.ceo/api/breeds/list/all", handle)

```

```codeBlockLines_e6Vv
async def handle(route):
    response = await route.fetch()
    json = await response.json()
    json["message"]["big_red_dog"] = []
    await route.fulfill(response=response, json=json)

await page.route("https://dog.ceo/api/breeds/list/all", handle)

```

**Arguments**

- `headers` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-route#route-fetch-option-headers)

If set changes the request HTTP headers. Header values will be converted to a string.

- `max_redirects` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ Added in: v1.31 [#](https://playwright.dev/python/docs/api/class-route#route-fetch-option-max-redirects)

Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is exceeded. Defaults to `20`. Pass `0` to not follow redirects.

- `max_retries` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ Added in: v1.46 [#](https://playwright.dev/python/docs/api/class-route#route-fetch-option-max-retries)

Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` \- no retries.

- `method` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-route#route-fetch-option-method)

If set changes the request method (e.g. GET or POST).

- `post_data` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-route#route-fetch-option-post-data)

Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type` header will be set to `application/octet-stream` if not explicitly set.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ Added in: v1.33 [#](https://playwright.dev/python/docs/api/class-route#route-fetch-option-timeout)

Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.

- `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-route#route-fetch-option-url)

If set changes the request URL. New URL must have same protocol as original one.


**Returns**

- [APIResponse](https://playwright.dev/python/docs/api/class-apiresponse "APIResponse") [#](https://playwright.dev/python/docs/api/class-route#route-fetch-return)

**Details**

Note that [headers](https://playwright.dev/python/docs/api/class-route#route-fetch-option-headers) option will apply to the fetched request as well as any redirects initiated by it. If you want to only apply [headers](https://playwright.dev/python/docs/api/class-route#route-fetch-option-headers) to the original request, but not to redirects, look into [route.continue\_()](https://playwright.dev/python/docs/api/class-route#route-continue) instead.

* * *

### fulfill [​](https://playwright.dev/python/docs/api/class-route\#route-fulfill "Direct link to fulfill")

Added before v1.9route.fulfill

Fulfills route's request with given response.

**Usage**

An example of fulfilling all requests with 404 responses:

- Sync
- Async

```codeBlockLines_e6Vv
page.route("**/*", lambda route: route.fulfill(
    status=404,
    content_type="text/plain",
    body="not found!"))

```

```codeBlockLines_e6Vv
await page.route("**/*", lambda route: route.fulfill(
    status=404,
    content_type="text/plain",
    body="not found!"))

```

An example of serving static file:

- Sync
- Async

```codeBlockLines_e6Vv
page.route("**/xhr_endpoint", lambda route: route.fulfill(path="mock_data.json"))

```

```codeBlockLines_e6Vv
await page.route("**/xhr_endpoint", lambda route: route.fulfill(path="mock_data.json"))

```

**Arguments**

- `body` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") _(optional)_ [#](https://playwright.dev/python/docs/api/class-route#route-fulfill-option-body)

Response body.

- `content_type` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-route#route-fulfill-option-content-type)

If set, equals to setting `Content-Type` response header.

- `headers` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-route#route-fulfill-option-headers)

Response headers. Header values will be converted to a string.

- `json` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ Added in: v1.29 [#](https://playwright.dev/python/docs/api/class-route#route-fulfill-option-json)

JSON response. This method will set the content type to `application/json` if not set.

- `path` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-route#route-fulfill-option-path)

File path to respond with. The content type will be inferred from file extension. If `path` is a relative path, then it is resolved relative to the current working directory.

- `response` [APIResponse](https://playwright.dev/python/docs/api/class-apiresponse "APIResponse") _(optional)_ Added in: v1.15 [#](https://playwright.dev/python/docs/api/class-route#route-fulfill-option-response)

[APIResponse](https://playwright.dev/python/docs/api/class-apiresponse "APIResponse") to fulfill route's request with. Individual fields of the response (such as headers) can be overridden using fulfill options.

- `status` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ [#](https://playwright.dev/python/docs/api/class-route#route-fulfill-option-status)

Response status code, defaults to `200`.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-route#route-fulfill-return)

* * *

## Properties [​](https://playwright.dev/python/docs/api/class-route\#properties "Direct link to Properties")

### request [​](https://playwright.dev/python/docs/api/class-route\#route-request "Direct link to request")

Added before v1.9route.request

A request to be routed.

**Usage**

```codeBlockLines_e6Vv
route.request

```

**Returns**

- [Request](https://playwright.dev/python/docs/api/class-request "Request") [#](https://playwright.dev/python/docs/api/class-route#route-request-return)

- [Methods](https://playwright.dev/python/docs/api/class-route#methods)
  - [abort](https://playwright.dev/python/docs/api/class-route#route-abort)
  - [continue\_](https://playwright.dev/python/docs/api/class-route#route-continue)
  - [fallback](https://playwright.dev/python/docs/api/class-route#route-fallback)
  - [fetch](https://playwright.dev/python/docs/api/class-route#route-fetch)
  - [fulfill](https://playwright.dev/python/docs/api/class-route#route-fulfill)
- [Properties](https://playwright.dev/python/docs/api/class-route#properties)
  - [request](https://playwright.dev/python/docs/api/class-route#route-request)

## FrameLocator API Overview
[Skip to main content](https://playwright.dev/python/docs/api/class-framelocator#__docusaurus_skipToContent_fallback)

On this page

FrameLocator represents a view to the `iframe` on the page. It captures the logic sufficient to retrieve the `iframe` and locate elements in that iframe. FrameLocator can be created with either [locator.content\_frame](https://playwright.dev/python/docs/api/class-locator#locator-content-frame), [page.frame\_locator()](https://playwright.dev/python/docs/api/class-page#page-frame-locator) or [locator.frame\_locator()](https://playwright.dev/python/docs/api/class-locator#locator-frame-locator) method.

- Sync
- Async

```codeBlockLines_e6Vv
locator = page.locator("my-frame").content_frame.get_by_text("Submit")
locator.click()

```

```codeBlockLines_e6Vv
locator = page.locator("#my-frame").content_frame.get_by_text("Submit")
await locator.click()

```

**Strictness**

Frame locators are strict. This means that all operations on frame locators will throw if more than one element matches a given selector.

- Sync
- Async

```codeBlockLines_e6Vv
# Throws if there are several frames in DOM:
page.locator('.result-frame').content_frame.get_by_role('button').click()

# Works because we explicitly tell locator to pick the first frame:
page.locator('.result-frame').first.content_frame.get_by_role('button').click()

```

```codeBlockLines_e6Vv
# Throws if there are several frames in DOM:
await page.locator('.result-frame').content_frame.get_by_role('button').click()

# Works because we explicitly tell locator to pick the first frame:
await page.locator('.result-frame').first.content_frame.get_by_role('button').click()

```

**Converting Locator to FrameLocator**

If you have a [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") object pointing to an `iframe` it can be converted to [FrameLocator](https://playwright.dev/python/docs/api/class-framelocator "FrameLocator") using [locator.content\_frame](https://playwright.dev/python/docs/api/class-locator#locator-content-frame).

**Converting FrameLocator to Locator**

If you have a [FrameLocator](https://playwright.dev/python/docs/api/class-framelocator "FrameLocator") object it can be converted to [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") pointing to the same `iframe` using [frame\_locator.owner](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-owner).

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-framelocator\#methods "Direct link to Methods")

### frame\_locator [​](https://playwright.dev/python/docs/api/class-framelocator\#frame-locator-frame-locator "Direct link to frame_locator")

Added in: v1.17frameLocator.frame\_locator

When working with iframes, you can create a frame locator that will enter the iframe and allow selecting elements in that iframe.

**Usage**

```codeBlockLines_e6Vv
frame_locator.frame_locator(selector)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-frame-locator-option-selector)

A selector to use when resolving DOM element.


**Returns**

- [FrameLocator](https://playwright.dev/python/docs/api/class-framelocator "FrameLocator") [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-frame-locator-return)

* * *

### get\_by\_alt\_text [​](https://playwright.dev/python/docs/api/class-framelocator\#frame-locator-get-by-alt-text "Direct link to get_by_alt_text")

Added in: v1.27frameLocator.get\_by\_alt\_text

Allows locating elements by their alt text.

**Usage**

For example, this method will find the image by alt text "Playwright logo":

```codeBlockLines_e6Vv
<img alt='Playwright logo'>

```

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_alt_text("Playwright logo").click()

```

```codeBlockLines_e6Vv
await page.get_by_alt_text("Playwright logo").click()

```

**Arguments**

- `text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-alt-text-option-text)

Text to locate the element for.

- `exact` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-alt-text-option-exact)

Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-alt-text-return)

* * *

### get\_by\_label [​](https://playwright.dev/python/docs/api/class-framelocator\#frame-locator-get-by-label "Direct link to get_by_label")

Added in: v1.27frameLocator.get\_by\_label

Allows locating input elements by the text of the associated `<label>` or `aria-labelledby` element, or by the `aria-label` attribute.

**Usage**

For example, this method will find inputs by label "Username" and "Password" in the following DOM:

```codeBlockLines_e6Vv
<input aria-label="Username">
<label for="password-input">Password:</label>
<input id="password-input">

```

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_label("Username").fill("john")
page.get_by_label("Password").fill("secret")

```

```codeBlockLines_e6Vv
await page.get_by_label("Username").fill("john")
await page.get_by_label("Password").fill("secret")

```

**Arguments**

- `text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-label-option-text)

Text to locate the element for.

- `exact` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-label-option-exact)

Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-label-return)

* * *

### get\_by\_placeholder [​](https://playwright.dev/python/docs/api/class-framelocator\#frame-locator-get-by-placeholder "Direct link to get_by_placeholder")

Added in: v1.27frameLocator.get\_by\_placeholder

Allows locating input elements by the placeholder text.

**Usage**

For example, consider the following DOM structure.

```codeBlockLines_e6Vv
<input type="email" placeholder="name@example.com" />

```

You can fill the input after locating it by the placeholder text:

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_placeholder("name@example.com").fill("playwright@microsoft.com")

```

```codeBlockLines_e6Vv
await page.get_by_placeholder("name@example.com").fill("playwright@microsoft.com")

```

**Arguments**

- `text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-placeholder-option-text)

Text to locate the element for.

- `exact` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-placeholder-option-exact)

Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-placeholder-return)

* * *

### get\_by\_role [​](https://playwright.dev/python/docs/api/class-framelocator\#frame-locator-get-by-role "Direct link to get_by_role")

Added in: v1.27frameLocator.get\_by\_role

Allows locating elements by their [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).

**Usage**

Consider the following DOM structure.

```codeBlockLines_e6Vv
<h3>Sign up</h3>
<label>
  <input type="checkbox" /> Subscribe
</label>
<br/>
<button>Submit</button>

```

You can locate each element by it's implicit role:

- Sync
- Async

```codeBlockLines_e6Vv
expect(page.get_by_role("heading", name="Sign up")).to_be_visible()

page.get_by_role("checkbox", name="Subscribe").check()

page.get_by_role("button", name=re.compile("submit", re.IGNORECASE)).click()

```

```codeBlockLines_e6Vv
await expect(page.get_by_role("heading", name="Sign up")).to_be_visible()

await page.get_by_role("checkbox", name="Subscribe").check()

await page.get_by_role("button", name=re.compile("submit", re.IGNORECASE)).click()

```

**Arguments**

- `role` "alert" \| "alertdialog" \| "application" \| "article" \| "banner" \| "blockquote" \| "button" \| "caption" \| "cell" \| "checkbox" \| "code" \| "columnheader" \| "combobox" \| "complementary" \| "contentinfo" \| "definition" \| "deletion" \| "dialog" \| "directory" \| "document" \| "emphasis" \| "feed" \| "figure" \| "form" \| "generic" \| "grid" \| "gridcell" \| "group" \| "heading" \| "img" \| "insertion" \| "link" \| "list" \| "listbox" \| "listitem" \| "log" \| "main" \| "marquee" \| "math" \| "meter" \| "menu" \| "menubar" \| "menuitem" \| "menuitemcheckbox" \| "menuitemradio" \| "navigation" \| "none" \| "note" \| "option" \| "paragraph" \| "presentation" \| "progressbar" \| "radio" \| "radiogroup" \| "region" \| "row" \| "rowgroup" \| "rowheader" \| "scrollbar" \| "search" \| "searchbox" \| "separator" \| "slider" \| "spinbutton" \| "status" \| "strong" \| "subscript" \| "superscript" \| "switch" \| "tab" \| "table" \| "tablist" \| "tabpanel" \| "term" \| "textbox" \| "time" \| "timer" \| "toolbar" \| "tooltip" \| "tree" \| "treegrid" \| "treeitem" [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-role-option-role)

Required aria role.

- `checked` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-role-option-checked)

An attribute that is usually set by `aria-checked` or native `<input type=checkbox>` controls.

Learn more about [`aria-checked`](https://www.w3.org/TR/wai-aria-1.2/#aria-checked).

- `disabled` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-role-option-disabled)

An attribute that is usually set by `aria-disabled` or `disabled`.



note





Unlike most other attributes, `disabled` is inherited through the DOM hierarchy. Learn more about [`aria-disabled`](https://www.w3.org/TR/wai-aria-1.2/#aria-disabled).

- `exact` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.28 [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-role-option-exact)

Whether [name](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-role-option-name) is matched exactly: case-sensitive and whole-string. Defaults to false. Ignored when [name](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-role-option-name) is a regular expression. Note that exact match still trims whitespace.

- `expanded` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-role-option-expanded)

An attribute that is usually set by `aria-expanded`.

Learn more about [`aria-expanded`](https://www.w3.org/TR/wai-aria-1.2/#aria-expanded).

- `include_hidden` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-role-option-include-hidden)

Option that controls whether hidden elements are matched. By default, only non-hidden elements, as [defined by ARIA](https://www.w3.org/TR/wai-aria-1.2/#tree_exclusion), are matched by role selector.

Learn more about [`aria-hidden`](https://www.w3.org/TR/wai-aria-1.2/#aria-hidden).

- `level` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-role-option-level)

A number attribute that is usually present for roles `heading`, `listitem`, `row`, `treeitem`, with default values for `<h1>-<h6>` elements.

Learn more about [`aria-level`](https://www.w3.org/TR/wai-aria-1.2/#aria-level).

- `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") _(optional)_ [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-role-option-name)

Option to match the [accessible name](https://w3c.github.io/accname/#dfn-accessible-name). By default, matching is case-insensitive and searches for a substring, use [exact](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-role-option-exact) to control this behavior.

Learn more about [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).

- `pressed` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-role-option-pressed)

An attribute that is usually set by `aria-pressed`.

Learn more about [`aria-pressed`](https://www.w3.org/TR/wai-aria-1.2/#aria-pressed).

- `selected` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-role-option-selected)

An attribute that is usually set by `aria-selected`.

Learn more about [`aria-selected`](https://www.w3.org/TR/wai-aria-1.2/#aria-selected).


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-role-return)

**Details**

Role selector **does not replace** accessibility audits and conformance tests, but rather gives early feedback about the ARIA guidelines.

Many html elements have an implicitly [defined role](https://w3c.github.io/html-aam/#html-element-role-mappings) that is recognized by the role selector. You can find all the [supported roles here](https://www.w3.org/TR/wai-aria-1.2/#role_definitions). ARIA guidelines **do not recommend** duplicating implicit roles and attributes by setting `role` and/or `aria-*` attributes to default values.

* * *

### get\_by\_test\_id [​](https://playwright.dev/python/docs/api/class-framelocator\#frame-locator-get-by-test-id "Direct link to get_by_test_id")

Added in: v1.27frameLocator.get\_by\_test\_id

Locate element by the test id.

**Usage**

Consider the following DOM structure.

```codeBlockLines_e6Vv
<button data-testid="directions">Itinéraire</button>

```

You can locate the element by it's test id:

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_test_id("directions").click()

```

```codeBlockLines_e6Vv
await page.get_by_test_id("directions").click()

```

**Arguments**

- `test_id` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-test-id-option-test-id)

Id to locate the element by.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-test-id-return)

**Details**

By default, the `data-testid` attribute is used as a test id. Use [selectors.set\_test\_id\_attribute()](https://playwright.dev/python/docs/api/class-selectors#selectors-set-test-id-attribute) to configure a different test id attribute if necessary.

* * *

### get\_by\_text [​](https://playwright.dev/python/docs/api/class-framelocator\#frame-locator-get-by-text "Direct link to get_by_text")

Added in: v1.27frameLocator.get\_by\_text

Allows locating elements that contain given text.

See also [locator.filter()](https://playwright.dev/python/docs/api/class-locator#locator-filter) that allows to match by another criteria, like an accessible role, and then filter by the text content.

**Usage**

Consider the following DOM structure:

```codeBlockLines_e6Vv
<div>Hello <span>world</span></div>
<div>Hello</div>

```

You can locate by text substring, exact string, or a regular expression:

- Sync
- Async

```codeBlockLines_e6Vv
# Matches <span>
page.get_by_text("world")

# Matches first <div>
page.get_by_text("Hello world")

# Matches second <div>
page.get_by_text("Hello", exact=True)

# Matches both <div>s
page.get_by_text(re.compile("Hello"))

# Matches second <div>
page.get_by_text(re.compile("^hello$", re.IGNORECASE))

```

```codeBlockLines_e6Vv
# Matches <span>
page.get_by_text("world")

# Matches first <div>
page.get_by_text("Hello world")

# Matches second <div>
page.get_by_text("Hello", exact=True)

# Matches both <div>s
page.get_by_text(re.compile("Hello"))

# Matches second <div>
page.get_by_text(re.compile("^hello$", re.IGNORECASE))

```

**Arguments**

- `text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-text-option-text)

Text to locate the element for.

- `exact` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-text-option-exact)

Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-text-return)

**Details**

Matching by text always normalizes whitespace, even with exact match. For example, it turns multiple spaces into one, turns line breaks into spaces and ignores leading and trailing whitespace.

Input elements of the type `button` and `submit` are matched by their `value` instead of the text content. For example, locating by text `"Log in"` matches `<input type=button value="Log in">`.

* * *

### get\_by\_title [​](https://playwright.dev/python/docs/api/class-framelocator\#frame-locator-get-by-title "Direct link to get_by_title")

Added in: v1.27frameLocator.get\_by\_title

Allows locating elements by their title attribute.

**Usage**

Consider the following DOM structure.

```codeBlockLines_e6Vv
<span title='Issues count'>25 issues</span>

```

You can check the issues count after locating it by the title text:

- Sync
- Async

```codeBlockLines_e6Vv
expect(page.get_by_title("Issues count")).to_have_text("25 issues")

```

```codeBlockLines_e6Vv
await expect(page.get_by_title("Issues count")).to_have_text("25 issues")

```

**Arguments**

- `text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-title-option-text)

Text to locate the element for.

- `exact` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-title-option-exact)

Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-title-return)

* * *

### locator [​](https://playwright.dev/python/docs/api/class-framelocator\#frame-locator-locator "Direct link to locator")

Added in: v1.17frameLocator.locator

The method finds an element matching the specified selector in the locator's subtree. It also accepts filter options, similar to [locator.filter()](https://playwright.dev/python/docs/api/class-locator#locator-filter) method.

[Learn more about locators](https://playwright.dev/python/docs/locators).

**Usage**

```codeBlockLines_e6Vv
frame_locator.locator(selector_or_locator)
frame_locator.locator(selector_or_locator, **kwargs)

```

**Arguments**

- `selector_or_locator` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-locator-option-selector-or-locator)

A selector or locator to use when resolving DOM element.

- `has` [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") _(optional)_ [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-locator-option-has)

Narrows down the results of the method to those which contain elements matching this relative locator. For example, `article` that has `text=Playwright` matches `<article><div>Playwright</div></article>`.

Inner locator **must be relative** to the outer locator and is queried starting with the outer locator match, not the document root. For example, you can find `content` that has `div` in `<article><content><div>Playwright</div></content></article>`. However, looking for `content` that has `article div` will fail, because the inner locator must be relative and should not use any elements outside the `content`.

Note that outer and inner locators must belong to the same frame. Inner locator must not contain [FrameLocator](https://playwright.dev/python/docs/api/class-framelocator "FrameLocator") s.

- `has_not` [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") _(optional)_ Added in: v1.33 [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-locator-option-has-not)

Matches elements that do not contain an element that matches an inner locator. Inner locator is queried against the outer one. For example, `article` that does not have `div` matches `<article><span>Playwright</span></article>`.

Note that outer and inner locators must belong to the same frame. Inner locator must not contain [FrameLocator](https://playwright.dev/python/docs/api/class-framelocator "FrameLocator") s.

- `has_not_text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") _(optional)_ Added in: v1.33 [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-locator-option-has-not-text)

Matches elements that do not contain specified text somewhere inside, possibly in a child or a descendant element. When passed a \[string\], matching is case-insensitive and searches for a substring.

- `has_text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") _(optional)_ [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-locator-option-has-text)

Matches elements containing specified text somewhere inside, possibly in a child or a descendant element. When passed a \[string\], matching is case-insensitive and searches for a substring. For example, `"Playwright"` matches `<article><div>Playwright</div></article>`.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-locator-return)

* * *

## Properties [​](https://playwright.dev/python/docs/api/class-framelocator\#properties "Direct link to Properties")

### owner [​](https://playwright.dev/python/docs/api/class-framelocator\#frame-locator-owner "Direct link to owner")

Added in: v1.43frameLocator.owner

Returns a [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") object pointing to the same `iframe` as this frame locator.

Useful when you have a [FrameLocator](https://playwright.dev/python/docs/api/class-framelocator "FrameLocator") object obtained somewhere, and later on would like to interact with the `iframe` element.

For a reverse operation, use [locator.content\_frame](https://playwright.dev/python/docs/api/class-locator#locator-content-frame).

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
frame_locator = page.locator("iframe[name=\"embedded\"]").content_frame
# ...
locator = frame_locator.owner
expect(locator).to_be_visible()

```

```codeBlockLines_e6Vv
frame_locator = page.locator("iframe[name=\"embedded\"]").content_frame
# ...
locator = frame_locator.owner
await expect(locator).to_be_visible()

```

**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-owner-return)

* * *

## Deprecated [​](https://playwright.dev/python/docs/api/class-framelocator\#deprecated "Direct link to Deprecated")

### first [​](https://playwright.dev/python/docs/api/class-framelocator\#frame-locator-first "Direct link to first")

Added in: v1.17frameLocator.first

Deprecated

Use [locator.first](https://playwright.dev/python/docs/api/class-locator#locator-first) followed by [locator.content\_frame](https://playwright.dev/python/docs/api/class-locator#locator-content-frame) instead.

Returns locator to the first matching frame.

**Usage**

```codeBlockLines_e6Vv
frame_locator.first

```

**Returns**

- [FrameLocator](https://playwright.dev/python/docs/api/class-framelocator "FrameLocator") [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-first-return)

* * *

### last [​](https://playwright.dev/python/docs/api/class-framelocator\#frame-locator-last "Direct link to last")

Added in: v1.17frameLocator.last

Deprecated

Use [locator.last](https://playwright.dev/python/docs/api/class-locator#locator-last) followed by [locator.content\_frame](https://playwright.dev/python/docs/api/class-locator#locator-content-frame) instead.

Returns locator to the last matching frame.

**Usage**

```codeBlockLines_e6Vv
frame_locator.last

```

**Returns**

- [FrameLocator](https://playwright.dev/python/docs/api/class-framelocator "FrameLocator") [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-last-return)

* * *

### nth [​](https://playwright.dev/python/docs/api/class-framelocator\#frame-locator-nth "Direct link to nth")

Added in: v1.17frameLocator.nth

Deprecated

Use [locator.nth()](https://playwright.dev/python/docs/api/class-locator#locator-nth) followed by [locator.content\_frame](https://playwright.dev/python/docs/api/class-locator#locator-content-frame) instead.

Returns locator to the n-th matching frame. It's zero based, `nth(0)` selects the first frame.

**Usage**

```codeBlockLines_e6Vv
frame_locator.nth(index)

```

**Arguments**

- `index` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-nth-option-index)

**Returns**

- [FrameLocator](https://playwright.dev/python/docs/api/class-framelocator "FrameLocator") [#](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-nth-return)

- [Methods](https://playwright.dev/python/docs/api/class-framelocator#methods)
  - [frame\_locator](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-frame-locator)
  - [get\_by\_alt\_text](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-alt-text)
  - [get\_by\_label](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-label)
  - [get\_by\_placeholder](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-placeholder)
  - [get\_by\_role](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-role)
  - [get\_by\_test\_id](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-test-id)
  - [get\_by\_text](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-text)
  - [get\_by\_title](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-get-by-title)
  - [locator](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-locator)
- [Properties](https://playwright.dev/python/docs/api/class-framelocator#properties)
  - [owner](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-owner)
- [Deprecated](https://playwright.dev/python/docs/api/class-framelocator#deprecated)
  - [first](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-first)
  - [last](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-last)
  - [nth](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-nth)

## JSHandle Overview
[Skip to main content](https://playwright.dev/python/docs/api/class-jshandle#__docusaurus_skipToContent_fallback)

On this page

JSHandle represents an in-page JavaScript object. JSHandles can be created with the [page.evaluate\_handle()](https://playwright.dev/python/docs/api/class-page#page-evaluate-handle) method.

- Sync
- Async

```codeBlockLines_e6Vv
window_handle = page.evaluate_handle("window")
# ...

```

```codeBlockLines_e6Vv
window_handle = await page.evaluate_handle("window")
# ...

```

JSHandle prevents the referenced JavaScript object being garbage collected unless the handle is exposed with [js\_handle.dispose()](https://playwright.dev/python/docs/api/class-jshandle#js-handle-dispose). JSHandles are auto-disposed when their origin frame gets navigated or the parent context gets destroyed.

JSHandle instances can be used as an argument in [page.eval\_on\_selector()](https://playwright.dev/python/docs/api/class-page#page-eval-on-selector), [page.evaluate()](https://playwright.dev/python/docs/api/class-page#page-evaluate) and [page.evaluate\_handle()](https://playwright.dev/python/docs/api/class-page#page-evaluate-handle) methods.

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-jshandle\#methods "Direct link to Methods")

### dispose [​](https://playwright.dev/python/docs/api/class-jshandle\#js-handle-dispose "Direct link to dispose")

Added before v1.9jsHandle.dispose

The `jsHandle.dispose` method stops referencing the element handle.

**Usage**

```codeBlockLines_e6Vv
js_handle.dispose()

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-jshandle#js-handle-dispose-return)

* * *

### evaluate [​](https://playwright.dev/python/docs/api/class-jshandle\#js-handle-evaluate "Direct link to evaluate")

Added before v1.9jsHandle.evaluate

Returns the return value of [expression](https://playwright.dev/python/docs/api/class-jshandle#js-handle-evaluate-option-expression).

This method passes this handle as the first argument to [expression](https://playwright.dev/python/docs/api/class-jshandle#js-handle-evaluate-option-expression).

If [expression](https://playwright.dev/python/docs/api/class-jshandle#js-handle-evaluate-option-expression) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then `handle.evaluate` would wait for the promise to resolve and return its value.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
tweet_handle = page.query_selector(".tweet .retweets")
assert tweet_handle.evaluate("node => node.innerText") == "10 retweets"

```

```codeBlockLines_e6Vv
tweet_handle = await page.query_selector(".tweet .retweets")
assert await tweet_handle.evaluate("node => node.innerText") == "10 retweets"

```

**Arguments**

- `expression` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-jshandle#js-handle-evaluate-option-expression)

JavaScript expression to be evaluated in the browser context. If the expression evaluates to a function, the function is automatically invoked.

- `arg` [EvaluationArgument](https://playwright.dev/python/docs/evaluating#evaluation-argument "EvaluationArgument") _(optional)_ [#](https://playwright.dev/python/docs/api/class-jshandle#js-handle-evaluate-option-arg)

Optional argument to pass to [expression](https://playwright.dev/python/docs/api/class-jshandle#js-handle-evaluate-option-expression).


**Returns**

- [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-jshandle#js-handle-evaluate-return)

* * *

### evaluate\_handle [​](https://playwright.dev/python/docs/api/class-jshandle\#js-handle-evaluate-handle "Direct link to evaluate_handle")

Added before v1.9jsHandle.evaluate\_handle

Returns the return value of [expression](https://playwright.dev/python/docs/api/class-jshandle#js-handle-evaluate-handle-option-expression) as a [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle").

This method passes this handle as the first argument to [expression](https://playwright.dev/python/docs/api/class-jshandle#js-handle-evaluate-handle-option-expression).

The only difference between `jsHandle.evaluate` and `jsHandle.evaluateHandle` is that `jsHandle.evaluateHandle` returns [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle").

If the function passed to the `jsHandle.evaluateHandle` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then `jsHandle.evaluateHandle` would wait for the promise to resolve and return its value.

See [page.evaluate\_handle()](https://playwright.dev/python/docs/api/class-page#page-evaluate-handle) for more details.

**Usage**

```codeBlockLines_e6Vv
js_handle.evaluate_handle(expression)
js_handle.evaluate_handle(expression, **kwargs)

```

**Arguments**

- `expression` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-jshandle#js-handle-evaluate-handle-option-expression)

JavaScript expression to be evaluated in the browser context. If the expression evaluates to a function, the function is automatically invoked.

- `arg` [EvaluationArgument](https://playwright.dev/python/docs/evaluating#evaluation-argument "EvaluationArgument") _(optional)_ [#](https://playwright.dev/python/docs/api/class-jshandle#js-handle-evaluate-handle-option-arg)

Optional argument to pass to [expression](https://playwright.dev/python/docs/api/class-jshandle#js-handle-evaluate-handle-option-expression).


**Returns**

- [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle") [#](https://playwright.dev/python/docs/api/class-jshandle#js-handle-evaluate-handle-return)

* * *

### get\_properties [​](https://playwright.dev/python/docs/api/class-jshandle\#js-handle-get-properties "Direct link to get_properties")

Added before v1.9jsHandle.get\_properties

The method returns a map with **own property names** as keys and JSHandle instances for the property values.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
handle = page.evaluate_handle("({ window, document })")
properties = handle.get_properties()
window_handle = properties.get("window")
document_handle = properties.get("document")
handle.dispose()

```

```codeBlockLines_e6Vv
handle = await page.evaluate_handle("({ window, document })")
properties = await handle.get_properties()
window_handle = properties.get("window")
document_handle = properties.get("document")
await handle.dispose()

```

**Returns**

- \[Map\]\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle")\] [#](https://playwright.dev/python/docs/api/class-jshandle#js-handle-get-properties-return)

* * *

### get\_property [​](https://playwright.dev/python/docs/api/class-jshandle\#js-handle-get-property "Direct link to get_property")

Added before v1.9jsHandle.get\_property

Fetches a single property from the referenced object.

**Usage**

```codeBlockLines_e6Vv
js_handle.get_property(property_name)

```

**Arguments**

- `property_name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-jshandle#js-handle-get-property-option-property-name)

property to get


**Returns**

- [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle") [#](https://playwright.dev/python/docs/api/class-jshandle#js-handle-get-property-return)

* * *

### json\_value [​](https://playwright.dev/python/docs/api/class-jshandle\#js-handle-json-value "Direct link to json_value")

Added before v1.9jsHandle.json\_value

Returns a JSON representation of the object. If the object has a `toJSON` function, it **will not be called**.

note

The method will return an empty JSON object if the referenced object is not stringifiable. It will throw an error if the object has circular references.

**Usage**

```codeBlockLines_e6Vv
js_handle.json_value()

```

**Returns**

- [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-jshandle#js-handle-json-value-return)

* * *

## Properties [​](https://playwright.dev/python/docs/api/class-jshandle\#properties "Direct link to Properties")

### as\_element [​](https://playwright.dev/python/docs/api/class-jshandle\#js-handle-as-element "Direct link to as_element")

Added before v1.9jsHandle.as\_element

Returns either `null` or the object handle itself, if the object handle is an instance of [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle").

**Usage**

```codeBlockLines_e6Vv
js_handle.as_element()

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") [#](https://playwright.dev/python/docs/api/class-jshandle#js-handle-as-element-return)

- [Methods](https://playwright.dev/python/docs/api/class-jshandle#methods)
  - [dispose](https://playwright.dev/python/docs/api/class-jshandle#js-handle-dispose)
  - [evaluate](https://playwright.dev/python/docs/api/class-jshandle#js-handle-evaluate)
  - [evaluate\_handle](https://playwright.dev/python/docs/api/class-jshandle#js-handle-evaluate-handle)
  - [get\_properties](https://playwright.dev/python/docs/api/class-jshandle#js-handle-get-properties)
  - [get\_property](https://playwright.dev/python/docs/api/class-jshandle#js-handle-get-property)
  - [json\_value](https://playwright.dev/python/docs/api/class-jshandle#js-handle-json-value)
- [Properties](https://playwright.dev/python/docs/api/class-jshandle#properties)
  - [as\_element](https://playwright.dev/python/docs/api/class-jshandle#js-handle-as-element)

## Playwright Error Class
[Skip to main content](https://playwright.dev/python/docs/api/class-error#__docusaurus_skipToContent_fallback)

On this page

- extends: [Exception](https://docs.python.org/3/library/exceptions.html#Exception "Exception")

Error is raised whenever certain operations are terminated abnormally, e.g. browser closes while [page.evaluate()](https://playwright.dev/python/docs/api/class-page#page-evaluate) is running. All Playwright exceptions inherit from this class.

* * *

## Properties [​](https://playwright.dev/python/docs/api/class-error\#properties "Direct link to Properties")

### message [​](https://playwright.dev/python/docs/api/class-error\#error-message "Direct link to message")

Added in: v1.11error.message

Message of the error.

**Usage**

```codeBlockLines_e6Vv
error.message

```

**Type**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

* * *

### name [​](https://playwright.dev/python/docs/api/class-error\#error-name "Direct link to name")

Added in: v1.11error.name

Name of the error which got thrown inside the browser. Optional.

**Usage**

```codeBlockLines_e6Vv
error.name

```

**Type**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

* * *

### stack [​](https://playwright.dev/python/docs/api/class-error\#error-stack "Direct link to stack")

Added in: v1.11error.stack

Stack of the error which got thrown inside the browser. Optional.

**Usage**

```codeBlockLines_e6Vv
error.stack

```

**Type**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

- [Properties](https://playwright.dev/python/docs/api/class-error#properties)
  - [message](https://playwright.dev/python/docs/api/class-error#error-message)
  - [name](https://playwright.dev/python/docs/api/class-error#error-name)
  - [stack](https://playwright.dev/python/docs/api/class-error#error-stack)

## Playwright Page Class
[Skip to main content](https://playwright.dev/python/docs/api/class-page#__docusaurus_skipToContent_fallback)

On this page

Page provides methods to interact with a single tab in a [Browser](https://playwright.dev/python/docs/api/class-browser "Browser"), or an [extension background page](https://developer.chrome.com/extensions/background_pages) in Chromium. One [Browser](https://playwright.dev/python/docs/api/class-browser "Browser") instance might have multiple [Page](https://playwright.dev/python/docs/api/class-page "Page") instances.

This example creates a page, navigates it to a URL, and then saves a screenshot:

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    webkit = playwright.webkit
    browser = webkit.launch()
    context = browser.new_context()
    page = context.new_page()
    page.goto("https://example.com")
    page.screenshot(path="screenshot.png")
    browser.close()

with sync_playwright() as playwright:
    run(playwright)

```

```codeBlockLines_e6Vv
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    webkit = playwright.webkit
    browser = await webkit.launch()
    context = await browser.new_context()
    page = await context.new_page()
    await page.goto("https://example.com")
    await page.screenshot(path="screenshot.png")
    await browser.close()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())

```

The Page class emits various events (described below) which can be handled using any of Node's native [`EventEmitter`](https://nodejs.org/api/events.html#events_class_eventemitter) methods, such as `on`, `once` or `removeListener`.

This example logs a message for a single page `load` event:

```codeBlockLines_e6Vv
page.once("load", lambda: print("page loaded!"))

```

To unsubscribe from events use the `removeListener` method:

```codeBlockLines_e6Vv
def log_request(intercepted_request):
    print("a request was made:", intercepted_request.url)
page.on("request", log_request)
# sometime later...
page.remove_listener("request", log_request)

```

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-page\#methods "Direct link to Methods")

### add\_init\_script [​](https://playwright.dev/python/docs/api/class-page\#page-add-init-script "Direct link to add_init_script")

Added before v1.9page.add\_init\_script

Adds a script which would be evaluated in one of the following scenarios:

- Whenever the page is navigated.
- Whenever the child frame is attached or navigated. In this case, the script is evaluated in the context of the newly attached frame.

The script is evaluated after the document was created but before any of its scripts were run. This is useful to amend the JavaScript environment, e.g. to seed `Math.random`.

**Usage**

An example of overriding `Math.random` before the page loads:

```codeBlockLines_e6Vv
// preload.js
Math.random = () => 42;

```

- Sync
- Async

```codeBlockLines_e6Vv
# in your playwright script, assuming the preload.js file is in same directory
page.add_init_script(path="./preload.js")

```

```codeBlockLines_e6Vv
# in your playwright script, assuming the preload.js file is in same directory
await page.add_init_script(path="./preload.js")

```

note

The order of evaluation of multiple scripts installed via [browser\_context.add\_init\_script()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-add-init-script) and [page.add\_init\_script()](https://playwright.dev/python/docs/api/class-page#page-add-init-script) is not defined.

**Arguments**

- `path` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-add-init-script-option-path)

Path to the JavaScript file. If `path` is a relative path, then it is resolved relative to the current working directory. Optional.

- `script` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-add-init-script-option-script)

Script to be evaluated in all pages in the browser context. Optional.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-add-init-script-return)

* * *

### add\_locator\_handler [​](https://playwright.dev/python/docs/api/class-page\#page-add-locator-handler "Direct link to add_locator_handler")

Added in: v1.42page.add\_locator\_handler

When testing a web page, sometimes unexpected overlays like a "Sign up" dialog appear and block actions you want to automate, e.g. clicking a button. These overlays don't always show up in the same way or at the same time, making them tricky to handle in automated tests.

This method lets you set up a special function, called a handler, that activates when it detects that overlay is visible. The handler's job is to remove the overlay, allowing your test to continue as if the overlay wasn't there.

Things to keep in mind:

- When an overlay is shown predictably, we recommend explicitly waiting for it in your test and dismissing it as a part of your normal test flow, instead of using [page.add\_locator\_handler()](https://playwright.dev/python/docs/api/class-page#page-add-locator-handler).
- Playwright checks for the overlay every time before executing or retrying an action that requires an [actionability check](https://playwright.dev/python/docs/actionability), or before performing an auto-waiting assertion check. When overlay is visible, Playwright calls the handler first, and then proceeds with the action/assertion. Note that the handler is only called when you perform an action/assertion - if the overlay becomes visible but you don't perform any actions, the handler will not be triggered.
- After executing the handler, Playwright will ensure that overlay that triggered the handler is not visible anymore. You can opt-out of this behavior with [no\_wait\_after](https://playwright.dev/python/docs/api/class-page#page-add-locator-handler-option-no-wait-after).
- The execution time of the handler counts towards the timeout of the action/assertion that executed the handler. If your handler takes too long, it might cause timeouts.
- You can register multiple handlers. However, only a single handler will be running at a time. Make sure the actions within a handler don't depend on another handler.

warning

Running the handler will alter your page state mid-test. For example it will change the currently focused element and move the mouse. Make sure that actions that run after the handler are self-contained and do not rely on the focus and mouse state being unchanged.

For example, consider a test that calls [locator.focus()](https://playwright.dev/python/docs/api/class-locator#locator-focus) followed by [keyboard.press()](https://playwright.dev/python/docs/api/class-keyboard#keyboard-press). If your handler clicks a button between these two actions, the focused element most likely will be wrong, and key press will happen on the unexpected element. Use [locator.press()](https://playwright.dev/python/docs/api/class-locator#locator-press) instead to avoid this problem.

Another example is a series of mouse actions, where [mouse.move()](https://playwright.dev/python/docs/api/class-mouse#mouse-move) is followed by [mouse.down()](https://playwright.dev/python/docs/api/class-mouse#mouse-down). Again, when the handler runs between these two actions, the mouse position will be wrong during the mouse down. Prefer self-contained actions like [locator.click()](https://playwright.dev/python/docs/api/class-locator#locator-click) that do not rely on the state being unchanged by a handler.

**Usage**

An example that closes a "Sign up to the newsletter" dialog when it appears:

- Sync
- Async

```codeBlockLines_e6Vv
# Setup the handler.
def handler():
  page.get_by_role("button", name="No thanks").click()
page.add_locator_handler(page.get_by_text("Sign up to the newsletter"), handler)

# Write the test as usual.
page.goto("https://example.com")
page.get_by_role("button", name="Start here").click()

```

```codeBlockLines_e6Vv
# Setup the handler.
def handler():
  await page.get_by_role("button", name="No thanks").click()
await page.add_locator_handler(page.get_by_text("Sign up to the newsletter"), handler)

# Write the test as usual.
await page.goto("https://example.com")
await page.get_by_role("button", name="Start here").click()

```

An example that skips the "Confirm your security details" page when it is shown:

- Sync
- Async

```codeBlockLines_e6Vv
# Setup the handler.
def handler():
  page.get_by_role("button", name="Remind me later").click()
page.add_locator_handler(page.get_by_text("Confirm your security details"), handler)

# Write the test as usual.
page.goto("https://example.com")
page.get_by_role("button", name="Start here").click()

```

```codeBlockLines_e6Vv
# Setup the handler.
def handler():
  await page.get_by_role("button", name="Remind me later").click()
await page.add_locator_handler(page.get_by_text("Confirm your security details"), handler)

# Write the test as usual.
await page.goto("https://example.com")
await page.get_by_role("button", name="Start here").click()

```

An example with a custom callback on every actionability check. It uses a `<body>` locator that is always visible, so the handler is called before every actionability check. It is important to specify [no\_wait\_after](https://playwright.dev/python/docs/api/class-page#page-add-locator-handler-option-no-wait-after), because the handler does not hide the `<body>` element.

- Sync
- Async

```codeBlockLines_e6Vv
# Setup the handler.
def handler():
  page.evaluate("window.removeObstructionsForTestIfNeeded()")
page.add_locator_handler(page.locator("body"), handler, no_wait_after=True)

# Write the test as usual.
page.goto("https://example.com")
page.get_by_role("button", name="Start here").click()

```

```codeBlockLines_e6Vv
# Setup the handler.
def handler():
  await page.evaluate("window.removeObstructionsForTestIfNeeded()")
await page.add_locator_handler(page.locator("body"), handler, no_wait_after=True)

# Write the test as usual.
await page.goto("https://example.com")
await page.get_by_role("button", name="Start here").click()

```

Handler takes the original locator as an argument. You can also automatically remove the handler after a number of invocations by setting [times](https://playwright.dev/python/docs/api/class-page#page-add-locator-handler-option-times):

- Sync
- Async

```codeBlockLines_e6Vv
def handler(locator):
  locator.click()
page.add_locator_handler(page.get_by_label("Close"), handler, times=1)

```

```codeBlockLines_e6Vv
def handler(locator):
  await locator.click()
await page.add_locator_handler(page.get_by_label("Close"), handler, times=1)

```

**Arguments**

- `locator` [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-page#page-add-locator-handler-option-locator)

Locator that triggers the handler.

- `handler` [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [Locator](https://playwright.dev/python/docs/api/class-locator "Locator")\]: [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\[ [Any](https://docs.python.org/3/library/typing.html#typing.Any "Any")\] [#](https://playwright.dev/python/docs/api/class-page#page-add-locator-handler-option-handler)

Function that should be run once [locator](https://playwright.dev/python/docs/api/class-page#page-add-locator-handler-option-locator) appears. This function should get rid of the element that blocks actions like click.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.44 [#](https://playwright.dev/python/docs/api/class-page#page-add-locator-handler-option-no-wait-after)

By default, after calling the handler Playwright will wait until the overlay becomes hidden, and only then Playwright will continue with the action/assertion that triggered the handler. This option allows to opt-out of this behavior, so that overlay can stay visible after the handler has run.

- `times` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ Added in: v1.44 [#](https://playwright.dev/python/docs/api/class-page#page-add-locator-handler-option-times)

Specifies the maximum number of times this handler should be called. Unlimited by default.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-add-locator-handler-return)

* * *

### add\_script\_tag [​](https://playwright.dev/python/docs/api/class-page\#page-add-script-tag "Direct link to add_script_tag")

Added before v1.9page.add\_script\_tag

Adds a `<script>` tag into the page with the desired url or content. Returns the added tag when the script's onload fires or when the script content was injected into frame.

**Usage**

```codeBlockLines_e6Vv
page.add_script_tag()
page.add_script_tag(**kwargs)

```

**Arguments**

- `content` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-add-script-tag-option-content)

Raw JavaScript content to be injected into frame.

- `path` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-add-script-tag-option-path)

Path to the JavaScript file to be injected into frame. If `path` is a relative path, then it is resolved relative to the current working directory.

- `type` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-add-script-tag-option-type)

Script type. Use 'module' in order to load a JavaScript ES6 module. See [script](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script) for more details.

- `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-add-script-tag-option-url)

URL of a script to be added.


**Returns**

- [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") [#](https://playwright.dev/python/docs/api/class-page#page-add-script-tag-return)

* * *

### add\_style\_tag [​](https://playwright.dev/python/docs/api/class-page\#page-add-style-tag "Direct link to add_style_tag")

Added before v1.9page.add\_style\_tag

Adds a `<link rel="stylesheet">` tag into the page with the desired url or a `<style type="text/css">` tag with the content. Returns the added tag when the stylesheet's onload fires or when the CSS content was injected into frame.

**Usage**

```codeBlockLines_e6Vv
page.add_style_tag()
page.add_style_tag(**kwargs)

```

**Arguments**

- `content` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-add-style-tag-option-content)

Raw CSS content to be injected into frame.

- `path` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-add-style-tag-option-path)

Path to the CSS file to be injected into frame. If `path` is a relative path, then it is resolved relative to the current working directory.

- `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-add-style-tag-option-url)

URL of the `<link>` tag.


**Returns**

- [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") [#](https://playwright.dev/python/docs/api/class-page#page-add-style-tag-return)

* * *

### bring\_to\_front [​](https://playwright.dev/python/docs/api/class-page\#page-bring-to-front "Direct link to bring_to_front")

Added before v1.9page.bring\_to\_front

Brings page to front (activates tab).

**Usage**

```codeBlockLines_e6Vv
page.bring_to_front()

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-bring-to-front-return)

* * *

### close [​](https://playwright.dev/python/docs/api/class-page\#page-close "Direct link to close")

Added before v1.9page.close

If [run\_before\_unload](https://playwright.dev/python/docs/api/class-page#page-close-option-run-before-unload) is `false`, does not run any unload handlers and waits for the page to be closed. If [run\_before\_unload](https://playwright.dev/python/docs/api/class-page#page-close-option-run-before-unload) is `true` the method will run unload handlers, but will **not** wait for the page to close.

By default, `page.close()` **does not** run `beforeunload` handlers.

note

if [run\_before\_unload](https://playwright.dev/python/docs/api/class-page#page-close-option-run-before-unload) is passed as true, a `beforeunload` dialog might be summoned and should be handled manually via [page.on("dialog")](https://playwright.dev/python/docs/api/class-page#page-event-dialog) event.

**Usage**

```codeBlockLines_e6Vv
page.close()
page.close(**kwargs)

```

**Arguments**

- `reason` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ Added in: v1.40 [#](https://playwright.dev/python/docs/api/class-page#page-close-option-reason)

The reason to be reported to the operations interrupted by the page closure.

- `run_before_unload` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-close-option-run-before-unload)

Defaults to `false`. Whether to run the [before unload](https://developer.mozilla.org/en-US/docs/Web/Events/beforeunload) page handlers.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-close-return)

* * *

### content [​](https://playwright.dev/python/docs/api/class-page\#page-content "Direct link to content")

Added before v1.9page.content

Gets the full HTML contents of the page, including the doctype.

**Usage**

```codeBlockLines_e6Vv
page.content()

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-content-return)

* * *

### drag\_and\_drop [​](https://playwright.dev/python/docs/api/class-page\#page-drag-and-drop "Direct link to drag_and_drop")

Added in: v1.13page.drag\_and\_drop

This method drags the source element to the target element. It will first move to the source element, perform a `mousedown`, then move to the target element and perform a `mouseup`.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
page.drag_and_drop("#source", "#target")
# or specify exact positions relative to the top-left corners of the elements:
page.drag_and_drop(
  "#source",
  "#target",
  source_position={"x": 34, "y": 7},
  target_position={"x": 10, "y": 20}
)

```

```codeBlockLines_e6Vv
await page.drag_and_drop("#source", "#target")
# or specify exact positions relative to the top-left corners of the elements:
await page.drag_and_drop(
  "#source",
  "#target",
  source_position={"x": 34, "y": 7},
  target_position={"x": 10, "y": 20}
)

```

**Arguments**

- `source` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-drag-and-drop-option-source)

A selector to search for an element to drag. If there are multiple elements satisfying the selector, the first will be used.

- `target` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-drag-and-drop-option-target)

A selector to search for an element to drop onto. If there are multiple elements satisfying the selector, the first will be used.

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-drag-and-drop-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-drag-and-drop-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `source_position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-drag-and-drop-option-source-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


Clicks on the source element at this point relative to the top-left corner of the element's padding box. If not specified, some visible point of the element is used.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-drag-and-drop-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `target_position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-drag-and-drop-option-target-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


Drops on the target element at this point relative to the top-left corner of the element's padding box. If not specified, some visible point of the element is used.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-drag-and-drop-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-drag-and-drop-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-drag-and-drop-return)

* * *

### emulate\_media [​](https://playwright.dev/python/docs/api/class-page\#page-emulate-media "Direct link to emulate_media")

Added before v1.9page.emulate\_media

This method changes the `CSS media type` through the `media` argument, and/or the `'prefers-colors-scheme'` media feature, using the `colorScheme` argument.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
page.evaluate("matchMedia('screen').matches")
# → True
page.evaluate("matchMedia('print').matches")
# → False

page.emulate_media(media="print")
page.evaluate("matchMedia('screen').matches")
# → False
page.evaluate("matchMedia('print').matches")
# → True

page.emulate_media()
page.evaluate("matchMedia('screen').matches")
# → True
page.evaluate("matchMedia('print').matches")
# → False

```

```codeBlockLines_e6Vv
await page.evaluate("matchMedia('screen').matches")
# → True
await page.evaluate("matchMedia('print').matches")
# → False

await page.emulate_media(media="print")
await page.evaluate("matchMedia('screen').matches")
# → False
await page.evaluate("matchMedia('print').matches")
# → True

await page.emulate_media()
await page.evaluate("matchMedia('screen').matches")
# → True
await page.evaluate("matchMedia('print').matches")
# → False

```

- Sync
- Async

```codeBlockLines_e6Vv
page.emulate_media(color_scheme="dark")
page.evaluate("matchMedia('(prefers-color-scheme: dark)').matches")
# → True
page.evaluate("matchMedia('(prefers-color-scheme: light)').matches")
# → False

```

```codeBlockLines_e6Vv
await page.emulate_media(color_scheme="dark")
await page.evaluate("matchMedia('(prefers-color-scheme: dark)').matches")
# → True
await page.evaluate("matchMedia('(prefers-color-scheme: light)').matches")
# → False

```

**Arguments**

- `color_scheme` "light" \| "dark" \| "no-preference" \| "null" _(optional)_ Added in: v1.9 [#](https://playwright.dev/python/docs/api/class-page#page-emulate-media-option-color-scheme)

Emulates [prefers-colors-scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme) media feature, supported values are `'light'` and `'dark'`. Passing `'Null'` disables color scheme emulation. `'no-preference'` is deprecated.

- `contrast` "no-preference" \| "more" \| "null" _(optional)_ Added in: v1.51 [#](https://playwright.dev/python/docs/api/class-page#page-emulate-media-option-contrast)

- `forced_colors` "active" \| "none" \| "null" _(optional)_ Added in: v1.15 [#](https://playwright.dev/python/docs/api/class-page#page-emulate-media-option-forced-colors)

- `media` "screen" \| "print" \| "null" _(optional)_ Added in: v1.9 [#](https://playwright.dev/python/docs/api/class-page#page-emulate-media-option-media)

Changes the CSS media type of the page. The only allowed values are `'Screen'`, `'Print'` and `'Null'`. Passing `'Null'` disables CSS media emulation.

- `reduced_motion` "reduce" \| "no-preference" \| "null" _(optional)_ Added in: v1.12 [#](https://playwright.dev/python/docs/api/class-page#page-emulate-media-option-reduced-motion)

Emulates `'prefers-reduced-motion'` media feature, supported values are `'reduce'`, `'no-preference'`. Passing `null` disables reduced motion emulation.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-emulate-media-return)

* * *

### evaluate [​](https://playwright.dev/python/docs/api/class-page\#page-evaluate "Direct link to evaluate")

Added before v1.9page.evaluate

Returns the value of the [expression](https://playwright.dev/python/docs/api/class-page#page-evaluate-option-expression) invocation.

If the function passed to the [page.evaluate()](https://playwright.dev/python/docs/api/class-page#page-evaluate) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then [page.evaluate()](https://playwright.dev/python/docs/api/class-page#page-evaluate) would wait for the promise to resolve and return its value.

If the function passed to the [page.evaluate()](https://playwright.dev/python/docs/api/class-page#page-evaluate) returns a non- [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable") value, then [page.evaluate()](https://playwright.dev/python/docs/api/class-page#page-evaluate) resolves to `undefined`. Playwright also supports transferring some additional values that are not serializable by `JSON`: `-0`, `NaN`, `Infinity`, `-Infinity`.

**Usage**

Passing argument to [expression](https://playwright.dev/python/docs/api/class-page#page-evaluate-option-expression):

- Sync
- Async

```codeBlockLines_e6Vv
result = page.evaluate("([x, y]) => Promise.resolve(x * y)", [7, 8])
print(result) # prints "56"

```

```codeBlockLines_e6Vv
result = await page.evaluate("([x, y]) => Promise.resolve(x * y)", [7, 8])
print(result) # prints "56"

```

A string can also be passed in instead of a function:

- Sync
- Async

```codeBlockLines_e6Vv
print(page.evaluate("1 + 2")) # prints "3"
x = 10
print(page.evaluate(f"1 + {x}")) # prints "11"

```

```codeBlockLines_e6Vv
print(await page.evaluate("1 + 2")) # prints "3"
x = 10
print(await page.evaluate(f"1 + {x}")) # prints "11"

```

[ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") instances can be passed as an argument to the [page.evaluate()](https://playwright.dev/python/docs/api/class-page#page-evaluate):

- Sync
- Async

```codeBlockLines_e6Vv
body_handle = page.evaluate("document.body")
html = page.evaluate("([body, suffix]) => body.innerHTML + suffix", [body_handle, "hello"])
body_handle.dispose()

```

```codeBlockLines_e6Vv
body_handle = await page.evaluate("document.body")
html = await page.evaluate("([body, suffix]) => body.innerHTML + suffix", [body_handle, "hello"])
await body_handle.dispose()

```

**Arguments**

- `expression` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-evaluate-option-expression)

JavaScript expression to be evaluated in the browser context. If the expression evaluates to a function, the function is automatically invoked.

- `arg` [EvaluationArgument](https://playwright.dev/python/docs/evaluating#evaluation-argument "EvaluationArgument") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-evaluate-option-arg)

Optional argument to pass to [expression](https://playwright.dev/python/docs/api/class-page#page-evaluate-option-expression).


**Returns**

- [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-page#page-evaluate-return)

* * *

### evaluate\_handle [​](https://playwright.dev/python/docs/api/class-page\#page-evaluate-handle "Direct link to evaluate_handle")

Added before v1.9page.evaluate\_handle

Returns the value of the [expression](https://playwright.dev/python/docs/api/class-page#page-evaluate-handle-option-expression) invocation as a [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle").

The only difference between [page.evaluate()](https://playwright.dev/python/docs/api/class-page#page-evaluate) and [page.evaluate\_handle()](https://playwright.dev/python/docs/api/class-page#page-evaluate-handle) is that [page.evaluate\_handle()](https://playwright.dev/python/docs/api/class-page#page-evaluate-handle) returns [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle").

If the function passed to the [page.evaluate\_handle()](https://playwright.dev/python/docs/api/class-page#page-evaluate-handle) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then [page.evaluate\_handle()](https://playwright.dev/python/docs/api/class-page#page-evaluate-handle) would wait for the promise to resolve and return its value.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
a_window_handle = page.evaluate_handle("Promise.resolve(window)")
a_window_handle # handle for the window object.

```

```codeBlockLines_e6Vv
a_window_handle = await page.evaluate_handle("Promise.resolve(window)")
a_window_handle # handle for the window object.

```

A string can also be passed in instead of a function:

- Sync
- Async

```codeBlockLines_e6Vv
a_handle = page.evaluate_handle("document") # handle for the "document"

```

```codeBlockLines_e6Vv
a_handle = await page.evaluate_handle("document") # handle for the "document"

```

[JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle") instances can be passed as an argument to the [page.evaluate\_handle()](https://playwright.dev/python/docs/api/class-page#page-evaluate-handle):

- Sync
- Async

```codeBlockLines_e6Vv
a_handle = page.evaluate_handle("document.body")
result_handle = page.evaluate_handle("body => body.innerHTML", a_handle)
print(result_handle.json_value())
result_handle.dispose()

```

```codeBlockLines_e6Vv
a_handle = await page.evaluate_handle("document.body")
result_handle = await page.evaluate_handle("body => body.innerHTML", a_handle)
print(await result_handle.json_value())
await result_handle.dispose()

```

**Arguments**

- `expression` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-evaluate-handle-option-expression)

JavaScript expression to be evaluated in the browser context. If the expression evaluates to a function, the function is automatically invoked.

- `arg` [EvaluationArgument](https://playwright.dev/python/docs/evaluating#evaluation-argument "EvaluationArgument") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-evaluate-handle-option-arg)

Optional argument to pass to [expression](https://playwright.dev/python/docs/api/class-page#page-evaluate-handle-option-expression).


**Returns**

- [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle") [#](https://playwright.dev/python/docs/api/class-page#page-evaluate-handle-return)

* * *

### expect\_console\_message [​](https://playwright.dev/python/docs/api/class-page\#page-wait-for-console-message "Direct link to expect_console_message")

Added in: v1.9page.expect\_console\_message

Performs action and waits for a [ConsoleMessage](https://playwright.dev/python/docs/api/class-consolemessage "ConsoleMessage") to be logged by in the page. If predicate is provided, it passes [ConsoleMessage](https://playwright.dev/python/docs/api/class-consolemessage "ConsoleMessage") value into the `predicate` function and waits for `predicate(message)` to return a truthy value. Will throw an error if the page is closed before the [page.on("console")](https://playwright.dev/python/docs/api/class-page#page-event-console) event is fired.

**Usage**

```codeBlockLines_e6Vv
page.expect_console_message()
page.expect_console_message(**kwargs)

```

**Arguments**

- `predicate` [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [ConsoleMessage](https://playwright.dev/python/docs/api/class-consolemessage "ConsoleMessage")\]: [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-console-message-option-predicate)

Receives the [ConsoleMessage](https://playwright.dev/python/docs/api/class-consolemessage "ConsoleMessage") object and resolves to truthy value when the waiting should resolve.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-console-message-option-timeout)

Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout).


**Returns**

- [EventContextManager](https://docs.python.org/3/reference/datamodel.html#context-managers "Event context manager")\[ [ConsoleMessage](https://playwright.dev/python/docs/api/class-consolemessage "ConsoleMessage")\] [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-console-message-return)

* * *

### expect\_download [​](https://playwright.dev/python/docs/api/class-page\#page-wait-for-download "Direct link to expect_download")

Added in: v1.9page.expect\_download

Performs action and waits for a new [Download](https://playwright.dev/python/docs/api/class-download "Download"). If predicate is provided, it passes [Download](https://playwright.dev/python/docs/api/class-download "Download") value into the `predicate` function and waits for `predicate(download)` to return a truthy value. Will throw an error if the page is closed before the download event is fired.

**Usage**

```codeBlockLines_e6Vv
page.expect_download()
page.expect_download(**kwargs)

```

**Arguments**

- `predicate` [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [Download](https://playwright.dev/python/docs/api/class-download "Download")\]: [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-download-option-predicate)

Receives the [Download](https://playwright.dev/python/docs/api/class-download "Download") object and resolves to truthy value when the waiting should resolve.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-download-option-timeout)

Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout).


**Returns**

- [EventContextManager](https://docs.python.org/3/reference/datamodel.html#context-managers "Event context manager")\[ [Download](https://playwright.dev/python/docs/api/class-download "Download")\] [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-download-return)

* * *

### expect\_event [​](https://playwright.dev/python/docs/api/class-page\#page-wait-for-event "Direct link to expect_event")

Added before v1.9page.expect\_event

Waits for event to fire and passes its value into the predicate function. Returns when the predicate returns truthy value. Will throw an error if the page is closed before the event is fired. Returns the event data value.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
with page.expect_event("framenavigated") as event_info:
    page.get_by_role("button")
frame = event_info.value

```

```codeBlockLines_e6Vv
async with page.expect_event("framenavigated") as event_info:
    await page.get_by_role("button")
frame = await event_info.value

```

**Arguments**

- `event` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-event-option-event)

Event name, same one typically passed into `*.on(event)`.

- `predicate` [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-event-option-predicate)

Receives the event data and resolves to truthy value when the waiting should resolve.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-event-option-timeout)

Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout).


**Returns**

- [EventContextManager](https://docs.python.org/3/reference/datamodel.html#context-managers "Event context manager") [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-event-return)

* * *

### expect\_file\_chooser [​](https://playwright.dev/python/docs/api/class-page\#page-wait-for-file-chooser "Direct link to expect_file_chooser")

Added in: v1.9page.expect\_file\_chooser

Performs action and waits for a new [FileChooser](https://playwright.dev/python/docs/api/class-filechooser "FileChooser") to be created. If predicate is provided, it passes [FileChooser](https://playwright.dev/python/docs/api/class-filechooser "FileChooser") value into the `predicate` function and waits for `predicate(fileChooser)` to return a truthy value. Will throw an error if the page is closed before the file chooser is opened.

**Usage**

```codeBlockLines_e6Vv
page.expect_file_chooser()
page.expect_file_chooser(**kwargs)

```

**Arguments**

- `predicate` [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [FileChooser](https://playwright.dev/python/docs/api/class-filechooser "FileChooser")\]: [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-file-chooser-option-predicate)

Receives the [FileChooser](https://playwright.dev/python/docs/api/class-filechooser "FileChooser") object and resolves to truthy value when the waiting should resolve.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-file-chooser-option-timeout)

Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout).


**Returns**

- [EventContextManager](https://docs.python.org/3/reference/datamodel.html#context-managers "Event context manager")\[ [FileChooser](https://playwright.dev/python/docs/api/class-filechooser "FileChooser")\] [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-file-chooser-return)

* * *

### expect\_popup [​](https://playwright.dev/python/docs/api/class-page\#page-wait-for-popup "Direct link to expect_popup")

Added in: v1.9page.expect\_popup

Performs action and waits for a popup [Page](https://playwright.dev/python/docs/api/class-page "Page"). If predicate is provided, it passes \[Popup\] value into the `predicate` function and waits for `predicate(page)` to return a truthy value. Will throw an error if the page is closed before the popup event is fired.

**Usage**

```codeBlockLines_e6Vv
page.expect_popup()
page.expect_popup(**kwargs)

```

**Arguments**

- `predicate` [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [Page](https://playwright.dev/python/docs/api/class-page "Page")\]: [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-popup-option-predicate)

Receives the [Page](https://playwright.dev/python/docs/api/class-page "Page") object and resolves to truthy value when the waiting should resolve.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-popup-option-timeout)

Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout).


**Returns**

- [EventContextManager](https://docs.python.org/3/reference/datamodel.html#context-managers "Event context manager")\[ [Page](https://playwright.dev/python/docs/api/class-page "Page")\] [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-popup-return)

* * *

### expect\_request [​](https://playwright.dev/python/docs/api/class-page\#page-wait-for-request "Direct link to expect_request")

Added before v1.9page.expect\_request

Waits for the matching request and returns it. See [waiting for event](https://playwright.dev/python/docs/events#waiting-for-event) for more details about events.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
with page.expect_request("http://example.com/resource") as first:
    page.get_by_text("trigger request").click()
first_request = first.value

# or with a lambda
with page.expect_request(lambda request: request.url == "http://example.com" and request.method == "get") as second:
    page.get_by_text("trigger request").click()
second_request = second.value

```

```codeBlockLines_e6Vv
async with page.expect_request("http://example.com/resource") as first:
    await page.get_by_text("trigger request").click()
first_request = await first.value

# or with a lambda
async with page.expect_request(lambda request: request.url == "http://example.com" and request.method == "get") as second:
    await page.get_by_text("trigger request").click()
second_request = await second.value

```

**Arguments**

- `url_or_predicate` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") \| [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [Request](https://playwright.dev/python/docs/api/class-request "Request")\]: [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-request-option-url-or-predicate)

Request URL string, regex or predicate receiving [Request](https://playwright.dev/python/docs/api/class-request "Request") object. When a [base\_url](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-base-url) via the context options was provided and the passed URL is a path, it gets merged via the [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-request-option-timeout)

Maximum wait time in milliseconds, defaults to 30 seconds, pass `0` to disable the timeout. The default value can be changed by using the [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) method.


**Returns**

- [EventContextManager](https://docs.python.org/3/reference/datamodel.html#context-managers "Event context manager")\[ [Request](https://playwright.dev/python/docs/api/class-request "Request")\] [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-request-return)

* * *

### expect\_request\_finished [​](https://playwright.dev/python/docs/api/class-page\#page-wait-for-request-finished "Direct link to expect_request_finished")

Added in: v1.12page.expect\_request\_finished

Performs action and waits for a [Request](https://playwright.dev/python/docs/api/class-request "Request") to finish loading. If predicate is provided, it passes [Request](https://playwright.dev/python/docs/api/class-request "Request") value into the `predicate` function and waits for `predicate(request)` to return a truthy value. Will throw an error if the page is closed before the [page.on("requestfinished")](https://playwright.dev/python/docs/api/class-page#page-event-request-finished) event is fired.

**Usage**

```codeBlockLines_e6Vv
page.expect_request_finished()
page.expect_request_finished(**kwargs)

```

**Arguments**

- `predicate` [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [Request](https://playwright.dev/python/docs/api/class-request "Request")\]: [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-request-finished-option-predicate)

Receives the [Request](https://playwright.dev/python/docs/api/class-request "Request") object and resolves to truthy value when the waiting should resolve.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-request-finished-option-timeout)

Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout).


**Returns**

- [EventContextManager](https://docs.python.org/3/reference/datamodel.html#context-managers "Event context manager")\[ [Request](https://playwright.dev/python/docs/api/class-request "Request")\] [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-request-finished-return)

* * *

### expect\_response [​](https://playwright.dev/python/docs/api/class-page\#page-wait-for-response "Direct link to expect_response")

Added before v1.9page.expect\_response

Returns the matched response. See [waiting for event](https://playwright.dev/python/docs/events#waiting-for-event) for more details about events.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
with page.expect_response("https://example.com/resource") as response_info:
    page.get_by_text("trigger response").click()
response = response_info.value
return response.ok

# or with a lambda
with page.expect_response(lambda response: response.url == "https://example.com" and response.status == 200 and response.request.method == "get") as response_info:
    page.get_by_text("trigger response").click()
response = response_info.value
return response.ok

```

```codeBlockLines_e6Vv
async with page.expect_response("https://example.com/resource") as response_info:
    await page.get_by_text("trigger response").click()
response = await response_info.value
return response.ok

# or with a lambda
async with page.expect_response(lambda response: response.url == "https://example.com" and response.status == 200 and response.request.method == "get") as response_info:
    await page.get_by_text("trigger response").click()
response = await response_info.value
return response.ok

```

**Arguments**

- `url_or_predicate` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") \| [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [Response](https://playwright.dev/python/docs/api/class-response "Response")\]: [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-response-option-url-or-predicate)

Request URL string, regex or predicate receiving [Response](https://playwright.dev/python/docs/api/class-response "Response") object. When a [base\_url](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-base-url) via the context options was provided and the passed URL is a path, it gets merged via the [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-response-option-timeout)

Maximum wait time in milliseconds, defaults to 30 seconds, pass `0` to disable the timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [EventContextManager](https://docs.python.org/3/reference/datamodel.html#context-managers "Event context manager")\[ [Response](https://playwright.dev/python/docs/api/class-response "Response")\] [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-response-return)

* * *

### expect\_websocket [​](https://playwright.dev/python/docs/api/class-page\#page-wait-for-web-socket "Direct link to expect_websocket")

Added in: v1.9page.expect\_websocket

Performs action and waits for a new [WebSocket](https://playwright.dev/python/docs/api/class-websocket "WebSocket"). If predicate is provided, it passes [WebSocket](https://playwright.dev/python/docs/api/class-websocket "WebSocket") value into the `predicate` function and waits for `predicate(webSocket)` to return a truthy value. Will throw an error if the page is closed before the WebSocket event is fired.

**Usage**

```codeBlockLines_e6Vv
page.expect_websocket()
page.expect_websocket(**kwargs)

```

**Arguments**

- `predicate` [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [WebSocket](https://playwright.dev/python/docs/api/class-websocket "WebSocket")\]: [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-web-socket-option-predicate)

Receives the [WebSocket](https://playwright.dev/python/docs/api/class-websocket "WebSocket") object and resolves to truthy value when the waiting should resolve.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-web-socket-option-timeout)

Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout).


**Returns**

- [EventContextManager](https://docs.python.org/3/reference/datamodel.html#context-managers "Event context manager")\[ [WebSocket](https://playwright.dev/python/docs/api/class-websocket "WebSocket")\] [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-web-socket-return)

* * *

### expect\_worker [​](https://playwright.dev/python/docs/api/class-page\#page-wait-for-worker "Direct link to expect_worker")

Added in: v1.9page.expect\_worker

Performs action and waits for a new [Worker](https://playwright.dev/python/docs/api/class-worker "Worker"). If predicate is provided, it passes [Worker](https://playwright.dev/python/docs/api/class-worker "Worker") value into the `predicate` function and waits for `predicate(worker)` to return a truthy value. Will throw an error if the page is closed before the worker event is fired.

**Usage**

```codeBlockLines_e6Vv
page.expect_worker()
page.expect_worker(**kwargs)

```

**Arguments**

- `predicate` [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [Worker](https://playwright.dev/python/docs/api/class-worker "Worker")\]: [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-worker-option-predicate)

Receives the [Worker](https://playwright.dev/python/docs/api/class-worker "Worker") object and resolves to truthy value when the waiting should resolve.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-worker-option-timeout)

Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout).


**Returns**

- [EventContextManager](https://docs.python.org/3/reference/datamodel.html#context-managers "Event context manager")\[ [Worker](https://playwright.dev/python/docs/api/class-worker "Worker")\] [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-worker-return)

* * *

### expose\_binding [​](https://playwright.dev/python/docs/api/class-page\#page-expose-binding "Direct link to expose_binding")

Added before v1.9page.expose\_binding

The method adds a function called [name](https://playwright.dev/python/docs/api/class-page#page-expose-binding-option-name) on the `window` object of every frame in this page. When called, the function executes [callback](https://playwright.dev/python/docs/api/class-page#page-expose-binding-option-callback) and returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise") which resolves to the return value of [callback](https://playwright.dev/python/docs/api/class-page#page-expose-binding-option-callback). If the [callback](https://playwright.dev/python/docs/api/class-page#page-expose-binding-option-callback) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), it will be awaited.

The first argument of the [callback](https://playwright.dev/python/docs/api/class-page#page-expose-binding-option-callback) function contains information about the caller: `{ browserContext: BrowserContext, page: Page, frame: Frame }`.

See [browser\_context.expose\_binding()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-expose-binding) for the context-wide version.

note

Functions installed via [page.expose\_binding()](https://playwright.dev/python/docs/api/class-page#page-expose-binding) survive navigations.

**Usage**

An example of exposing page URL to all frames in a page:

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    webkit = playwright.webkit
    browser = webkit.launch(headless=False)
    context = browser.new_context()
    page = context.new_page()
    page.expose_binding("pageURL", lambda source: source["page"].url)
    page.set_content("""
    <script>
      async function onClick() {
        document.querySelector('div').textContent = await window.pageURL();
      }
    </script>
    <button onclick="onClick()">Click me</button>
    <div></div>
    """)
    page.click("button")

with sync_playwright() as playwright:
    run(playwright)

```

```codeBlockLines_e6Vv
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    webkit = playwright.webkit
    browser = await webkit.launch(headless=False)
    context = await browser.new_context()
    page = await context.new_page()
    await page.expose_binding("pageURL", lambda source: source["page"].url)
    await page.set_content("""
    <script>
      async function onClick() {
        document.querySelector('div').textContent = await window.pageURL();
      }
    </script>
    <button onclick="onClick()">Click me</button>
    <div></div>
    """)
    await page.click("button")

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())

```

**Arguments**

- `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-expose-binding-option-name)

Name of the function on the window object.

- `callback` [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable") [#](https://playwright.dev/python/docs/api/class-page#page-expose-binding-option-callback)

Callback function that will be called in the Playwright's context.

- `handle` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-expose-binding-option-handle)



Deprecated





This option will be removed in the future.





Whether to pass the argument as a handle, instead of passing by value. When passing a handle, only one argument is supported. When passing by value, multiple arguments are supported.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-expose-binding-return)

* * *

### expose\_function [​](https://playwright.dev/python/docs/api/class-page\#page-expose-function "Direct link to expose_function")

Added before v1.9page.expose\_function

The method adds a function called [name](https://playwright.dev/python/docs/api/class-page#page-expose-function-option-name) on the `window` object of every frame in the page. When called, the function executes [callback](https://playwright.dev/python/docs/api/class-page#page-expose-function-option-callback) and returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise") which resolves to the return value of [callback](https://playwright.dev/python/docs/api/class-page#page-expose-function-option-callback).

If the [callback](https://playwright.dev/python/docs/api/class-page#page-expose-function-option-callback) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), it will be awaited.

See [browser\_context.expose\_function()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-expose-function) for context-wide exposed function.

note

Functions installed via [page.expose\_function()](https://playwright.dev/python/docs/api/class-page#page-expose-function) survive navigations.

**Usage**

An example of adding a `sha256` function to the page:

- Sync
- Async

```codeBlockLines_e6Vv
import hashlib
from playwright.sync_api import sync_playwright, Playwright

def sha256(text):
    m = hashlib.sha256()
    m.update(bytes(text, "utf8"))
    return m.hexdigest()

def run(playwright: Playwright):
    webkit = playwright.webkit
    browser = webkit.launch(headless=False)
    page = browser.new_page()
    page.expose_function("sha256", sha256)
    page.set_content("""
        <script>
          async function onClick() {
            document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');
          }
        </script>
        <button onclick="onClick()">Click me</button>
        <div></div>
    """)
    page.click("button")

with sync_playwright() as playwright:
    run(playwright)

```

```codeBlockLines_e6Vv
import asyncio
import hashlib
from playwright.async_api import async_playwright, Playwright

def sha256(text):
    m = hashlib.sha256()
    m.update(bytes(text, "utf8"))
    return m.hexdigest()

async def run(playwright: Playwright):
    webkit = playwright.webkit
    browser = await webkit.launch(headless=False)
    page = await browser.new_page()
    await page.expose_function("sha256", sha256)
    await page.set_content("""
        <script>
          async function onClick() {
            document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');
          }
        </script>
        <button onclick="onClick()">Click me</button>
        <div></div>
    """)
    await page.click("button")

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())

```

**Arguments**

- `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-expose-function-option-name)

Name of the function on the window object

- `callback` [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable") [#](https://playwright.dev/python/docs/api/class-page#page-expose-function-option-callback)

Callback function which will be called in Playwright's context.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-expose-function-return)

* * *

### frame [​](https://playwright.dev/python/docs/api/class-page\#page-frame "Direct link to frame")

Added before v1.9page.frame

Returns frame matching the specified criteria. Either `name` or `url` must be specified.

**Usage**

```codeBlockLines_e6Vv
frame = page.frame(name="frame-name")

```

```codeBlockLines_e6Vv
frame = page.frame(url=r".*domain.*")

```

**Arguments**

- `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-frame-option-name)

Frame name specified in the `iframe`'s `name` attribute. Optional.

- `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") \| [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [URL](https://en.wikipedia.org/wiki/URL "URL")\]: [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-frame-option-url)

A glob pattern, regex pattern or predicate receiving frame's `url` as a [URL](https://en.wikipedia.org/wiki/URL "URL") object. Optional.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [Frame](https://playwright.dev/python/docs/api/class-frame "Frame") [#](https://playwright.dev/python/docs/api/class-page#page-frame-return)

* * *

### frame\_locator [​](https://playwright.dev/python/docs/api/class-page\#page-frame-locator "Direct link to frame_locator")

Added in: v1.17page.frame\_locator

When working with iframes, you can create a frame locator that will enter the iframe and allow selecting elements in that iframe.

**Usage**

Following snippet locates element with text "Submit" in the iframe with id `my-frame`, like `<iframe id="my-frame">`:

- Sync
- Async

```codeBlockLines_e6Vv
locator = page.frame_locator("#my-iframe").get_by_text("Submit")
locator.click()

```

```codeBlockLines_e6Vv
locator = page.frame_locator("#my-iframe").get_by_text("Submit")
await locator.click()

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-frame-locator-option-selector)

A selector to use when resolving DOM element.


**Returns**

- [FrameLocator](https://playwright.dev/python/docs/api/class-framelocator "FrameLocator") [#](https://playwright.dev/python/docs/api/class-page#page-frame-locator-return)

* * *

### get\_by\_alt\_text [​](https://playwright.dev/python/docs/api/class-page\#page-get-by-alt-text "Direct link to get_by_alt_text")

Added in: v1.27page.get\_by\_alt\_text

Allows locating elements by their alt text.

**Usage**

For example, this method will find the image by alt text "Playwright logo":

```codeBlockLines_e6Vv
<img alt='Playwright logo'>

```

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_alt_text("Playwright logo").click()

```

```codeBlockLines_e6Vv
await page.get_by_alt_text("Playwright logo").click()

```

**Arguments**

- `text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-page#page-get-by-alt-text-option-text)

Text to locate the element for.

- `exact` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-get-by-alt-text-option-exact)

Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-page#page-get-by-alt-text-return)

* * *

### get\_by\_label [​](https://playwright.dev/python/docs/api/class-page\#page-get-by-label "Direct link to get_by_label")

Added in: v1.27page.get\_by\_label

Allows locating input elements by the text of the associated `<label>` or `aria-labelledby` element, or by the `aria-label` attribute.

**Usage**

For example, this method will find inputs by label "Username" and "Password" in the following DOM:

```codeBlockLines_e6Vv
<input aria-label="Username">
<label for="password-input">Password:</label>
<input id="password-input">

```

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_label("Username").fill("john")
page.get_by_label("Password").fill("secret")

```

```codeBlockLines_e6Vv
await page.get_by_label("Username").fill("john")
await page.get_by_label("Password").fill("secret")

```

**Arguments**

- `text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-page#page-get-by-label-option-text)

Text to locate the element for.

- `exact` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-get-by-label-option-exact)

Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-page#page-get-by-label-return)

* * *

### get\_by\_placeholder [​](https://playwright.dev/python/docs/api/class-page\#page-get-by-placeholder "Direct link to get_by_placeholder")

Added in: v1.27page.get\_by\_placeholder

Allows locating input elements by the placeholder text.

**Usage**

For example, consider the following DOM structure.

```codeBlockLines_e6Vv
<input type="email" placeholder="name@example.com" />

```

You can fill the input after locating it by the placeholder text:

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_placeholder("name@example.com").fill("playwright@microsoft.com")

```

```codeBlockLines_e6Vv
await page.get_by_placeholder("name@example.com").fill("playwright@microsoft.com")

```

**Arguments**

- `text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-page#page-get-by-placeholder-option-text)

Text to locate the element for.

- `exact` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-get-by-placeholder-option-exact)

Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-page#page-get-by-placeholder-return)

* * *

### get\_by\_role [​](https://playwright.dev/python/docs/api/class-page\#page-get-by-role "Direct link to get_by_role")

Added in: v1.27page.get\_by\_role

Allows locating elements by their [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).

**Usage**

Consider the following DOM structure.

```codeBlockLines_e6Vv
<h3>Sign up</h3>
<label>
  <input type="checkbox" /> Subscribe
</label>
<br/>
<button>Submit</button>

```

You can locate each element by it's implicit role:

- Sync
- Async

```codeBlockLines_e6Vv
expect(page.get_by_role("heading", name="Sign up")).to_be_visible()

page.get_by_role("checkbox", name="Subscribe").check()

page.get_by_role("button", name=re.compile("submit", re.IGNORECASE)).click()

```

```codeBlockLines_e6Vv
await expect(page.get_by_role("heading", name="Sign up")).to_be_visible()

await page.get_by_role("checkbox", name="Subscribe").check()

await page.get_by_role("button", name=re.compile("submit", re.IGNORECASE)).click()

```

**Arguments**

- `role` "alert" \| "alertdialog" \| "application" \| "article" \| "banner" \| "blockquote" \| "button" \| "caption" \| "cell" \| "checkbox" \| "code" \| "columnheader" \| "combobox" \| "complementary" \| "contentinfo" \| "definition" \| "deletion" \| "dialog" \| "directory" \| "document" \| "emphasis" \| "feed" \| "figure" \| "form" \| "generic" \| "grid" \| "gridcell" \| "group" \| "heading" \| "img" \| "insertion" \| "link" \| "list" \| "listbox" \| "listitem" \| "log" \| "main" \| "marquee" \| "math" \| "meter" \| "menu" \| "menubar" \| "menuitem" \| "menuitemcheckbox" \| "menuitemradio" \| "navigation" \| "none" \| "note" \| "option" \| "paragraph" \| "presentation" \| "progressbar" \| "radio" \| "radiogroup" \| "region" \| "row" \| "rowgroup" \| "rowheader" \| "scrollbar" \| "search" \| "searchbox" \| "separator" \| "slider" \| "spinbutton" \| "status" \| "strong" \| "subscript" \| "superscript" \| "switch" \| "tab" \| "table" \| "tablist" \| "tabpanel" \| "term" \| "textbox" \| "time" \| "timer" \| "toolbar" \| "tooltip" \| "tree" \| "treegrid" \| "treeitem" [#](https://playwright.dev/python/docs/api/class-page#page-get-by-role-option-role)

Required aria role.

- `checked` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-get-by-role-option-checked)

An attribute that is usually set by `aria-checked` or native `<input type=checkbox>` controls.

Learn more about [`aria-checked`](https://www.w3.org/TR/wai-aria-1.2/#aria-checked).

- `disabled` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-get-by-role-option-disabled)

An attribute that is usually set by `aria-disabled` or `disabled`.



note





Unlike most other attributes, `disabled` is inherited through the DOM hierarchy. Learn more about [`aria-disabled`](https://www.w3.org/TR/wai-aria-1.2/#aria-disabled).

- `exact` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.28 [#](https://playwright.dev/python/docs/api/class-page#page-get-by-role-option-exact)

Whether [name](https://playwright.dev/python/docs/api/class-page#page-get-by-role-option-name) is matched exactly: case-sensitive and whole-string. Defaults to false. Ignored when [name](https://playwright.dev/python/docs/api/class-page#page-get-by-role-option-name) is a regular expression. Note that exact match still trims whitespace.

- `expanded` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-get-by-role-option-expanded)

An attribute that is usually set by `aria-expanded`.

Learn more about [`aria-expanded`](https://www.w3.org/TR/wai-aria-1.2/#aria-expanded).

- `include_hidden` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-get-by-role-option-include-hidden)

Option that controls whether hidden elements are matched. By default, only non-hidden elements, as [defined by ARIA](https://www.w3.org/TR/wai-aria-1.2/#tree_exclusion), are matched by role selector.

Learn more about [`aria-hidden`](https://www.w3.org/TR/wai-aria-1.2/#aria-hidden).

- `level` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-get-by-role-option-level)

A number attribute that is usually present for roles `heading`, `listitem`, `row`, `treeitem`, with default values for `<h1>-<h6>` elements.

Learn more about [`aria-level`](https://www.w3.org/TR/wai-aria-1.2/#aria-level).

- `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-get-by-role-option-name)

Option to match the [accessible name](https://w3c.github.io/accname/#dfn-accessible-name). By default, matching is case-insensitive and searches for a substring, use [exact](https://playwright.dev/python/docs/api/class-page#page-get-by-role-option-exact) to control this behavior.

Learn more about [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).

- `pressed` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-get-by-role-option-pressed)

An attribute that is usually set by `aria-pressed`.

Learn more about [`aria-pressed`](https://www.w3.org/TR/wai-aria-1.2/#aria-pressed).

- `selected` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-get-by-role-option-selected)

An attribute that is usually set by `aria-selected`.

Learn more about [`aria-selected`](https://www.w3.org/TR/wai-aria-1.2/#aria-selected).


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-page#page-get-by-role-return)

**Details**

Role selector **does not replace** accessibility audits and conformance tests, but rather gives early feedback about the ARIA guidelines.

Many html elements have an implicitly [defined role](https://w3c.github.io/html-aam/#html-element-role-mappings) that is recognized by the role selector. You can find all the [supported roles here](https://www.w3.org/TR/wai-aria-1.2/#role_definitions). ARIA guidelines **do not recommend** duplicating implicit roles and attributes by setting `role` and/or `aria-*` attributes to default values.

* * *

### get\_by\_test\_id [​](https://playwright.dev/python/docs/api/class-page\#page-get-by-test-id "Direct link to get_by_test_id")

Added in: v1.27page.get\_by\_test\_id

Locate element by the test id.

**Usage**

Consider the following DOM structure.

```codeBlockLines_e6Vv
<button data-testid="directions">Itinéraire</button>

```

You can locate the element by it's test id:

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_test_id("directions").click()

```

```codeBlockLines_e6Vv
await page.get_by_test_id("directions").click()

```

**Arguments**

- `test_id` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-page#page-get-by-test-id-option-test-id)

Id to locate the element by.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-page#page-get-by-test-id-return)

**Details**

By default, the `data-testid` attribute is used as a test id. Use [selectors.set\_test\_id\_attribute()](https://playwright.dev/python/docs/api/class-selectors#selectors-set-test-id-attribute) to configure a different test id attribute if necessary.

* * *

### get\_by\_text [​](https://playwright.dev/python/docs/api/class-page\#page-get-by-text "Direct link to get_by_text")

Added in: v1.27page.get\_by\_text

Allows locating elements that contain given text.

See also [locator.filter()](https://playwright.dev/python/docs/api/class-locator#locator-filter) that allows to match by another criteria, like an accessible role, and then filter by the text content.

**Usage**

Consider the following DOM structure:

```codeBlockLines_e6Vv
<div>Hello <span>world</span></div>
<div>Hello</div>

```

You can locate by text substring, exact string, or a regular expression:

- Sync
- Async

```codeBlockLines_e6Vv
# Matches <span>
page.get_by_text("world")

# Matches first <div>
page.get_by_text("Hello world")

# Matches second <div>
page.get_by_text("Hello", exact=True)

# Matches both <div>s
page.get_by_text(re.compile("Hello"))

# Matches second <div>
page.get_by_text(re.compile("^hello$", re.IGNORECASE))

```

```codeBlockLines_e6Vv
# Matches <span>
page.get_by_text("world")

# Matches first <div>
page.get_by_text("Hello world")

# Matches second <div>
page.get_by_text("Hello", exact=True)

# Matches both <div>s
page.get_by_text(re.compile("Hello"))

# Matches second <div>
page.get_by_text(re.compile("^hello$", re.IGNORECASE))

```

**Arguments**

- `text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-page#page-get-by-text-option-text)

Text to locate the element for.

- `exact` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-get-by-text-option-exact)

Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-page#page-get-by-text-return)

**Details**

Matching by text always normalizes whitespace, even with exact match. For example, it turns multiple spaces into one, turns line breaks into spaces and ignores leading and trailing whitespace.

Input elements of the type `button` and `submit` are matched by their `value` instead of the text content. For example, locating by text `"Log in"` matches `<input type=button value="Log in">`.

* * *

### get\_by\_title [​](https://playwright.dev/python/docs/api/class-page\#page-get-by-title "Direct link to get_by_title")

Added in: v1.27page.get\_by\_title

Allows locating elements by their title attribute.

**Usage**

Consider the following DOM structure.

```codeBlockLines_e6Vv
<span title='Issues count'>25 issues</span>

```

You can check the issues count after locating it by the title text:

- Sync
- Async

```codeBlockLines_e6Vv
expect(page.get_by_title("Issues count")).to_have_text("25 issues")

```

```codeBlockLines_e6Vv
await expect(page.get_by_title("Issues count")).to_have_text("25 issues")

```

**Arguments**

- `text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") [#](https://playwright.dev/python/docs/api/class-page#page-get-by-title-option-text)

Text to locate the element for.

- `exact` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-get-by-title-option-exact)

Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-page#page-get-by-title-return)

* * *

### go\_back [​](https://playwright.dev/python/docs/api/class-page\#page-go-back "Direct link to go_back")

Added before v1.9page.go\_back

Returns the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. If cannot go back, returns `null`.

Navigate to the previous page in history.

**Usage**

```codeBlockLines_e6Vv
page.go_back()
page.go_back(**kwargs)

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-go-back-option-timeout)

Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout), [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout), [page.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-navigation-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `wait_until` "load" \| "domcontentloaded" \| "networkidle" \| "commit" _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-go-back-option-wait-until)

When to consider operation succeeded, defaults to `load`. Events can be either:
  - `'domcontentloaded'` \- consider operation to be finished when the `DOMContentLoaded` event is fired.
  - `'load'` \- consider operation to be finished when the `load` event is fired.
  - `'networkidle'` \- **DISCOURAGED** consider operation to be finished when there are no network connections for at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.
  - `'commit'` \- consider operation to be finished when network response is received and the document started loading.

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [Response](https://playwright.dev/python/docs/api/class-response "Response") [#](https://playwright.dev/python/docs/api/class-page#page-go-back-return)

* * *

### go\_forward [​](https://playwright.dev/python/docs/api/class-page\#page-go-forward "Direct link to go_forward")

Added before v1.9page.go\_forward

Returns the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. If cannot go forward, returns `null`.

Navigate to the next page in history.

**Usage**

```codeBlockLines_e6Vv
page.go_forward()
page.go_forward(**kwargs)

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-go-forward-option-timeout)

Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout), [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout), [page.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-navigation-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `wait_until` "load" \| "domcontentloaded" \| "networkidle" \| "commit" _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-go-forward-option-wait-until)

When to consider operation succeeded, defaults to `load`. Events can be either:
  - `'domcontentloaded'` \- consider operation to be finished when the `DOMContentLoaded` event is fired.
  - `'load'` \- consider operation to be finished when the `load` event is fired.
  - `'networkidle'` \- **DISCOURAGED** consider operation to be finished when there are no network connections for at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.
  - `'commit'` \- consider operation to be finished when network response is received and the document started loading.

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [Response](https://playwright.dev/python/docs/api/class-response "Response") [#](https://playwright.dev/python/docs/api/class-page#page-go-forward-return)

* * *

### goto [​](https://playwright.dev/python/docs/api/class-page\#page-goto "Direct link to goto")

Added before v1.9page.goto

Returns the main resource response. In case of multiple redirects, the navigation will resolve with the first non-redirect response.

The method will throw an error if:

- there's an SSL error (e.g. in case of self-signed certificates).
- target URL is invalid.
- the [timeout](https://playwright.dev/python/docs/api/class-page#page-goto-option-timeout) is exceeded during navigation.
- the remote server does not respond or is unreachable.
- the main resource failed to load.

The method will not throw an error when any valid HTTP status code is returned by the remote server, including 404 "Not Found" and 500 "Internal Server Error". The status code for such responses can be retrieved by calling [response.status](https://playwright.dev/python/docs/api/class-response#response-status).

note

The method either throws an error or returns a main resource response. The only exceptions are navigation to `about:blank` or navigation to the same URL with a different hash, which would succeed and return `null`.

note

Headless mode doesn't support navigation to a PDF document. See the [upstream issue](https://bugs.chromium.org/p/chromium/issues/detail?id=761295).

**Usage**

```codeBlockLines_e6Vv
page.goto(url)
page.goto(url, **kwargs)

```

**Arguments**

- `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-goto-option-url)

URL to navigate page to. The url should include scheme, e.g. `https://`. When a [base\_url](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-base-url) via the context options was provided and the passed URL is a path, it gets merged via the [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor.

- `referer` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-goto-option-referer)

Referer header value. If provided it will take preference over the referer header value set by [page.set\_extra\_http\_headers()](https://playwright.dev/python/docs/api/class-page#page-set-extra-http-headers).

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-goto-option-timeout)

Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout), [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout), [page.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-navigation-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `wait_until` "load" \| "domcontentloaded" \| "networkidle" \| "commit" _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-goto-option-wait-until)

When to consider operation succeeded, defaults to `load`. Events can be either:
  - `'domcontentloaded'` \- consider operation to be finished when the `DOMContentLoaded` event is fired.
  - `'load'` \- consider operation to be finished when the `load` event is fired.
  - `'networkidle'` \- **DISCOURAGED** consider operation to be finished when there are no network connections for at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.
  - `'commit'` \- consider operation to be finished when network response is received and the document started loading.

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [Response](https://playwright.dev/python/docs/api/class-response "Response") [#](https://playwright.dev/python/docs/api/class-page#page-goto-return)

* * *

### locator [​](https://playwright.dev/python/docs/api/class-page\#page-locator "Direct link to locator")

Added in: v1.14page.locator

The method returns an element locator that can be used to perform actions on this page / frame. Locator is resolved to the element immediately before performing an action, so a series of actions on the same locator can in fact be performed on different DOM elements. That would happen if the DOM structure between those actions has changed.

[Learn more about locators](https://playwright.dev/python/docs/locators).

**Usage**

```codeBlockLines_e6Vv
page.locator(selector)
page.locator(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-locator-option-selector)

A selector to use when resolving DOM element.

- `has` [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-locator-option-has)

Narrows down the results of the method to those which contain elements matching this relative locator. For example, `article` that has `text=Playwright` matches `<article><div>Playwright</div></article>`.

Inner locator **must be relative** to the outer locator and is queried starting with the outer locator match, not the document root. For example, you can find `content` that has `div` in `<article><content><div>Playwright</div></content></article>`. However, looking for `content` that has `article div` will fail, because the inner locator must be relative and should not use any elements outside the `content`.

Note that outer and inner locators must belong to the same frame. Inner locator must not contain [FrameLocator](https://playwright.dev/python/docs/api/class-framelocator "FrameLocator") s.

- `has_not` [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") _(optional)_ Added in: v1.33 [#](https://playwright.dev/python/docs/api/class-page#page-locator-option-has-not)

Matches elements that do not contain an element that matches an inner locator. Inner locator is queried against the outer one. For example, `article` that does not have `div` matches `<article><span>Playwright</span></article>`.

Note that outer and inner locators must belong to the same frame. Inner locator must not contain [FrameLocator](https://playwright.dev/python/docs/api/class-framelocator "FrameLocator") s.

- `has_not_text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") _(optional)_ Added in: v1.33 [#](https://playwright.dev/python/docs/api/class-page#page-locator-option-has-not-text)

Matches elements that do not contain specified text somewhere inside, possibly in a child or a descendant element. When passed a \[string\], matching is case-insensitive and searches for a substring.

- `has_text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-locator-option-has-text)

Matches elements containing specified text somewhere inside, possibly in a child or a descendant element. When passed a \[string\], matching is case-insensitive and searches for a substring. For example, `"Playwright"` matches `<article><div>Playwright</div></article>`.


**Returns**

- [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-page#page-locator-return)

* * *

### opener [​](https://playwright.dev/python/docs/api/class-page\#page-opener "Direct link to opener")

Added before v1.9page.opener

Returns the opener for popup pages and `null` for others. If the opener has been closed already the returns `null`.

**Usage**

```codeBlockLines_e6Vv
page.opener()

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [Page](https://playwright.dev/python/docs/api/class-page "Page") [#](https://playwright.dev/python/docs/api/class-page#page-opener-return)

* * *

### pause [​](https://playwright.dev/python/docs/api/class-page\#page-pause "Direct link to pause")

Added in: v1.9page.pause

Pauses script execution. Playwright will stop executing the script and wait for the user to either press 'Resume' button in the page overlay or to call `playwright.resume()` in the DevTools console.

User can inspect selectors or perform manual steps while paused. Resume will continue running the original script from the place it was paused.

note

This method requires Playwright to be started in a headed mode, with a falsy [headless](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-headless) option.

**Usage**

```codeBlockLines_e6Vv
page.pause()

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-pause-return)

* * *

### pdf [​](https://playwright.dev/python/docs/api/class-page\#page-pdf "Direct link to pdf")

Added before v1.9page.pdf

Returns the PDF buffer.

`page.pdf()` generates a pdf of the page with `print` css media. To generate a pdf with `screen` media, call [page.emulate\_media()](https://playwright.dev/python/docs/api/class-page#page-emulate-media) before calling `page.pdf()`:

note

By default, `page.pdf()` generates a pdf with modified colors for printing. Use the [`-webkit-print-color-adjust`](https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-print-color-adjust) property to force rendering of exact colors.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
# generates a pdf with "screen" media type.
page.emulate_media(media="screen")
page.pdf(path="page.pdf")

```

```codeBlockLines_e6Vv
# generates a pdf with "screen" media type.
await page.emulate_media(media="screen")
await page.pdf(path="page.pdf")

```

The [width](https://playwright.dev/python/docs/api/class-page#page-pdf-option-width), [height](https://playwright.dev/python/docs/api/class-page#page-pdf-option-height), and [margin](https://playwright.dev/python/docs/api/class-page#page-pdf-option-margin) options accept values labeled with units. Unlabeled values are treated as pixels.

A few examples:

- `page.pdf({width: 100})` \- prints with width set to 100 pixels
- `page.pdf({width: '100px'})` \- prints with width set to 100 pixels
- `page.pdf({width: '10cm'})` \- prints with width set to 10 centimeters.

All possible units are:

- `px` \- pixel
- `in` \- inch
- `cm` \- centimeter
- `mm` \- millimeter

The [format](https://playwright.dev/python/docs/api/class-page#page-pdf-option-format) options are:

- `Letter`: 8.5in x 11in
- `Legal`: 8.5in x 14in
- `Tabloid`: 11in x 17in
- `Ledger`: 17in x 11in
- `A0`: 33.1in x 46.8in
- `A1`: 23.4in x 33.1in
- `A2`: 16.54in x 23.4in
- `A3`: 11.7in x 16.54in
- `A4`: 8.27in x 11.7in
- `A5`: 5.83in x 8.27in
- `A6`: 4.13in x 5.83in

note

[header\_template](https://playwright.dev/python/docs/api/class-page#page-pdf-option-header-template) and [footer\_template](https://playwright.dev/python/docs/api/class-page#page-pdf-option-footer-template) markup have the following limitations: > 1. Script tags inside templates are not evaluated. > 2. Page styles are not visible inside templates.

**Arguments**

- `display_header_footer` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-pdf-option-display-header-footer)

Display header and footer. Defaults to `false`.

- `footer_template` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-pdf-option-footer-template)

HTML template for the print footer. Should use the same format as the [header\_template](https://playwright.dev/python/docs/api/class-page#page-pdf-option-header-template).

- `format` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-pdf-option-format)

Paper format. If set, takes priority over [width](https://playwright.dev/python/docs/api/class-page#page-pdf-option-width) or [height](https://playwright.dev/python/docs/api/class-page#page-pdf-option-height) options. Defaults to 'Letter'.

- `header_template` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-pdf-option-header-template)

HTML template for the print header. Should be valid HTML markup with following classes used to inject printing values into them:
  - `'date'` formatted print date
  - `'title'` document title
  - `'url'` document location
  - `'pageNumber'` current page number
  - `'totalPages'` total pages in the document
- `height` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-pdf-option-height)

Paper height, accepts values labeled with units.

- `landscape` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-pdf-option-landscape)

Paper orientation. Defaults to `false`.

- `margin` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-pdf-option-margin)


  - `top` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_

    Top margin, accepts values labeled with units. Defaults to `0`.

  - `right` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_

    Right margin, accepts values labeled with units. Defaults to `0`.

  - `bottom` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_

    Bottom margin, accepts values labeled with units. Defaults to `0`.

  - `left` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_

    Left margin, accepts values labeled with units. Defaults to `0`.


Paper margins, defaults to none.

- `outline` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.42 [#](https://playwright.dev/python/docs/api/class-page#page-pdf-option-outline)

Whether or not to embed the document outline into the PDF. Defaults to `false`.

- `page_ranges` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-pdf-option-page-ranges)

Paper ranges to print, e.g., '1-5, 8, 11-13'. Defaults to the empty string, which means print all pages.

- `path` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-pdf-option-path)

The file path to save the PDF to. If [path](https://playwright.dev/python/docs/api/class-page#page-pdf-option-path) is a relative path, then it is resolved relative to the current working directory. If no path is provided, the PDF won't be saved to the disk.

- `prefer_css_page_size` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-pdf-option-prefer-css-page-size)

Give any CSS `@page` size declared in the page priority over what is declared in [width](https://playwright.dev/python/docs/api/class-page#page-pdf-option-width) and [height](https://playwright.dev/python/docs/api/class-page#page-pdf-option-height) or [format](https://playwright.dev/python/docs/api/class-page#page-pdf-option-format) options. Defaults to `false`, which will scale the content to fit the paper size.

- `print_background` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-pdf-option-print-background)

Print background graphics. Defaults to `false`.

- `scale` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-pdf-option-scale)

Scale of the webpage rendering. Defaults to `1`. Scale amount must be between 0.1 and 2.

- `tagged` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.42 [#](https://playwright.dev/python/docs/api/class-page#page-pdf-option-tagged)

Whether or not to generate tagged (accessible) PDF. Defaults to `false`.

- `width` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-pdf-option-width)

Paper width, accepts values labeled with units.


**Returns**

- [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") [#](https://playwright.dev/python/docs/api/class-page#page-pdf-return)

* * *

### reload [​](https://playwright.dev/python/docs/api/class-page\#page-reload "Direct link to reload")

Added before v1.9page.reload

This method reloads the current page, in the same way as if the user had triggered a browser refresh. Returns the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect.

**Usage**

```codeBlockLines_e6Vv
page.reload()
page.reload(**kwargs)

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-reload-option-timeout)

Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout), [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout), [page.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-navigation-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `wait_until` "load" \| "domcontentloaded" \| "networkidle" \| "commit" _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-reload-option-wait-until)

When to consider operation succeeded, defaults to `load`. Events can be either:
  - `'domcontentloaded'` \- consider operation to be finished when the `DOMContentLoaded` event is fired.
  - `'load'` \- consider operation to be finished when the `load` event is fired.
  - `'networkidle'` \- **DISCOURAGED** consider operation to be finished when there are no network connections for at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.
  - `'commit'` \- consider operation to be finished when network response is received and the document started loading.

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [Response](https://playwright.dev/python/docs/api/class-response "Response") [#](https://playwright.dev/python/docs/api/class-page#page-reload-return)

* * *

### remove\_locator\_handler [​](https://playwright.dev/python/docs/api/class-page\#page-remove-locator-handler "Direct link to remove_locator_handler")

Added in: v1.44page.remove\_locator\_handler

Removes all locator handlers added by [page.add\_locator\_handler()](https://playwright.dev/python/docs/api/class-page#page-add-locator-handler) for a specific locator.

**Usage**

```codeBlockLines_e6Vv
page.remove_locator_handler(locator)

```

**Arguments**

- `locator` [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") [#](https://playwright.dev/python/docs/api/class-page#page-remove-locator-handler-option-locator)

Locator passed to [page.add\_locator\_handler()](https://playwright.dev/python/docs/api/class-page#page-add-locator-handler).


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-remove-locator-handler-return)

* * *

### request\_gc [​](https://playwright.dev/python/docs/api/class-page\#page-request-gc "Direct link to request_gc")

Added in: v1.48page.request\_gc

Request the page to perform garbage collection. Note that there is no guarantee that all unreachable objects will be collected.

This is useful to help detect memory leaks. For example, if your page has a large object `'suspect'` that might be leaked, you can check that it does not leak by using a [`WeakRef`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef).

- Sync
- Async

```codeBlockLines_e6Vv
# 1. In your page, save a WeakRef for the "suspect".
page.evaluate("globalThis.suspectWeakRef = new WeakRef(suspect)")
# 2. Request garbage collection.
page.request_gc()
# 3. Check that weak ref does not deref to the original object.
assert page.evaluate("!globalThis.suspectWeakRef.deref()")

```

```codeBlockLines_e6Vv
# 1. In your page, save a WeakRef for the "suspect".
await page.evaluate("globalThis.suspectWeakRef = new WeakRef(suspect)")
# 2. Request garbage collection.
await page.request_gc()
# 3. Check that weak ref does not deref to the original object.
assert await page.evaluate("!globalThis.suspectWeakRef.deref()")

```

**Usage**

```codeBlockLines_e6Vv
page.request_gc()

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-request-gc-return)

* * *

### route [​](https://playwright.dev/python/docs/api/class-page\#page-route "Direct link to route")

Added before v1.9page.route

Routing provides the capability to modify network requests that are made by a page.

Once routing is enabled, every request matching the url pattern will stall unless it's continued, fulfilled or aborted.

note

The handler will only be called for the first url if the response is a redirect.

note

[page.route()](https://playwright.dev/python/docs/api/class-page#page-route) will not intercept requests intercepted by Service Worker. See [this](https://github.com/microsoft/playwright/issues/1090) issue. We recommend disabling Service Workers when using request interception by setting [service\_workers](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-service-workers) to `'block'`.

note

[page.route()](https://playwright.dev/python/docs/api/class-page#page-route) will not intercept the first request of a popup page. Use [browser\_context.route()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route) instead.

**Usage**

An example of a naive handler that aborts all image requests:

- Sync
- Async

```codeBlockLines_e6Vv
page = browser.new_page()
page.route("**/*.{png,jpg,jpeg}", lambda route: route.abort())
page.goto("https://example.com")
browser.close()

```

```codeBlockLines_e6Vv
page = await browser.new_page()
await page.route("**/*.{png,jpg,jpeg}", lambda route: route.abort())
await page.goto("https://example.com")
await browser.close()

```

or the same snippet using a regex pattern instead:

- Sync
- Async

```codeBlockLines_e6Vv
page = browser.new_page()
page.route(re.compile(r"(\.png$)|(\.jpg$)"), lambda route: route.abort())
page.goto("https://example.com")
browser.close()

```

```codeBlockLines_e6Vv
page = await browser.new_page()
await page.route(re.compile(r"(\.png$)|(\.jpg$)"), lambda route: route.abort())
await page.goto("https://example.com")
await browser.close()

```

It is possible to examine the request to decide the route action. For example, mocking all requests that contain some post data, and leaving all other requests as is:

- Sync
- Async

```codeBlockLines_e6Vv
def handle_route(route: Route):
  if ("my-string" in route.request.post_data):
    route.fulfill(body="mocked-data")
  else:
    route.continue_()
page.route("/api/**", handle_route)

```

```codeBlockLines_e6Vv
async def handle_route(route: Route):
  if ("my-string" in route.request.post_data):
    await route.fulfill(body="mocked-data")
  else:
    await route.continue_()
await page.route("/api/**", handle_route)

```

Page routes take precedence over browser context routes (set up with [browser\_context.route()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route)) when request matches both handlers.

To remove a route with its handler you can use [page.unroute()](https://playwright.dev/python/docs/api/class-page#page-unroute).

note

Enabling routing disables http cache.

**Arguments**

- `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") \| [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [URL](https://en.wikipedia.org/wiki/URL "URL")\]: [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-page#page-route-option-url)

A glob pattern, regex pattern or predicate receiving [URL](https://en.wikipedia.org/wiki/URL "URL") to match while routing. When a [base\_url](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-base-url) via the context options was provided and the passed URL is a path, it gets merged via the [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor.

- `handler` [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [Route](https://playwright.dev/python/docs/api/class-route "Route"), [Request](https://playwright.dev/python/docs/api/class-request "Request")\]: [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\[ [Any](https://docs.python.org/3/library/typing.html#typing.Any "Any")\] \| [Any](https://docs.python.org/3/library/typing.html#typing.Any "Any") [#](https://playwright.dev/python/docs/api/class-page#page-route-option-handler)

handler function to route the request.

- `times` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ Added in: v1.15 [#](https://playwright.dev/python/docs/api/class-page#page-route-option-times)

How often a route should be used. By default it will be used every time.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-route-return)

* * *

### route\_from\_har [​](https://playwright.dev/python/docs/api/class-page\#page-route-from-har "Direct link to route_from_har")

Added in: v1.23page.route\_from\_har

If specified the network requests that are made in the page will be served from the HAR file. Read more about [Replaying from HAR](https://playwright.dev/python/docs/mock#replaying-from-har).

Playwright will not serve requests intercepted by Service Worker from the HAR file. See [this](https://github.com/microsoft/playwright/issues/1090) issue. We recommend disabling Service Workers when using request interception by setting [service\_workers](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-service-workers) to `'block'`.

**Usage**

```codeBlockLines_e6Vv
page.route_from_har(har)
page.route_from_har(har, **kwargs)

```

**Arguments**

- `har` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] [#](https://playwright.dev/python/docs/api/class-page#page-route-from-har-option-har)

Path to a [HAR](http://www.softwareishard.com/blog/har-12-spec) file with prerecorded network data. If `path` is a relative path, then it is resolved relative to the current working directory.

- `not_found` "abort" \| "fallback" _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-route-from-har-option-not-found)


  - If set to 'abort' any request not found in the HAR file will be aborted.
  - If set to 'fallback' missing requests will be sent to the network.

Defaults to abort.

- `update` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-route-from-har-option-update)

If specified, updates the given HAR with the actual network information instead of serving from file. The file is written to disk when [browser\_context.close()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-close) is called.

- `update_content` "embed" \| "attach" _(optional)_ Added in: v1.32 [#](https://playwright.dev/python/docs/api/class-page#page-route-from-har-option-update-content)

Optional setting to control resource content management. If `attach` is specified, resources are persisted as separate files or entries in the ZIP archive. If `embed` is specified, content is stored inline the HAR file.

- `update_mode` "full" \| "minimal" _(optional)_ Added in: v1.32 [#](https://playwright.dev/python/docs/api/class-page#page-route-from-har-option-update-mode)

When set to `minimal`, only record information necessary for routing from HAR. This omits sizes, timing, page, cookies, security and other types of HAR information that are not used when replaying from HAR. Defaults to `minimal`.

- `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-route-from-har-option-url)

A glob pattern, regular expression or predicate to match the request URL. Only requests with URL matching the pattern will be served from the HAR file. If not specified, all requests are served from the HAR file.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-route-from-har-return)

* * *

### route\_web\_socket [​](https://playwright.dev/python/docs/api/class-page\#page-route-web-socket "Direct link to route_web_socket")

Added in: v1.48page.route\_web\_socket

This method allows to modify websocket connections that are made by the page.

Note that only `WebSocket` s created after this method was called will be routed. It is recommended to call this method before navigating the page.

**Usage**

Below is an example of a simple mock that responds to a single message. See [WebSocketRoute](https://playwright.dev/python/docs/api/class-websocketroute "WebSocketRoute") for more details and examples.

- Sync
- Async

```codeBlockLines_e6Vv
def message_handler(ws: WebSocketRoute, message: Union[str, bytes]):
  if message == "request":
    ws.send("response")

def handler(ws: WebSocketRoute):
  ws.on_message(lambda message: message_handler(ws, message))

page.route_web_socket("/ws", handler)

```

```codeBlockLines_e6Vv
def message_handler(ws: WebSocketRoute, message: Union[str, bytes]):
  if message == "request":
    ws.send("response")

def handler(ws: WebSocketRoute):
  ws.on_message(lambda message: message_handler(ws, message))

await page.route_web_socket("/ws", handler)

```

**Arguments**

- `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") \| [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [URL](https://en.wikipedia.org/wiki/URL "URL")\]: [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-page#page-route-web-socket-option-url)

Only WebSockets with the url matching this pattern will be routed. A string pattern can be relative to the [base\_url](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-base-url) context option.

- `handler` [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [WebSocketRoute](https://playwright.dev/python/docs/api/class-websocketroute "WebSocketRoute")\]: [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\[ [Any](https://docs.python.org/3/library/typing.html#typing.Any "Any")\] \| [Any](https://docs.python.org/3/library/typing.html#typing.Any "Any") [#](https://playwright.dev/python/docs/api/class-page#page-route-web-socket-option-handler)

Handler function to route the WebSocket.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-route-web-socket-return)

* * *

### screenshot [​](https://playwright.dev/python/docs/api/class-page\#page-screenshot "Direct link to screenshot")

Added before v1.9page.screenshot

Returns the buffer with the captured screenshot.

**Usage**

```codeBlockLines_e6Vv
page.screenshot()
page.screenshot(**kwargs)

```

**Arguments**

- `animations` "disabled" \| "allow" _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-screenshot-option-animations)

When set to `"disabled"`, stops CSS animations, CSS transitions and Web Animations. Animations get different treatment depending on their duration:


  - finite animations are fast-forwarded to completion, so they'll fire `transitionend` event.
  - infinite animations are canceled to initial state, and then played over after the screenshot.

Defaults to `"allow"` that leaves animations untouched.

- `caret` "hide" \| "initial" _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-screenshot-option-caret)

When set to `"hide"`, screenshot will hide text caret. When set to `"initial"`, text caret behavior will not be changed. Defaults to `"hide"`.

- `clip` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-screenshot-option-clip)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    x-coordinate of top-left corner of clip area

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    y-coordinate of top-left corner of clip area

  - `width` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    width of clipping area

  - `height` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

    height of clipping area


An object which specifies clipping of the resulting image.

- `full_page` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-screenshot-option-full-page)

When true, takes a screenshot of the full scrollable page, instead of the currently visible viewport. Defaults to `false`.

- `mask` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Locator](https://playwright.dev/python/docs/api/class-locator "Locator")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-screenshot-option-mask)

Specify locators that should be masked when the screenshot is taken. Masked elements will be overlaid with a pink box `#FF00FF` (customized by [mask\_color](https://playwright.dev/python/docs/api/class-page#page-screenshot-option-mask-color)) that completely covers its bounding box. The mask is also applied to invisible elements, see [Matching only visible elements](https://playwright.dev/python/docs/locators#matching-only-visible-elements) to disable that.

- `mask_color` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ Added in: v1.35 [#](https://playwright.dev/python/docs/api/class-page#page-screenshot-option-mask-color)

Specify the color of the overlay box for masked elements, in [CSS color format](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value). Default color is pink `#FF00FF`.

- `omit_background` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-screenshot-option-omit-background)

Hides default white background and allows capturing screenshots with transparency. Not applicable to `jpeg` images. Defaults to `false`.

- `path` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-screenshot-option-path)

The file path to save the image to. The screenshot type will be inferred from file extension. If [path](https://playwright.dev/python/docs/api/class-page#page-screenshot-option-path) is a relative path, then it is resolved relative to the current working directory. If no path is provided, the image won't be saved to the disk.

- `quality` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-screenshot-option-quality)

The quality of the image, between 0-100. Not applicable to `png` images.

- `scale` "css" \| "device" _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-screenshot-option-scale)

When set to `"css"`, screenshot will have a single pixel per each css pixel on the page. For high-dpi devices, this will keep screenshots small. Using `"device"` option will produce a single pixel per each device pixel, so screenshots of high-dpi devices will be twice as large or even larger.

Defaults to `"device"`.

- `style` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ Added in: v1.41 [#](https://playwright.dev/python/docs/api/class-page#page-screenshot-option-style)

Text of the stylesheet to apply while making the screenshot. This is where you can hide dynamic elements, make elements invisible or change their properties to help you creating repeatable screenshots. This stylesheet pierces the Shadow DOM and applies to the inner frames.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-screenshot-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `type` "png" \| "jpeg" _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-screenshot-option-type)

Specify screenshot type, defaults to `png`.


**Returns**

- [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") [#](https://playwright.dev/python/docs/api/class-page#page-screenshot-return)

* * *

### set\_content [​](https://playwright.dev/python/docs/api/class-page\#page-set-content "Direct link to set_content")

Added before v1.9page.set\_content

This method internally calls [document.write()](https://developer.mozilla.org/en-US/docs/Web/API/Document/write), inheriting all its specific characteristics and behaviors.

**Usage**

```codeBlockLines_e6Vv
page.set_content(html)
page.set_content(html, **kwargs)

```

**Arguments**

- `html` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-set-content-option-html)

HTML markup to assign to the page.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-set-content-option-timeout)

Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout), [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout), [page.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-navigation-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `wait_until` "load" \| "domcontentloaded" \| "networkidle" \| "commit" _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-set-content-option-wait-until)

When to consider operation succeeded, defaults to `load`. Events can be either:
  - `'domcontentloaded'` \- consider operation to be finished when the `DOMContentLoaded` event is fired.
  - `'load'` \- consider operation to be finished when the `load` event is fired.
  - `'networkidle'` \- **DISCOURAGED** consider operation to be finished when there are no network connections for at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.
  - `'commit'` \- consider operation to be finished when network response is received and the document started loading.

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-set-content-return)

* * *

### set\_default\_navigation\_timeout [​](https://playwright.dev/python/docs/api/class-page\#page-set-default-navigation-timeout "Direct link to set_default_navigation_timeout")

Added before v1.9page.set\_default\_navigation\_timeout

This setting will change the default maximum navigation time for the following methods and related shortcuts:

- [page.go\_back()](https://playwright.dev/python/docs/api/class-page#page-go-back)
- [page.go\_forward()](https://playwright.dev/python/docs/api/class-page#page-go-forward)
- [page.goto()](https://playwright.dev/python/docs/api/class-page#page-goto)
- [page.reload()](https://playwright.dev/python/docs/api/class-page#page-reload)
- [page.set\_content()](https://playwright.dev/python/docs/api/class-page#page-set-content)
- [page.expect\_navigation()](https://playwright.dev/python/docs/api/class-page#page-wait-for-navigation)
- [page.wait\_for\_url()](https://playwright.dev/python/docs/api/class-page#page-wait-for-url)

note

[page.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-navigation-timeout) takes priority over [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout), [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) and [browser\_context.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout).

**Usage**

```codeBlockLines_e6Vv
page.set_default_navigation_timeout(timeout)

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") [#](https://playwright.dev/python/docs/api/class-page#page-set-default-navigation-timeout-option-timeout)

Maximum navigation time in milliseconds


* * *

### set\_default\_timeout [​](https://playwright.dev/python/docs/api/class-page\#page-set-default-timeout "Direct link to set_default_timeout")

Added before v1.9page.set\_default\_timeout

This setting will change the default maximum time for all the methods accepting [timeout](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout-option-timeout) option.

note

[page.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-navigation-timeout) takes priority over [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout).

**Usage**

```codeBlockLines_e6Vv
page.set_default_timeout(timeout)

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") [#](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout-option-timeout)

Maximum time in milliseconds. Pass `0` to disable timeout.


* * *

### set\_extra\_http\_headers [​](https://playwright.dev/python/docs/api/class-page\#page-set-extra-http-headers "Direct link to set_extra_http_headers")

Added before v1.9page.set\_extra\_http\_headers

The extra HTTP headers will be sent with every request the page initiates.

note

[page.set\_extra\_http\_headers()](https://playwright.dev/python/docs/api/class-page#page-set-extra-http-headers) does not guarantee the order of headers in the outgoing requests.

**Usage**

```codeBlockLines_e6Vv
page.set_extra_http_headers(headers)

```

**Arguments**

- `headers` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] [#](https://playwright.dev/python/docs/api/class-page#page-set-extra-http-headers-option-headers)

An object containing additional HTTP headers to be sent with every request. All header values must be strings.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-set-extra-http-headers-return)

* * *

### set\_viewport\_size [​](https://playwright.dev/python/docs/api/class-page\#page-set-viewport-size "Direct link to set_viewport_size")

Added before v1.9page.set\_viewport\_size

In the case of multiple pages in a single browser, each page can have its own viewport size. However, [browser.new\_context()](https://playwright.dev/python/docs/api/class-browser#browser-new-context) allows to set viewport size (and more) for all pages in the context at once.

[page.set\_viewport\_size()](https://playwright.dev/python/docs/api/class-page#page-set-viewport-size) will resize the page. A lot of websites don't expect phones to change size, so you should set the viewport size before navigating to the page. [page.set\_viewport\_size()](https://playwright.dev/python/docs/api/class-page#page-set-viewport-size) will also reset `screen` size, use [browser.new\_context()](https://playwright.dev/python/docs/api/class-browser#browser-new-context) with `screen` and `viewport` parameters if you need better control of these properties.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
page = browser.new_page()
page.set_viewport_size({"width": 640, "height": 480})
page.goto("https://example.com")

```

```codeBlockLines_e6Vv
page = await browser.new_page()
await page.set_viewport_size({"width": 640, "height": 480})
await page.goto("https://example.com")

```

**Arguments**

- `viewport_size` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-page#page-set-viewport-size-option-viewport-size)
  - `width` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

    page width in pixels.

  - `height` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

    page height in pixels.

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-set-viewport-size-return)

* * *

### title [​](https://playwright.dev/python/docs/api/class-page\#page-title "Direct link to title")

Added before v1.9page.title

Returns the page's title.

**Usage**

```codeBlockLines_e6Vv
page.title()

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-title-return)

* * *

### unroute [​](https://playwright.dev/python/docs/api/class-page\#page-unroute "Direct link to unroute")

Added before v1.9page.unroute

Removes a route created with [page.route()](https://playwright.dev/python/docs/api/class-page#page-route). When [handler](https://playwright.dev/python/docs/api/class-page#page-unroute-option-handler) is not specified, removes all routes for the [url](https://playwright.dev/python/docs/api/class-page#page-unroute-option-url).

**Usage**

```codeBlockLines_e6Vv
page.unroute(url)
page.unroute(url, **kwargs)

```

**Arguments**

- `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") \| [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [URL](https://en.wikipedia.org/wiki/URL "URL")\]: [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-page#page-unroute-option-url)

A glob pattern, regex pattern or predicate receiving [URL](https://en.wikipedia.org/wiki/URL "URL") to match while routing.

- `handler` [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [Route](https://playwright.dev/python/docs/api/class-route "Route"), [Request](https://playwright.dev/python/docs/api/class-request "Request")\]: [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\[ [Any](https://docs.python.org/3/library/typing.html#typing.Any "Any")\] \| [Any](https://docs.python.org/3/library/typing.html#typing.Any "Any") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-unroute-option-handler)

Optional handler function to route the request.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-unroute-return)

* * *

### unroute\_all [​](https://playwright.dev/python/docs/api/class-page\#page-unroute-all "Direct link to unroute_all")

Added in: v1.41page.unroute\_all

Removes all routes created with [page.route()](https://playwright.dev/python/docs/api/class-page#page-route) and [page.route\_from\_har()](https://playwright.dev/python/docs/api/class-page#page-route-from-har).

**Usage**

```codeBlockLines_e6Vv
page.unroute_all()
page.unroute_all(**kwargs)

```

**Arguments**

- `behavior` "wait" \| "ignoreErrors" \| "default" _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-unroute-all-option-behavior)

Specifies whether to wait for already running handlers and what to do if they throw errors:
  - `'default'` \- do not wait for current handler calls (if any) to finish, if unrouted handler throws, it may result in unhandled error
  - `'wait'` \- wait for current handler calls (if any) to finish
  - `'ignoreErrors'` \- do not wait for current handler calls (if any) to finish, all errors thrown by the handlers after unrouting are silently caught

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-unroute-all-return)

* * *

### wait\_for\_event [​](https://playwright.dev/python/docs/api/class-page\#page-wait-for-event-2 "Direct link to wait_for_event")

Added before v1.9page.wait\_for\_event

note

In most cases, you should use [page.expect\_event()](https://playwright.dev/python/docs/api/class-page#page-wait-for-event).

Waits for given `event` to fire. If predicate is provided, it passes event's value into the `predicate` function and waits for `predicate(event)` to return a truthy value. Will throw an error if the page is closed before the `event` is fired.

**Usage**

```codeBlockLines_e6Vv
page.wait_for_event(event)
page.wait_for_event(event, **kwargs)

```

**Arguments**

- `event` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-event-2-option-event)

Event name, same one typically passed into `*.on(event)`.

- `predicate` [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-event-2-option-predicate)

Receives the event data and resolves to truthy value when the waiting should resolve.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-event-2-option-timeout)

Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout).


**Returns**

- [Any](https://docs.python.org/3/library/typing.html#typing.Any "Any") [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-event-2-return)

* * *

### wait\_for\_function [​](https://playwright.dev/python/docs/api/class-page\#page-wait-for-function "Direct link to wait_for_function")

Added before v1.9page.wait\_for\_function

Returns when the [expression](https://playwright.dev/python/docs/api/class-page#page-wait-for-function-option-expression) returns a truthy value. It resolves to a JSHandle of the truthy value.

**Usage**

The [page.wait\_for\_function()](https://playwright.dev/python/docs/api/class-page#page-wait-for-function) can be used to observe viewport size change:

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    webkit = playwright.webkit
    browser = webkit.launch()
    page = browser.new_page()
    page.evaluate("window.x = 0; setTimeout(() => { window.x = 100 }, 1000);")
    page.wait_for_function("() => window.x > 0")
    browser.close()

with sync_playwright() as playwright:
    run(playwright)

```

```codeBlockLines_e6Vv
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    webkit = playwright.webkit
    browser = await webkit.launch()
    page = await browser.new_page()
    await page.evaluate("window.x = 0; setTimeout(() => { window.x = 100 }, 1000);")
    await page.wait_for_function("() => window.x > 0")
    await browser.close()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())

```

To pass an argument to the predicate of [page.wait\_for\_function()](https://playwright.dev/python/docs/api/class-page#page-wait-for-function) function:

- Sync
- Async

```codeBlockLines_e6Vv
selector = ".foo"
page.wait_for_function("selector => !!document.querySelector(selector)", selector)

```

```codeBlockLines_e6Vv
selector = ".foo"
await page.wait_for_function("selector => !!document.querySelector(selector)", selector)

```

**Arguments**

- `expression` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-function-option-expression)

JavaScript expression to be evaluated in the browser context. If the expression evaluates to a function, the function is automatically invoked.

- `arg` [EvaluationArgument](https://playwright.dev/python/docs/evaluating#evaluation-argument "EvaluationArgument") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-function-option-arg)

Optional argument to pass to [expression](https://playwright.dev/python/docs/api/class-page#page-wait-for-function-option-expression).

- `polling` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| "raf" _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-function-option-polling)

If [polling](https://playwright.dev/python/docs/api/class-page#page-wait-for-function-option-polling) is `'raf'`, then [expression](https://playwright.dev/python/docs/api/class-page#page-wait-for-function-option-expression) is constantly executed in `requestAnimationFrame` callback. If [polling](https://playwright.dev/python/docs/api/class-page#page-wait-for-function-option-polling) is a number, then it is treated as an interval in milliseconds at which the function would be executed. Defaults to `raf`.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-function-option-timeout)

Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle") [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-function-return)

* * *

### wait\_for\_load\_state [​](https://playwright.dev/python/docs/api/class-page\#page-wait-for-load-state "Direct link to wait_for_load_state")

Added before v1.9page.wait\_for\_load\_state

Returns when the required load state has been reached.

This resolves when the page reaches a required load state, `load` by default. The navigation must have been committed when this method is called. If current document has already reached the required state, resolves immediately.

note

Most of the time, this method is not needed because Playwright [auto-waits before every action](https://playwright.dev/python/docs/actionability).

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_role("button").click() # click triggers navigation.
page.wait_for_load_state() # the promise resolves after "load" event.

```

```codeBlockLines_e6Vv
await page.get_by_role("button").click() # click triggers navigation.
await page.wait_for_load_state() # the promise resolves after "load" event.

```

- Sync
- Async

```codeBlockLines_e6Vv
with page.expect_popup() as page_info:
    page.get_by_role("button").click() # click triggers a popup.
popup = page_info.value
# Wait for the "DOMContentLoaded" event.
popup.wait_for_load_state("domcontentloaded")
print(popup.title()) # popup is ready to use.

```

```codeBlockLines_e6Vv
async with page.expect_popup() as page_info:
    await page.get_by_role("button").click() # click triggers a popup.
popup = await page_info.value
# Wait for the "DOMContentLoaded" event.
await popup.wait_for_load_state("domcontentloaded")
print(await popup.title()) # popup is ready to use.

```

**Arguments**

- `state` "load" \| "domcontentloaded" \| "networkidle" _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-load-state-option-state)

Optional load state to wait for, defaults to `load`. If the state has been already reached while loading current document, the method resolves immediately. Can be one of:
  - `'load'` \- wait for the `load` event to be fired.
  - `'domcontentloaded'` \- wait for the `DOMContentLoaded` event to be fired.
  - `'networkidle'` \- **DISCOURAGED** wait until there are no network connections for at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.
- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-load-state-option-timeout)

Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout), [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout), [page.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-navigation-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-load-state-return)

* * *

### wait\_for\_url [​](https://playwright.dev/python/docs/api/class-page\#page-wait-for-url "Direct link to wait_for_url")

Added in: v1.11page.wait\_for\_url

Waits for the main frame to navigate to the given URL.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
page.click("a.delayed-navigation") # clicking the link will indirectly cause a navigation
page.wait_for_url("**/target.html")

```

```codeBlockLines_e6Vv
await page.click("a.delayed-navigation") # clicking the link will indirectly cause a navigation
await page.wait_for_url("**/target.html")

```

**Arguments**

- `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") \| [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [URL](https://en.wikipedia.org/wiki/URL "URL")\]: [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-url-option-url)

A glob pattern, regex pattern or predicate receiving [URL](https://en.wikipedia.org/wiki/URL "URL") to match while waiting for the navigation. Note that if the parameter is a string without wildcard characters, the method will wait for navigation to URL that is exactly equal to the string.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-url-option-timeout)

Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout), [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout), [page.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-navigation-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `wait_until` "load" \| "domcontentloaded" \| "networkidle" \| "commit" _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-url-option-wait-until)

When to consider operation succeeded, defaults to `load`. Events can be either:
  - `'domcontentloaded'` \- consider operation to be finished when the `DOMContentLoaded` event is fired.
  - `'load'` \- consider operation to be finished when the `load` event is fired.
  - `'networkidle'` \- **DISCOURAGED** consider operation to be finished when there are no network connections for at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.
  - `'commit'` \- consider operation to be finished when network response is received and the document started loading.

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-url-return)

* * *

## Properties [​](https://playwright.dev/python/docs/api/class-page\#properties "Direct link to Properties")

### clock [​](https://playwright.dev/python/docs/api/class-page\#page-clock "Direct link to clock")

Added in: v1.45page.clock

Playwright has ability to mock clock and passage of time.

**Usage**

```codeBlockLines_e6Vv
page.clock

```

**Type**

- [Clock](https://playwright.dev/python/docs/api/class-clock "Clock")

* * *

### context [​](https://playwright.dev/python/docs/api/class-page\#page-context "Direct link to context")

Added before v1.9page.context

Get the browser context that the page belongs to.

**Usage**

```codeBlockLines_e6Vv
page.context

```

**Returns**

- [BrowserContext](https://playwright.dev/python/docs/api/class-browsercontext "BrowserContext") [#](https://playwright.dev/python/docs/api/class-page#page-context-return)

* * *

### frames [​](https://playwright.dev/python/docs/api/class-page\#page-frames "Direct link to frames")

Added before v1.9page.frames

An array of all frames attached to the page.

**Usage**

```codeBlockLines_e6Vv
page.frames

```

**Returns**

- [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Frame](https://playwright.dev/python/docs/api/class-frame "Frame")\] [#](https://playwright.dev/python/docs/api/class-page#page-frames-return)

* * *

### is\_closed [​](https://playwright.dev/python/docs/api/class-page\#page-is-closed "Direct link to is_closed")

Added before v1.9page.is\_closed

Indicates that the page has been closed.

**Usage**

```codeBlockLines_e6Vv
page.is_closed()

```

**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-page#page-is-closed-return)

* * *

### keyboard [​](https://playwright.dev/python/docs/api/class-page\#page-keyboard "Direct link to keyboard")

Added before v1.9page.keyboard

**Usage**

```codeBlockLines_e6Vv
page.keyboard

```

**Type**

- [Keyboard](https://playwright.dev/python/docs/api/class-keyboard "Keyboard")

* * *

### main\_frame [​](https://playwright.dev/python/docs/api/class-page\#page-main-frame "Direct link to main_frame")

Added before v1.9page.main\_frame

The page's main frame. Page is guaranteed to have a main frame which persists during navigations.

**Usage**

```codeBlockLines_e6Vv
page.main_frame

```

**Returns**

- [Frame](https://playwright.dev/python/docs/api/class-frame "Frame") [#](https://playwright.dev/python/docs/api/class-page#page-main-frame-return)

* * *

### mouse [​](https://playwright.dev/python/docs/api/class-page\#page-mouse "Direct link to mouse")

Added before v1.9page.mouse

**Usage**

```codeBlockLines_e6Vv
page.mouse

```

**Type**

- [Mouse](https://playwright.dev/python/docs/api/class-mouse "Mouse")

* * *

### request [​](https://playwright.dev/python/docs/api/class-page\#page-request "Direct link to request")

Added in: v1.16page.request

API testing helper associated with this page. This method returns the same instance as [browser\_context.request](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-request) on the page's context. See [browser\_context.request](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-request) for more details.

**Usage**

```codeBlockLines_e6Vv
page.request

```

**Type**

- [APIRequestContext](https://playwright.dev/python/docs/api/class-apirequestcontext "APIRequestContext")

* * *

### touchscreen [​](https://playwright.dev/python/docs/api/class-page\#page-touchscreen "Direct link to touchscreen")

Added before v1.9page.touchscreen

**Usage**

```codeBlockLines_e6Vv
page.touchscreen

```

**Type**

- [Touchscreen](https://playwright.dev/python/docs/api/class-touchscreen "Touchscreen")

* * *

### url [​](https://playwright.dev/python/docs/api/class-page\#page-url "Direct link to url")

Added before v1.9page.url

**Usage**

```codeBlockLines_e6Vv
page.url

```

**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-url-return)

* * *

### video [​](https://playwright.dev/python/docs/api/class-page\#page-video "Direct link to video")

Added before v1.9page.video

Video object associated with this page.

**Usage**

```codeBlockLines_e6Vv
page.video

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [Video](https://playwright.dev/python/docs/api/class-video "Video") [#](https://playwright.dev/python/docs/api/class-page#page-video-return)

* * *

### viewport\_size [​](https://playwright.dev/python/docs/api/class-page\#page-viewport-size "Direct link to viewport_size")

Added before v1.9page.viewport\_size

**Usage**

```codeBlockLines_e6Vv
page.viewport_size

```

**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-page#page-viewport-size-return)
  - `width` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

    page width in pixels.

  - `height` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")

    page height in pixels.

* * *

### workers [​](https://playwright.dev/python/docs/api/class-page\#page-workers "Direct link to workers")

Added before v1.9page.workers

This method returns all of the dedicated [WebWorkers](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) associated with the page.

note

This does not contain ServiceWorkers

**Usage**

```codeBlockLines_e6Vv
page.workers

```

**Returns**

- [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Worker](https://playwright.dev/python/docs/api/class-worker "Worker")\] [#](https://playwright.dev/python/docs/api/class-page#page-workers-return)

* * *

## Events [​](https://playwright.dev/python/docs/api/class-page\#events "Direct link to Events")

### on("close") [​](https://playwright.dev/python/docs/api/class-page\#page-event-close "Direct link to on(\"close\")")

Added before v1.9page.on("close")

Emitted when the page closes.

**Usage**

```codeBlockLines_e6Vv
page.on("close", handler)

```

**Event data**

- [Page](https://playwright.dev/python/docs/api/class-page "Page")

* * *

### on("console") [​](https://playwright.dev/python/docs/api/class-page\#page-event-console "Direct link to on(\"console\")")

Added before v1.9page.on("console")

Emitted when JavaScript within the page calls one of console API methods, e.g. `console.log` or `console.dir`.

The arguments passed into `console.log` are available on the [ConsoleMessage](https://playwright.dev/python/docs/api/class-consolemessage "ConsoleMessage") event handler argument.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
def print_args(msg):
    for arg in msg.args:
        print(arg.json_value())

page.on("console", print_args)
page.evaluate("console.log('hello', 5, { foo: 'bar' })")

```

```codeBlockLines_e6Vv
async def print_args(msg):
    values = []
    for arg in msg.args:
        values.append(await arg.json_value())
    print(values)

page.on("console", print_args)
await page.evaluate("console.log('hello', 5, { foo: 'bar' })")

```

**Event data**

- [ConsoleMessage](https://playwright.dev/python/docs/api/class-consolemessage "ConsoleMessage")

* * *

### on("crash") [​](https://playwright.dev/python/docs/api/class-page\#page-event-crash "Direct link to on(\"crash\")")

Added before v1.9page.on("crash")

Emitted when the page crashes. Browser pages might crash if they try to allocate too much memory. When the page crashes, ongoing and subsequent operations will throw.

The most common way to deal with crashes is to catch an exception:

- Sync
- Async

```codeBlockLines_e6Vv
try:
    # crash might happen during a click.
    page.click("button")
    # or while waiting for an event.
    page.wait_for_event("popup")
except Error as e:
    pass
    # when the page crashes, exception message contains "crash".

```

```codeBlockLines_e6Vv
try:
    # crash might happen during a click.
    await page.click("button")
    # or while waiting for an event.
    await page.wait_for_event("popup")
except Error as e:
    pass
    # when the page crashes, exception message contains "crash".

```

**Usage**

```codeBlockLines_e6Vv
page.on("crash", handler)

```

**Event data**

- [Page](https://playwright.dev/python/docs/api/class-page "Page")

* * *

### on("dialog") [​](https://playwright.dev/python/docs/api/class-page\#page-event-dialog "Direct link to on(\"dialog\")")

Added before v1.9page.on("dialog")

Emitted when a JavaScript dialog appears, such as `alert`, `prompt`, `confirm` or `beforeunload`. Listener **must** either [dialog.accept()](https://playwright.dev/python/docs/api/class-dialog#dialog-accept) or [dialog.dismiss()](https://playwright.dev/python/docs/api/class-dialog#dialog-dismiss) the dialog - otherwise the page will [freeze](https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#never_blocking) waiting for the dialog, and actions like click will never finish.

**Usage**

```codeBlockLines_e6Vv
page.on("dialog", lambda dialog: dialog.accept())

```

note

When no [page.on("dialog")](https://playwright.dev/python/docs/api/class-page#page-event-dialog) or [browser\_context.on("dialog")](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-event-dialog) listeners are present, all dialogs are automatically dismissed.

**Event data**

- [Dialog](https://playwright.dev/python/docs/api/class-dialog "Dialog")

* * *

### on("domcontentloaded") [​](https://playwright.dev/python/docs/api/class-page\#page-event-dom-content-loaded "Direct link to on(\"domcontentloaded\")")

Added in: v1.9page.on("domcontentloaded")

Emitted when the JavaScript [`DOMContentLoaded`](https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded) event is dispatched.

**Usage**

```codeBlockLines_e6Vv
page.on("domcontentloaded", handler)

```

**Event data**

- [Page](https://playwright.dev/python/docs/api/class-page "Page")

* * *

### on("download") [​](https://playwright.dev/python/docs/api/class-page\#page-event-download "Direct link to on(\"download\")")

Added before v1.9page.on("download")

Emitted when attachment download started. User can access basic file operations on downloaded content via the passed [Download](https://playwright.dev/python/docs/api/class-download "Download") instance.

**Usage**

```codeBlockLines_e6Vv
page.on("download", handler)

```

**Event data**

- [Download](https://playwright.dev/python/docs/api/class-download "Download")

* * *

### on("filechooser") [​](https://playwright.dev/python/docs/api/class-page\#page-event-file-chooser "Direct link to on(\"filechooser\")")

Added in: v1.9page.on("filechooser")

Emitted when a file chooser is supposed to appear, such as after clicking the `<input type=file>`. Playwright can respond to it via setting the input files using [file\_chooser.set\_files()](https://playwright.dev/python/docs/api/class-filechooser#file-chooser-set-files) that can be uploaded after that.

```codeBlockLines_e6Vv
page.on("filechooser", lambda file_chooser: file_chooser.set_files("/tmp/myfile.pdf"))

```

**Usage**

```codeBlockLines_e6Vv
page.on("filechooser", handler)

```

**Event data**

- [FileChooser](https://playwright.dev/python/docs/api/class-filechooser "FileChooser")

* * *

### on("frameattached") [​](https://playwright.dev/python/docs/api/class-page\#page-event-frame-attached "Direct link to on(\"frameattached\")")

Added in: v1.9page.on("frameattached")

Emitted when a frame is attached.

**Usage**

```codeBlockLines_e6Vv
page.on("frameattached", handler)

```

**Event data**

- [Frame](https://playwright.dev/python/docs/api/class-frame "Frame")

* * *

### on("framedetached") [​](https://playwright.dev/python/docs/api/class-page\#page-event-frame-detached "Direct link to on(\"framedetached\")")

Added in: v1.9page.on("framedetached")

Emitted when a frame is detached.

**Usage**

```codeBlockLines_e6Vv
page.on("framedetached", handler)

```

**Event data**

- [Frame](https://playwright.dev/python/docs/api/class-frame "Frame")

* * *

### on("framenavigated") [​](https://playwright.dev/python/docs/api/class-page\#page-event-frame-navigated "Direct link to on(\"framenavigated\")")

Added in: v1.9page.on("framenavigated")

Emitted when a frame is navigated to a new url.

**Usage**

```codeBlockLines_e6Vv
page.on("framenavigated", handler)

```

**Event data**

- [Frame](https://playwright.dev/python/docs/api/class-frame "Frame")

* * *

### on("load") [​](https://playwright.dev/python/docs/api/class-page\#page-event-load "Direct link to on(\"load\")")

Added before v1.9page.on("load")

Emitted when the JavaScript [`load`](https://developer.mozilla.org/en-US/docs/Web/Events/load) event is dispatched.

**Usage**

```codeBlockLines_e6Vv
page.on("load", handler)

```

**Event data**

- [Page](https://playwright.dev/python/docs/api/class-page "Page")

* * *

### on("pageerror") [​](https://playwright.dev/python/docs/api/class-page\#page-event-page-error "Direct link to on(\"pageerror\")")

Added in: v1.9page.on("pageerror")

Emitted when an uncaught exception happens within the page.

- Sync
- Async

```codeBlockLines_e6Vv
# Log all uncaught errors to the terminal
page.on("pageerror", lambda exc: print(f"uncaught exception: {exc}"))

# Navigate to a page with an exception.
page.goto("data:text/html,<script>throw new Error('test')</script>")

```

```codeBlockLines_e6Vv
# Log all uncaught errors to the terminal
page.on("pageerror", lambda exc: print(f"uncaught exception: {exc}"))

# Navigate to a page with an exception.
await page.goto("data:text/html,<script>throw new Error('test')</script>")

```

**Usage**

```codeBlockLines_e6Vv
page.on("pageerror", handler)

```

**Event data**

- [Error](https://playwright.dev/python/docs/api/class-error "Error")

* * *

### on("popup") [​](https://playwright.dev/python/docs/api/class-page\#page-event-popup "Direct link to on(\"popup\")")

Added before v1.9page.on("popup")

Emitted when the page opens a new tab or window. This event is emitted in addition to the [browser\_context.on("page")](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-event-page), but only for popups relevant to this page.

The earliest moment that page is available is when it has navigated to the initial url. For example, when opening a popup with `window.open('http://example.com')`, this event will fire when the network request to " [http://example.com](http://example.com/)" is done and its response has started loading in the popup. If you would like to route/listen to this network request, use [browser\_context.route()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route) and [browser\_context.on("request")](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-event-request) respectively instead of similar methods on the [Page](https://playwright.dev/python/docs/api/class-page "Page").

- Sync
- Async

```codeBlockLines_e6Vv
with page.expect_event("popup") as page_info:
    page.get_by_text("open the popup").click()
popup = page_info.value
print(popup.evaluate("location.href"))

```

```codeBlockLines_e6Vv
async with page.expect_event("popup") as page_info:
    await page.get_by_text("open the popup").click()
popup = await page_info.value
print(await popup.evaluate("location.href"))

```

note

Use [page.wait\_for\_load\_state()](https://playwright.dev/python/docs/api/class-page#page-wait-for-load-state) to wait until the page gets to a particular state (you should not need it in most cases).

**Usage**

```codeBlockLines_e6Vv
page.on("popup", handler)

```

**Event data**

- [Page](https://playwright.dev/python/docs/api/class-page "Page")

* * *

### on("request") [​](https://playwright.dev/python/docs/api/class-page\#page-event-request "Direct link to on(\"request\")")

Added before v1.9page.on("request")

Emitted when a page issues a request. The [request](https://playwright.dev/python/docs/api/class-request "Request") object is read-only. In order to intercept and mutate requests, see [page.route()](https://playwright.dev/python/docs/api/class-page#page-route) or [browser\_context.route()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route).

**Usage**

```codeBlockLines_e6Vv
page.on("request", handler)

```

**Event data**

- [Request](https://playwright.dev/python/docs/api/class-request "Request")

* * *

### on("requestfailed") [​](https://playwright.dev/python/docs/api/class-page\#page-event-request-failed "Direct link to on(\"requestfailed\")")

Added in: v1.9page.on("requestfailed")

Emitted when a request fails, for example by timing out.

```codeBlockLines_e6Vv
page.on("requestfailed", lambda request: print(request.url + " " + request.failure.error_text))

```

note

HTTP Error responses, such as 404 or 503, are still successful responses from HTTP standpoint, so request will complete with [page.on("requestfinished")](https://playwright.dev/python/docs/api/class-page#page-event-request-finished) event and not with [page.on("requestfailed")](https://playwright.dev/python/docs/api/class-page#page-event-request-failed). A request will only be considered failed when the client cannot get an HTTP response from the server, e.g. due to network error net::ERR\_FAILED.

**Usage**

```codeBlockLines_e6Vv
page.on("requestfailed", handler)

```

**Event data**

- [Request](https://playwright.dev/python/docs/api/class-request "Request")

* * *

### on("requestfinished") [​](https://playwright.dev/python/docs/api/class-page\#page-event-request-finished "Direct link to on(\"requestfinished\")")

Added in: v1.9page.on("requestfinished")

Emitted when a request finishes successfully after downloading the response body. For a successful response, the sequence of events is `request`, `response` and `requestfinished`.

**Usage**

```codeBlockLines_e6Vv
page.on("requestfinished", handler)

```

**Event data**

- [Request](https://playwright.dev/python/docs/api/class-request "Request")

* * *

### on("response") [​](https://playwright.dev/python/docs/api/class-page\#page-event-response "Direct link to on(\"response\")")

Added before v1.9page.on("response")

Emitted when [response](https://playwright.dev/python/docs/api/class-response "Response") status and headers are received for a request. For a successful response, the sequence of events is `request`, `response` and `requestfinished`.

**Usage**

```codeBlockLines_e6Vv
page.on("response", handler)

```

**Event data**

- [Response](https://playwright.dev/python/docs/api/class-response "Response")

* * *

### on("websocket") [​](https://playwright.dev/python/docs/api/class-page\#page-event-web-socket "Direct link to on(\"websocket\")")

Added in: v1.9page.on("websocket")

Emitted when [WebSocket](https://playwright.dev/python/docs/api/class-websocket "WebSocket") request is sent.

**Usage**

```codeBlockLines_e6Vv
page.on("websocket", handler)

```

**Event data**

- [WebSocket](https://playwright.dev/python/docs/api/class-websocket "WebSocket")

* * *

### on("worker") [​](https://playwright.dev/python/docs/api/class-page\#page-event-worker "Direct link to on(\"worker\")")

Added before v1.9page.on("worker")

Emitted when a dedicated [WebWorker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) is spawned by the page.

**Usage**

```codeBlockLines_e6Vv
page.on("worker", handler)

```

**Event data**

- [Worker](https://playwright.dev/python/docs/api/class-worker "Worker")

* * *

## Deprecated [​](https://playwright.dev/python/docs/api/class-page\#deprecated "Direct link to Deprecated")

### accessibility [​](https://playwright.dev/python/docs/api/class-page\#page-accessibility "Direct link to accessibility")

Added before v1.9page.accessibility

Deprecated

This property is discouraged. Please use other libraries such as [Axe](https://www.deque.com/axe/) if you need to test page accessibility. See our Node.js [guide](https://playwright.dev/docs/accessibility-testing) for integration with Axe.

**Usage**

```codeBlockLines_e6Vv
page.accessibility

```

**Type**

- [Accessibility](https://playwright.dev/python/docs/api/class-accessibility "Accessibility")

* * *

### check [​](https://playwright.dev/python/docs/api/class-page\#page-check "Direct link to check")

Added before v1.9page.check

Discouraged

Use locator-based [locator.check()](https://playwright.dev/python/docs/api/class-locator#locator-check) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method checks an element matching [selector](https://playwright.dev/python/docs/api/class-page#page-check-option-selector) by performing the following steps:

1. Find an element matching [selector](https://playwright.dev/python/docs/api/class-page#page-check-option-selector). If there is none, wait until a matching element is attached to the DOM.
2. Ensure that matched element is a checkbox or a radio input. If not, this method throws. If the element is already checked, this method returns immediately.
3. Wait for [actionability](https://playwright.dev/python/docs/actionability) checks on the matched element, unless [force](https://playwright.dev/python/docs/api/class-page#page-check-option-force) option is set. If the element is detached during the checks, the whole action is retried.
4. Scroll the element into view if needed.
5. Use [page.mouse](https://playwright.dev/python/docs/api/class-page#page-mouse) to click in the center of the element.
6. Ensure that the element is now checked. If not, this method throws.

When all steps combined have not finished during the specified [timeout](https://playwright.dev/python/docs/api/class-page#page-check-option-timeout), this method throws a [TimeoutError](https://playwright.dev/python/docs/api/class-timeouterror "TimeoutError"). Passing zero timeout disables this.

**Usage**

```codeBlockLines_e6Vv
page.check(selector)
page.check(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-check-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-check-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-check-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ Added in: v1.11 [#](https://playwright.dev/python/docs/api/class-page#page-check-option-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-check-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-check-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.11 [#](https://playwright.dev/python/docs/api/class-page#page-check-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-check-return)

* * *

### click [​](https://playwright.dev/python/docs/api/class-page\#page-click "Direct link to click")

Added before v1.9page.click

Discouraged

Use locator-based [locator.click()](https://playwright.dev/python/docs/api/class-locator#locator-click) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method clicks an element matching [selector](https://playwright.dev/python/docs/api/class-page#page-click-option-selector) by performing the following steps:

1. Find an element matching [selector](https://playwright.dev/python/docs/api/class-page#page-click-option-selector). If there is none, wait until a matching element is attached to the DOM.
2. Wait for [actionability](https://playwright.dev/python/docs/actionability) checks on the matched element, unless [force](https://playwright.dev/python/docs/api/class-page#page-click-option-force) option is set. If the element is detached during the checks, the whole action is retried.
3. Scroll the element into view if needed.
4. Use [page.mouse](https://playwright.dev/python/docs/api/class-page#page-mouse) to click in the center of the element, or the specified [position](https://playwright.dev/python/docs/api/class-page#page-click-option-position).
5. Wait for initiated navigations to either succeed or fail, unless [no\_wait\_after](https://playwright.dev/python/docs/api/class-page#page-click-option-no-wait-after) option is set.

When all steps combined have not finished during the specified [timeout](https://playwright.dev/python/docs/api/class-page#page-click-option-timeout), this method throws a [TimeoutError](https://playwright.dev/python/docs/api/class-timeouterror "TimeoutError"). Passing zero timeout disables this.

**Usage**

```codeBlockLines_e6Vv
page.click(selector)
page.click(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-click-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `button` "left" \| "right" \| "middle" _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-click-option-button)

Defaults to `left`.

- `click_count` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-click-option-click-count)

defaults to 1. See [UIEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail "UIEvent.detail").

- `delay` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-click-option-delay)

Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-click-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `modifiers` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\["Alt" \| "Control" \| "ControlOrMeta" \| "Meta" \| "Shift"\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-click-option-modifiers)

Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to "Control" on Windows and Linux and to "Meta" on macOS.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-click-option-no-wait-after)



Deprecated





This option will default to `true` in the future.





Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.

- `position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-click-option-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-click-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-click-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.11 [#](https://playwright.dev/python/docs/api/class-page#page-click-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it. Note that keyboard `modifiers` will be pressed regardless of `trial` to allow testing elements which are only visible when those keys are pressed.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-click-return)

* * *

### dblclick [​](https://playwright.dev/python/docs/api/class-page\#page-dblclick "Direct link to dblclick")

Added before v1.9page.dblclick

Discouraged

Use locator-based [locator.dblclick()](https://playwright.dev/python/docs/api/class-locator#locator-dblclick) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method double clicks an element matching [selector](https://playwright.dev/python/docs/api/class-page#page-dblclick-option-selector) by performing the following steps:

1. Find an element matching [selector](https://playwright.dev/python/docs/api/class-page#page-dblclick-option-selector). If there is none, wait until a matching element is attached to the DOM.
2. Wait for [actionability](https://playwright.dev/python/docs/actionability) checks on the matched element, unless [force](https://playwright.dev/python/docs/api/class-page#page-dblclick-option-force) option is set. If the element is detached during the checks, the whole action is retried.
3. Scroll the element into view if needed.
4. Use [page.mouse](https://playwright.dev/python/docs/api/class-page#page-mouse) to double click in the center of the element, or the specified [position](https://playwright.dev/python/docs/api/class-page#page-dblclick-option-position).

When all steps combined have not finished during the specified [timeout](https://playwright.dev/python/docs/api/class-page#page-dblclick-option-timeout), this method throws a [TimeoutError](https://playwright.dev/python/docs/api/class-timeouterror "TimeoutError"). Passing zero timeout disables this.

note

`page.dblclick()` dispatches two `click` events and a single `dblclick` event.

**Usage**

```codeBlockLines_e6Vv
page.dblclick(selector)
page.dblclick(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-dblclick-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `button` "left" \| "right" \| "middle" _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-dblclick-option-button)

Defaults to `left`.

- `delay` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-dblclick-option-delay)

Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-dblclick-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `modifiers` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\["Alt" \| "Control" \| "ControlOrMeta" \| "Meta" \| "Shift"\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-dblclick-option-modifiers)

Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to "Control" on Windows and Linux and to "Meta" on macOS.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-dblclick-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-dblclick-option-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-dblclick-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-dblclick-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.11 [#](https://playwright.dev/python/docs/api/class-page#page-dblclick-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it. Note that keyboard `modifiers` will be pressed regardless of `trial` to allow testing elements which are only visible when those keys are pressed.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-dblclick-return)

* * *

### dispatch\_event [​](https://playwright.dev/python/docs/api/class-page\#page-dispatch-event "Direct link to dispatch_event")

Added before v1.9page.dispatch\_event

Discouraged

Use locator-based [locator.dispatch\_event()](https://playwright.dev/python/docs/api/class-locator#locator-dispatch-event) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

The snippet below dispatches the `click` event on the element. Regardless of the visibility state of the element, `click` is dispatched. This is equivalent to calling [element.click()](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click).

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
page.dispatch_event("button#submit", "click")

```

```codeBlockLines_e6Vv
await page.dispatch_event("button#submit", "click")

```

Under the hood, it creates an instance of an event based on the given [type](https://playwright.dev/python/docs/api/class-page#page-dispatch-event-option-type), initializes it with [event\_init](https://playwright.dev/python/docs/api/class-page#page-dispatch-event-option-event-init) properties and dispatches it on the element. Events are `composed`, `cancelable` and bubble by default.

Since [event\_init](https://playwright.dev/python/docs/api/class-page#page-dispatch-event-option-event-init) is event-specific, please refer to the events documentation for the lists of initial properties:

- [DeviceMotionEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent/DeviceMotionEvent)
- [DeviceOrientationEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent/DeviceOrientationEvent)
- [DragEvent](https://developer.mozilla.org/en-US/docs/Web/API/DragEvent/DragEvent)
- [Event](https://developer.mozilla.org/en-US/docs/Web/API/Event/Event)
- [FocusEvent](https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent/FocusEvent)
- [KeyboardEvent](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/KeyboardEvent)
- [MouseEvent](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/MouseEvent)
- [PointerEvent](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/PointerEvent)
- [TouchEvent](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/TouchEvent)
- [WheelEvent](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/WheelEvent)

You can also specify `JSHandle` as the property value if you want live objects to be passed into the event:

- Sync
- Async

```codeBlockLines_e6Vv
# note you can only create data_transfer in chromium and firefox
data_transfer = page.evaluate_handle("new DataTransfer()")
page.dispatch_event("#source", "dragstart", { "dataTransfer": data_transfer })

```

```codeBlockLines_e6Vv
# note you can only create data_transfer in chromium and firefox
data_transfer = await page.evaluate_handle("new DataTransfer()")
await page.dispatch_event("#source", "dragstart", { "dataTransfer": data_transfer })

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-dispatch-event-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `type` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-dispatch-event-option-type)

DOM event type: `"click"`, `"dragstart"`, etc.

- `event_init` [EvaluationArgument](https://playwright.dev/python/docs/evaluating#evaluation-argument "EvaluationArgument") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-dispatch-event-option-event-init)

Optional event-specific initialization properties.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-dispatch-event-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-dispatch-event-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-dispatch-event-return)

* * *

### eval\_on\_selector [​](https://playwright.dev/python/docs/api/class-page\#page-eval-on-selector "Direct link to eval_on_selector")

Added in: v1.9page.eval\_on\_selector

Discouraged

This method does not wait for the element to pass actionability checks and therefore can lead to the flaky tests. Use [locator.evaluate()](https://playwright.dev/python/docs/api/class-locator#locator-evaluate), other [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") helper methods or web-first assertions instead.

The method finds an element matching the specified selector within the page and passes it as a first argument to [expression](https://playwright.dev/python/docs/api/class-page#page-eval-on-selector-option-expression). If no elements match the selector, the method throws an error. Returns the value of [expression](https://playwright.dev/python/docs/api/class-page#page-eval-on-selector-option-expression).

If [expression](https://playwright.dev/python/docs/api/class-page#page-eval-on-selector-option-expression) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then [page.eval\_on\_selector()](https://playwright.dev/python/docs/api/class-page#page-eval-on-selector) would wait for the promise to resolve and return its value.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
search_value = page.eval_on_selector("#search", "el => el.value")
preload_href = page.eval_on_selector("link[rel=preload]", "el => el.href")
html = page.eval_on_selector(".main-container", "(e, suffix) => e.outer_html + suffix", "hello")

```

```codeBlockLines_e6Vv
search_value = await page.eval_on_selector("#search", "el => el.value")
preload_href = await page.eval_on_selector("link[rel=preload]", "el => el.href")
html = await page.eval_on_selector(".main-container", "(e, suffix) => e.outer_html + suffix", "hello")

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-eval-on-selector-option-selector)

A selector to query for.

- `expression` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-eval-on-selector-option-expression)

JavaScript expression to be evaluated in the browser context. If the expression evaluates to a function, the function is automatically invoked.

- `arg` [EvaluationArgument](https://playwright.dev/python/docs/evaluating#evaluation-argument "EvaluationArgument") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-eval-on-selector-option-arg)

Optional argument to pass to [expression](https://playwright.dev/python/docs/api/class-page#page-eval-on-selector-option-expression).

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-eval-on-selector-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.


**Returns**

- [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-page#page-eval-on-selector-return)

* * *

### eval\_on\_selector\_all [​](https://playwright.dev/python/docs/api/class-page\#page-eval-on-selector-all "Direct link to eval_on_selector_all")

Added in: v1.9page.eval\_on\_selector\_all

Discouraged

In most cases, [locator.evaluate\_all()](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-all), other [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") helper methods and web-first assertions do a better job.

The method finds all elements matching the specified selector within the page and passes an array of matched elements as a first argument to [expression](https://playwright.dev/python/docs/api/class-page#page-eval-on-selector-all-option-expression). Returns the result of [expression](https://playwright.dev/python/docs/api/class-page#page-eval-on-selector-all-option-expression) invocation.

If [expression](https://playwright.dev/python/docs/api/class-page#page-eval-on-selector-all-option-expression) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then [page.eval\_on\_selector\_all()](https://playwright.dev/python/docs/api/class-page#page-eval-on-selector-all) would wait for the promise to resolve and return its value.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
div_counts = page.eval_on_selector_all("div", "(divs, min) => divs.length >= min", 10)

```

```codeBlockLines_e6Vv
div_counts = await page.eval_on_selector_all("div", "(divs, min) => divs.length >= min", 10)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-eval-on-selector-all-option-selector)

A selector to query for.

- `expression` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-eval-on-selector-all-option-expression)

JavaScript expression to be evaluated in the browser context. If the expression evaluates to a function, the function is automatically invoked.

- `arg` [EvaluationArgument](https://playwright.dev/python/docs/evaluating#evaluation-argument "EvaluationArgument") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-eval-on-selector-all-option-arg)

Optional argument to pass to [expression](https://playwright.dev/python/docs/api/class-page#page-eval-on-selector-all-option-expression).


**Returns**

- [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-page#page-eval-on-selector-all-return)

* * *

### expect\_navigation [​](https://playwright.dev/python/docs/api/class-page\#page-wait-for-navigation "Direct link to expect_navigation")

Added before v1.9page.expect\_navigation

Deprecated

This method is inherently racy, please use [page.wait\_for\_url()](https://playwright.dev/python/docs/api/class-page#page-wait-for-url) instead.

Waits for the main frame navigation and returns the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with `null`.

**Usage**

This resolves when the page navigates to a new URL or reloads. It is useful for when you run code which will indirectly cause the page to navigate. e.g. The click target has an `onclick` handler that triggers navigation from a `setTimeout`. Consider this example:

- Sync
- Async

```codeBlockLines_e6Vv
with page.expect_navigation():
    # This action triggers the navigation after a timeout.
    page.get_by_text("Navigate after timeout").click()
# Resolves after navigation has finished

```

```codeBlockLines_e6Vv
async with page.expect_navigation():
    # This action triggers the navigation after a timeout.
    await page.get_by_text("Navigate after timeout").click()
# Resolves after navigation has finished

```

note

Usage of the [History API](https://developer.mozilla.org/en-US/docs/Web/API/History_API) to change the URL is considered a navigation.

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-navigation-option-timeout)

Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout), [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout), [page.set\_default\_navigation\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-navigation-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Pattern](https://docs.python.org/3/library/re.html "Pattern") \| [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "Callable")\[ [URL](https://en.wikipedia.org/wiki/URL "URL")\]: [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-navigation-option-url)

A glob pattern, regex pattern or predicate receiving [URL](https://en.wikipedia.org/wiki/URL "URL") to match while waiting for the navigation. Note that if the parameter is a string without wildcard characters, the method will wait for navigation to URL that is exactly equal to the string.

- `wait_until` "load" \| "domcontentloaded" \| "networkidle" \| "commit" _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-navigation-option-wait-until)

When to consider operation succeeded, defaults to `load`. Events can be either:
  - `'domcontentloaded'` \- consider operation to be finished when the `DOMContentLoaded` event is fired.
  - `'load'` \- consider operation to be finished when the `load` event is fired.
  - `'networkidle'` \- **DISCOURAGED** consider operation to be finished when there are no network connections for at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.
  - `'commit'` \- consider operation to be finished when network response is received and the document started loading.

**Returns**

- [EventContextManager](https://docs.python.org/3/reference/datamodel.html#context-managers "Event context manager")\[ [Response](https://playwright.dev/python/docs/api/class-response "Response")\] [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-navigation-return)

* * *

### fill [​](https://playwright.dev/python/docs/api/class-page\#page-fill "Direct link to fill")

Added before v1.9page.fill

Discouraged

Use locator-based [locator.fill()](https://playwright.dev/python/docs/api/class-locator#locator-fill) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method waits for an element matching [selector](https://playwright.dev/python/docs/api/class-page#page-fill-option-selector), waits for [actionability](https://playwright.dev/python/docs/actionability) checks, focuses the element, fills it and triggers an `input` event after filling. Note that you can pass an empty string to clear the input field.

If the target element is not an `<input>`, `<textarea>` or `[contenteditable]` element, this method throws an error. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be filled instead.

To send fine-grained keyboard events, use [locator.press\_sequentially()](https://playwright.dev/python/docs/api/class-locator#locator-press-sequentially).

**Usage**

```codeBlockLines_e6Vv
page.fill(selector, value)
page.fill(selector, value, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-fill-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-fill-option-value)

Value to fill for the `<input>`, `<textarea>` or `[contenteditable]` element.

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.13 [#](https://playwright.dev/python/docs/api/class-page#page-fill-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-fill-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-fill-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-fill-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-fill-return)

* * *

### focus [​](https://playwright.dev/python/docs/api/class-page\#page-focus "Direct link to focus")

Added before v1.9page.focus

Discouraged

Use locator-based [locator.focus()](https://playwright.dev/python/docs/api/class-locator#locator-focus) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method fetches an element with [selector](https://playwright.dev/python/docs/api/class-page#page-focus-option-selector) and focuses it. If there's no element matching [selector](https://playwright.dev/python/docs/api/class-page#page-focus-option-selector), the method waits until a matching element appears in the DOM.

**Usage**

```codeBlockLines_e6Vv
page.focus(selector)
page.focus(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-focus-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-focus-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-focus-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-focus-return)

* * *

### get\_attribute [​](https://playwright.dev/python/docs/api/class-page\#page-get-attribute "Direct link to get_attribute")

Added before v1.9page.get\_attribute

Discouraged

Use locator-based [locator.get\_attribute()](https://playwright.dev/python/docs/api/class-locator#locator-get-attribute) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns element attribute value.

**Usage**

```codeBlockLines_e6Vv
page.get_attribute(selector, name)
page.get_attribute(selector, name, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-get-attribute-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-get-attribute-option-name)

Attribute name to get the value for.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-get-attribute-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-get-attribute-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-get-attribute-return)

* * *

### hover [​](https://playwright.dev/python/docs/api/class-page\#page-hover "Direct link to hover")

Added before v1.9page.hover

Discouraged

Use locator-based [locator.hover()](https://playwright.dev/python/docs/api/class-locator#locator-hover) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method hovers over an element matching [selector](https://playwright.dev/python/docs/api/class-page#page-hover-option-selector) by performing the following steps:

1. Find an element matching [selector](https://playwright.dev/python/docs/api/class-page#page-hover-option-selector). If there is none, wait until a matching element is attached to the DOM.
2. Wait for [actionability](https://playwright.dev/python/docs/actionability) checks on the matched element, unless [force](https://playwright.dev/python/docs/api/class-page#page-hover-option-force) option is set. If the element is detached during the checks, the whole action is retried.
3. Scroll the element into view if needed.
4. Use [page.mouse](https://playwright.dev/python/docs/api/class-page#page-mouse) to hover over the center of the element, or the specified [position](https://playwright.dev/python/docs/api/class-page#page-hover-option-position).

When all steps combined have not finished during the specified [timeout](https://playwright.dev/python/docs/api/class-page#page-hover-option-timeout), this method throws a [TimeoutError](https://playwright.dev/python/docs/api/class-timeouterror "TimeoutError"). Passing zero timeout disables this.

**Usage**

```codeBlockLines_e6Vv
page.hover(selector)
page.hover(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-hover-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-hover-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `modifiers` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\["Alt" \| "Control" \| "ControlOrMeta" \| "Meta" \| "Shift"\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-hover-option-modifiers)

Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to "Control" on Windows and Linux and to "Meta" on macOS.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.28 [#](https://playwright.dev/python/docs/api/class-page#page-hover-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-hover-option-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-hover-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-hover-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.11 [#](https://playwright.dev/python/docs/api/class-page#page-hover-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it. Note that keyboard `modifiers` will be pressed regardless of `trial` to allow testing elements which are only visible when those keys are pressed.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-hover-return)

* * *

### inner\_html [​](https://playwright.dev/python/docs/api/class-page\#page-inner-html "Direct link to inner_html")

Added before v1.9page.inner\_html

Discouraged

Use locator-based [locator.inner\_html()](https://playwright.dev/python/docs/api/class-locator#locator-inner-html) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns `element.innerHTML`.

**Usage**

```codeBlockLines_e6Vv
page.inner_html(selector)
page.inner_html(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-inner-html-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-inner-html-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-inner-html-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-inner-html-return)

* * *

### inner\_text [​](https://playwright.dev/python/docs/api/class-page\#page-inner-text "Direct link to inner_text")

Added before v1.9page.inner\_text

Discouraged

Use locator-based [locator.inner\_text()](https://playwright.dev/python/docs/api/class-locator#locator-inner-text) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns `element.innerText`.

**Usage**

```codeBlockLines_e6Vv
page.inner_text(selector)
page.inner_text(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-inner-text-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-inner-text-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-inner-text-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-inner-text-return)

* * *

### input\_value [​](https://playwright.dev/python/docs/api/class-page\#page-input-value "Direct link to input_value")

Added in: v1.13page.input\_value

Discouraged

Use locator-based [locator.input\_value()](https://playwright.dev/python/docs/api/class-locator#locator-input-value) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns `input.value` for the selected `<input>` or `<textarea>` or `<select>` element.

Throws for non-input elements. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), returns the value of the control.

**Usage**

```codeBlockLines_e6Vv
page.input_value(selector)
page.input_value(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-input-value-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-input-value-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-input-value-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-input-value-return)

* * *

### is\_checked [​](https://playwright.dev/python/docs/api/class-page\#page-is-checked "Direct link to is_checked")

Added before v1.9page.is\_checked

Discouraged

Use locator-based [locator.is\_checked()](https://playwright.dev/python/docs/api/class-locator#locator-is-checked) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns whether the element is checked. Throws if the element is not a checkbox or radio input.

**Usage**

```codeBlockLines_e6Vv
page.is_checked(selector)
page.is_checked(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-is-checked-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-is-checked-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-is-checked-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-page#page-is-checked-return)

* * *

### is\_disabled [​](https://playwright.dev/python/docs/api/class-page\#page-is-disabled "Direct link to is_disabled")

Added before v1.9page.is\_disabled

Discouraged

Use locator-based [locator.is\_disabled()](https://playwright.dev/python/docs/api/class-locator#locator-is-disabled) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns whether the element is disabled, the opposite of [enabled](https://playwright.dev/python/docs/actionability#enabled).

**Usage**

```codeBlockLines_e6Vv
page.is_disabled(selector)
page.is_disabled(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-is-disabled-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-is-disabled-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-is-disabled-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-page#page-is-disabled-return)

* * *

### is\_editable [​](https://playwright.dev/python/docs/api/class-page\#page-is-editable "Direct link to is_editable")

Added before v1.9page.is\_editable

Discouraged

Use locator-based [locator.is\_editable()](https://playwright.dev/python/docs/api/class-locator#locator-is-editable) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns whether the element is [editable](https://playwright.dev/python/docs/actionability#editable).

**Usage**

```codeBlockLines_e6Vv
page.is_editable(selector)
page.is_editable(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-is-editable-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-is-editable-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-is-editable-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-page#page-is-editable-return)

* * *

### is\_enabled [​](https://playwright.dev/python/docs/api/class-page\#page-is-enabled "Direct link to is_enabled")

Added before v1.9page.is\_enabled

Discouraged

Use locator-based [locator.is\_enabled()](https://playwright.dev/python/docs/api/class-locator#locator-is-enabled) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns whether the element is [enabled](https://playwright.dev/python/docs/actionability#enabled).

**Usage**

```codeBlockLines_e6Vv
page.is_enabled(selector)
page.is_enabled(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-is-enabled-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-is-enabled-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-is-enabled-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-page#page-is-enabled-return)

* * *

### is\_hidden [​](https://playwright.dev/python/docs/api/class-page\#page-is-hidden "Direct link to is_hidden")

Added before v1.9page.is\_hidden

Discouraged

Use locator-based [locator.is\_hidden()](https://playwright.dev/python/docs/api/class-locator#locator-is-hidden) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns whether the element is hidden, the opposite of [visible](https://playwright.dev/python/docs/actionability#visible). [selector](https://playwright.dev/python/docs/api/class-page#page-is-hidden-option-selector) that does not match any elements is considered hidden.

**Usage**

```codeBlockLines_e6Vv
page.is_hidden(selector)
page.is_hidden(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-is-hidden-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-is-hidden-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-is-hidden-option-timeout)



Deprecated





This option is ignored. [page.is\_hidden()](https://playwright.dev/python/docs/api/class-page#page-is-hidden) does not wait for the element to become hidden and returns immediately.


**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-page#page-is-hidden-return)

* * *

### is\_visible [​](https://playwright.dev/python/docs/api/class-page\#page-is-visible "Direct link to is_visible")

Added before v1.9page.is\_visible

Discouraged

Use locator-based [locator.is\_visible()](https://playwright.dev/python/docs/api/class-locator#locator-is-visible) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns whether the element is [visible](https://playwright.dev/python/docs/actionability#visible). [selector](https://playwright.dev/python/docs/api/class-page#page-is-visible-option-selector) that does not match any elements is considered not visible.

**Usage**

```codeBlockLines_e6Vv
page.is_visible(selector)
page.is_visible(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-is-visible-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-is-visible-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-is-visible-option-timeout)



Deprecated





This option is ignored. [page.is\_visible()](https://playwright.dev/python/docs/api/class-page#page-is-visible) does not wait for the element to become visible and returns immediately.


**Returns**

- [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-page#page-is-visible-return)

* * *

### press [​](https://playwright.dev/python/docs/api/class-page\#page-press "Direct link to press")

Added before v1.9page.press

Discouraged

Use locator-based [locator.press()](https://playwright.dev/python/docs/api/class-locator#locator-press) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Focuses the element, and then uses [keyboard.down()](https://playwright.dev/python/docs/api/class-keyboard#keyboard-down) and [keyboard.up()](https://playwright.dev/python/docs/api/class-keyboard#keyboard-up).

[key](https://playwright.dev/python/docs/api/class-page#page-press-option-key) can specify the intended [keyboardEvent.key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) value or a single character to generate the text for. A superset of the [key](https://playwright.dev/python/docs/api/class-page#page-press-option-key) values can be found [here](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values). Examples of the keys are:

`F1` \- `F12`, `Digit0`\- `Digit9`, `KeyA`\- `KeyZ`, `Backquote`, `Minus`, `Equal`, `Backslash`, `Backspace`, `Tab`, `Delete`, `Escape`, `ArrowDown`, `End`, `Enter`, `Home`, `Insert`, `PageDown`, `PageUp`, `ArrowRight`, `ArrowUp`, etc.

Following modification shortcuts are also supported: `Shift`, `Control`, `Alt`, `Meta`, `ShiftLeft`, `ControlOrMeta`. `ControlOrMeta` resolves to `Control` on Windows and Linux and to `Meta` on macOS.

Holding down `Shift` will type the text that corresponds to the [key](https://playwright.dev/python/docs/api/class-page#page-press-option-key) in the upper case.

If [key](https://playwright.dev/python/docs/api/class-page#page-press-option-key) is a single character, it is case-sensitive, so the values `a` and `A` will generate different respective texts.

Shortcuts such as `key: "Control+o"`, `key: "Control++` or `key: "Control+Shift+T"` are supported as well. When specified with the modifier, modifier is pressed and being held while the subsequent key is being pressed.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
page = browser.new_page()
page.goto("https://keycode.info")
page.press("body", "A")
page.screenshot(path="a.png")
page.press("body", "ArrowLeft")
page.screenshot(path="arrow_left.png")
page.press("body", "Shift+O")
page.screenshot(path="o.png")
browser.close()

```

```codeBlockLines_e6Vv
page = await browser.new_page()
await page.goto("https://keycode.info")
await page.press("body", "A")
await page.screenshot(path="a.png")
await page.press("body", "ArrowLeft")
await page.screenshot(path="arrow_left.png")
await page.press("body", "Shift+O")
await page.screenshot(path="o.png")
await browser.close()

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-press-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `key` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-press-option-key)

Name of the key to press or a character to generate, such as `ArrowLeft` or `a`.

- `delay` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-press-option-delay)

Time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-press-option-no-wait-after)



Deprecated





This option will default to `true` in the future.





Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-press-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-press-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-press-return)

* * *

### query\_selector [​](https://playwright.dev/python/docs/api/class-page\#page-query-selector "Direct link to query_selector")

Added in: v1.9page.query\_selector

Discouraged

Use locator-based [page.locator()](https://playwright.dev/python/docs/api/class-page#page-locator) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

The method finds an element matching the specified selector within the page. If no elements match the selector, the return value resolves to `null`. To wait for an element on the page, use [locator.wait\_for()](https://playwright.dev/python/docs/api/class-locator#locator-wait-for).

**Usage**

```codeBlockLines_e6Vv
page.query_selector(selector)
page.query_selector(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-query-selector-option-selector)

A selector to query for.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-query-selector-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") [#](https://playwright.dev/python/docs/api/class-page#page-query-selector-return)

* * *

### query\_selector\_all [​](https://playwright.dev/python/docs/api/class-page\#page-query-selector-all "Direct link to query_selector_all")

Added in: v1.9page.query\_selector\_all

Discouraged

Use locator-based [page.locator()](https://playwright.dev/python/docs/api/class-page#page-locator) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

The method finds all elements matching the specified selector within the page. If no elements match the selector, the return value resolves to `[]`.

**Usage**

```codeBlockLines_e6Vv
page.query_selector_all(selector)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-query-selector-all-option-selector)

A selector to query for.


**Returns**

- [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle")\] [#](https://playwright.dev/python/docs/api/class-page#page-query-selector-all-return)

* * *

### select\_option [​](https://playwright.dev/python/docs/api/class-page\#page-select-option "Direct link to select_option")

Added before v1.9page.select\_option

Discouraged

Use locator-based [locator.select\_option()](https://playwright.dev/python/docs/api/class-locator#locator-select-option) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method waits for an element matching [selector](https://playwright.dev/python/docs/api/class-page#page-select-option-option-selector), waits for [actionability](https://playwright.dev/python/docs/actionability) checks, waits until all specified options are present in the `<select>` element and selects these options.

If the target element is not a `<select>` element, this method throws an error. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be used instead.

Returns the array of option values that have been successfully selected.

Triggers a `change` and `input` event once all the provided options have been selected.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
# Single selection matching the value or label
page.select_option("select#colors", "blue")
# single selection matching both the label
page.select_option("select#colors", label="blue")
# multiple selection
page.select_option("select#colors", value=["red", "green", "blue"])

```

```codeBlockLines_e6Vv
# Single selection matching the value or label
await page.select_option("select#colors", "blue")
# single selection matching the label
await page.select_option("select#colors", label="blue")
# multiple selection
await page.select_option("select#colors", value=["red", "green", "blue"])

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-select-option-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.13 [#](https://playwright.dev/python/docs/api/class-page#page-select-option-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-select-option-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-select-option-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-select-option-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `element` [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-select-option-option-element)

Option elements to select. Optional.

- `index` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-select-option-option-index)

Options to select by index. Optional.

- `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-select-option-option-value)

Options to select by value. If the `<select>` has the `multiple` attribute, all given options are selected, otherwise only the first option matching one of the passed options is selected. Optional.

- `label` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-select-option-option-label)

Options to select by label. If the `<select>` has the `multiple` attribute, all given options are selected, otherwise only the first option matching one of the passed options is selected. Optional.


**Returns**

- [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] [#](https://playwright.dev/python/docs/api/class-page#page-select-option-return)

* * *

### set\_checked [​](https://playwright.dev/python/docs/api/class-page\#page-set-checked "Direct link to set_checked")

Added in: v1.15page.set\_checked

Discouraged

Use locator-based [locator.set\_checked()](https://playwright.dev/python/docs/api/class-locator#locator-set-checked) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method checks or unchecks an element matching [selector](https://playwright.dev/python/docs/api/class-page#page-set-checked-option-selector) by performing the following steps:

1. Find an element matching [selector](https://playwright.dev/python/docs/api/class-page#page-set-checked-option-selector). If there is none, wait until a matching element is attached to the DOM.
2. Ensure that matched element is a checkbox or a radio input. If not, this method throws.
3. If the element already has the right checked state, this method returns immediately.
4. Wait for [actionability](https://playwright.dev/python/docs/actionability) checks on the matched element, unless [force](https://playwright.dev/python/docs/api/class-page#page-set-checked-option-force) option is set. If the element is detached during the checks, the whole action is retried.
5. Scroll the element into view if needed.
6. Use [page.mouse](https://playwright.dev/python/docs/api/class-page#page-mouse) to click in the center of the element.
7. Ensure that the element is now checked or unchecked. If not, this method throws.

When all steps combined have not finished during the specified [timeout](https://playwright.dev/python/docs/api/class-page#page-set-checked-option-timeout), this method throws a [TimeoutError](https://playwright.dev/python/docs/api/class-timeouterror "TimeoutError"). Passing zero timeout disables this.

**Usage**

```codeBlockLines_e6Vv
page.set_checked(selector, checked)
page.set_checked(selector, checked, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-set-checked-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `checked` [bool](https://docs.python.org/3/library/stdtypes.html "bool") [#](https://playwright.dev/python/docs/api/class-page#page-set-checked-option-checked)

Whether to check or uncheck the checkbox.

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-set-checked-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-set-checked-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-set-checked-option-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-set-checked-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-set-checked-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-set-checked-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-set-checked-return)

* * *

### set\_input\_files [​](https://playwright.dev/python/docs/api/class-page\#page-set-input-files "Direct link to set_input_files")

Added before v1.9page.set\_input\_files

Discouraged

Use locator-based [locator.set\_input\_files()](https://playwright.dev/python/docs/api/class-locator#locator-set-input-files) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Sets the value of the file input to these file paths or files. If some of the `filePaths` are relative paths, then they are resolved relative to the current working directory. For empty array, clears the selected files. For inputs with a `[webkitdirectory]` attribute, only a single directory path is supported.

This method expects [selector](https://playwright.dev/python/docs/api/class-page#page-set-input-files-option-selector) to point to an [input element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input). However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), targets the control instead.

**Usage**

```codeBlockLines_e6Vv
page.set_input_files(selector, files)
page.set_input_files(selector, files, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-set-input-files-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `files` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\]\] \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") \| [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\] [#](https://playwright.dev/python/docs/api/class-page#page-set-input-files-option-files)
  - `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    File name

  - `mimeType` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    File type

  - `buffer` [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes")

    File content
- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-set-input-files-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-set-input-files-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-set-input-files-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-set-input-files-return)

* * *

### tap [​](https://playwright.dev/python/docs/api/class-page\#page-tap "Direct link to tap")

Added before v1.9page.tap

Discouraged

Use locator-based [locator.tap()](https://playwright.dev/python/docs/api/class-locator#locator-tap) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method taps an element matching [selector](https://playwright.dev/python/docs/api/class-page#page-tap-option-selector) by performing the following steps:

1. Find an element matching [selector](https://playwright.dev/python/docs/api/class-page#page-tap-option-selector). If there is none, wait until a matching element is attached to the DOM.
2. Wait for [actionability](https://playwright.dev/python/docs/actionability) checks on the matched element, unless [force](https://playwright.dev/python/docs/api/class-page#page-tap-option-force) option is set. If the element is detached during the checks, the whole action is retried.
3. Scroll the element into view if needed.
4. Use [page.touchscreen](https://playwright.dev/python/docs/api/class-page#page-touchscreen) to tap the center of the element, or the specified [position](https://playwright.dev/python/docs/api/class-page#page-tap-option-position).

When all steps combined have not finished during the specified [timeout](https://playwright.dev/python/docs/api/class-page#page-tap-option-timeout), this method throws a [TimeoutError](https://playwright.dev/python/docs/api/class-timeouterror "TimeoutError"). Passing zero timeout disables this.

note

[page.tap()](https://playwright.dev/python/docs/api/class-page#page-tap) the method will throw if [has\_touch](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-has-touch) option of the browser context is false.

**Usage**

```codeBlockLines_e6Vv
page.tap(selector)
page.tap(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-tap-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-tap-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `modifiers` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\["Alt" \| "Control" \| "ControlOrMeta" \| "Meta" \| "Shift"\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-tap-option-modifiers)

Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to "Control" on Windows and Linux and to "Meta" on macOS.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-tap-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-tap-option-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-tap-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-tap-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.11 [#](https://playwright.dev/python/docs/api/class-page#page-tap-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it. Note that keyboard `modifiers` will be pressed regardless of `trial` to allow testing elements which are only visible when those keys are pressed.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-tap-return)

* * *

### text\_content [​](https://playwright.dev/python/docs/api/class-page\#page-text-content "Direct link to text_content")

Added before v1.9page.text\_content

Discouraged

Use locator-based [locator.text\_content()](https://playwright.dev/python/docs/api/class-locator#locator-text-content) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns `element.textContent`.

**Usage**

```codeBlockLines_e6Vv
page.text_content(selector)
page.text_content(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-text-content-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-text-content-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-text-content-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-text-content-return)

* * *

### type [​](https://playwright.dev/python/docs/api/class-page\#page-type "Direct link to type")

Added before v1.9page.type

Deprecated

In most cases, you should use [locator.fill()](https://playwright.dev/python/docs/api/class-locator#locator-fill) instead. You only need to press keys one by one if there is special keyboard handling on the page - in this case use [locator.press\_sequentially()](https://playwright.dev/python/docs/api/class-locator#locator-press-sequentially).

Sends a `keydown`, `keypress`/ `input`, and `keyup` event for each character in the text. `page.type` can be used to send fine-grained keyboard events. To fill values in form fields, use [page.fill()](https://playwright.dev/python/docs/api/class-page#page-fill).

To press a special key, like `Control` or `ArrowDown`, use [keyboard.press()](https://playwright.dev/python/docs/api/class-keyboard#keyboard-press).

**Usage**

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-type-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `text` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-type-option-text)

A text to type into a focused element.

- `delay` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-type-option-delay)

Time to wait between key presses in milliseconds. Defaults to 0.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-type-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-type-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-type-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-type-return)

* * *

### uncheck [​](https://playwright.dev/python/docs/api/class-page\#page-uncheck "Direct link to uncheck")

Added before v1.9page.uncheck

Discouraged

Use locator-based [locator.uncheck()](https://playwright.dev/python/docs/api/class-locator#locator-uncheck) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

This method unchecks an element matching [selector](https://playwright.dev/python/docs/api/class-page#page-uncheck-option-selector) by performing the following steps:

1. Find an element matching [selector](https://playwright.dev/python/docs/api/class-page#page-uncheck-option-selector). If there is none, wait until a matching element is attached to the DOM.
2. Ensure that matched element is a checkbox or a radio input. If not, this method throws. If the element is already unchecked, this method returns immediately.
3. Wait for [actionability](https://playwright.dev/python/docs/actionability) checks on the matched element, unless [force](https://playwright.dev/python/docs/api/class-page#page-uncheck-option-force) option is set. If the element is detached during the checks, the whole action is retried.
4. Scroll the element into view if needed.
5. Use [page.mouse](https://playwright.dev/python/docs/api/class-page#page-mouse) to click in the center of the element.
6. Ensure that the element is now unchecked. If not, this method throws.

When all steps combined have not finished during the specified [timeout](https://playwright.dev/python/docs/api/class-page#page-uncheck-option-timeout), this method throws a [TimeoutError](https://playwright.dev/python/docs/api/class-timeouterror "TimeoutError"). Passing zero timeout disables this.

**Usage**

```codeBlockLines_e6Vv
page.uncheck(selector)
page.uncheck(selector, **kwargs)

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-uncheck-option-selector)

A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

- `force` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-uncheck-option-force)

Whether to bypass the [actionability](https://playwright.dev/python/docs/actionability) checks. Defaults to `false`.

- `no_wait_after` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-uncheck-option-no-wait-after)



Deprecated





This option has no effect.





This option has no effect.

- `position` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ Added in: v1.11 [#](https://playwright.dev/python/docs/api/class-page#page-uncheck-option-position)


  - `x` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

  - `y` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")


A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-uncheck-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-uncheck-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.

- `trial` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.11 [#](https://playwright.dev/python/docs/api/class-page#page-uncheck-option-trial)

When set, this method only performs the [actionability](https://playwright.dev/python/docs/actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-uncheck-return)

* * *

### wait\_for\_selector [​](https://playwright.dev/python/docs/api/class-page\#page-wait-for-selector "Direct link to wait_for_selector")

Added before v1.9page.wait\_for\_selector

Discouraged

Use web assertions that assert visibility or a locator-based [locator.wait\_for()](https://playwright.dev/python/docs/api/class-locator#locator-wait-for) instead. Read more about [locators](https://playwright.dev/python/docs/locators).

Returns when element specified by selector satisfies [state](https://playwright.dev/python/docs/api/class-page#page-wait-for-selector-option-state) option. Returns `null` if waiting for `hidden` or `detached`.

note

Playwright automatically waits for element to be ready before performing an action. Using [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") objects and web-first assertions makes the code wait-for-selector-free.

Wait for the [selector](https://playwright.dev/python/docs/api/class-page#page-wait-for-selector-option-selector) to satisfy [state](https://playwright.dev/python/docs/api/class-page#page-wait-for-selector-option-state) option (either appear/disappear from dom, or become visible/hidden). If at the moment of calling the method [selector](https://playwright.dev/python/docs/api/class-page#page-wait-for-selector-option-selector) already satisfies the condition, the method will return immediately. If the selector doesn't satisfy the condition for the [timeout](https://playwright.dev/python/docs/api/class-page#page-wait-for-selector-option-timeout) milliseconds, the function will throw.

**Usage**

This method works across navigations:

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    chromium = playwright.chromium
    browser = chromium.launch()
    page = browser.new_page()
    for current_url in ["https://google.com", "https://bbc.com"]:
        page.goto(current_url, wait_until="domcontentloaded")
        element = page.wait_for_selector("img")
        print("Loaded image: " + str(element.get_attribute("src")))
    browser.close()

with sync_playwright() as playwright:
    run(playwright)

```

```codeBlockLines_e6Vv
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    chromium = playwright.chromium
    browser = await chromium.launch()
    page = await browser.new_page()
    for current_url in ["https://google.com", "https://bbc.com"]:
        await page.goto(current_url, wait_until="domcontentloaded")
        element = await page.wait_for_selector("img")
        print("Loaded image: " + str(await element.get_attribute("src")))
    await browser.close()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())

```

**Arguments**

- `selector` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-selector-option-selector)

A selector to query for.

- `state` "attached" \| "detached" \| "visible" \| "hidden" _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-selector-option-state)

Defaults to `'visible'`. Can be either:
  - `'attached'` \- wait for element to be present in DOM.
  - `'detached'` \- wait for element to not be present in DOM.
  - `'visible'` \- wait for element to have non-empty bounding box and no `visibility:hidden`. Note that element without any content or with `display:none` has an empty bounding box and is not considered visible.
  - `'hidden'` \- wait for element to be either detached from DOM, or have an empty bounding box or `visibility:hidden`. This is opposite to the `'visible'` option.
- `strict` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.14 [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-selector-option-strict)

When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-selector-option-timeout)

Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browser\_context.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-set-default-timeout) or [page.set\_default\_timeout()](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout) methods.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") \| [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-selector-return)

* * *

### wait\_for\_timeout [​](https://playwright.dev/python/docs/api/class-page\#page-wait-for-timeout "Direct link to wait_for_timeout")

Added before v1.9page.wait\_for\_timeout

Discouraged

Never wait for timeout in production. Tests that wait for time are inherently flaky. Use [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") actions and web assertions that wait automatically.

Waits for the given [timeout](https://playwright.dev/python/docs/api/class-page#page-wait-for-timeout-option-timeout) in milliseconds.

Note that `page.waitForTimeout()` should only be used for debugging. Tests using the timer in production are going to be flaky. Use signals such as network events, selectors becoming visible and others instead.

**Usage**

- Sync
- Async

```codeBlockLines_e6Vv
# wait for 1 second
page.wait_for_timeout(1000)

```

```codeBlockLines_e6Vv
# wait for 1 second
await page.wait_for_timeout(1000)

```

**Arguments**

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-timeout-option-timeout)

A timeout to wait for


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-page#page-wait-for-timeout-return)

- [Methods](https://playwright.dev/python/docs/api/class-page#methods)
  - [add\_init\_script](https://playwright.dev/python/docs/api/class-page#page-add-init-script)
  - [add\_locator\_handler](https://playwright.dev/python/docs/api/class-page#page-add-locator-handler)
  - [add\_script\_tag](https://playwright.dev/python/docs/api/class-page#page-add-script-tag)
  - [add\_style\_tag](https://playwright.dev/python/docs/api/class-page#page-add-style-tag)
  - [bring\_to\_front](https://playwright.dev/python/docs/api/class-page#page-bring-to-front)
  - [close](https://playwright.dev/python/docs/api/class-page#page-close)
  - [content](https://playwright.dev/python/docs/api/class-page#page-content)
  - [drag\_and\_drop](https://playwright.dev/python/docs/api/class-page#page-drag-and-drop)
  - [emulate\_media](https://playwright.dev/python/docs/api/class-page#page-emulate-media)
  - [evaluate](https://playwright.dev/python/docs/api/class-page#page-evaluate)
  - [evaluate\_handle](https://playwright.dev/python/docs/api/class-page#page-evaluate-handle)
  - [expect\_console\_message](https://playwright.dev/python/docs/api/class-page#page-wait-for-console-message)
  - [expect\_download](https://playwright.dev/python/docs/api/class-page#page-wait-for-download)
  - [expect\_event](https://playwright.dev/python/docs/api/class-page#page-wait-for-event)
  - [expect\_file\_chooser](https://playwright.dev/python/docs/api/class-page#page-wait-for-file-chooser)
  - [expect\_popup](https://playwright.dev/python/docs/api/class-page#page-wait-for-popup)
  - [expect\_request](https://playwright.dev/python/docs/api/class-page#page-wait-for-request)
  - [expect\_request\_finished](https://playwright.dev/python/docs/api/class-page#page-wait-for-request-finished)
  - [expect\_response](https://playwright.dev/python/docs/api/class-page#page-wait-for-response)
  - [expect\_websocket](https://playwright.dev/python/docs/api/class-page#page-wait-for-web-socket)
  - [expect\_worker](https://playwright.dev/python/docs/api/class-page#page-wait-for-worker)
  - [expose\_binding](https://playwright.dev/python/docs/api/class-page#page-expose-binding)
  - [expose\_function](https://playwright.dev/python/docs/api/class-page#page-expose-function)
  - [frame](https://playwright.dev/python/docs/api/class-page#page-frame)
  - [frame\_locator](https://playwright.dev/python/docs/api/class-page#page-frame-locator)
  - [get\_by\_alt\_text](https://playwright.dev/python/docs/api/class-page#page-get-by-alt-text)
  - [get\_by\_label](https://playwright.dev/python/docs/api/class-page#page-get-by-label)
  - [get\_by\_placeholder](https://playwright.dev/python/docs/api/class-page#page-get-by-placeholder)
  - [get\_by\_role](https://playwright.dev/python/docs/api/class-page#page-get-by-role)
  - [get\_by\_test\_id](https://playwright.dev/python/docs/api/class-page#page-get-by-test-id)
  - [get\_by\_text](https://playwright.dev/python/docs/api/class-page#page-get-by-text)
  - [get\_by\_title](https://playwright.dev/python/docs/api/class-page#page-get-by-title)
  - [go\_back](https://playwright.dev/python/docs/api/class-page#page-go-back)
  - [go\_forward](https://playwright.dev/python/docs/api/class-page#page-go-forward)
  - [goto](https://playwright.dev/python/docs/api/class-page#page-goto)
  - [locator](https://playwright.dev/python/docs/api/class-page#page-locator)
  - [opener](https://playwright.dev/python/docs/api/class-page#page-opener)
  - [pause](https://playwright.dev/python/docs/api/class-page#page-pause)
  - [pdf](https://playwright.dev/python/docs/api/class-page#page-pdf)
  - [reload](https://playwright.dev/python/docs/api/class-page#page-reload)
  - [remove\_locator\_handler](https://playwright.dev/python/docs/api/class-page#page-remove-locator-handler)
  - [request\_gc](https://playwright.dev/python/docs/api/class-page#page-request-gc)
  - [route](https://playwright.dev/python/docs/api/class-page#page-route)
  - [route\_from\_har](https://playwright.dev/python/docs/api/class-page#page-route-from-har)
  - [route\_web\_socket](https://playwright.dev/python/docs/api/class-page#page-route-web-socket)
  - [screenshot](https://playwright.dev/python/docs/api/class-page#page-screenshot)
  - [set\_content](https://playwright.dev/python/docs/api/class-page#page-set-content)
  - [set\_default\_navigation\_timeout](https://playwright.dev/python/docs/api/class-page#page-set-default-navigation-timeout)
  - [set\_default\_timeout](https://playwright.dev/python/docs/api/class-page#page-set-default-timeout)
  - [set\_extra\_http\_headers](https://playwright.dev/python/docs/api/class-page#page-set-extra-http-headers)
  - [set\_viewport\_size](https://playwright.dev/python/docs/api/class-page#page-set-viewport-size)
  - [title](https://playwright.dev/python/docs/api/class-page#page-title)
  - [unroute](https://playwright.dev/python/docs/api/class-page#page-unroute)
  - [unroute\_all](https://playwright.dev/python/docs/api/class-page#page-unroute-all)
  - [wait\_for\_event](https://playwright.dev/python/docs/api/class-page#page-wait-for-event-2)
  - [wait\_for\_function](https://playwright.dev/python/docs/api/class-page#page-wait-for-function)
  - [wait\_for\_load\_state](https://playwright.dev/python/docs/api/class-page#page-wait-for-load-state)
  - [wait\_for\_url](https://playwright.dev/python/docs/api/class-page#page-wait-for-url)
- [Properties](https://playwright.dev/python/docs/api/class-page#properties)
  - [clock](https://playwright.dev/python/docs/api/class-page#page-clock)
  - [context](https://playwright.dev/python/docs/api/class-page#page-context)
  - [frames](https://playwright.dev/python/docs/api/class-page#page-frames)
  - [is\_closed](https://playwright.dev/python/docs/api/class-page#page-is-closed)
  - [keyboard](https://playwright.dev/python/docs/api/class-page#page-keyboard)
  - [main\_frame](https://playwright.dev/python/docs/api/class-page#page-main-frame)
  - [mouse](https://playwright.dev/python/docs/api/class-page#page-mouse)
  - [request](https://playwright.dev/python/docs/api/class-page#page-request)
  - [touchscreen](https://playwright.dev/python/docs/api/class-page#page-touchscreen)
  - [url](https://playwright.dev/python/docs/api/class-page#page-url)
  - [video](https://playwright.dev/python/docs/api/class-page#page-video)
  - [viewport\_size](https://playwright.dev/python/docs/api/class-page#page-viewport-size)
  - [workers](https://playwright.dev/python/docs/api/class-page#page-workers)
- [Events](https://playwright.dev/python/docs/api/class-page#events)
  - [on("close")](https://playwright.dev/python/docs/api/class-page#page-event-close)
  - [on("console")](https://playwright.dev/python/docs/api/class-page#page-event-console)
  - [on("crash")](https://playwright.dev/python/docs/api/class-page#page-event-crash)
  - [on("dialog")](https://playwright.dev/python/docs/api/class-page#page-event-dialog)
  - [on("domcontentloaded")](https://playwright.dev/python/docs/api/class-page#page-event-dom-content-loaded)
  - [on("download")](https://playwright.dev/python/docs/api/class-page#page-event-download)
  - [on("filechooser")](https://playwright.dev/python/docs/api/class-page#page-event-file-chooser)
  - [on("frameattached")](https://playwright.dev/python/docs/api/class-page#page-event-frame-attached)
  - [on("framedetached")](https://playwright.dev/python/docs/api/class-page#page-event-frame-detached)
  - [on("framenavigated")](https://playwright.dev/python/docs/api/class-page#page-event-frame-navigated)
  - [on("load")](https://playwright.dev/python/docs/api/class-page#page-event-load)
  - [on("pageerror")](https://playwright.dev/python/docs/api/class-page#page-event-page-error)
  - [on("popup")](https://playwright.dev/python/docs/api/class-page#page-event-popup)
  - [on("request")](https://playwright.dev/python/docs/api/class-page#page-event-request)
  - [on("requestfailed")](https://playwright.dev/python/docs/api/class-page#page-event-request-failed)
  - [on("requestfinished")](https://playwright.dev/python/docs/api/class-page#page-event-request-finished)
  - [on("response")](https://playwright.dev/python/docs/api/class-page#page-event-response)
  - [on("websocket")](https://playwright.dev/python/docs/api/class-page#page-event-web-socket)
  - [on("worker")](https://playwright.dev/python/docs/api/class-page#page-event-worker)
- [Deprecated](https://playwright.dev/python/docs/api/class-page#deprecated)
  - [accessibility](https://playwright.dev/python/docs/api/class-page#page-accessibility)
  - [check](https://playwright.dev/python/docs/api/class-page#page-check)
  - [click](https://playwright.dev/python/docs/api/class-page#page-click)
  - [dblclick](https://playwright.dev/python/docs/api/class-page#page-dblclick)
  - [dispatch\_event](https://playwright.dev/python/docs/api/class-page#page-dispatch-event)
  - [eval\_on\_selector](https://playwright.dev/python/docs/api/class-page#page-eval-on-selector)
  - [eval\_on\_selector\_all](https://playwright.dev/python/docs/api/class-page#page-eval-on-selector-all)
  - [expect\_navigation](https://playwright.dev/python/docs/api/class-page#page-wait-for-navigation)
  - [fill](https://playwright.dev/python/docs/api/class-page#page-fill)
  - [focus](https://playwright.dev/python/docs/api/class-page#page-focus)
  - [get\_attribute](https://playwright.dev/python/docs/api/class-page#page-get-attribute)
  - [hover](https://playwright.dev/python/docs/api/class-page#page-hover)
  - [inner\_html](https://playwright.dev/python/docs/api/class-page#page-inner-html)
  - [inner\_text](https://playwright.dev/python/docs/api/class-page#page-inner-text)
  - [input\_value](https://playwright.dev/python/docs/api/class-page#page-input-value)
  - [is\_checked](https://playwright.dev/python/docs/api/class-page#page-is-checked)
  - [is\_disabled](https://playwright.dev/python/docs/api/class-page#page-is-disabled)
  - [is\_editable](https://playwright.dev/python/docs/api/class-page#page-is-editable)
  - [is\_enabled](https://playwright.dev/python/docs/api/class-page#page-is-enabled)
  - [is\_hidden](https://playwright.dev/python/docs/api/class-page#page-is-hidden)
  - [is\_visible](https://playwright.dev/python/docs/api/class-page#page-is-visible)
  - [press](https://playwright.dev/python/docs/api/class-page#page-press)
  - [query\_selector](https://playwright.dev/python/docs/api/class-page#page-query-selector)
  - [query\_selector\_all](https://playwright.dev/python/docs/api/class-page#page-query-selector-all)
  - [select\_option](https://playwright.dev/python/docs/api/class-page#page-select-option)
  - [set\_checked](https://playwright.dev/python/docs/api/class-page#page-set-checked)
  - [set\_input\_files](https://playwright.dev/python/docs/api/class-page#page-set-input-files)
  - [tap](https://playwright.dev/python/docs/api/class-page#page-tap)
  - [text\_content](https://playwright.dev/python/docs/api/class-page#page-text-content)
  - [type](https://playwright.dev/python/docs/api/class-page#page-type)
  - [uncheck](https://playwright.dev/python/docs/api/class-page#page-uncheck)
  - [wait\_for\_selector](https://playwright.dev/python/docs/api/class-page#page-wait-for-selector)
  - [wait\_for\_timeout](https://playwright.dev/python/docs/api/class-page#page-wait-for-timeout)

## API Request Context
[Skip to main content](https://playwright.dev/python/docs/api/class-apirequestcontext#__docusaurus_skipToContent_fallback)

On this page

This API is used for the Web API testing. You can use it to trigger API endpoints, configure micro-services, prepare environment or the service to your e2e test.

Each Playwright browser context has associated with it [APIRequestContext](https://playwright.dev/python/docs/api/class-apirequestcontext "APIRequestContext") instance which shares cookie storage with the browser context and can be accessed via [browser\_context.request](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-request) or [page.request](https://playwright.dev/python/docs/api/class-page#page-request). It is also possible to create a new APIRequestContext instance manually by calling [api\_request.new\_context()](https://playwright.dev/python/docs/api/class-apirequest#api-request-new-context).

**Cookie management**

[APIRequestContext](https://playwright.dev/python/docs/api/class-apirequestcontext "APIRequestContext") returned by [browser\_context.request](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-request) and [page.request](https://playwright.dev/python/docs/api/class-page#page-request) shares cookie storage with the corresponding [BrowserContext](https://playwright.dev/python/docs/api/class-browsercontext "BrowserContext"). Each API request will have `Cookie` header populated with the values from the browser context. If the API response contains `Set-Cookie` header it will automatically update [BrowserContext](https://playwright.dev/python/docs/api/class-browsercontext "BrowserContext") cookies and requests made from the page will pick them up. This means that if you log in using this API, your e2e test will be logged in and vice versa.

If you want API requests to not interfere with the browser cookies you should create a new [APIRequestContext](https://playwright.dev/python/docs/api/class-apirequestcontext "APIRequestContext") by calling [api\_request.new\_context()](https://playwright.dev/python/docs/api/class-apirequest#api-request-new-context). Such `APIRequestContext` object will have its own isolated cookie storage.

- Sync
- Async

```codeBlockLines_e6Vv
import os
from playwright.sync_api import sync_playwright

REPO = "test-repo-1"
USER = "github-username"
API_TOKEN = os.getenv("GITHUB_API_TOKEN")

with sync_playwright() as p:
    # This will launch a new browser, create a context and page. When making HTTP
    # requests with the internal APIRequestContext (e.g. `context.request` or `page.request`)
    # it will automatically set the cookies to the browser page and vice versa.
    browser = p.chromium.launch()
    context = browser.new_context(base_url="https://api.github.com")
    api_request_context = context.request
    page = context.new_page()

    # Alternatively you can create a APIRequestContext manually without having a browser context attached:
    # api_request_context = p.request.new_context(base_url="https://api.github.com")

    # Create a repository.
    response = api_request_context.post(
        "/user/repos",
        headers={
            "Accept": "application/vnd.github.v3+json",
            # Add GitHub personal access token.
            "Authorization": f"token {API_TOKEN}",
        },
        data={"name": REPO},
    )
    assert response.ok
    assert response.json()["name"] == REPO

    # Delete a repository.
    response = api_request_context.delete(
        f"/repos/{USER}/{REPO}",
        headers={
            "Accept": "application/vnd.github.v3+json",
            # Add GitHub personal access token.
            "Authorization": f"token {API_TOKEN}",
        },
    )
    assert response.ok
    assert await response.body() == '{"status": "ok"}'

```

```codeBlockLines_e6Vv
import os
import asyncio
from playwright.async_api import async_playwright, Playwright

REPO = "test-repo-1"
USER = "github-username"
API_TOKEN = os.getenv("GITHUB_API_TOKEN")

async def run(playwright: Playwright):
    # This will launch a new browser, create a context and page. When making HTTP
    # requests with the internal APIRequestContext (e.g. `context.request` or `page.request`)
    # it will automatically set the cookies to the browser page and vice versa.
    browser = await playwright.chromium.launch()
    context = await browser.new_context(base_url="https://api.github.com")
    api_request_context = context.request
    page = await context.new_page()

    # Alternatively you can create a APIRequestContext manually without having a browser context attached:
    # api_request_context = await playwright.request.new_context(base_url="https://api.github.com")

    # Create a repository.
    response = await api_request_context.post(
        "/user/repos",
        headers={
            "Accept": "application/vnd.github.v3+json",
            # Add GitHub personal access token.
            "Authorization": f"token {API_TOKEN}",
        },
        data={"name": REPO},
    )
    assert response.ok
    assert response.json()["name"] == REPO

    # Delete a repository.
    response = await api_request_context.delete(
        f"/repos/{USER}/{REPO}",
        headers={
            "Accept": "application/vnd.github.v3+json",
            # Add GitHub personal access token.
            "Authorization": f"token {API_TOKEN}",
        },
    )
    assert response.ok
    assert await response.body() == '{"status": "ok"}'

async def main():
    async with async_playwright() as playwright:
        await run(playwright)

asyncio.run(main())

```

* * *

## Methods [​](https://playwright.dev/python/docs/api/class-apirequestcontext\#methods "Direct link to Methods")

### delete [​](https://playwright.dev/python/docs/api/class-apirequestcontext\#api-request-context-delete "Direct link to delete")

Added in: v1.16apiRequestContext.delete

Sends HTTP(S) [DELETE](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE) request and returns its response. The method will populate request cookies from the context and update context cookies from the response. The method will automatically follow redirects.

**Usage**

```codeBlockLines_e6Vv
api_request_context.delete(url)
api_request_context.delete(url, **kwargs)

```

**Arguments**

- `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-delete-option-url)

Target URL.

- `data` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ Added in: v1.17 [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-delete-option-data)

Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type` header will be set to `application/octet-stream` if not explicitly set.

- `fail_on_status_code` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-delete-option-fail-on-status-code)

Whether to throw on response codes other than 2xx and 3xx. By default response object is returned for all status codes.

- `form` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| [bool](https://docs.python.org/3/library/stdtypes.html "bool")\] _(optional)_ Added in: v1.17 [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-delete-option-form)

Provides an object that will be serialized as html form using `application/x-www-form-urlencoded` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `application/x-www-form-urlencoded` unless explicitly provided.

- `headers` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-delete-option-headers)

Allows to set HTTP headers. These headers will apply to the fetched request as well as any redirects initiated by it.

- `ignore_https_errors` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-delete-option-ignore-https-errors)

Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.

- `max_redirects` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ Added in: v1.26 [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-delete-option-max-redirects)

Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is exceeded. Defaults to `20`. Pass `0` to not follow redirects.

- `max_retries` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ Added in: v1.46 [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-delete-option-max-retries)

Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` \- no retries.

- `multipart` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| [bool](https://docs.python.org/3/library/stdtypes.html "bool") \| \[ReadStream\] \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\] _(optional)_ Added in: v1.17 [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-delete-option-multipart)


  - `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    File name

  - `mimeType` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    File type

  - `buffer` [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes")

    File content


Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless explicitly provided. File values can be passed as file-like object containing file name, mime-type and its content.

- `params` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| [bool](https://docs.python.org/3/library/stdtypes.html "bool")\] \| [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-delete-option-params)

Query parameters to be sent with the URL.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-delete-option-timeout)

Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.


**Returns**

- [APIResponse](https://playwright.dev/python/docs/api/class-apiresponse "APIResponse") [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-delete-return)

* * *

### dispose [​](https://playwright.dev/python/docs/api/class-apirequestcontext\#api-request-context-dispose "Direct link to dispose")

Added in: v1.16apiRequestContext.dispose

All responses returned by [api\_request\_context.get()](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-get) and similar methods are stored in the memory, so that you can later call [api\_response.body()](https://playwright.dev/python/docs/api/class-apiresponse#api-response-body).This method discards all its resources, calling any method on disposed [APIRequestContext](https://playwright.dev/python/docs/api/class-apirequestcontext "APIRequestContext") will throw an exception.

**Usage**

```codeBlockLines_e6Vv
api_request_context.dispose()
api_request_context.dispose(**kwargs)

```

**Arguments**

- `reason` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ Added in: v1.45 [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-dispose-option-reason)

The reason to be reported to the operations interrupted by the context disposal.


**Returns**

- [NoneType](https://docs.python.org/3/library/constants.html#None "None") [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-dispose-return)

* * *

### fetch [​](https://playwright.dev/python/docs/api/class-apirequestcontext\#api-request-context-fetch "Direct link to fetch")

Added in: v1.16apiRequestContext.fetch

Sends HTTP(S) request and returns its response. The method will populate request cookies from the context and update context cookies from the response. The method will automatically follow redirects.

**Usage**

JSON objects can be passed directly to the request:

```codeBlockLines_e6Vv
data = {
    "title": "Book Title",
    "body": "John Doe",
}
api_request_context.fetch("https://example.com/api/createBook", method="post", data=data)

```

The common way to send file(s) in the body of a request is to upload them as form fields with `multipart/form-data` encoding, by specifiying the `multipart` parameter:

```codeBlockLines_e6Vv
api_request_context.fetch(
  "https://example.com/api/uploadScript",  method="post",
  multipart={
    "fileField": {
      "name": "f.js",
      "mimeType": "text/javascript",
      "buffer": b"console.log(2022);",
    },
  })

```

**Arguments**

- `url_or_request` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [Request](https://playwright.dev/python/docs/api/class-request "Request") [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-fetch-option-url-or-request)

Target URL or Request to get all parameters from.

- `data` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-fetch-option-data)

Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type` header will be set to `application/octet-stream` if not explicitly set.

- `fail_on_status_code` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-fetch-option-fail-on-status-code)

Whether to throw on response codes other than 2xx and 3xx. By default response object is returned for all status codes.

- `form` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| [bool](https://docs.python.org/3/library/stdtypes.html "bool")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-fetch-option-form)

Provides an object that will be serialized as html form using `application/x-www-form-urlencoded` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `application/x-www-form-urlencoded` unless explicitly provided.

- `headers` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-fetch-option-headers)

Allows to set HTTP headers. These headers will apply to the fetched request as well as any redirects initiated by it.

- `ignore_https_errors` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-fetch-option-ignore-https-errors)

Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.

- `max_redirects` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ Added in: v1.26 [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-fetch-option-max-redirects)

Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is exceeded. Defaults to `20`. Pass `0` to not follow redirects.

- `max_retries` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ Added in: v1.46 [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-fetch-option-max-retries)

Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` \- no retries.

- `method` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-fetch-option-method)

If set changes the fetch method (e.g. [PUT](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PUT) or [POST](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST)). If not specified, GET method is used.

- `multipart` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| [bool](https://docs.python.org/3/library/stdtypes.html "bool") \| \[ReadStream\] \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-fetch-option-multipart)


  - `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    File name

  - `mimeType` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    File type

  - `buffer` [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes")

    File content


Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless explicitly provided. File values can be passed as file-like object containing file name, mime-type and its content.

- `params` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| [bool](https://docs.python.org/3/library/stdtypes.html "bool")\] \| [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-fetch-option-params)

Query parameters to be sent with the URL.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-fetch-option-timeout)

Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.


**Returns**

- [APIResponse](https://playwright.dev/python/docs/api/class-apiresponse "APIResponse") [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-fetch-return)

* * *

### get [​](https://playwright.dev/python/docs/api/class-apirequestcontext\#api-request-context-get "Direct link to get")

Added in: v1.16apiRequestContext.get

Sends HTTP(S) [GET](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET) request and returns its response. The method will populate request cookies from the context and update context cookies from the response. The method will automatically follow redirects.

**Usage**

Request parameters can be configured with `params` option, they will be serialized into the URL search parameters:

```codeBlockLines_e6Vv
query_params = {
  "isbn": "1234",
  "page": "23"
}
api_request_context.get("https://example.com/api/getText", params=query_params)

```

**Arguments**

- `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-get-option-url)

Target URL.

- `data` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ Added in: v1.26 [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-get-option-data)

Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type` header will be set to `application/octet-stream` if not explicitly set.

- `fail_on_status_code` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-get-option-fail-on-status-code)

Whether to throw on response codes other than 2xx and 3xx. By default response object is returned for all status codes.

- `form` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| [bool](https://docs.python.org/3/library/stdtypes.html "bool")\] _(optional)_ Added in: v1.26 [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-get-option-form)

Provides an object that will be serialized as html form using `application/x-www-form-urlencoded` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `application/x-www-form-urlencoded` unless explicitly provided.

- `headers` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-get-option-headers)

Allows to set HTTP headers. These headers will apply to the fetched request as well as any redirects initiated by it.

- `ignore_https_errors` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-get-option-ignore-https-errors)

Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.

- `max_redirects` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ Added in: v1.26 [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-get-option-max-redirects)

Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is exceeded. Defaults to `20`. Pass `0` to not follow redirects.

- `max_retries` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ Added in: v1.46 [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-get-option-max-retries)

Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` \- no retries.

- `multipart` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| [bool](https://docs.python.org/3/library/stdtypes.html "bool") \| \[ReadStream\] \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\] _(optional)_ Added in: v1.26 [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-get-option-multipart)


  - `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    File name

  - `mimeType` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    File type

  - `buffer` [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes")

    File content


Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless explicitly provided. File values can be passed as file-like object containing file name, mime-type and its content.

- `params` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| [bool](https://docs.python.org/3/library/stdtypes.html "bool")\] \| [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-get-option-params)

Query parameters to be sent with the URL.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-get-option-timeout)

Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.


**Returns**

- [APIResponse](https://playwright.dev/python/docs/api/class-apiresponse "APIResponse") [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-get-return)

* * *

### head [​](https://playwright.dev/python/docs/api/class-apirequestcontext\#api-request-context-head "Direct link to head")

Added in: v1.16apiRequestContext.head

Sends HTTP(S) [HEAD](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/HEAD) request and returns its response. The method will populate request cookies from the context and update context cookies from the response. The method will automatically follow redirects.

**Usage**

```codeBlockLines_e6Vv
api_request_context.head(url)
api_request_context.head(url, **kwargs)

```

**Arguments**

- `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-head-option-url)

Target URL.

- `data` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ Added in: v1.26 [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-head-option-data)

Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type` header will be set to `application/octet-stream` if not explicitly set.

- `fail_on_status_code` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-head-option-fail-on-status-code)

Whether to throw on response codes other than 2xx and 3xx. By default response object is returned for all status codes.

- `form` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| [bool](https://docs.python.org/3/library/stdtypes.html "bool")\] _(optional)_ Added in: v1.26 [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-head-option-form)

Provides an object that will be serialized as html form using `application/x-www-form-urlencoded` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `application/x-www-form-urlencoded` unless explicitly provided.

- `headers` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-head-option-headers)

Allows to set HTTP headers. These headers will apply to the fetched request as well as any redirects initiated by it.

- `ignore_https_errors` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-head-option-ignore-https-errors)

Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.

- `max_redirects` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ Added in: v1.26 [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-head-option-max-redirects)

Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is exceeded. Defaults to `20`. Pass `0` to not follow redirects.

- `max_retries` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ Added in: v1.46 [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-head-option-max-retries)

Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` \- no retries.

- `multipart` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| [bool](https://docs.python.org/3/library/stdtypes.html "bool") \| \[ReadStream\] \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\] _(optional)_ Added in: v1.26 [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-head-option-multipart)


  - `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    File name

  - `mimeType` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    File type

  - `buffer` [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes")

    File content


Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless explicitly provided. File values can be passed as file-like object containing file name, mime-type and its content.

- `params` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| [bool](https://docs.python.org/3/library/stdtypes.html "bool")\] \| [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-head-option-params)

Query parameters to be sent with the URL.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-head-option-timeout)

Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.


**Returns**

- [APIResponse](https://playwright.dev/python/docs/api/class-apiresponse "APIResponse") [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-head-return)

* * *

### patch [​](https://playwright.dev/python/docs/api/class-apirequestcontext\#api-request-context-patch "Direct link to patch")

Added in: v1.16apiRequestContext.patch

Sends HTTP(S) [PATCH](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH) request and returns its response. The method will populate request cookies from the context and update context cookies from the response. The method will automatically follow redirects.

**Usage**

```codeBlockLines_e6Vv
api_request_context.patch(url)
api_request_context.patch(url, **kwargs)

```

**Arguments**

- `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-patch-option-url)

Target URL.

- `data` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-patch-option-data)

Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type` header will be set to `application/octet-stream` if not explicitly set.

- `fail_on_status_code` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-patch-option-fail-on-status-code)

Whether to throw on response codes other than 2xx and 3xx. By default response object is returned for all status codes.

- `form` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| [bool](https://docs.python.org/3/library/stdtypes.html "bool")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-patch-option-form)

Provides an object that will be serialized as html form using `application/x-www-form-urlencoded` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `application/x-www-form-urlencoded` unless explicitly provided.

- `headers` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-patch-option-headers)

Allows to set HTTP headers. These headers will apply to the fetched request as well as any redirects initiated by it.

- `ignore_https_errors` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-patch-option-ignore-https-errors)

Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.

- `max_redirects` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ Added in: v1.26 [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-patch-option-max-redirects)

Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is exceeded. Defaults to `20`. Pass `0` to not follow redirects.

- `max_retries` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ Added in: v1.46 [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-patch-option-max-retries)

Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` \- no retries.

- `multipart` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| [bool](https://docs.python.org/3/library/stdtypes.html "bool") \| \[ReadStream\] \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-patch-option-multipart)


  - `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    File name

  - `mimeType` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    File type

  - `buffer` [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes")

    File content


Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless explicitly provided. File values can be passed as file-like object containing file name, mime-type and its content.

- `params` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| [bool](https://docs.python.org/3/library/stdtypes.html "bool")\] \| [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-patch-option-params)

Query parameters to be sent with the URL.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-patch-option-timeout)

Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.


**Returns**

- [APIResponse](https://playwright.dev/python/docs/api/class-apiresponse "APIResponse") [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-patch-return)

* * *

### post [​](https://playwright.dev/python/docs/api/class-apirequestcontext\#api-request-context-post "Direct link to post")

Added in: v1.16apiRequestContext.post

Sends HTTP(S) [POST](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) request and returns its response. The method will populate request cookies from the context and update context cookies from the response. The method will automatically follow redirects.

**Usage**

JSON objects can be passed directly to the request:

```codeBlockLines_e6Vv
data = {
    "title": "Book Title",
    "body": "John Doe",
}
api_request_context.post("https://example.com/api/createBook", data=data)

```

To send form data to the server use `form` option. Its value will be encoded into the request body with `application/x-www-form-urlencoded` encoding (see below how to use `multipart/form-data` form encoding to send files):

```codeBlockLines_e6Vv
formData = {
    "title": "Book Title",
    "body": "John Doe",
}
api_request_context.post("https://example.com/api/findBook", form=formData)

```

The common way to send file(s) in the body of a request is to upload them as form fields with `multipart/form-data` encoding. Use \[FormData\] to construct request body and pass it to the request as `multipart` parameter:

```codeBlockLines_e6Vv
api_request_context.post(
  "https://example.com/api/uploadScript'",
  multipart={
    "fileField": {
      "name": "f.js",
      "mimeType": "text/javascript",
      "buffer": b"console.log(2022);",
    },
  })

```

**Arguments**

- `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-post-option-url)

Target URL.

- `data` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-post-option-data)

Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type` header will be set to `application/octet-stream` if not explicitly set.

- `fail_on_status_code` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-post-option-fail-on-status-code)

Whether to throw on response codes other than 2xx and 3xx. By default response object is returned for all status codes.

- `form` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| [bool](https://docs.python.org/3/library/stdtypes.html "bool")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-post-option-form)

Provides an object that will be serialized as html form using `application/x-www-form-urlencoded` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `application/x-www-form-urlencoded` unless explicitly provided.

- `headers` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-post-option-headers)

Allows to set HTTP headers. These headers will apply to the fetched request as well as any redirects initiated by it.

- `ignore_https_errors` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-post-option-ignore-https-errors)

Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.

- `max_redirects` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ Added in: v1.26 [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-post-option-max-redirects)

Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is exceeded. Defaults to `20`. Pass `0` to not follow redirects.

- `max_retries` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ Added in: v1.46 [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-post-option-max-retries)

Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` \- no retries.

- `multipart` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| [bool](https://docs.python.org/3/library/stdtypes.html "bool") \| \[ReadStream\] \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-post-option-multipart)


  - `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    File name

  - `mimeType` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    File type

  - `buffer` [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes")

    File content


Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless explicitly provided. File values can be passed as file-like object containing file name, mime-type and its content.

- `params` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| [bool](https://docs.python.org/3/library/stdtypes.html "bool")\] \| [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-post-option-params)

Query parameters to be sent with the URL.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-post-option-timeout)

Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.


**Returns**

- [APIResponse](https://playwright.dev/python/docs/api/class-apiresponse "APIResponse") [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-post-return)

* * *

### put [​](https://playwright.dev/python/docs/api/class-apirequestcontext\#api-request-context-put "Direct link to put")

Added in: v1.16apiRequestContext.put

Sends HTTP(S) [PUT](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PUT) request and returns its response. The method will populate request cookies from the context and update context cookies from the response. The method will automatically follow redirects.

**Usage**

```codeBlockLines_e6Vv
api_request_context.put(url)
api_request_context.put(url, **kwargs)

```

**Arguments**

- `url` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-put-option-url)

Target URL.

- `data` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-put-option-data)

Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type` header will be set to `application/octet-stream` if not explicitly set.

- `fail_on_status_code` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-put-option-fail-on-status-code)

Whether to throw on response codes other than 2xx and 3xx. By default response object is returned for all status codes.

- `form` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| [bool](https://docs.python.org/3/library/stdtypes.html "bool")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-put-option-form)

Provides an object that will be serialized as html form using `application/x-www-form-urlencoded` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `application/x-www-form-urlencoded` unless explicitly provided.

- `headers` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-put-option-headers)

Allows to set HTTP headers. These headers will apply to the fetched request as well as any redirects initiated by it.

- `ignore_https_errors` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-put-option-ignore-https-errors)

Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.

- `max_redirects` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ Added in: v1.26 [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-put-option-max-redirects)

Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is exceeded. Defaults to `20`. Pass `0` to not follow redirects.

- `max_retries` [int](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "int") _(optional)_ Added in: v1.46 [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-put-option-max-retries)

Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` \- no retries.

- `multipart` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| [bool](https://docs.python.org/3/library/stdtypes.html "bool") \| \[ReadStream\] \| [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-put-option-multipart)


  - `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    File name

  - `mimeType` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    File type

  - `buffer` [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes")

    File content


Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless explicitly provided. File values can be passed as file-like object containing file name, mime-type and its content.

- `params` [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") \| [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") \| [bool](https://docs.python.org/3/library/stdtypes.html "bool")\] \| [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-put-option-params)

Query parameters to be sent with the URL.

- `timeout` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float") _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-put-option-timeout)

Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.


**Returns**

- [APIResponse](https://playwright.dev/python/docs/api/class-apiresponse "APIResponse") [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-put-return)

* * *

### storage\_state [​](https://playwright.dev/python/docs/api/class-apirequestcontext\#api-request-context-storage-state "Direct link to storage_state")

Added in: v1.16apiRequestContext.storage\_state

Returns storage state for this request context, contains current cookies and local storage snapshot if it was passed to the constructor.

**Usage**

```codeBlockLines_e6Vv
api_request_context.storage_state()
api_request_context.storage_state(**kwargs)

```

**Arguments**

- `indexed_db` [bool](https://docs.python.org/3/library/stdtypes.html "bool") _(optional)_ Added in: v1.51 [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-storage-state-option-indexed-db)

Set to `true` to include IndexedDB in the storage state snapshot.

- `path` [Union](https://docs.python.org/3/library/typing.html#typing.Union "Union")\[ [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str"), [pathlib.Path](https://realpython.com/python-pathlib/ "pathlib.Path")\] _(optional)_ [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-storage-state-option-path)

The file path to save the storage state to. If [path](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-storage-state-option-path) is a relative path, then it is resolved relative to current working directory. If no path is provided, storage state is still returned, but won't be saved to the disk.


**Returns**

- [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict") [#](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-storage-state-return)
  - `cookies` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\]
    - `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    - `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    - `domain` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    - `path` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    - `expires` [float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex "float")

      Unix time in seconds.

    - `httpOnly` [bool](https://docs.python.org/3/library/stdtypes.html "bool")

    - `secure` [bool](https://docs.python.org/3/library/stdtypes.html "bool")

    - `sameSite` "Strict" \| "Lax" \| "None"
  - `origins` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\]
    - `origin` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

    - `localStorage` [List](https://docs.python.org/3/library/typing.html#typing.List "List")\[ [Dict](https://docs.python.org/3/library/typing.html#typing.Dict "Dict")\]
      - `name` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

      - `value` [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "str")

- [Methods](https://playwright.dev/python/docs/api/class-apirequestcontext#methods)
  - [delete](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-delete)
  - [dispose](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-dispose)
  - [fetch](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-fetch)
  - [get](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-get)
  - [head](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-head)
  - [patch](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-patch)
  - [post](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-post)
  - [put](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-put)
  - [storage\_state](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-storage-state)

## Playwright Navigation Guide
[Skip to main content](https://playwright.dev/python/docs/navigations#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/navigations\#introduction "Direct link to Introduction")

Playwright can navigate to URLs and handle navigations caused by the page interactions.

## Basic navigation [​](https://playwright.dev/python/docs/navigations\#basic-navigation "Direct link to Basic navigation")

Simplest form of a navigation is opening a URL:

- Sync
- Async

```codeBlockLines_e6Vv
# Navigate the page
page.goto("https://example.com")

```

```codeBlockLines_e6Vv
# Navigate the page
await page.goto("https://example.com")

```

The code above loads the page and waits for the web page to fire the [load](https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event) event. The load event is fired when the whole page has loaded, including all dependent resources such as stylesheets, scripts, iframes, and images.

note

If the page does a client-side redirect before `load`, [page.goto()](https://playwright.dev/python/docs/api/class-page#page-goto) will wait for the redirected page to fire the `load` event.

## When is the page loaded? [​](https://playwright.dev/python/docs/navigations\#when-is-the-page-loaded "Direct link to When is the page loaded?")

Modern pages perform numerous activities after the `load` event was fired. They fetch data lazily, populate UI, load expensive resources, scripts and styles after the `load` event was fired. There is no way to tell that the page is `loaded`, it depends on the page, framework, etc. So when can you start interacting with it?

In Playwright you can interact with the page at any moment. It will automatically wait for the target elements to become [actionable](https://playwright.dev/python/docs/actionability).

- Sync
- Async

```codeBlockLines_e6Vv
# Navigate and click element
# Click will auto-wait for the element
page.goto("https://example.com")
page.get_by_text("example domain").click()

```

```codeBlockLines_e6Vv
# Navigate and click element
# Click will auto-wait for the element
await page.goto("https://example.com")
await page.get_by_text("example domain").click()

```

For the scenario above, Playwright will wait for the text to become visible, will wait for the rest of the actionability checks to pass for that element, and will click it.

Playwright operates as a very fast user - the moment it sees the button, it clicks it. In the general case, you don't need to worry about whether all the resources loaded, etc.

## Hydration [​](https://playwright.dev/python/docs/navigations\#hydration "Direct link to Hydration")

At some point in time, you'll stumble upon a use case where Playwright performs an action, but nothing seemingly happens. Or you enter some text into the input field and it will disappear. The most probable reason behind that is a poor page [hydration](https://en.wikipedia.org/wiki/Hydration_(web_development)).

When page is hydrated, first, a static version of the page is sent to the browser. Then the dynamic part is sent and the page becomes "live". As a very fast user, Playwright will start interacting with the page the moment it sees it. And if the button on a page is enabled, but the listeners have not yet been added, Playwright will do its job, but the click won't have any effect.

A simple way to verify if your page suffers from a poor hydration is to open Chrome DevTools, pick "Slow 3G" network emulation in the Network panel and reload the page. Once you see the element of interest, interact with it. You'll see that the button clicks will be ignored and the entered text will be reset by the subsequent page load code. The right fix for this issue is to make sure that all the interactive controls are disabled until after the hydration, when the page is fully functional.

## Waiting for navigation [​](https://playwright.dev/python/docs/navigations\#waiting-for-navigation "Direct link to Waiting for navigation")

Clicking an element could trigger multiple navigations. In these cases, it is recommended to explicitly [page.wait\_for\_url()](https://playwright.dev/python/docs/api/class-page#page-wait-for-url) to a specific url.

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_text("Click me").click()
page.wait_for_url("**/login")

```

```codeBlockLines_e6Vv
await page.get_by_text("Click me").click()
await page.wait_for_url("**/login")

```

## Navigation events [​](https://playwright.dev/python/docs/navigations\#navigation-events "Direct link to Navigation events")

Playwright splits the process of showing a new document in a page into **navigation** and **loading**.

**Navigation starts** by changing the page URL or by interacting with the page (e.g., clicking a link). The navigation intent may be canceled, for example, on hitting an unresolved DNS address or transformed into a file download.

**Navigation is committed** when the response headers have been parsed and session history is updated. Only after the navigation succeeds (is committed), the page starts **loading** the document.

**Loading** covers getting the remaining response body over the network, parsing, executing the scripts and firing load events:

- [page.url](https://playwright.dev/python/docs/api/class-page#page-url) is set to the new url
- document content is loaded over network and parsed
- [page.on("domcontentloaded")](https://playwright.dev/python/docs/api/class-page#page-event-dom-content-loaded) event is fired
- page executes some scripts and loads resources like stylesheets and images
- [page.on("load")](https://playwright.dev/python/docs/api/class-page#page-event-load) event is fired
- page executes dynamically loaded scripts

- [Introduction](https://playwright.dev/python/docs/navigations#introduction)
- [Basic navigation](https://playwright.dev/python/docs/navigations#basic-navigation)
- [When is the page loaded?](https://playwright.dev/python/docs/navigations#when-is-the-page-loaded)
- [Hydration](https://playwright.dev/python/docs/navigations#hydration)
- [Waiting for navigation](https://playwright.dev/python/docs/navigations#waiting-for-navigation)
- [Navigation events](https://playwright.dev/python/docs/navigations#navigation-events)

## Evaluating Scripts in Playwright
[Skip to main content](https://playwright.dev/python/docs/evaluating#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/evaluating\#introduction "Direct link to Introduction")

Playwright scripts run in your Playwright environment. Your page scripts run in the browser page environment. Those environments don't intersect, they are running in different virtual machines in different processes and even potentially on different computers.

The [page.evaluate()](https://playwright.dev/python/docs/api/class-page#page-evaluate) API can run a JavaScript function in the context of the web page and bring results back to the Playwright environment. Browser globals like `window` and `document` can be used in `evaluate`.

- Sync
- Async

```codeBlockLines_e6Vv
href = page.evaluate('() => document.location.href')

```

```codeBlockLines_e6Vv
href = await page.evaluate('() => document.location.href')

```

If the result is a Promise or if the function is asynchronous evaluate will automatically wait until it's resolved:

- Sync
- Async

```codeBlockLines_e6Vv
status = page.evaluate("""async () => {
  response = await fetch(location.href)
  return response.status
}""")

```

```codeBlockLines_e6Vv
status = await page.evaluate("""async () => {
  response = await fetch(location.href)
  return response.status
}""")

```

## Different environments [​](https://playwright.dev/python/docs/evaluating\#different-environments "Direct link to Different environments")

Evaluated scripts run in the browser environment, while your test runs in a testing environments. This means you cannot use variables from your test in the page and vice versa. Instead, you should pass them explicitly as an argument.

The following snippet is **WRONG** because it uses the variable directly:

- Sync
- Async

```codeBlockLines_e6Vv
data = "some data"
result = page.evaluate("""() => {
  // WRONG: there is no "data" in the web page.
  window.myApp.use(data)
}""")

```

```codeBlockLines_e6Vv
data = "some data"
result = await page.evaluate("""() => {
  // WRONG: there is no "data" in the web page.
  window.myApp.use(data)
}""")

```

The following snippet is **CORRECT** because it passes the value explicitly as an argument:

- Sync
- Async

```codeBlockLines_e6Vv
data = "some data"
# Pass |data| as a parameter.
result = page.evaluate("""data => {
  window.myApp.use(data)
}""", data)

```

```codeBlockLines_e6Vv
data = "some data"
# Pass |data| as a parameter.
result = await page.evaluate("""data => {
  window.myApp.use(data)
}""", data)

```

## Evaluation Argument [​](https://playwright.dev/python/docs/evaluating\#evaluation-argument "Direct link to Evaluation Argument")

Playwright evaluation methods like [page.evaluate()](https://playwright.dev/python/docs/api/class-page#page-evaluate) take a single optional argument. This argument can be a mix of [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable") values and [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle") instances. Handles are automatically converted to the value they represent.

- Sync
- Async

```codeBlockLines_e6Vv
# A primitive value.
page.evaluate('num => num', 42)

# An array.
page.evaluate('array => array.length', [1, 2, 3])

# An object.
page.evaluate('object => object.foo', { 'foo': 'bar' })

# A single handle.
button = page.evaluate_handle('window.button')
page.evaluate('button => button.textContent', button)

# Alternative notation using JSHandle.evaluate.
button.evaluate('(button, from) => button.textContent.substring(from)', 5)

# Object with multiple handles.
button1 = page.evaluate_handle('window.button1')
button2 = page.evaluate_handle('.button2')
page.evaluate("""o => o.button1.textContent + o.button2.textContent""",
    { 'button1': button1, 'button2': button2 })

# Object destructuring works. Note that property names must match
# between the destructured object and the argument.
# Also note the required parenthesis.
page.evaluate("""
    ({ button1, button2 }) => button1.textContent + button2.textContent""",
    { 'button1': button1, 'button2': button2 })

# Array works as well. Arbitrary names can be used for destructuring.
# Note the required parenthesis.
page.evaluate("""
    ([b1, b2]) => b1.textContent + b2.textContent""",
    [button1, button2])

# Any mix of serializables and handles works.
page.evaluate("""
    x => x.button1.textContent + x.list[0].textContent + String(x.foo)""",
    { 'button1': button1, 'list': [button2], 'foo': None })

```

```codeBlockLines_e6Vv
# A primitive value.
await page.evaluate('num => num', 42)

# An array.
await page.evaluate('array => array.length', [1, 2, 3])

# An object.
await page.evaluate('object => object.foo', { 'foo': 'bar' })

# A single handle.
button = await page.evaluate_handle('button')
await page.evaluate('button => button.textContent', button)

# Alternative notation using JSHandle.evaluate.
await button.evaluate('(button, from) => button.textContent.substring(from)', 5)

# Object with multiple handles.
button1 = await page.evaluate_handle('window.button1')
button2 = await page.evaluate_handle('window.button2')
await page.evaluate("""
    o => o.button1.textContent + o.button2.textContent""",
    { 'button1': button1, 'button2': button2 })

# Object destructuring works. Note that property names must match
# between the destructured object and the argument.
# Also note the required parenthesis.
await page.evaluate("""
    ({ button1, button2 }) => button1.textContent + button2.textContent""",
    { 'button1': button1, 'button2': button2 })

# Array works as well. Arbitrary names can be used for destructuring.
# Note the required parenthesis.
await page.evaluate("""
    ([b1, b2]) => b1.textContent + b2.textContent""",
    [button1, button2])

# Any mix of serializables and handles works.
await page.evaluate("""
    x => x.button1.textContent + x.list[0].textContent + String(x.foo)""",
    { 'button1': button1, 'list': [button2], 'foo': None })

```

## Init scripts [​](https://playwright.dev/python/docs/evaluating\#init-scripts "Direct link to Init scripts")

Sometimes it is convenient to evaluate something in the page before it starts loading. For example, you might want to setup some mocks or test data.

In this case, use [page.add\_init\_script()](https://playwright.dev/python/docs/api/class-page#page-add-init-script) or [browser\_context.add\_init\_script()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-add-init-script). In the example below, we will replace `Math.random()` with a constant value.

First, create a `preload.js` file that contains the mock.

```codeBlockLines_e6Vv
// preload.js
Math.random = () => 42;

```

Next, add init script to the page.

- Sync
- Async

```codeBlockLines_e6Vv
# In your test, assuming the "preload.js" file is in the "mocks" directory.
page.add_init_script(path="mocks/preload.js")

```

```codeBlockLines_e6Vv
# In your test, assuming the "preload.js" file is in the "mocks" directory.
await page.add_init_script(path="mocks/preload.js")

```

- [Introduction](https://playwright.dev/python/docs/evaluating#introduction)
- [Different environments](https://playwright.dev/python/docs/evaluating#different-environments)
- [Evaluation Argument](https://playwright.dev/python/docs/evaluating#evaluation-argument)
- [Init scripts](https://playwright.dev/python/docs/evaluating#init-scripts)

## Playwright Dialogs Guide
[Skip to main content](https://playwright.dev/python/docs/dialogs#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/dialogs\#introduction "Direct link to Introduction")

Playwright can interact with the web page dialogs such as [`alert`](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert), [`confirm`](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm), [`prompt`](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt) as well as [`beforeunload`](https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event) confirmation. For print dialogs, see [Print](https://playwright.dev/python/docs/dialogs#print-dialogs).

## alert(), confirm(), prompt() dialogs [​](https://playwright.dev/python/docs/dialogs\#alert-confirm-prompt-dialogs "Direct link to alert(), confirm(), prompt() dialogs")

By default, dialogs are auto-dismissed by Playwright, so you don't have to handle them. However, you can register a dialog handler before the action that triggers the dialog to either [dialog.accept()](https://playwright.dev/python/docs/api/class-dialog#dialog-accept) or [dialog.dismiss()](https://playwright.dev/python/docs/api/class-dialog#dialog-dismiss) it.

- Sync
- Async

```codeBlockLines_e6Vv
page.on("dialog", lambda dialog: dialog.accept())
page.get_by_role("button").click()

```

```codeBlockLines_e6Vv
page.on("dialog", lambda dialog: dialog.accept())
await page.get_by_role("button".click())

```

note

[page.on("dialog")](https://playwright.dev/python/docs/api/class-page#page-event-dialog) listener **must handle** the dialog. Otherwise your action will stall, be it [locator.click()](https://playwright.dev/python/docs/api/class-locator#locator-click) or something else. That's because dialogs in Web are modals and therefore block further page execution until they are handled.

As a result, the following snippet will never resolve:

warning

WRONG!

- Sync
- Async

```codeBlockLines_e6Vv
page.on("dialog", lambda dialog: print(dialog.message))
page.get_by_role("button").click() # Will hang here

```

```codeBlockLines_e6Vv
page.on("dialog", lambda dialog: print(dialog.message))
await page.get_by_role("button").click() # Will hang here

```

note

If there is no listener for [page.on("dialog")](https://playwright.dev/python/docs/api/class-page#page-event-dialog), all dialogs are automatically dismissed.

## beforeunload dialog [​](https://playwright.dev/python/docs/dialogs\#beforeunload-dialog "Direct link to beforeunload dialog")

When [page.close()](https://playwright.dev/python/docs/api/class-page#page-close) is invoked with the truthy [run\_before\_unload](https://playwright.dev/python/docs/api/class-page#page-close-option-run-before-unload) value, the page runs its unload handlers. This is the only case when [page.close()](https://playwright.dev/python/docs/api/class-page#page-close) does not wait for the page to actually close, because it might be that the page stays open in the end of the operation.

You can register a dialog handler to handle the `beforeunload` dialog yourself:

- Sync
- Async

```codeBlockLines_e6Vv
def handle_dialog(dialog):
    assert dialog.type == 'beforeunload'
    dialog.dismiss()

page.on('dialog', lambda: handle_dialog)
page.close(run_before_unload=True)

```

```codeBlockLines_e6Vv
async def handle_dialog(dialog):
    assert dialog.type == 'beforeunload'
    await dialog.dismiss()

page.on('dialog', lambda: handle_dialog)
await page.close(run_before_unload=True)

```

## Print dialogs [​](https://playwright.dev/python/docs/dialogs\#print-dialogs "Direct link to Print dialogs")

In order to assert that a print dialog via [`window.print`](https://developer.mozilla.org/en-US/docs/Web/API/Window/print) was triggered, you can use the following snippet:

- Sync
- Async

```codeBlockLines_e6Vv
page.goto("<url>")

page.evaluate("(() => {window.waitForPrintDialog = new Promise(f => window.print = f);})()")
page.get_by_text("Print it!").click()

page.wait_for_function("window.waitForPrintDialog")

```

```codeBlockLines_e6Vv
await page.goto("<url>")

await page.evaluate("(() => {window.waitForPrintDialog = new Promise(f => window.print = f);})()")
await page.get_by_text("Print it!").click()

await page.wait_for_function("window.waitForPrintDialog")

```

This will wait for the print dialog to be opened after the button is clicked. Make sure to evaluate the script before clicking the button / after the page is loaded.

- [Introduction](https://playwright.dev/python/docs/dialogs#introduction)
- [alert(), confirm(), prompt() dialogs](https://playwright.dev/python/docs/dialogs#alert-confirm-prompt-dialogs)
- [beforeunload dialog](https://playwright.dev/python/docs/dialogs#beforeunload-dialog)
- [Print dialogs](https://playwright.dev/python/docs/dialogs#print-dialogs)

## Playwright Pages Guide
[Skip to main content](https://playwright.dev/python/docs/pages#__docusaurus_skipToContent_fallback)

On this page

## Pages [​](https://playwright.dev/python/docs/pages\#pages "Direct link to Pages")

Each [BrowserContext](https://playwright.dev/python/docs/api/class-browsercontext "BrowserContext") can have multiple pages. A [Page](https://playwright.dev/python/docs/api/class-page "Page") refers to a single tab or a popup window within a browser context. It should be used to navigate to URLs and interact with the page content.

- Sync
- Async

```codeBlockLines_e6Vv
page = context.new_page()

# Navigate explicitly, similar to entering a URL in the browser.
page.goto('http://example.com')
# Fill an input.
page.locator('#search').fill('query')

# Navigate implicitly by clicking a link.
page.locator('#submit').click()
# Expect a new url.
print(page.url)

```

```codeBlockLines_e6Vv
page = await context.new_page()

# Navigate explicitly, similar to entering a URL in the browser.
await page.goto('http://example.com')
# Fill an input.
await page.locator('#search').fill('query')

# Navigate implicitly by clicking a link.
await page.locator('#submit').click()
# Expect a new url.
print(page.url)

```

## Multiple pages [​](https://playwright.dev/python/docs/pages\#multiple-pages "Direct link to Multiple pages")

Each browser context can host multiple pages (tabs).

- Each page behaves like a focused, active page. Bringing the page to front is not required.
- Pages inside a context respect context-level emulation, like viewport sizes, custom network routes or browser locale.

- Sync
- Async

```codeBlockLines_e6Vv
# create two pages
page_one = context.new_page()
page_two = context.new_page()

# get pages of a browser context
all_pages = context.pages

```

```codeBlockLines_e6Vv
# create two pages
page_one = await context.new_page()
page_two = await context.new_page()

# get pages of a browser context
all_pages = context.pages

```

## Handling new pages [​](https://playwright.dev/python/docs/pages\#handling-new-pages "Direct link to Handling new pages")

The `page` event on browser contexts can be used to get new pages that are created in the context. This can be used to handle new pages opened by `target="_blank"` links.

- Sync
- Async

```codeBlockLines_e6Vv
# Get page after a specific action (e.g. clicking a link)
with context.expect_page() as new_page_info:
    page.get_by_text("open new tab").click() # Opens a new tab
new_page = new_page_info.value

# Interact with the new page normally
new_page.get_by_role("button").click()
print(new_page.title())

```

```codeBlockLines_e6Vv
# Get page after a specific action (e.g. clicking a link)
async with context.expect_page() as new_page_info:
    await page.get_by_text("open new tab").click() # Opens a new tab
new_page = await new_page_info.value

# Interact with the new page normally
await new_page.get_by_role("button").click()
print(await new_page.title())

```

If the action that triggers the new page is unknown, the following pattern can be used.

- Sync
- Async

```codeBlockLines_e6Vv
# Get all new pages (including popups) in the context
def handle_page(page):
    page.wait_for_load_state()
    print(page.title())

context.on("page", handle_page)

```

```codeBlockLines_e6Vv
# Get all new pages (including popups) in the context
async def handle_page(page):
    await page.wait_for_load_state()
    print(await page.title())

context.on("page", handle_page)

```

## Handling popups [​](https://playwright.dev/python/docs/pages\#handling-popups "Direct link to Handling popups")

If the page opens a pop-up (e.g. pages opened by `target="_blank"` links), you can get a reference to it by listening to the `popup` event on the page.

This event is emitted in addition to the `browserContext.on('page')` event, but only for popups relevant to this page.

- Sync
- Async

```codeBlockLines_e6Vv
# Get popup after a specific action (e.g., click)
with page.expect_popup() as popup_info:
    page.get_by_text("open the popup").click()
popup = popup_info.value

# Interact with the popup normally
popup.get_by_role("button").click()
print(popup.title())

```

```codeBlockLines_e6Vv
# Get popup after a specific action (e.g., click)
async with page.expect_popup() as popup_info:
    await page.get_by_text("open the popup").click()
popup = await popup_info.value

# Interact with the popup normally
await popup.get_by_role("button").click()
print(await popup.title())

```

If the action that triggers the popup is unknown, the following pattern can be used.

- Sync
- Async

```codeBlockLines_e6Vv
# Get all popups when they open
def handle_popup(popup):
    popup.wait_for_load_state()
    print(popup.title())

page.on("popup", handle_popup)

```

```codeBlockLines_e6Vv
# Get all popups when they open
async def handle_popup(popup):
    await popup.wait_for_load_state()
    print(await popup.title())

page.on("popup", handle_popup)

```

- [Pages](https://playwright.dev/python/docs/pages#pages)
- [Multiple pages](https://playwright.dev/python/docs/pages#multiple-pages)
- [Handling new pages](https://playwright.dev/python/docs/pages#handling-new-pages)
- [Handling popups](https://playwright.dev/python/docs/pages#handling-popups)

## Playwright Python Library
[Skip to main content](https://playwright.dev/python/docs/library#__docusaurus_skipToContent_fallback)

On this page

## Installation [​](https://playwright.dev/python/docs/library\#installation "Direct link to Installation")

### Pip [​](https://playwright.dev/python/docs/library\#pip "Direct link to Pip")

[![PyPI version](https://badge.fury.io/py/playwright.svg)](https://pypi.python.org/pypi/playwright/)

```codeBlockLines_e6Vv
pip install --upgrade pip
pip install playwright
playwright install

```

### Conda [​](https://playwright.dev/python/docs/library\#conda "Direct link to Conda")

[![Anaconda version](https://img.shields.io/conda/v/microsoft/playwright)](https://anaconda.org/Microsoft/playwright)

```codeBlockLines_e6Vv
conda config --add channels conda-forge
conda config --add channels microsoft
conda install playwright
playwright install

```

These commands download the Playwright package and install browser binaries for Chromium, Firefox and WebKit. To modify this behavior see [installation parameters](https://playwright.dev/python/docs/browsers#install-browsers).

## Usage [​](https://playwright.dev/python/docs/library\#usage "Direct link to Usage")

Once installed, you can `import` Playwright in a Python script, and launch any of the 3 browsers ( `chromium`, `firefox` and `webkit`).

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright

with sync_playwright() as p:
    browser = p.chromium.launch()
    page = browser.new_page()
    page.goto("http://playwright.dev")
    print(page.title())
    browser.close()

```

Playwright supports two variations of the API: synchronous and asynchronous. If your modern project uses [asyncio](https://docs.python.org/3/library/asyncio.html), you should use async API:

```codeBlockLines_e6Vv
import asyncio
from playwright.async_api import async_playwright

async def main():
    async with async_playwright() as p:
        browser = await p.chromium.launch()
        page = await browser.new_page()
        await page.goto("http://playwright.dev")
        print(await page.title())
        await browser.close()

asyncio.run(main())

```

## First script [​](https://playwright.dev/python/docs/library\#first-script "Direct link to First script")

In our first script, we will navigate to `https://playwright.dev/` and take a screenshot in WebKit.

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright

with sync_playwright() as p:
    browser = p.webkit.launch()
    page = browser.new_page()
    page.goto("https://playwright.dev/")
    page.screenshot(path="example.png")
    browser.close()

```

By default, Playwright runs the browsers in headless mode. To see the browser UI, set [headless](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-headless) option to `False`. You can also use [slow\_mo](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-slow-mo) to slow down execution. Learn more in the debugging tools [section](https://playwright.dev/python/docs/debug).

```codeBlockLines_e6Vv
firefox.launch(headless=False, slow_mo=50)

```

## Interactive mode (REPL) [​](https://playwright.dev/python/docs/library\#interactive-mode-repl "Direct link to Interactive mode (REPL)")

You can launch the interactive python REPL:

```codeBlockLines_e6Vv
python

```

and then launch Playwright within it for quick experimentation:

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright
playwright = sync_playwright().start()
# Use playwright.chromium, playwright.firefox or playwright.webkit
# Pass headless=False to launch() to see the browser UI
browser = playwright.chromium.launch()
page = browser.new_page()
page.goto("https://playwright.dev/")
page.screenshot(path="example.png")
browser.close()
playwright.stop()

```

Async REPL such as `asyncio` REPL:

```codeBlockLines_e6Vv
python -m asyncio

```

```codeBlockLines_e6Vv
from playwright.async_api import async_playwright
playwright = await async_playwright().start()
browser = await playwright.chromium.launch()
page = await browser.new_page()
await page.goto("https://playwright.dev/")
await page.screenshot(path="example.png")
await browser.close()
await playwright.stop()

```

## Pyinstaller [​](https://playwright.dev/python/docs/library\#pyinstaller "Direct link to Pyinstaller")

You can use Playwright with [Pyinstaller](https://www.pyinstaller.org/) to create standalone executables.

main.py

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright

with sync_playwright() as p:
    browser = p.chromium.launch()
    page = browser.new_page()
    page.goto("https://playwright.dev/")
    page.screenshot(path="example.png")
    browser.close()

```

If you want to bundle browsers with the executables:

- Bash
- PowerShell
- Batch

```codeBlockLines_e6Vv
PLAYWRIGHT_BROWSERS_PATH=0 playwright install chromium
pyinstaller -F main.py

```

```codeBlockLines_e6Vv
$env:PLAYWRIGHT_BROWSERS_PATH="0"
playwright install chromium
pyinstaller -F main.py

```

```codeBlockLines_e6Vv
set PLAYWRIGHT_BROWSERS_PATH=0
playwright install chromium
pyinstaller -F main.py

```

note

Bundling the browsers with the executables will generate bigger binaries. It is recommended to only bundle the browsers you use.

## Known issues [​](https://playwright.dev/python/docs/library\#known-issues "Direct link to Known issues")

### `time.sleep()` leads to outdated state [​](https://playwright.dev/python/docs/library\#timesleep-leads-to-outdated-state "Direct link to timesleep-leads-to-outdated-state")

Most likely you don't need to wait manually, since Playwright has [auto-waiting](https://playwright.dev/python/docs/actionability). If you still rely on it, you should use `page.wait_for_timeout(5000)` instead of `time.sleep(5)` and it is better to not wait for a timeout at all, but sometimes it is useful for debugging. In these cases, use our wait ( `wait_for_timeout`) method instead of the `time` module. This is because we internally rely on asynchronous operations and when using `time.sleep(5)` they can't get processed correctly.

### incompatible with `SelectorEventLoop` of `asyncio` on Windows [​](https://playwright.dev/python/docs/library\#incompatible-with-selectoreventloop-of-asyncio-on-windows "Direct link to incompatible-with-selectoreventloop-of-asyncio-on-windows")

Playwright runs the driver in a subprocess, so it requires `ProactorEventLoop` of `asyncio` on Windows because `SelectorEventLoop` does not supports async subprocesses.

On Windows Python 3.7, Playwright sets the default event loop to `ProactorEventLoop` as it is default on Python 3.8+.

### Threading [​](https://playwright.dev/python/docs/library\#threading "Direct link to Threading")

Playwright's API is not thread-safe. If you are using Playwright in a multi-threaded environment, you should create a playwright instance per thread. See [threading issue](https://github.com/microsoft/playwright-python/issues/623) for more details.

- [Installation](https://playwright.dev/python/docs/library#installation)
  - [Pip](https://playwright.dev/python/docs/library#pip)
  - [Conda](https://playwright.dev/python/docs/library#conda)
- [Usage](https://playwright.dev/python/docs/library#usage)
- [First script](https://playwright.dev/python/docs/library#first-script)
- [Interactive mode (REPL)](https://playwright.dev/python/docs/library#interactive-mode-repl)
- [Pyinstaller](https://playwright.dev/python/docs/library#pyinstaller)
- [Known issues](https://playwright.dev/python/docs/library#known-issues)
  - [`time.sleep()` leads to outdated state](https://playwright.dev/python/docs/library#timesleep-leads-to-outdated-state)
  - [incompatible with `SelectorEventLoop` of `asyncio` on Windows](https://playwright.dev/python/docs/library#incompatible-with-selectoreventloop-of-asyncio-on-windows)
  - [Threading](https://playwright.dev/python/docs/library#threading)

## Playwright Authentication Guide
[Skip to main content](https://playwright.dev/python/docs/auth#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/auth\#introduction "Direct link to Introduction")

Playwright executes tests in isolated environments called [browser contexts](https://playwright.dev/python/docs/browser-contexts). This isolation model improves reproducibility and prevents cascading test failures. Tests can load existing authenticated state. This eliminates the need to authenticate in every test and speeds up test execution.

## Core concepts [​](https://playwright.dev/python/docs/auth\#core-concepts "Direct link to Core concepts")

Regardless of the authentication strategy you choose, you are likely to store authenticated browser state on the file system.

We recommend to create `playwright/.auth` directory and add it to your `.gitignore`. Your authentication routine will produce authenticated browser state and save it to a file in this `playwright/.auth` directory. Later on, tests will reuse this state and start already authenticated.

- Bash
- PowerShell
- Batch

```codeBlockLines_e6Vv
mkdir -p playwright/.auth
echo $'\nplaywright/.auth' >> .gitignore

```

```codeBlockLines_e6Vv
New-Item -ItemType Directory -Force -Path playwright\.auth
Add-Content -path .gitignore "`r`nplaywright/.auth"

```

```codeBlockLines_e6Vv
md playwright\.auth
echo. >> .gitignore
echo "playwright/.auth" >> .gitignore

```

## Signing in before each test [​](https://playwright.dev/python/docs/auth\#signing-in-before-each-test "Direct link to Signing in before each test")

The Playwright API can [automate interaction](https://playwright.dev/python/docs/input) with a login form.

The following example logs into GitHub. Once these steps are executed, the browser context will be authenticated.

- Sync
- Async

```codeBlockLines_e6Vv
page = context.new_page()
page.goto('https://github.com/login')

# Interact with login form
page.get_by_label("Username or email address").fill("username")
page.get_by_label("Password").fill("password")
page.get_by_role("button", name="Sign in").click()
# Continue with the test

```

```codeBlockLines_e6Vv
page = await context.new_page()
await page.goto('https://github.com/login')

# Interact with login form
await page.get_by_label("Username or email address").fill("username")
await page.get_by_label("Password").fill("password")
await page.get_by_role("button", name="Sign in").click()
# Continue with the test

```

Redoing login for every test can slow down test execution. To mitigate that, reuse existing authentication state instead.

## Reusing signed in state [​](https://playwright.dev/python/docs/auth\#reusing-signed-in-state "Direct link to Reusing signed in state")

Playwright provides a way to reuse the signed-in state in the tests. That way you can log in only once and then skip the log in step for all of the tests.

Web apps use cookie-based or token-based authentication, where authenticated state is stored as [cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies), in [local storage](https://developer.mozilla.org/en-US/docs/Web/API/Storage) or in [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API). Playwright provides [browser\_context.storage\_state()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-storage-state) method that can be used to retrieve storage state from authenticated contexts and then create new contexts with prepopulated state.

Cookies, local storage and IndexedDB state can be used across different browsers. They depend on your application's authentication model which may require some combination of cookies, local storage or IndexedDB.

The following code snippet retrieves state from an authenticated context and creates a new context with that state.

- Sync
- Async

```codeBlockLines_e6Vv
# Save storage state into the file.
storage = context.storage_state(path="state.json")

# Create a new context with the saved storage state.
context = browser.new_context(storage_state="state.json")

```

```codeBlockLines_e6Vv
# Save storage state into the file.
storage = await context.storage_state(path="state.json")

# Create a new context with the saved storage state.
context = await browser.new_context(storage_state="state.json")

```

## Advanced scenarios [​](https://playwright.dev/python/docs/auth\#advanced-scenarios "Direct link to Advanced scenarios")

### Session storage [​](https://playwright.dev/python/docs/auth\#session-storage "Direct link to Session storage")

Reusing authenticated state covers [cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies), [local storage](https://developer.mozilla.org/en-US/docs/Web/API/Storage) and [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API) based authentication. Rarely, [session storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage) is used for storing information associated with the signed-in state. Session storage is specific to a particular domain and is not persisted across page loads. Playwright does not provide API to persist session storage, but the following snippet can be used to save/load session storage.

- Sync
- Async

```codeBlockLines_e6Vv
import os
# Get session storage and store as env variable
session_storage = page.evaluate("() => JSON.stringify(sessionStorage)")
os.environ["SESSION_STORAGE"] = session_storage

# Set session storage in a new context
session_storage = os.environ["SESSION_STORAGE"]
context.add_init_script("""(storage => {
  if (window.location.hostname === 'example.com') {
    const entries = JSON.parse(storage)
    for (const [key, value] of Object.entries(entries)) {
      window.sessionStorage.setItem(key, value)
    }
  }
})('""" + session_storage + "')")

```

```codeBlockLines_e6Vv
import os
# Get session storage and store as env variable
session_storage = await page.evaluate("() => JSON.stringify(sessionStorage)")
os.environ["SESSION_STORAGE"] = session_storage

# Set session storage in a new context
session_storage = os.environ["SESSION_STORAGE"]
await context.add_init_script("""(storage => {
  if (window.location.hostname === 'example.com') {
    const entries = JSON.parse(storage)
    for (const [key, value] of Object.entries(entries)) {
      window.sessionStorage.setItem(key, value)
    }
  }
})('""" + session_storage + "')")

```

- [Introduction](https://playwright.dev/python/docs/auth#introduction)
- [Core concepts](https://playwright.dev/python/docs/auth#core-concepts)
- [Signing in before each test](https://playwright.dev/python/docs/auth#signing-in-before-each-test)
- [Reusing signed in state](https://playwright.dev/python/docs/auth#reusing-signed-in-state)
- [Advanced scenarios](https://playwright.dev/python/docs/auth#advanced-scenarios)
  - [Session storage](https://playwright.dev/python/docs/auth#session-storage)

## Playwright Screenshot Guide
[Skip to main content](https://playwright.dev/python/docs/screenshots#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/screenshots\#introduction "Direct link to Introduction")

Here is a quick way to capture a screenshot and save it into a file:

- Sync
- Async

```codeBlockLines_e6Vv
page.screenshot(path="screenshot.png")

```

```codeBlockLines_e6Vv
await page.screenshot(path="screenshot.png")

```

[Screenshots API](https://playwright.dev/python/docs/api/class-page#page-screenshot) accepts many parameters for image format, clip area, quality, etc. Make sure to check them out.

## Full page screenshots [​](https://playwright.dev/python/docs/screenshots\#full-page-screenshots "Direct link to Full page screenshots")

Full page screenshot is a screenshot of a full scrollable page, as if you had a very tall screen and the page could fit it entirely.

- Sync
- Async

```codeBlockLines_e6Vv
page.screenshot(path="screenshot.png", full_page=True)

```

```codeBlockLines_e6Vv
await page.screenshot(path="screenshot.png", full_page=True)

```

## Capture into buffer [​](https://playwright.dev/python/docs/screenshots\#capture-into-buffer "Direct link to Capture into buffer")

Rather than writing into a file, you can get a buffer with the image and post-process it or pass it to a third party pixel diff facility.

- Sync
- Async

```codeBlockLines_e6Vv
screenshot_bytes = page.screenshot()
print(base64.b64encode(screenshot_bytes).decode())

```

```codeBlockLines_e6Vv
# Capture into Image
screenshot_bytes = await page.screenshot()
print(base64.b64encode(screenshot_bytes).decode())

```

## Element screenshot [​](https://playwright.dev/python/docs/screenshots\#element-screenshot "Direct link to Element screenshot")

Sometimes it is useful to take a screenshot of a single element.

- Sync
- Async

```codeBlockLines_e6Vv
page.locator(".header").screenshot(path="screenshot.png")

```

```codeBlockLines_e6Vv
await page.locator(".header").screenshot(path="screenshot.png")

```

- [Introduction](https://playwright.dev/python/docs/screenshots#introduction)
- [Full page screenshots](https://playwright.dev/python/docs/screenshots#full-page-screenshots)
- [Capture into buffer](https://playwright.dev/python/docs/screenshots#capture-into-buffer)
- [Element screenshot](https://playwright.dev/python/docs/screenshots#element-screenshot)

## Playwright Test Generation
[Skip to main content](https://playwright.dev/python/docs/codegen#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/codegen\#introduction "Direct link to Introduction")

Playwright comes with the ability to generate tests for you as you perform actions in the browser and is a great way to quickly get started with testing. Playwright will look at your page and figure out the best locator, prioritizing [role, text and test id locators](https://playwright.dev/python/docs/locators). If the generator finds multiple elements matching the locator, it will improve the locator to make it resilient that uniquely identify the target element.

## Generate tests with the Playwright Inspector [​](https://playwright.dev/python/docs/codegen\#generate-tests-with-the-playwright-inspector "Direct link to Generate tests with the Playwright Inspector")

When running the `codegen` command two windows will be opened, a browser window where you interact with the website you wish to test and the Playwright Inspector window where you can record your tests and then copy them into your editor.

### Running Codegen [​](https://playwright.dev/python/docs/codegen\#running-codegen "Direct link to Running Codegen")

Use the `codegen` command to run the test generator followed by the URL of the website you want to generate tests for. The URL is optional and you can always run the command without it and then add the URL directly into the browser window instead.

```codeBlockLines_e6Vv
playwright codegen demo.playwright.dev/todomvc

```

### Recording a test [​](https://playwright.dev/python/docs/codegen\#recording-a-test "Direct link to Recording a test")

Run the `codegen` command and perform actions in the browser window. Playwright will generate the code for the user interactions which you can see in the Playwright Inspector window. Once you have finished recording your test stop the recording and press the **copy** button to copy your generated test into your editor.

With the test generator you can record:

- Actions like click or fill by simply interacting with the page
- Assertions by clicking on one of the icons in the toolbar and then clicking on an element on the page to assert against. You can choose:
  - `'assert visibility'` to assert that an element is visible
  - `'assert text'` to assert that an element contains specific text
  - `'assert value'` to assert that an element has a specific value

![recording a test](https://github.com/microsoft/playwright/assets/13063165/9751b609-6e4c-486b-a961-f86f177b1d58)

###### [​](https://playwright.dev/python/docs/codegen\#-1 "Direct link to -1")

When you have finished interacting with the page, press the **record** button to stop the recording and use the **copy** button to copy the generated code to your editor.

Use the **clear** button to clear the code to start recording again. Once finished, close the Playwright inspector window or stop the terminal command.

### Generating locators [​](https://playwright.dev/python/docs/codegen\#generating-locators "Direct link to Generating locators")

You can generate [locators](https://playwright.dev/python/docs/locators) with the test generator.

- Press the `'Record'` button to stop the recording and the `'Pick Locator'` button will appear.
- Click on the `'Pick Locator'` button and then hover over elements in the browser window to see the locator highlighted underneath each element.
- To choose a locator, click on the element you would like to locate and the code for that locator will appear in the field next to the Pick Locator button.
- You can then edit the locator in this field to fine tune it or use the copy button to copy it and paste it into your code.

###### [​](https://playwright.dev/python/docs/codegen\#-2 "Direct link to -2")

![picking a locator](https://github.com/microsoft/playwright/assets/13063165/95d11f48-96a4-46b9-9c2a-63c3aa4fdce7)

## Emulation [​](https://playwright.dev/python/docs/codegen\#emulation "Direct link to Emulation")

You can use the test generator to generate tests using emulation so as to generate a test for a specific viewport, device, color scheme, as well as emulate the geolocation, language or timezone. The test generator can also generate a test while preserving authenticated state.

### Emulate viewport size [​](https://playwright.dev/python/docs/codegen\#emulate-viewport-size "Direct link to Emulate viewport size")

Playwright opens a browser window with its viewport set to a specific width and height and is not responsive as tests need to be run under the same conditions. Use the `--viewport` option to generate tests with a different viewport size.

```codeBlockLines_e6Vv
playwright codegen --viewport-size="800,600" playwright.dev

```

###### [​](https://playwright.dev/python/docs/codegen\#-3 "Direct link to -3")

![Codegen generating code for tests for playwright.dev website with a specific viewport python](https://user-images.githubusercontent.com/13063165/220403118-7704b708-dea3-44b3-97a4-04c2b9d1d0fa.png)

### Emulate devices [​](https://playwright.dev/python/docs/codegen\#emulate-devices "Direct link to Emulate devices")

Record scripts and tests while emulating a mobile device using the `--device` option which sets the viewport size and user agent among others.

```codeBlockLines_e6Vv
playwright codegen --device="iPhone 13" playwright.dev

```

###### [​](https://playwright.dev/python/docs/codegen\#-4 "Direct link to -4")

![Codegen generating code for tests for playwright.dev website emulated for iPhone 13 python](https://user-images.githubusercontent.com/13063165/220922790-5c5a4d1a-e27d-4c9b-90ac-13cf9c925706.png)

### Emulate color scheme [​](https://playwright.dev/python/docs/codegen\#emulate-color-scheme "Direct link to Emulate color scheme")

Record scripts and tests while emulating the color scheme with the `--color-scheme` option.

```codeBlockLines_e6Vv
playwright codegen --color-scheme=dark playwright.dev

```

###### [​](https://playwright.dev/python/docs/codegen\#-5 "Direct link to -5")

![Codegen generating code for tests for playwright.dev website in dark mode python](https://user-images.githubusercontent.com/13063165/220930714-737647fd-ae99-4dd3-b7a4-4f3eb4fe712d.png)

### Emulate geolocation, language and timezone [​](https://playwright.dev/python/docs/codegen\#emulate-geolocation-language-and-timezone "Direct link to Emulate geolocation, language and timezone")

Record scripts and tests while emulating timezone, language & location using the `--timezone`, `--geolocation` and `--lang` options. Once the page opens:

1. Accept the cookies
2. On the top right, click on the locate me button to see geolocation in action.

```codeBlockLines_e6Vv
playwright codegen --timezone="Europe/Rome" --geolocation="41.890221,12.492348" --lang="it-IT" bing.com/maps

```

###### [​](https://playwright.dev/python/docs/codegen\#-6 "Direct link to -6")

![Codegen generating code for tests for bing maps showing timezone, geolocation as Rome, Italy and in Italian language python](https://user-images.githubusercontent.com/13063165/220932413-f2943956-dd38-4560-94b9-51968076210d.png)

### Preserve authenticated state [​](https://playwright.dev/python/docs/codegen\#preserve-authenticated-state "Direct link to Preserve authenticated state")

Run `codegen` with `--save-storage` to save [cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies), [localStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) and [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API) data at the end of the session. This is useful to separately record an authentication step and reuse it later when recording more tests.

```codeBlockLines_e6Vv
playwright codegen github.com/microsoft/playwright --save-storage=auth.json

```

###### [​](https://playwright.dev/python/docs/codegen\#-7 "Direct link to -7")

![github page before logging in python](https://user-images.githubusercontent.com/13063165/220929429-8756ec49-fbf2-46e0-8f41-d25f5f5a6623.png)

#### Login [​](https://playwright.dev/python/docs/codegen\#login "Direct link to Login")

After performing authentication and closing the browser, `auth.json` will contain the storage state which you can then reuse in your tests.

![login to GitHub screen](https://user-images.githubusercontent.com/13063165/220561688-04b2b984-4ba6-4446-8b0a-8058876e2a02.png)

Make sure you only use the `auth.json` locally as it contains sensitive information. Add it to your `.gitignore` or delete it once you have finished generating your tests.

#### Load authenticated state [​](https://playwright.dev/python/docs/codegen\#load-authenticated-state "Direct link to Load authenticated state")

Run with `--load-storage` to consume the previously loaded storage from the `auth.json`. This way, all [cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies), [localStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) and [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API) data will be restored, bringing most web apps to the authenticated state without the need to login again. This means you can continue generating tests from the logged in state.

```codeBlockLines_e6Vv
playwright codegen --load-storage=auth.json github.com/microsoft/playwright

```

###### [​](https://playwright.dev/python/docs/codegen\#-8 "Direct link to -8")

![github signed in showing use of load storage python](https://user-images.githubusercontent.com/13063165/220928211-ca1d4dc9-9966-414e-ab23-a3ef1d2d5ed9.png)

## Record using custom setup [​](https://playwright.dev/python/docs/codegen\#record-using-custom-setup "Direct link to Record using custom setup")

If you would like to use codegen in some non-standard setup (for example, use [browser\_context.route()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route)), it is possible to call [page.pause()](https://playwright.dev/python/docs/api/class-page#page-pause) that will open a separate window with codegen controls.

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright

with sync_playwright() as p:
    # Make sure to run headed.
    browser = p.chromium.launch(headless=False)

    # Setup context however you like.
    context = browser.new_context() # Pass any options
    context.route('**/*', lambda route: route.continue_())

    # Pause the page, and start recording manually.
    page = context.new_page()
    page.pause()

```

```codeBlockLines_e6Vv
import asyncio
from playwright.async_api import async_playwright

async def main():
    async with async_playwright() as p:
        # Make sure to run headed.
        browser = await p.chromium.launch(headless=False)

        # Setup context however you like.
        context = await browser.new_context() # Pass any options
        await context.route('**/*', lambda route: route.continue_())

        # Pause the page, and start recording manually.
        page = await context.new_page()
        await page.pause()

asyncio.run(main())

```

- [Introduction](https://playwright.dev/python/docs/codegen#introduction)
- [Generate tests with the Playwright Inspector](https://playwright.dev/python/docs/codegen#generate-tests-with-the-playwright-inspector)
  - [Running Codegen](https://playwright.dev/python/docs/codegen#running-codegen)
  - [Recording a test](https://playwright.dev/python/docs/codegen#recording-a-test)
  - [Generating locators](https://playwright.dev/python/docs/codegen#generating-locators)
- [Emulation](https://playwright.dev/python/docs/codegen#emulation)
  - [Emulate viewport size](https://playwright.dev/python/docs/codegen#emulate-viewport-size)
  - [Emulate devices](https://playwright.dev/python/docs/codegen#emulate-devices)
  - [Emulate color scheme](https://playwright.dev/python/docs/codegen#emulate-color-scheme)
  - [Emulate geolocation, language and timezone](https://playwright.dev/python/docs/codegen#emulate-geolocation-language-and-timezone)
  - [Preserve authenticated state](https://playwright.dev/python/docs/codegen#preserve-authenticated-state)
- [Record using custom setup](https://playwright.dev/python/docs/codegen#record-using-custom-setup)

## Mocking Network Traffic
[Skip to main content](https://playwright.dev/python/docs/mock#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/mock\#introduction "Direct link to Introduction")

Web APIs are usually implemented as HTTP endpoints. Playwright provides APIs to **mock** and **modify** network traffic, both HTTP and HTTPS. Any requests that a page does, including [XHRs](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) and [fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) requests, can be tracked, modified and mocked. With Playwright you can also mock using HAR files that contain multiple network requests made by the page.

## Mock API requests [​](https://playwright.dev/python/docs/mock\#mock-api-requests "Direct link to Mock API requests")

The following code will intercept all the calls to `*/**/api/v1/fruits` and will return a custom response instead. No requests to the API will be made. The test goes to the URL that uses the mocked route and asserts that mock data is present on the page.

- Sync
- Async

```codeBlockLines_e6Vv
def test_mock_the_fruit_api(page: Page):
    def handle(route: Route):
        json = [{"name": "Strawberry", "id": 21}]
        # fulfill the route with the mock data
        route.fulfill(json=json)

    # Intercept the route to the fruit API
    page.route("*/**/api/v1/fruits", handle)

    # Go to the page
    page.goto("https://demo.playwright.dev/api-mocking")

    # Assert that the Strawberry fruit is visible
    expect(page.get_by_text("Strawberry")).to_be_visible()

```

```codeBlockLines_e6Vv
async def test_mock_the_fruit_api(page: Page):
    async def handle(route: Route):
        json = [{"name": "Strawberry", "id": 21}]
        # fulfill the route with the mock data
        await route.fulfill(json=json)

    # Intercept the route to the fruit API
    await page.route("*/**/api/v1/fruits", handle)

    # Go to the page
    await page.goto("https://demo.playwright.dev/api-mocking")

    # Assert that the Strawberry fruit is visible
    await expect(page.get_by_text("Strawberry")).to_be_visible()

```

You can see from the trace of the example test that the API was never called, it was however fulfilled with the mock data. ![api mocking trace](https://github.com/microsoft/playwright/assets/13063165/3dc14cbf-c100-4efc-ac21-d7b52d698b53)

Read more about [advanced networking](https://playwright.dev/python/docs/network).

## Modify API responses [​](https://playwright.dev/python/docs/mock\#modify-api-responses "Direct link to Modify API responses")

Sometimes, it is essential to make an API request, but the response needs to be patched to allow for reproducible testing. In that case, instead of mocking the request, one can perform the request and fulfill it with the modified response.

In the example below we intercept the call to the fruit API and add a new fruit called 'Loquat', to the data. We then go to the url and assert that this data is there:

- Sync
- Async

```codeBlockLines_e6Vv
def test_gets_the_json_from_api_and_adds_a_new_fruit(page: Page):
    def handle(route: Route):
        response = route.fetch()
        json = response.json()
        json.append({ "name": "Loquat", "id": 100})
        # Fulfill using the original response, while patching the response body
        # with the given JSON object.
        route.fulfill(response=response, json=json)

    page.route("https://demo.playwright.dev/api-mocking/api/v1/fruits", handle)

    # Go to the page
    page.goto("https://demo.playwright.dev/api-mocking")

    # Assert that the new fruit is visible
    expect(page.get_by_text("Loquat", exact=True)).to_be_visible()

```

```codeBlockLines_e6Vv
async def test_gets_the_json_from_api_and_adds_a_new_fruit(page: Page):
    async def handle(route: Route):
        response = await route.fetch()
        json = await response.json()
        json.append({ "name": "Loquat", "id": 100})
        # Fulfill using the original response, while patching the response body
        # with the given JSON object.
        await route.fulfill(response=response, json=json)

    await page.route("https://demo.playwright.dev/api-mocking/api/v1/fruits", handle)

    # Go to the page
    await page.goto("https://demo.playwright.dev/api-mocking")

    # Assert that the new fruit is visible
    await expect(page.get_by_text("Loquat", exact=True)).to_be_visible()

```

In the trace of our test we can see that the API was called and the response was modified. ![trace of test showing api being called and fulfilled](https://github.com/microsoft/playwright/assets/13063165/8b8dd82d-1b3e-428e-871b-840581fed439)

By inspecting the response we can see that our new fruit was added to the list. ![trace of test showing the mock response](https://github.com/microsoft/playwright/assets/13063165/03e6c87c-4ecc-47e8-9ca0-30fface25e9d)

Read more about [advanced networking](https://playwright.dev/python/docs/network).

## Mocking with HAR files [​](https://playwright.dev/python/docs/mock\#mocking-with-har-files "Direct link to Mocking with HAR files")

A HAR file is an [HTTP Archive](http://www.softwareishard.com/blog/har-12-spec/) file that contains a record of all the network requests that are made when a page is loaded. It contains information about the request and response headers, cookies, content, timings, and more. You can use HAR files to mock network requests in your tests. You'll need to:

1. Record a HAR file.
2. Commit the HAR file alongside the tests.
3. Route requests using the saved HAR files in the tests.

### Recording a HAR file [​](https://playwright.dev/python/docs/mock\#recording-a-har-file "Direct link to Recording a HAR file")

To record a HAR file we use [page.route\_from\_har()](https://playwright.dev/python/docs/api/class-page#page-route-from-har) or [browser\_context.route\_from\_har()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route-from-har) method. This method takes in the path to the HAR file and an optional object of options. The options object can contain the URL so that only requests with the URL matching the specified glob pattern will be served from the HAR File. If not specified, all requests will be served from the HAR file.

Setting `update` option to true will create or update the HAR file with the actual network information instead of serving the requests from the HAR file. Use it when creating a test to populate the HAR with real data.

- Sync
- Async

```codeBlockLines_e6Vv
def test_records_or_updates_the_har_file(page: Page):
    # Get the response from the HAR file
    page.route_from_har("./hars/fruit.har", url="*/**/api/v1/fruits", update=True)

    # Go to the page
    page.goto("https://demo.playwright.dev/api-mocking")

    # Assert that the fruit is visible
    expect(page.get_by_text("Strawberry")).to_be_visible()

```

```codeBlockLines_e6Vv
async def test_records_or_updates_the_har_file(page: Page):
    # Get the response from the HAR file
    await page.route_from_har("./hars/fruit.har", url="*/**/api/v1/fruits", update=True)

    # Go to the page
    await page.goto("https://demo.playwright.dev/api-mocking")

    # Assert that the fruit is visible
    await expect(page.get_by_text("Strawberry")).to_be_visible()

```

### Modifying a HAR file [​](https://playwright.dev/python/docs/mock\#modifying-a-har-file "Direct link to Modifying a HAR file")

Once you have recorded a HAR file you can modify it by opening the hashed .txt file inside your 'hars' folder and editing the JSON. This file should be committed to your source control. Anytime you run this test with `update: true` it will update your HAR file with the request from the API.

```codeBlockLines_e6Vv
[\
  {\
    "name": "Playwright",\
    "id": 100\
  },\
  // ... other fruits\
]

```

### Replaying from HAR [​](https://playwright.dev/python/docs/mock\#replaying-from-har "Direct link to Replaying from HAR")

Now that you have the HAR file recorded and modified the mock data, it can be used to serve matching responses in the test. For this, just turn off or simply remove the `update` option. This will run the test against the HAR file instead of hitting the API.

- Sync
- Async

```codeBlockLines_e6Vv
def test_gets_the_json_from_har_and_checks_the_new_fruit_has_been_added(page: Page):
    # Replay API requests from HAR.
    # Either use a matching response from the HAR,
    # or abort the request if nothing matches.
    page.route_from_har("./hars/fruit.har", url="*/**/api/v1/fruits", update=False)

    # Go to the page
    page.goto("https://demo.playwright.dev/api-mocking")

    # Assert that the Playwright fruit is visible
    expect(page.get_by_text("Playwright", exact=True)).to_be_visible()

```

```codeBlockLines_e6Vv
async def test_gets_the_json_from_har_and_checks_the_new_fruit_has_been_added(page: Page):
    # Replay API requests from HAR.
    # Either use a matching response from the HAR,
    # or abort the request if nothing matches.
    await page.route_from_har("./hars/fruit.har", url="*/**/api/v1/fruits", update=False)

    # Go to the page
    await page.goto("https://demo.playwright.dev/api-mocking")

    # Assert that the Playwright fruit is visible
    await expect(page.get_by_text("Playwright", exact=True)).to_be_visible()

```

In the trace of our test we can see that the route was fulfilled from the HAR file and the API was not called. ![trace showing the HAR file being used](https://github.com/microsoft/playwright/assets/13063165/1bd7ab66-ea4f-43c2-a4e5-ca17d4837ff1)

If we inspect the response we can see our new fruit was added to the JSON, which was done by manually updating the hashed `.txt` file inside the `hars` folder. ![trace showing response from HAR file](https://github.com/microsoft/playwright/assets/13063165/db3117fc-7b02-4973-9a51-29e213261a6a)

HAR replay matches URL and HTTP method strictly. For POST requests, it also matches POST payloads strictly. If multiple recordings match a request, the one with the most matching headers is picked. An entry resulting in a redirect will be followed automatically.

Similar to when recording, if given HAR file name ends with `.zip`, it is considered an archive containing the HAR file along with network payloads stored as separate entries. You can also extract this archive, edit payloads or HAR log manually and point to the extracted har file. All the payloads will be resolved relative to the extracted har file on the file system.

#### Recording HAR with CLI [​](https://playwright.dev/python/docs/mock\#recording-har-with-cli "Direct link to Recording HAR with CLI")

We recommend the `update` option to record HAR file for your test. However, you can also record the HAR with Playwright CLI.

Open the browser with Playwright CLI and pass `--save-har` option to produce a HAR file. Optionally, use `--save-har-glob` to only save requests you are interested in, for example API endpoints. If the har file name ends with `.zip`, artifacts are written as separate files and are all compressed into a single `zip`.

```codeBlockLines_e6Vv
# Save API requests from example.com as "example.har" archive.
playwright open --save-har=example.har --save-har-glob="**/api/**" https://example.com

```

Read more about [advanced networking](https://playwright.dev/python/docs/network).

## Mock WebSockets [​](https://playwright.dev/python/docs/mock\#mock-websockets "Direct link to Mock WebSockets")

The following code will intercept WebSocket connections and mock entire communcation over the WebSocket, instead of connecting to the server. This example responds to a `"request"` with a `"response"`.

- Sync
- Async

```codeBlockLines_e6Vv
def message_handler(ws: WebSocketRoute, message: Union[str, bytes]):
  if message == "request":
    ws.send("response")

page.route_web_socket("wss://example.com/ws", lambda ws: ws.on_message(
    lambda message: message_handler(ws, message)
))

```

```codeBlockLines_e6Vv
def message_handler(ws: WebSocketRoute, message: Union[str, bytes]):
  if message == "request":
    ws.send("response")

await page.route_web_socket("wss://example.com/ws", lambda ws: ws.on_message(
    lambda message: message_handler(ws, message)
))

```

Alternatively, you may want to connect to the actual server, but intercept messages in-between and modify or block them. Here is an example that modifies some of the messages sent by the page to the server, and leaves the rest unmodified.

- Sync
- Async

```codeBlockLines_e6Vv
def message_handler(server: WebSocketRoute, message: Union[str, bytes]):
  if message == "request":
    server.send("request2")
  else:
    server.send(message)

def handler(ws: WebSocketRoute):
  server = ws.connect_to_server()
  ws.on_message(lambda message: message_handler(server, message))

page.route_web_socket("wss://example.com/ws", handler)

```

```codeBlockLines_e6Vv
def message_handler(server: WebSocketRoute, message: Union[str, bytes]):
  if message == "request":
    server.send("request2")
  else:
    server.send(message)

def handler(ws: WebSocketRoute):
  server = ws.connect_to_server()
  ws.on_message(lambda message: message_handler(server, message))

await page.route_web_socket("wss://example.com/ws", handler)

```

For more details, see [WebSocketRoute](https://playwright.dev/python/docs/api/class-websocketroute "WebSocketRoute").

- [Introduction](https://playwright.dev/python/docs/mock#introduction)
- [Mock API requests](https://playwright.dev/python/docs/mock#mock-api-requests)
- [Modify API responses](https://playwright.dev/python/docs/mock#modify-api-responses)
- [Mocking with HAR files](https://playwright.dev/python/docs/mock#mocking-with-har-files)
  - [Recording a HAR file](https://playwright.dev/python/docs/mock#recording-a-har-file)
  - [Modifying a HAR file](https://playwright.dev/python/docs/mock#modifying-a-har-file)
  - [Replaying from HAR](https://playwright.dev/python/docs/mock#replaying-from-har)
- [Mock WebSockets](https://playwright.dev/python/docs/mock#mock-websockets)

## Playwright Clock API
[Skip to main content](https://playwright.dev/python/docs/clock#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/clock\#introduction "Direct link to Introduction")

Accurately simulating time-dependent behavior is essential for verifying the correctness of applications. Utilizing [Clock](https://playwright.dev/python/docs/api/class-clock "Clock") functionality allows developers to manipulate and control time within tests, enabling the precise validation of features such as rendering time, timeouts, scheduled tasks without the delays and variability of real-time execution.

The [Clock](https://playwright.dev/python/docs/api/class-clock "Clock") API provides the following methods to control time:

- `setFixedTime`: Sets the fixed time for `Date.now()` and `new Date()`.
- `install`: initializes the clock and allows you to:
  - `pauseAt`: Pauses the time at a specific time.
  - `fastForward`: Fast forwards the time.
  - `runFor`: Runs the time for a specific duration.
  - `resume`: Resumes the time.
- `setSystemTime`: Sets the current system time.

The recommended approach is to use `setFixedTime` to set the time to a specific value. If that doesn't work for your use case, you can use `install` which allows you to pause time later on, fast forward it, tick it, etc. `setSystemTime` is only recommended for advanced use cases.

note

[page.clock](https://playwright.dev/python/docs/api/class-page#page-clock) overrides native global classes and functions related to time allowing them to be manually controlled:

- `Date`
- `setTimeout`
- `clearTimeout`
- `setInterval`
- `clearInterval`
- `requestAnimationFrame`
- `cancelAnimationFrame`
- `requestIdleCallback`
- `cancelIdleCallback`
- `performance`
- `Event.timeStamp`

warning

If you call `install` at any point in your test, the call _MUST_ occur before any other clock related calls (see note above for list). Calling these methods out of order will result in undefined behavior. For example, you cannot call `setInterval`, followed by `install`, then `clearInterval`, as `install` overrides the native definition of the clock functions.

## Test with predefined time [​](https://playwright.dev/python/docs/clock\#test-with-predefined-time "Direct link to Test with predefined time")

Often you only need to fake `Date.now` while keeping the timers going. That way the time flows naturally, but `Date.now` always returns a fixed value.

```codeBlockLines_e6Vv
<div id="current-time" data-testid="current-time"></div>
<script>
  const renderTime = () => {
    document.getElementById('current-time').textContent =
        new Date().toLocaleString();
  };
  setInterval(renderTime, 1000);
</script>

```

## Consistent time and timers [​](https://playwright.dev/python/docs/clock\#consistent-time-and-timers "Direct link to Consistent time and timers")

Sometimes your timers depend on `Date.now` and are confused when the `Date.now` value does not change over time. In this case, you can install the clock and fast forward to the time of interest when testing.

```codeBlockLines_e6Vv
<div id="current-time" data-testid="current-time"></div>
<script>
  const renderTime = () => {
    document.getElementById('current-time').textContent =
        new Date().toLocaleString();
  };
  setInterval(renderTime, 1000);
</script>

```

- Sync
- Async

```codeBlockLines_e6Vv
# Initialize clock with some time before the test time and let the page load
# naturally. `Date.now` will progress as the timers fire.
page.clock.install(time=datetime.datetime(2024, 2, 2, 8, 0, 0))
page.goto("http://localhost:3333")

# Pretend that the user closed the laptop lid and opened it again at 10am.
# Pause the time once reached that point.
page.clock.pause_at(datetime.datetime(2024, 2, 2, 10, 0, 0))

# Assert the page state.
expect(page.get_by_test_id("current-time")).to_have_text("2/2/2024, 10:00:00 AM")

# Close the laptop lid again and open it at 10:30am.
page.clock.fast_forward("30:00")
expect(page.get_by_test_id("current-time")).to_have_text("2/2/2024, 10:30:00 AM")

```

```codeBlockLines_e6Vv
# Initialize clock with some time before the test time and let the page load
# naturally. `Date.now` will progress as the timers fire.
await page.clock.install(time=datetime.datetime(2024, 2, 2, 8, 0, 0))
await page.goto("http://localhost:3333")

# Pretend that the user closed the laptop lid and opened it again at 10am.
# Pause the time once reached that point.
await page.clock.pause_at(datetime.datetime(2024, 2, 2, 10, 0, 0))

# Assert the page state.
await expect(page.get_by_test_id("current-time")).to_have_text("2/2/2024, 10:00:00 AM")

# Close the laptop lid again and open it at 10:30am.
await page.clock.fast_forward("30:00")
await expect(page.get_by_test_id("current-time")).to_have_text("2/2/2024, 10:30:00 AM")

```

## Test inactivity monitoring [​](https://playwright.dev/python/docs/clock\#test-inactivity-monitoring "Direct link to Test inactivity monitoring")

Inactivity monitoring is a common feature in web applications that logs out users after a period of inactivity. Testing this feature can be tricky because you need to wait for a long time to see the effect. With the help of the clock, you can speed up time and test this feature quickly.

```codeBlockLines_e6Vv
<div id="remaining-time" data-testid="remaining-time"></div>
<script>
  const endTime = Date.now() + 5 * 60_000;
  const renderTime = () => {
    const diffInSeconds = Math.round((endTime - Date.now()) / 1000);
    if (diffInSeconds <= 0) {
      document.getElementById('remaining-time').textContent =
        'You have been logged out due to inactivity.';
    } else {
      document.getElementById('remaining-time').textContent =
        `You will be logged out in ${diffInSeconds} seconds.`;
    }
    setTimeout(renderTime, 1000);
  };
  renderTime();
</script>
<button type="button">Interaction</button>

```

- Sync
- Async

```codeBlockLines_e6Vv
# Initial time does not matter for the test, so we can pick current time.
page.clock.install()
page.goto("http://localhost:3333")
# Interact with the page
page.get_by_role("button").click()

# Fast forward time 5 minutes as if the user did not do anything.
# Fast forward is like closing the laptop lid and opening it after 5 minutes.
# All the timers due will fire once immediately, as in the real browser.
page.clock.fast_forward("05:00")

# Check that the user was logged out automatically.
expect(page.get_by_text("You have been logged out due to inactivity.")).to_be_visible()

```

```codeBlockLines_e6Vv
# Initial time does not matter for the test, so we can pick current time.
await page.clock.install()
await page.goto("http://localhost:3333")
# Interact with the page
await page.get_by_role("button").click()

# Fast forward time 5 minutes as if the user did not do anything.
# Fast forward is like closing the laptop lid and opening it after 5 minutes.
# All the timers due will fire once immediately, as in the real browser.
await page.clock.fast_forward("05:00")

# Check that the user was logged out automatically.
await expect(page.getByText("You have been logged out due to inactivity.")).toBeVisible()

```

## Tick through time manually, firing all the timers consistently [​](https://playwright.dev/python/docs/clock\#tick-through-time-manually-firing-all-the-timers-consistently "Direct link to Tick through time manually, firing all the timers consistently")

In rare cases, you may want to tick through time manually, firing all timers and animation frames in the process to achieve a fine-grained control over the passage of time.

```codeBlockLines_e6Vv
<div id="current-time" data-testid="current-time"></div>
<script>
  const renderTime = () => {
    document.getElementById('current-time').textContent =
        new Date().toLocaleString();
  };
  setInterval(renderTime, 1000);
</script>

```

- Sync
- Async

```codeBlockLines_e6Vv
# Initialize clock with a specific time, let the page load naturally.
page.clock.install(
    time=datetime.datetime(2024, 2, 2, 8, 0, 0, tzinfo=datetime.timezone.pst),
)
page.goto("http://localhost:3333")
locator = page.get_by_test_id("current-time")

# Pause the time flow, stop the timers, you now have manual control
# over the page time.
page.clock.pause_at(datetime.datetime(2024, 2, 2, 10, 0, 0))
expect(locator).to_have_text("2/2/2024, 10:00:00 AM")

# Tick through time manually, firing all timers in the process.
# In this case, time will be updated in the screen 2 times.
page.clock.run_for(2000)
expect(locator).to_have_text("2/2/2024, 10:00:02 AM")

```

```codeBlockLines_e6Vv
# Initialize clock with a specific time, let the page load naturally.
await page.clock.install(time=
    datetime.datetime(2024, 2, 2, 8, 0, 0, tzinfo=datetime.timezone.pst),
)
await page.goto("http://localhost:3333")
locator = page.get_by_test_id("current-time")

# Pause the time flow, stop the timers, you now have manual control
# over the page time.
await page.clock.pause_at(datetime.datetime(2024, 2, 2, 10, 0, 0))
await expect(locator).to_have_text("2/2/2024, 10:00:00 AM")

# Tick through time manually, firing all timers in the process.
# In this case, time will be updated in the screen 2 times.
await page.clock.run_for(2000)
await expect(locator).to_have_text("2/2/2024, 10:00:02 AM")

```

## Related Videos [​](https://playwright.dev/python/docs/clock\#related-videos "Direct link to Related Videos")

- [Introduction](https://playwright.dev/python/docs/clock#introduction)
- [Test with predefined time](https://playwright.dev/python/docs/clock#test-with-predefined-time)
- [Consistent time and timers](https://playwright.dev/python/docs/clock#consistent-time-and-timers)
- [Test inactivity monitoring](https://playwright.dev/python/docs/clock#test-inactivity-monitoring)
- [Tick through time manually, firing all the timers consistently](https://playwright.dev/python/docs/clock#tick-through-time-manually-firing-all-the-timers-consistently)
- [Related Videos](https://playwright.dev/python/docs/clock#related-videos)

## Custom Selector Engines
[Skip to main content](https://playwright.dev/python/docs/extensibility#__docusaurus_skipToContent_fallback)

On this page

## Custom selector engines [​](https://playwright.dev/python/docs/extensibility\#custom-selector-engines "Direct link to Custom selector engines")

Playwright supports custom selector engines, registered with [selectors.register()](https://playwright.dev/python/docs/api/class-selectors#selectors-register).

Selector engine should have the following properties:

- `query` function to query first element matching `selector` relative to the `root`.
- `queryAll` function to query all elements matching `selector` relative to the `root`.

By default the engine is run directly in the frame's JavaScript context and, for example, can call an application-defined function. To isolate the engine from any JavaScript in the frame, but leave access to the DOM, register the engine with `{contentScript: true}` option. Content script engine is safer because it is protected from any tampering with the global objects, for example altering `Node.prototype` methods. All built-in selector engines run as content scripts. Note that running as a content script is not guaranteed when the engine is used together with other custom engines.

Selectors must be registered before creating the page.

An example of registering selector engine that queries elements based on a tag name:

- Sync
- Async

```codeBlockLines_e6Vv
tag_selector = """
    // Must evaluate to a selector engine instance.
    {
      // Returns the first element matching given selector in the root's subtree.
      query(root, selector) {
        return root.querySelector(selector);
      },

      // Returns all elements matching given selector in the root's subtree.
      queryAll(root, selector) {
        return Array.from(root.querySelectorAll(selector));
      }
    }"""

# register the engine. selectors will be prefixed with "tag=".
playwright.selectors.register("tag", tag_selector)

# now we can use "tag=" selectors.
button = page.locator("tag=button")
button.click()

# we can combine it with built-in locators.
page.locator("tag=div").get_by_text("click me").click()

# we can use it in any methods supporting selectors.
button_count = page.locator("tag=button").count()

```

```codeBlockLines_e6Vv
tag_selector = """
    // Must evaluate to a selector engine instance.
    {
      // Returns the first element matching given selector in the root's subtree.
      query(root, selector) {
        return root.querySelector(selector);
      },

      // Returns all elements matching given selector in the root's subtree.
      queryAll(root, selector) {
        return Array.from(root.querySelectorAll(selector));
      }
    }"""

# register the engine. selectors will be prefixed with "tag=".
await playwright.selectors.register("tag", tag_selector)

# now we can use "tag=" selectors.
button = page.locator("tag=button")
await button.click()

# we can combine it with built-in locators.
await page.locator("tag=div").get_by_text("click me").click()

# we can use it in any methods supporting selectors.
button_count = await page.locator("tag=button").count()

```

- [Custom selector engines](https://playwright.dev/python/docs/extensibility#custom-selector-engines)

## Playwright Emulation Guide
[Skip to main content](https://playwright.dev/python/docs/emulation#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/emulation\#introduction "Direct link to Introduction")

With Playwright you can test your app on any browser as well as emulate a real device such as a mobile phone or tablet. Simply configure the devices you would like to emulate and Playwright will simulate the browser behavior such as `"userAgent"`, `"screenSize"`, `"viewport"` and if it `"hasTouch"` enabled. You can also emulate the `"geolocation"`, `"locale"` and `"timezone"` for all tests or for a specific test as well as set the `"permissions"` to show notifications or change the `"colorScheme"`.

## Devices [​](https://playwright.dev/python/docs/emulation\#devices "Direct link to Devices")

Playwright comes with a [registry of device parameters](https://github.com/microsoft/playwright/blob/main/packages/playwright-core/src/server/deviceDescriptorsSource.json) using [playwright.devices](https://playwright.dev/python/docs/api/class-playwright#playwright-devices) for selected desktop, tablet and mobile devices. It can be used to simulate browser behavior for a specific device such as user agent, screen size, viewport and if it has touch enabled. All tests will run with the specified device parameters.

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    iphone_13 = playwright.devices['iPhone 13']
    browser = playwright.webkit.launch(headless=False)
    context = browser.new_context(
        **iphone_13,
    )

with sync_playwright() as playwright:
    run(playwright)

```

```codeBlockLines_e6Vv
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    iphone_13 = playwright.devices['iPhone 13']
    browser = await playwright.webkit.launch(headless=False)
    context = await browser.new_context(
        **iphone_13,
    )

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())

```

![playwright.dev website emulated for iPhone 13](https://user-images.githubusercontent.com/13063165/220411073-76fe59f9-9a2d-463d-8e30-c19a7deca133.png)

## Viewport [​](https://playwright.dev/python/docs/emulation\#viewport "Direct link to Viewport")

The viewport is included in the device but you can override it for some tests with [page.set\_viewport\_size()](https://playwright.dev/python/docs/api/class-page#page-set-viewport-size).

Test file:

The same works inside a test file.

- Sync
- Async

```codeBlockLines_e6Vv
# Create context with given viewport
context = browser.new_context(
  viewport={ 'width': 1280, 'height': 1024 }
)

# Resize viewport for individual page
page.set_viewport_size({"width": 1600, "height": 1200})

# Emulate high-DPI
context = browser.new_context(
  viewport={ 'width': 2560, 'height': 1440 },
  device_scale_factor=2,
)

```

```codeBlockLines_e6Vv
# Create context with given viewport
context = await browser.new_context(
  viewport={ 'width': 1280, 'height': 1024 }
)

# Resize viewport for individual page
await page.set_viewport_size({"width": 1600, "height": 1200})

# Emulate high-DPI
context = await browser.new_context(
  viewport={ 'width': 2560, 'height': 1440 },
  device_scale_factor=2,
)

```

## isMobile [​](https://playwright.dev/python/docs/emulation\#ismobile "Direct link to isMobile")

Whether the meta viewport tag is taken into account and touch events are enabled.

- Sync
- Async

```codeBlockLines_e6Vv
context = browser.new_context(
  isMobile=false
)

```

```codeBlockLines_e6Vv
context = await browser.new_context(
  isMobile=false
)

```

## Locale & Timezone [​](https://playwright.dev/python/docs/emulation\#locale--timezone "Direct link to Locale & Timezone")

Emulate the user Locale and Timezone which can be set globally for all tests in the config and then overridden for particular tests.

- Sync
- Async

```codeBlockLines_e6Vv
context = browser.new_context(
  locale='de-DE',
  timezone_id='Europe/Berlin',
)

```

```codeBlockLines_e6Vv
context = await browser.new_context(
  locale='de-DE',
  timezone_id='Europe/Berlin',
)

```

![Bing in german lang and timezone](https://user-images.githubusercontent.com/13063165/220416571-ccc96ab1-44bb-4579-8430-64502fc24a15.png)

## Permissions [​](https://playwright.dev/python/docs/emulation\#permissions "Direct link to Permissions")

Allow app to show system notifications.

- Sync
- Async

```codeBlockLines_e6Vv
context = browser.new_context(
  permissions=['notifications'],
)

```

```codeBlockLines_e6Vv
context = await browser.new_context(
  permissions=['notifications'],
)

```

Allow notifications for a specific domain.

- Sync
- Async

```codeBlockLines_e6Vv
context.grant_permissions(['notifications'], origin='https://skype.com')

```

```codeBlockLines_e6Vv
await context.grant_permissions(['notifications'], origin='https://skype.com')

```

Revoke all permissions with [browser\_context.clear\_permissions()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-clear-permissions).

- Sync
- Async

```codeBlockLines_e6Vv
context.clear_permissions()

```

```codeBlockLines_e6Vv
await context.clear_permissions()

```

## Geolocation [​](https://playwright.dev/python/docs/emulation\#geolocation "Direct link to Geolocation")

Grant `"geolocation"` permissions and set geolocation to a specific area.

- Sync
- Async

```codeBlockLines_e6Vv
context = browser.new_context(
  geolocation={"longitude": 41.890221, "latitude": 12.492348},
  permissions=["geolocation"]
)

```

```codeBlockLines_e6Vv
context = await browser.new_context(
  geolocation={"longitude": 41.890221, "latitude": 12.492348},
  permissions=["geolocation"]
)

```

![geolocation for italy on bing maps](https://user-images.githubusercontent.com/13063165/220417670-bb22d815-f5cd-47c4-8562-0b88165eac27.png)

Change the location later:

- Sync
- Async

```codeBlockLines_e6Vv
context.set_geolocation({"longitude": 48.858455, "latitude": 2.294474})

```

```codeBlockLines_e6Vv
await context.set_geolocation({"longitude": 48.858455, "latitude": 2.294474})

```

**Note** you can only change geolocation for all pages in the context.

## Color Scheme and Media [​](https://playwright.dev/python/docs/emulation\#color-scheme-and-media "Direct link to Color Scheme and Media")

Emulate the users `"colorScheme"`. Supported values are 'light' and 'dark'. You can also emulate the media type with [page.emulate\_media()](https://playwright.dev/python/docs/api/class-page#page-emulate-media).

- Sync
- Async

```codeBlockLines_e6Vv
# Create context with dark mode
context = browser.new_context(
  color_scheme='dark' # or 'light'
)

# Create page with dark mode
page = browser.new_page(
  color_scheme='dark' # or 'light'
)

# Change color scheme for the page
page.emulate_media(color_scheme='dark')

# Change media for page
page.emulate_media(media='print')

```

```codeBlockLines_e6Vv
# Create context with dark mode
context = await browser.new_context(
  color_scheme='dark' # or 'light'
)

# Create page with dark mode
page = await browser.new_page(
  color_scheme='dark' # or 'light'
)

# Change color scheme for the page
await page.emulate_media(color_scheme='dark')

# Change media for page
await page.emulate_media(media='print')

```

![playwright web in dark mode](https://user-images.githubusercontent.com/13063165/220411638-55d2b051-4678-4da7-9f0b-ed22f5a3c47c.png)

## User Agent [​](https://playwright.dev/python/docs/emulation\#user-agent "Direct link to User Agent")

The User Agent is included in the device and therefore you will rarely need to change it however if you do need to test a different user agent you can override it with the `userAgent` property.

- Sync
- Async

```codeBlockLines_e6Vv
context = browser.new_context(
  user_agent='My user agent'
)

```

```codeBlockLines_e6Vv
context = await browser.new_context(
  user_agent='My user agent'
)

```

## Offline [​](https://playwright.dev/python/docs/emulation\#offline "Direct link to Offline")

Emulate the network being offline.

- Sync
- Async

```codeBlockLines_e6Vv
context = browser.new_context(
  offline=True
)

```

```codeBlockLines_e6Vv
context = await browser.new_context(
  offline=True
)

```

## JavaScript Enabled [​](https://playwright.dev/python/docs/emulation\#javascript-enabled "Direct link to JavaScript Enabled")

Emulate a user scenario where JavaScript is disabled.

- Sync
- Async

```codeBlockLines_e6Vv
context = browser.new_context(
  java_script_enabled=False
)

```

```codeBlockLines_e6Vv
context = await browser.new_context(
  java_script_enabled=False
)

```

- [Introduction](https://playwright.dev/python/docs/emulation#introduction)
- [Devices](https://playwright.dev/python/docs/emulation#devices)
- [Viewport](https://playwright.dev/python/docs/emulation#viewport)
- [isMobile](https://playwright.dev/python/docs/emulation#ismobile)
- [Locale & Timezone](https://playwright.dev/python/docs/emulation#locale--timezone)
- [Permissions](https://playwright.dev/python/docs/emulation#permissions)
- [Geolocation](https://playwright.dev/python/docs/emulation#geolocation)
- [Color Scheme and Media](https://playwright.dev/python/docs/emulation#color-scheme-and-media)
- [User Agent](https://playwright.dev/python/docs/emulation#user-agent)
- [Offline](https://playwright.dev/python/docs/emulation#offline)
- [JavaScript Enabled](https://playwright.dev/python/docs/emulation#javascript-enabled)

## Playwright Debugging Tools
[Skip to main content](https://playwright.dev/python/docs/debug#__docusaurus_skipToContent_fallback)

On this page

## Playwright Inspector [​](https://playwright.dev/python/docs/debug\#playwright-inspector "Direct link to Playwright Inspector")

The Playwright Inspector is a GUI tool to help you debug your Playwright tests. It allows you to step through your tests, live edit locators, pick locators and see actionability logs.

![Playwright Inspector](https://user-images.githubusercontent.com/13063165/212924587-4b84e5f6-b147-40e9-8c75-d7b9ab6b7ca1.png)

### Run in debug mode [​](https://playwright.dev/python/docs/debug\#run-in-debug-mode "Direct link to Run in debug mode")

Set the `PWDEBUG` environment variable to run your Playwright tests in debug mode. This configures Playwright for debugging and opens the inspector. Additional useful defaults are configured when `PWDEBUG=1` is set:

- Browsers launch in headed mode
- Default timeout is set to 0 (= no timeout)

- Bash
- PowerShell
- Batch

```codeBlockLines_e6Vv
PWDEBUG=1 pytest -s

```

```codeBlockLines_e6Vv
$env:PWDEBUG=1
pytest -s

```

```codeBlockLines_e6Vv
set PWDEBUG=1
pytest -s

```

### Stepping through your tests [​](https://playwright.dev/python/docs/debug\#stepping-through-your-tests "Direct link to Stepping through your tests")

You can play, pause or step through each action of your test using the toolbar at the top of the Inspector. You can see the current action highlighted in the test code, and matching elements highlighted in the browser window.

![Playwright Inspector and browser](https://user-images.githubusercontent.com/13063165/212936618-84b87acc-bc2e-46ed-994b-32b2ef742e60.png)

### Run a test from a specific breakpoint [​](https://playwright.dev/python/docs/debug\#run-a-test-from-a-specific-breakpoint "Direct link to Run a test from a specific breakpoint")

To speed up the debugging process you can add a [page.pause()](https://playwright.dev/python/docs/api/class-page#page-pause) method to your test. This way you won't have to step through each action of your test to get to the point where you want to debug.

- Sync
- Async

```codeBlockLines_e6Vv
page.pause()

```

```codeBlockLines_e6Vv
await page.pause()

```

Once you add a `page.pause()` call, run your tests in debug mode. Clicking the "Resume" button in the Inspector will run the test and only stop on the `page.pause()`.

![test with page.pause](https://user-images.githubusercontent.com/13063165/219473050-122be4c2-31d0-4cbd-aa8b-8588e8b781a6.png)

### Live editing locators [​](https://playwright.dev/python/docs/debug\#live-editing-locators "Direct link to Live editing locators")

While running in debug mode you can live edit the locators. Next to the 'Pick Locator' button there is a field showing the [locator](https://playwright.dev/python/docs/locators) that the test is paused on. You can edit this locator directly in the **Pick Locator** field, and matching elements will be highlighted in the browser window.

![live editing locators](https://user-images.githubusercontent.com/13063165/212980815-1cf6ef7b-e69a-496c-898a-ec603a3bc562.png)

### Picking locators [​](https://playwright.dev/python/docs/debug\#picking-locators "Direct link to Picking locators")

While debugging, you might need to choose a more resilient locator. You can do this by clicking on the **Pick Locator** button and hovering over any element in the browser window. While hovering over an element you will see the code needed to locate this element highlighted below. Clicking an element in the browser will add the locator into the field where you can then either tweak it or copy it into your code.

![Picking locators](https://user-images.githubusercontent.com/13063165/212968640-ce82a027-9277-4bdf-b0a9-6282fb2becb7.png)

Playwright will look at your page and figure out the best locator, prioritizing [role, text and test id locators](https://playwright.dev/python/docs/locators). If Playwright finds multiple elements matching the locator, it will improve the locator to make it resilient and uniquely identify the target element, so you don't have to worry about failing tests due to locators.

### Actionability logs [​](https://playwright.dev/python/docs/debug\#actionability-logs "Direct link to Actionability logs")

By the time Playwright has paused on a click action, it has already performed [actionability checks](https://playwright.dev/python/docs/actionability) that can be found in the log. This can help you understand what happened during your test and what Playwright did or tried to do. The log tells you if the element was visible, enabled and stable, if the locator resolved to an element, scrolled into view, and so much more. If actionability can't be reached, it will show the action as pending.

![Actionability Logs](https://user-images.githubusercontent.com/13063165/212968907-5dede739-e0e3-482a-91cd-726a0f5b0b6d.png)

## Trace Viewer [​](https://playwright.dev/python/docs/debug\#trace-viewer "Direct link to Trace Viewer")

Playwright [Trace Viewer](https://playwright.dev/python/docs/trace-viewer) is a GUI tool that lets you explore recorded Playwright traces of your tests. You can go back and forward through each action on the left side, and visually see what was happening during the action. In the middle of the screen, you can see a DOM snapshot for the action. On the right side you can see action details, such as time, parameters, return value and log. You can also explore console messages, network requests and the source code.

Your browser does not support the video tag.

To learn more about how to record traces and use the Trace Viewer, check out the [Trace Viewer](https://playwright.dev/python/docs/trace-viewer) guide.

## Browser Developer Tools [​](https://playwright.dev/python/docs/debug\#browser-developer-tools "Direct link to Browser Developer Tools")

When running in Debug Mode with `PWDEBUG=console`, a `playwright` object is available in the Developer tools console. Developer tools can help you to:

- Inspect the DOM tree and **find element selectors**
- **See console logs** during execution (or learn how to [read logs via API](https://playwright.dev/python/docs/api/class-page#page-event-console))
- Check **network activity** and other developer tools features

This will also set the default timeouts of Playwright to 0 (= no timeout).

![Browser Developer Tools with Playwright object](https://user-images.githubusercontent.com/13063165/219128002-898f604d-9697-4b7f-95b5-a6a8260b7282.png)

To debug your tests using the browser developer tools, start by setting a breakpoint in your test to pause the execution using the [page.pause()](https://playwright.dev/python/docs/api/class-page#page-pause) method.

- Sync
- Async

```codeBlockLines_e6Vv
page.pause()

```

```codeBlockLines_e6Vv
await page.pause()

```

Once you have set a breakpoint in your test, you can then run your test with `PWDEBUG=console`.

- Bash
- PowerShell
- Batch

```codeBlockLines_e6Vv
PWDEBUG=console pytest -s

```

```codeBlockLines_e6Vv
$env:PWDEBUG=console
pytest -s

```

```codeBlockLines_e6Vv
set PWDEBUG=console
pytest -s

```

Once Playwright launches the browser window, you can open the developer tools. The `playwright` object will be available in the console panel.

#### playwright.$(selector) [​](https://playwright.dev/python/docs/debug\#playwrightselector "Direct link to playwright.$(selector)")

Query the Playwright selector, using the actual Playwright query engine, for example:

```codeBlockLines_e6Vv
playwright.$('.auth-form >> text=Log in');

<button>Log in</button>

```

#### playwright.$$(selector) [​](https://playwright.dev/python/docs/debug\#playwrightselector-1 "Direct link to playwright.$$(selector)")

Same as `playwright.$`, but returns all matching elements.

```codeBlockLines_e6Vv
playwright.$$('li >> text=John')

[<li>, <li>, <li>, <li>]

```

#### playwright.inspect(selector) [​](https://playwright.dev/python/docs/debug\#playwrightinspectselector "Direct link to playwright.inspect(selector)")

Reveal element in the Elements panel.

```codeBlockLines_e6Vv
playwright.inspect('text=Log in')

```

#### playwright.locator(selector) [​](https://playwright.dev/python/docs/debug\#playwrightlocatorselector "Direct link to playwright.locator(selector)")

Create a locator and query matching elements, for example:

```codeBlockLines_e6Vv
playwright.locator('.auth-form', { hasText: 'Log in' });

Locator ()
  - element: button
  - elements: [button]

```

#### playwright.selector(element) [​](https://playwright.dev/python/docs/debug\#playwrightselectorelement "Direct link to playwright.selector(element)")

Generates selector for the given element. For example, select an element in the Elements panel and pass `$0`:

```codeBlockLines_e6Vv
playwright.selector($0)

"div[id="glow-ingress-block"] >> text=/.*Hello.*/"

```

## Verbose API logs [​](https://playwright.dev/python/docs/debug\#verbose-api-logs "Direct link to Verbose API logs")

Playwright supports verbose logging with the `DEBUG` environment variable.

- Bash
- PowerShell
- Batch

```codeBlockLines_e6Vv
DEBUG=pw:api pytest -s

```

```codeBlockLines_e6Vv
$env:DEBUG="pw:api"
pytest -s

```

```codeBlockLines_e6Vv
set DEBUG=pw:api
pytest -s

```

note

**For WebKit**: launching WebKit Inspector during the execution will prevent the Playwright script from executing any further and will reset pre-configured user agent and device emulation.

## Headed mode [​](https://playwright.dev/python/docs/debug\#headed-mode "Direct link to Headed mode")

Playwright runs browsers in headless mode by default. To change this behavior, use `headless: false` as a launch option.

You can also use the [slow\_mo](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-slow-mo) option to slow down execution (by N milliseconds per operation) and follow along while debugging.

- Sync
- Async

```codeBlockLines_e6Vv
# Chromium, Firefox, or WebKit
chromium.launch(headless=False, slow_mo=100)

```

```codeBlockLines_e6Vv
# Chromium, Firefox, or WebKit
await chromium.launch(headless=False, slow_mo=100)

```

- [Playwright Inspector](https://playwright.dev/python/docs/debug#playwright-inspector)
  - [Run in debug mode](https://playwright.dev/python/docs/debug#run-in-debug-mode)
  - [Stepping through your tests](https://playwright.dev/python/docs/debug#stepping-through-your-tests)
  - [Run a test from a specific breakpoint](https://playwright.dev/python/docs/debug#run-a-test-from-a-specific-breakpoint)
  - [Live editing locators](https://playwright.dev/python/docs/debug#live-editing-locators)
  - [Picking locators](https://playwright.dev/python/docs/debug#picking-locators)
  - [Actionability logs](https://playwright.dev/python/docs/debug#actionability-logs)
- [Trace Viewer](https://playwright.dev/python/docs/debug#trace-viewer)
- [Browser Developer Tools](https://playwright.dev/python/docs/debug#browser-developer-tools)
- [Verbose API logs](https://playwright.dev/python/docs/debug#verbose-api-logs)
- [Headed mode](https://playwright.dev/python/docs/debug#headed-mode)

## Playwright Python Downloads
[Skip to main content](https://playwright.dev/python/docs/downloads#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/downloads\#introduction "Direct link to Introduction")

For every attachment downloaded by the page, [page.on("download")](https://playwright.dev/python/docs/api/class-page#page-event-download) event is emitted. All these attachments are downloaded into a temporary folder. You can obtain the download url, file name and payload stream using the [Download](https://playwright.dev/python/docs/api/class-download "Download") object from the event.

You can specify where to persist downloaded files using the [downloads\_path](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-downloads-path) option in [browser\_type.launch()](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch).

note

Downloaded files are deleted when the browser context that produced them is closed.

Here is the simplest way to handle the file download:

- Sync
- Async

```codeBlockLines_e6Vv
# Start waiting for the download
with page.expect_download() as download_info:
    # Perform the action that initiates download
    page.get_by_text("Download file").click()
download = download_info.value

# Wait for the download process to complete and save the downloaded file somewhere
download.save_as("/path/to/save/at/" + download.suggested_filename)

```

```codeBlockLines_e6Vv
# Start waiting for the download
async with page.expect_download() as download_info:
    # Perform the action that initiates download
    await page.get_by_text("Download file").click()
download = await download_info.value

# Wait for the download process to complete and save the downloaded file somewhere
await download.save_as("/path/to/save/at/" + download.suggested_filename)

```

#### Variations [​](https://playwright.dev/python/docs/downloads\#variations "Direct link to Variations")

If you have no idea what initiates the download, you can still handle the event:

- Sync
- Async

```codeBlockLines_e6Vv
page.on("download", lambda download: print(download.path()))

```

```codeBlockLines_e6Vv
async def handle_download(download):
    print(await download.path())
page.on("download", handle_download)

```

Note that handling the event forks the control flow and makes the script harder to follow. Your scenario might end while you are downloading a file since your main control flow is not awaiting for this operation to resolve.

note

For uploading files, see the [uploading files](https://playwright.dev/python/docs/input#upload-files) section.

- [Introduction](https://playwright.dev/python/docs/downloads#introduction)

## Playwright Locators Guide
[Skip to main content](https://playwright.dev/python/docs/locators#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/locators\#introduction "Direct link to Introduction")

[Locator](https://playwright.dev/python/docs/api/class-locator "Locator") s are the central piece of Playwright's auto-waiting and retry-ability. In a nutshell, locators represent a way to find element(s) on the page at any moment.

### Quick Guide [​](https://playwright.dev/python/docs/locators\#quick-guide "Direct link to Quick Guide")

These are the recommended built-in locators.

- [page.get\_by\_role()](https://playwright.dev/python/docs/locators#locate-by-role) to locate by explicit and implicit accessibility attributes.
- [page.get\_by\_text()](https://playwright.dev/python/docs/locators#locate-by-text) to locate by text content.
- [page.get\_by\_label()](https://playwright.dev/python/docs/locators#locate-by-label) to locate a form control by associated label's text.
- [page.get\_by\_placeholder()](https://playwright.dev/python/docs/locators#locate-by-placeholder) to locate an input by placeholder.
- [page.get\_by\_alt\_text()](https://playwright.dev/python/docs/locators#locate-by-alt-text) to locate an element, usually image, by its text alternative.
- [page.get\_by\_title()](https://playwright.dev/python/docs/locators#locate-by-title) to locate an element by its title attribute.
- [page.get\_by\_test\_id()](https://playwright.dev/python/docs/locators#locate-by-test-id) to locate an element based on its `data-testid` attribute (other attributes can be configured).

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_label("User Name").fill("John")

page.get_by_label("Password").fill("secret-password")

page.get_by_role("button", name="Sign in").click()

expect(page.get_by_text("Welcome, John!")).to_be_visible()

```

```codeBlockLines_e6Vv
await page.get_by_label("User Name").fill("John")

await page.get_by_label("Password").fill("secret-password")

await page.get_by_role("button", name="Sign in").click()

await expect(page.get_by_text("Welcome, John!")).to_be_visible()

```

## Locating elements [​](https://playwright.dev/python/docs/locators\#locating-elements "Direct link to Locating elements")

Playwright comes with multiple built-in locators. To make tests resilient, we recommend prioritizing user-facing attributes and explicit contracts such as [page.get\_by\_role()](https://playwright.dev/python/docs/api/class-page#page-get-by-role).

For example, consider the following DOM structure.

http://localhost:3000

Sign in

```codeBlockLines_e6Vv
<button>Sign in</button>

```

Locate the element by its role of `button` with name "Sign in".

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_role("button", name="Sign in").click()

```

```codeBlockLines_e6Vv
await page.get_by_role("button", name="Sign in").click()

```

note

Use the [code generator](https://playwright.dev/python/docs/codegen) to generate a locator, and then edit it as you'd like.

Every time a locator is used for an action, an up-to-date DOM element is located in the page. In the snippet below, the underlying DOM element will be located twice, once prior to every action. This means that if the DOM changes in between the calls due to re-render, the new element corresponding to the locator will be used.

- Sync
- Async

```codeBlockLines_e6Vv
locator = page.get_by_role("button", name="Sign in")

locator.hover()
locator.click()

```

```codeBlockLines_e6Vv
locator = page.get_by_role("button", name="Sign in")

await locator.hover()
await locator.click()

```

Note that all methods that create a locator, such as [page.get\_by\_label()](https://playwright.dev/python/docs/api/class-page#page-get-by-label), are also available on the [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") and [FrameLocator](https://playwright.dev/python/docs/api/class-framelocator "FrameLocator") classes, so you can chain them and iteratively narrow down your locator.

- Sync
- Async

```codeBlockLines_e6Vv
locator = page.frame_locator("my-frame").get_by_role("button", name="Sign in")

locator.click()

```

```codeBlockLines_e6Vv
locator = page.frame_locator("#my-frame").get_by_role("button", name="Sign in")

await locator.click()

```

### Locate by role [​](https://playwright.dev/python/docs/locators\#locate-by-role "Direct link to Locate by role")

The [page.get\_by\_role()](https://playwright.dev/python/docs/api/class-page#page-get-by-role) locator reflects how users and assistive technology perceive the page, for example whether some element is a button or a checkbox. When locating by role, you should usually pass the accessible name as well, so that the locator pinpoints the exact element.

For example, consider the following DOM structure.

http://localhost:3000

### Sign up

Subscribe

Submit

```codeBlockLines_e6Vv
<h3>Sign up</h3>
<label>
  <input type="checkbox" /> Subscribe
</label>
<br/>
<button>Submit</button>

```

You can locate each element by its implicit role:

- Sync
- Async

```codeBlockLines_e6Vv
expect(page.get_by_role("heading", name="Sign up")).to_be_visible()

page.get_by_role("checkbox", name="Subscribe").check()

page.get_by_role("button", name=re.compile("submit", re.IGNORECASE)).click()

```

```codeBlockLines_e6Vv
await expect(page.get_by_role("heading", name="Sign up")).to_be_visible()

await page.get_by_role("checkbox", name="Subscribe").check()

await page.get_by_role("button", name=re.compile("submit", re.IGNORECASE)).click()

```

Role locators include [buttons, checkboxes, headings, links, lists, tables, and many more](https://www.w3.org/TR/html-aria/#docconformance) and follow W3C specifications for [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name). Note that many html elements like `<button>` have an [implicitly defined role](https://w3c.github.io/html-aam/#html-element-role-mappings) that is recognized by the role locator.

Note that role locators **do not replace** accessibility audits and conformance tests, but rather give early feedback about the ARIA guidelines.

When to use role locators

We recommend prioritizing role locators to locate elements, as it is the closest way to how users and assistive technology perceive the page.

### Locate by label [​](https://playwright.dev/python/docs/locators\#locate-by-label "Direct link to Locate by label")

Most form controls usually have dedicated labels that could be conveniently used to interact with the form. In this case, you can locate the control by its associated label using [page.get\_by\_label()](https://playwright.dev/python/docs/api/class-page#page-get-by-label).

For example, consider the following DOM structure.

http://localhost:3000

Password

```codeBlockLines_e6Vv
<label>Password <input type="password" /></label>

```

You can fill the input after locating it by the label text:

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_label("Password").fill("secret")

```

```codeBlockLines_e6Vv
await page.get_by_label("Password").fill("secret")

```

When to use label locators

Use this locator when locating form fields.

### Locate by placeholder [​](https://playwright.dev/python/docs/locators\#locate-by-placeholder "Direct link to Locate by placeholder")

Inputs may have a placeholder attribute to hint to the user what value should be entered. You can locate such an input using [page.get\_by\_placeholder()](https://playwright.dev/python/docs/api/class-page#page-get-by-placeholder).

For example, consider the following DOM structure.

http://localhost:3000

```codeBlockLines_e6Vv
<input type="email" placeholder="name@example.com" />

```

You can fill the input after locating it by the placeholder text:

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_placeholder("name@example.com").fill("playwright@microsoft.com")

```

```codeBlockLines_e6Vv
await page.get_by_placeholder("name@example.com").fill("playwright@microsoft.com")

```

When to use placeholder locators

Use this locator when locating form elements that do not have labels but do have placeholder texts.

### Locate by text [​](https://playwright.dev/python/docs/locators\#locate-by-text "Direct link to Locate by text")

Find an element by the text it contains. You can match by a substring, exact string, or a regular expression when using [page.get\_by\_text()](https://playwright.dev/python/docs/api/class-page#page-get-by-text).

For example, consider the following DOM structure.

http://localhost:3000

Welcome, John

```codeBlockLines_e6Vv
<span>Welcome, John</span>

```

You can locate the element by the text it contains:

- Sync
- Async

```codeBlockLines_e6Vv
expect(page.get_by_text("Welcome, John")).to_be_visible()

```

```codeBlockLines_e6Vv
await expect(page.get_by_text("Welcome, John")).to_be_visible()

```

Set an exact match:

- Sync
- Async

```codeBlockLines_e6Vv
expect(page.get_by_text("Welcome, John", exact=True)).to_be_visible()

```

```codeBlockLines_e6Vv
await expect(page.get_by_text("Welcome, John", exact=True)).to_be_visible()

```

Match with a regular expression:

- Sync
- Async

```codeBlockLines_e6Vv
expect(page.get_by_text(re.compile("welcome, john", re.IGNORECASE))).to_be_visible()

```

```codeBlockLines_e6Vv
await expect(
    page.get_by_text(re.compile("welcome, john", re.IGNORECASE))
).to_be_visible()

```

note

Matching by text always normalizes whitespace, even with exact match. For example, it turns multiple spaces into one, turns line breaks into spaces and ignores leading and trailing whitespace.

When to use text locators

We recommend using text locators to find non interactive elements like `div`, `span`, `p`, etc. For interactive elements like `button`, `a`, `input`, etc. use [role locators](https://playwright.dev/python/docs/locators#locate-by-role).

You can also [filter by text](https://playwright.dev/python/docs/locators#filter-by-text) which can be useful when trying to find a particular item in a list.

### Locate by alt text [​](https://playwright.dev/python/docs/locators\#locate-by-alt-text "Direct link to Locate by alt text")

All images should have an `alt` attribute that describes the image. You can locate an image based on the text alternative using [page.get\_by\_alt\_text()](https://playwright.dev/python/docs/api/class-page#page-get-by-alt-text).

For example, consider the following DOM structure.

http://localhost:3000

![playwright logo](https://playwright.dev/img/playwright-logo.svg)

```codeBlockLines_e6Vv
<img alt="playwright logo" src="/img/playwright-logo.svg" width="100" />

```

You can click on the image after locating it by the text alternative:

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_alt_text("playwright logo").click()

```

```codeBlockLines_e6Vv
await page.get_by_alt_text("playwright logo").click()

```

When to use alt locators

Use this locator when your element supports alt text such as `img` and `area` elements.

### Locate by title [​](https://playwright.dev/python/docs/locators\#locate-by-title "Direct link to Locate by title")

Locate an element with a matching title attribute using [page.get\_by\_title()](https://playwright.dev/python/docs/api/class-page#page-get-by-title).

For example, consider the following DOM structure.

http://localhost:3000

25 issues

```codeBlockLines_e6Vv
<span title='Issues count'>25 issues</span>

```

You can check the issues count after locating it by the title text:

- Sync
- Async

```codeBlockLines_e6Vv
expect(page.get_by_title("Issues count")).to_have_text("25 issues")

```

```codeBlockLines_e6Vv
await expect(page.get_by_title("Issues count")).to_have_text("25 issues")

```

When to use title locators

Use this locator when your element has the `title` attribute.

### Locate by test id [​](https://playwright.dev/python/docs/locators\#locate-by-test-id "Direct link to Locate by test id")

Testing by test ids is the most resilient way of testing as even if your text or role of the attribute changes, the test will still pass. QA's and developers should define explicit test ids and query them with [page.get\_by\_test\_id()](https://playwright.dev/python/docs/api/class-page#page-get-by-test-id). However testing by test ids is not user facing. If the role or text value is important to you then consider using user facing locators such as [role](https://playwright.dev/python/docs/locators#locate-by-role) and [text locators](https://playwright.dev/python/docs/locators#locate-by-text).

For example, consider the following DOM structure.

http://localhost:3000

Itinéraire

```codeBlockLines_e6Vv
<button data-testid="directions">Itinéraire</button>

```

You can locate the element by its test id:

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_test_id("directions").click()

```

```codeBlockLines_e6Vv
await page.get_by_test_id("directions").click()

```

When to use testid locators

You can also use test ids when you choose to use the test id methodology or when you can't locate by [role](https://playwright.dev/python/docs/locators#locate-by-role) or [text](https://playwright.dev/python/docs/locators#locate-by-text).

#### Set a custom test id attribute [​](https://playwright.dev/python/docs/locators\#set-a-custom-test-id-attribute "Direct link to Set a custom test id attribute")

By default, [page.get\_by\_test\_id()](https://playwright.dev/python/docs/api/class-page#page-get-by-test-id) will locate elements based on the `data-testid` attribute, but you can configure it in your test config or by calling [selectors.set\_test\_id\_attribute()](https://playwright.dev/python/docs/api/class-selectors#selectors-set-test-id-attribute).

Set the test id to use a custom data attribute for your tests.

- Sync
- Async

```codeBlockLines_e6Vv
playwright.selectors.set_test_id_attribute("data-pw")

```

```codeBlockLines_e6Vv
playwright.selectors.set_test_id_attribute("data-pw")

```

In your html you can now use `data-pw` as your test id instead of the default `data-testid`.

http://localhost:3000

Itinéraire

```codeBlockLines_e6Vv
<button data-pw="directions">Itinéraire</button>

```

And then locate the element as you would normally do:

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_test_id("directions").click()

```

```codeBlockLines_e6Vv
await page.get_by_test_id("directions").click()

```

### Locate by CSS or XPath [​](https://playwright.dev/python/docs/locators\#locate-by-css-or-xpath "Direct link to Locate by CSS or XPath")

If you absolutely must use CSS or XPath locators, you can use [page.locator()](https://playwright.dev/python/docs/api/class-page#page-locator) to create a locator that takes a selector describing how to find an element in the page. Playwright supports CSS and XPath selectors, and auto-detects them if you omit `css=` or `xpath=` prefix.

- Sync
- Async

```codeBlockLines_e6Vv
page.locator("css=button").click()
page.locator("xpath=//button").click()

page.locator("button").click()
page.locator("//button").click()

```

```codeBlockLines_e6Vv
await page.locator("css=button").click()
await page.locator("xpath=//button").click()

await page.locator("button").click()
await page.locator("//button").click()

```

XPath and CSS selectors can be tied to the DOM structure or implementation. These selectors can break when the DOM structure changes. Long CSS or XPath chains below are an example of a **bad practice** that leads to unstable tests:

- Sync
- Async

```codeBlockLines_e6Vv
page.locator(
    "#tsf > div:nth-child(2) > div.A8SBwf > div.RNNXgb > div > div.a4bIc > input"
).click()

page.locator('//*[@id="tsf"]/div[2]/div[1]/div[1]/div/div[2]/input').click()

```

```codeBlockLines_e6Vv
await page.locator(
    "#tsf > div:nth-child(2) > div.A8SBwf > div.RNNXgb > div > div.a4bIc > input"
).click()

await page.locator('//*[@id="tsf"]/div[2]/div[1]/div[1]/div/div[2]/input').click()

```

When to use this

CSS and XPath are not recommended as the DOM can often change leading to non resilient tests. Instead, try to come up with a locator that is close to how the user perceives the page such as [role locators](https://playwright.dev/python/docs/locators#locate-by-role) or [define an explicit testing contract](https://playwright.dev/python/docs/locators#locate-by-test-id) using test ids.

## Locate in Shadow DOM [​](https://playwright.dev/python/docs/locators\#locate-in-shadow-dom "Direct link to Locate in Shadow DOM")

All locators in Playwright **by default** work with elements in Shadow DOM. The exceptions are:

- Locating by XPath does not pierce shadow roots.
- [Closed-mode shadow roots](https://developer.mozilla.org/en-US/docs/Web/API/Element/attachShadow#parameters) are not supported.

Consider the following example with a custom web component:

```codeBlockLines_e6Vv
<x-details role=button aria-expanded=true aria-controls=inner-details>
  <div>Title</div>
  #shadow-root
    <div id=inner-details>Details</div>
</x-details>

```

You can locate in the same way as if the shadow root was not present at all.

To click `<div>Details</div>`:

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_text("Details").click()

```

```codeBlockLines_e6Vv
await page.get_by_text("Details").click()

```

```codeBlockLines_e6Vv
<x-details role=button aria-expanded=true aria-controls=inner-details>
  <div>Title</div>
  #shadow-root
    <div id=inner-details>Details</div>
</x-details>

```

To click `<x-details>`:

- Sync
- Async

```codeBlockLines_e6Vv
page.locator("x-details", has_text="Details").click()

```

```codeBlockLines_e6Vv
await page.locator("x-details", has_text="Details").click()

```

```codeBlockLines_e6Vv
<x-details role=button aria-expanded=true aria-controls=inner-details>
  <div>Title</div>
  #shadow-root
    <div id=inner-details>Details</div>
</x-details>

```

To ensure that `<x-details>` contains the text "Details":

- Sync
- Async

```codeBlockLines_e6Vv
expect(page.locator("x-details")).to_contain_text("Details")

```

```codeBlockLines_e6Vv
await expect(page.locator("x-details")).to_contain_text("Details")

```

## Filtering Locators [​](https://playwright.dev/python/docs/locators\#filtering-locators "Direct link to Filtering Locators")

Consider the following DOM structure where we want to click on the buy button of the second product card. We have a few options in order to filter the locators to get the right one.

http://localhost:3000

- ### Product 1

Add to cart
- ### Product 2

Add to cart

```codeBlockLines_e6Vv
<ul>
  <li>
    <h3>Product 1</h3>
    <button>Add to cart</button>
  </li>
  <li>
    <h3>Product 2</h3>
    <button>Add to cart</button>
  </li>
</ul>

```

### Filter by text [​](https://playwright.dev/python/docs/locators\#filter-by-text "Direct link to Filter by text")

Locators can be filtered by text with the [locator.filter()](https://playwright.dev/python/docs/api/class-locator#locator-filter) method. It will search for a particular string somewhere inside the element, possibly in a descendant element, case-insensitively. You can also pass a regular expression.

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_role("listitem").filter(has_text="Product 2").get_by_role(
    "button", name="Add to cart"
).click()

```

```codeBlockLines_e6Vv
await page.get_by_role("listitem").filter(has_text="Product 2").get_by_role(
    "button", name="Add to cart"
).click()

```

Use a regular expression:

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_role("listitem").filter(has_text=re.compile("Product 2")).get_by_role(
    "button", name="Add to cart"
).click()

```

```codeBlockLines_e6Vv
await page.get_by_role("listitem").filter(has_text=re.compile("Product 2")).get_by_role(
    "button", name="Add to cart"
).click()

```

### Filter by not having text [​](https://playwright.dev/python/docs/locators\#filter-by-not-having-text "Direct link to Filter by not having text")

Alternatively, filter by **not having** text:

- Sync
- Async

```codeBlockLines_e6Vv
# 5 in-stock items
expect(page.get_by_role("listitem").filter(has_not_text="Out of stock")).to_have_count(5)

```

```codeBlockLines_e6Vv
# 5 in-stock items
await expect(page.get_by_role("listitem").filter(has_not_text="Out of stock")).to_have_count(5)

```

### Filter by child/descendant [​](https://playwright.dev/python/docs/locators\#filter-by-childdescendant "Direct link to Filter by child/descendant")

Locators support an option to only select elements that have or have not a descendant matching another locator. You can therefore filter by any other locator such as a [locator.get\_by\_role()](https://playwright.dev/python/docs/api/class-locator#locator-get-by-role), [locator.get\_by\_test\_id()](https://playwright.dev/python/docs/api/class-locator#locator-get-by-test-id), [locator.get\_by\_text()](https://playwright.dev/python/docs/api/class-locator#locator-get-by-text) etc.

http://localhost:3000

- ### Product 1

Add to cart
- ### Product 2

Add to cart

```codeBlockLines_e6Vv
<ul>
  <li>
    <h3>Product 1</h3>
    <button>Add to cart</button>
  </li>
  <li>
    <h3>Product 2</h3>
    <button>Add to cart</button>
  </li>
</ul>

```

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_role("listitem").filter(
    has=page.get_by_role("heading", name="Product 2")
).get_by_role("button", name="Add to cart").click()

```

```codeBlockLines_e6Vv
await page.get_by_role("listitem").filter(
    has=page.get_by_role("heading", name="Product 2")
).get_by_role("button", name="Add to cart").click()

```

We can also assert the product card to make sure there is only one:

- Sync
- Async

```codeBlockLines_e6Vv
expect(
    page.get_by_role("listitem").filter(
        has=page.get_by_role("heading", name="Product 2")
    )
).to_have_count(1)

```

```codeBlockLines_e6Vv
await expect(
    page.get_by_role("listitem").filter(
        has=page.get_by_role("heading", name="Product 2")
    )
).to_have_count(1)

```

The filtering locator **must be relative** to the original locator and is queried starting with the original locator match, not the document root. Therefore, the following will not work, because the filtering locator starts matching from the `<ul>` list element that is outside of the `<li>` list item matched by the original locator:

- Sync
- Async

```codeBlockLines_e6Vv
# ✖ WRONG
expect(
    page.get_by_role("listitem").filter(
        has=page.get_by_role("list").get_by_role("heading", name="Product 2")
    )
).to_have_count(1)

```

```codeBlockLines_e6Vv
# ✖ WRONG
await expect(
    page.get_by_role("listitem").filter(
        has=page.get_by_role("list").get_by_role("heading", name="Product 2")
    )
).to_have_count(1)

```

### Filter by not having child/descendant [​](https://playwright.dev/python/docs/locators\#filter-by-not-having-childdescendant "Direct link to Filter by not having child/descendant")

We can also filter by **not having** a matching element inside.

- Sync
- Async

```codeBlockLines_e6Vv
expect(
    page.get_by_role("listitem").filter(
        has_not=page.get_by_role("heading", name="Product 2")
    )
).to_have_count(1)

```

```codeBlockLines_e6Vv
await expect(
    page.get_by_role("listitem").filter(
        has_not=page.get_by_role("heading", name="Product 2")
    )
).to_have_count(1)

```

Note that the inner locator is matched starting from the outer one, not from the document root.

## Locator operators [​](https://playwright.dev/python/docs/locators\#locator-operators "Direct link to Locator operators")

### Matching inside a locator [​](https://playwright.dev/python/docs/locators\#matching-inside-a-locator "Direct link to Matching inside a locator")

You can chain methods that create a locator, like [page.get\_by\_text()](https://playwright.dev/python/docs/api/class-page#page-get-by-text) or [locator.get\_by\_role()](https://playwright.dev/python/docs/api/class-locator#locator-get-by-role), to narrow down the search to a particular part of the page.

In this example we first create a locator called product by locating its role of `listitem`. We then filter by text. We can use the product locator again to get by role of button and click it and then use an assertion to make sure there is only one product with the text "Product 2".

- Sync
- Async

```codeBlockLines_e6Vv
product = page.get_by_role("listitem").filter(has_text="Product 2")

product.get_by_role("button", name="Add to cart").click()

```

```codeBlockLines_e6Vv
product = page.get_by_role("listitem").filter(has_text="Product 2")

await product.get_by_role("button", name="Add to cart").click()

```

You can also chain two locators together, for example to find a "Save" button inside a particular dialog:

- Sync
- Async

```codeBlockLines_e6Vv
save_button = page.get_by_role("button", name="Save")
# ...
dialog = page.get_by_test_id("settings-dialog")
dialog.locator(save_button).click()

```

```codeBlockLines_e6Vv
save_button = page.get_by_role("button", name="Save")
# ...
dialog = page.get_by_test_id("settings-dialog")
await dialog.locator(save_button).click()

```

### Matching two locators simultaneously [​](https://playwright.dev/python/docs/locators\#matching-two-locators-simultaneously "Direct link to Matching two locators simultaneously")

Method [locator.and\_()](https://playwright.dev/python/docs/api/class-locator#locator-and) narrows down an existing locator by matching an additional locator. For example, you can combine [page.get\_by\_role()](https://playwright.dev/python/docs/api/class-page#page-get-by-role) and [page.get\_by\_title()](https://playwright.dev/python/docs/api/class-page#page-get-by-title) to match by both role and title.

- Sync
- Async

```codeBlockLines_e6Vv
button = page.get_by_role("button").and_(page.getByTitle("Subscribe"))

```

```codeBlockLines_e6Vv
button = page.get_by_role("button").and_(page.getByTitle("Subscribe"))

```

### Matching one of the two alternative locators [​](https://playwright.dev/python/docs/locators\#matching-one-of-the-two-alternative-locators "Direct link to Matching one of the two alternative locators")

If you'd like to target one of the two or more elements, and you don't know which one it will be, use [locator.or\_()](https://playwright.dev/python/docs/api/class-locator#locator-or) to create a locator that matches any one or both of the alternatives.

For example, consider a scenario where you'd like to click on a "New email" button, but sometimes a security settings dialog shows up instead. In this case, you can wait for either a "New email" button, or a dialog and act accordingly.

note

If both "New email" button and security dialog appear on screen, the "or" locator will match both of them, possibly throwing the ["strict mode violation" error](https://playwright.dev/python/docs/locators#strictness). In this case, you can use [locator.first](https://playwright.dev/python/docs/api/class-locator#locator-first) to only match one of them.

- Sync
- Async

```codeBlockLines_e6Vv
new_email = page.get_by_role("button", name="New")
dialog = page.get_by_text("Confirm security settings")
expect(new_email.or_(dialog).first).to_be_visible()
if (dialog.is_visible()):
  page.get_by_role("button", name="Dismiss").click()
new_email.click()

```

```codeBlockLines_e6Vv
new_email = page.get_by_role("button", name="New")
dialog = page.get_by_text("Confirm security settings")
await expect(new_email.or_(dialog).first).to_be_visible()
if (await dialog.is_visible()):
  await page.get_by_role("button", name="Dismiss").click()
await new_email.click()

```

### Matching only visible elements [​](https://playwright.dev/python/docs/locators\#matching-only-visible-elements "Direct link to Matching only visible elements")

note

It's usually better to find a [more reliable way](https://playwright.dev/python/docs/locators#quick-guide) to uniquely identify the element instead of checking the visibility.

Consider a page with two buttons, the first invisible and the second [visible](https://playwright.dev/python/docs/actionability#visible).

```codeBlockLines_e6Vv
<button style='display: none'>Invisible</button>
<button>Visible</button>

```

- This will find both buttons and throw a [strictness](https://playwright.dev/python/docs/locators#strictness) violation error:



- Sync
- Async

```codeBlockLines_e6Vv
page.locator("button").click()

```

```codeBlockLines_e6Vv
await page.locator("button").click()

```

- This will only find a second button, because it is visible, and then click it.



- Sync
- Async

```codeBlockLines_e6Vv
page.locator("button").filter(visible=True).click()

```

```codeBlockLines_e6Vv
await page.locator("button").filter(visible=True).click()

```

## Lists [​](https://playwright.dev/python/docs/locators\#lists "Direct link to Lists")

### Count items in a list [​](https://playwright.dev/python/docs/locators\#count-items-in-a-list "Direct link to Count items in a list")

You can assert locators in order to count the items in a list.

For example, consider the following DOM structure:

http://localhost:3000

- apple
- banana
- orange

```codeBlockLines_e6Vv
<ul>
  <li>apple</li>
  <li>banana</li>
  <li>orange</li>
</ul>

```

Use the count assertion to ensure that the list has 3 items.

- Sync
- Async

```codeBlockLines_e6Vv
expect(page.get_by_role("listitem")).to_have_count(3)

```

```codeBlockLines_e6Vv
await expect(page.get_by_role("listitem")).to_have_count(3)

```

### Assert all text in a list [​](https://playwright.dev/python/docs/locators\#assert-all-text-in-a-list "Direct link to Assert all text in a list")

You can assert locators in order to find all the text in a list.

For example, consider the following DOM structure:

http://localhost:3000

- apple
- banana
- orange

```codeBlockLines_e6Vv
<ul>
  <li>apple</li>
  <li>banana</li>
  <li>orange</li>
</ul>

```

Use [expect(locator).to\_have\_text()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-text) to ensure that the list has the text "apple", "banana" and "orange".

- Sync
- Async

```codeBlockLines_e6Vv
expect(page.get_by_role("listitem")).to_have_text(["apple", "banana", "orange"])

```

```codeBlockLines_e6Vv
await expect(page.get_by_role("listitem")).to_have_text(["apple", "banana", "orange"])

```

### Get a specific item [​](https://playwright.dev/python/docs/locators\#get-a-specific-item "Direct link to Get a specific item")

There are many ways to get a specific item in a list.

#### Get by text [​](https://playwright.dev/python/docs/locators\#get-by-text "Direct link to Get by text")

Use the [page.get\_by\_text()](https://playwright.dev/python/docs/api/class-page#page-get-by-text) method to locate an element in a list by its text content and then click on it.

For example, consider the following DOM structure:

http://localhost:3000

- apple
- banana
- orange

```codeBlockLines_e6Vv
<ul>
  <li>apple</li>
  <li>banana</li>
  <li>orange</li>
</ul>

```

Locate an item by its text content and click it.

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_text("orange").click()

```

```codeBlockLines_e6Vv
await page.get_by_text("orange").click()

```

#### Filter by text [​](https://playwright.dev/python/docs/locators\#filter-by-text-1 "Direct link to Filter by text")

Use the [locator.filter()](https://playwright.dev/python/docs/api/class-locator#locator-filter) to locate a specific item in a list.

For example, consider the following DOM structure:

http://localhost:3000

- apple
- banana
- orange

```codeBlockLines_e6Vv
<ul>
  <li>apple</li>
  <li>banana</li>
  <li>orange</li>
</ul>

```

Locate an item by the role of "listitem" and then filter by the text of "orange" and then click it.

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_role("listitem").filter(has_text="orange").click()

```

```codeBlockLines_e6Vv
await page.get_by_role("listitem").filter(has_text="orange").click()

```

#### Get by test id [​](https://playwright.dev/python/docs/locators\#get-by-test-id "Direct link to Get by test id")

Use the [page.get\_by\_test\_id()](https://playwright.dev/python/docs/api/class-page#page-get-by-test-id) method to locate an element in a list. You may need to modify the html and add a test id if you don't already have a test id.

For example, consider the following DOM structure:

http://localhost:3000

- apple
- banana
- orange

```codeBlockLines_e6Vv
<ul>
  <li data-testid='apple'>apple</li>
  <li data-testid='banana'>banana</li>
  <li data-testid='orange'>orange</li>
</ul>

```

Locate an item by its test id of "orange" and then click it.

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_test_id("orange").click()

```

```codeBlockLines_e6Vv
await page.get_by_test_id("orange").click()

```

#### Get by nth item [​](https://playwright.dev/python/docs/locators\#get-by-nth-item "Direct link to Get by nth item")

If you have a list of identical elements, and the only way to distinguish between them is the order, you can choose a specific element from a list with [locator.first](https://playwright.dev/python/docs/api/class-locator#locator-first), [locator.last](https://playwright.dev/python/docs/api/class-locator#locator-last) or [locator.nth()](https://playwright.dev/python/docs/api/class-locator#locator-nth).

- Sync
- Async

```codeBlockLines_e6Vv
banana = page.get_by_role("listitem").nth(1)

```

```codeBlockLines_e6Vv
banana = await page.get_by_role("listitem").nth(1)

```

However, use this method with caution. Often times, the page might change, and the locator will point to a completely different element from the one you expected. Instead, try to come up with a unique locator that will pass the [strictness criteria](https://playwright.dev/python/docs/locators#strictness).

### Chaining filters [​](https://playwright.dev/python/docs/locators\#chaining-filters "Direct link to Chaining filters")

When you have elements with various similarities, you can use the [locator.filter()](https://playwright.dev/python/docs/api/class-locator#locator-filter) method to select the right one. You can also chain multiple filters to narrow down the selection.

For example, consider the following DOM structure:

http://localhost:3000

- John

Say hello

- Mary

Say hello

- John

Say goodbye

- Mary

Say goodbye


```codeBlockLines_e6Vv
<ul>
  <li>
    <div>John</div>
    <div><button>Say hello</button></div>
  </li>
  <li>
    <div>Mary</div>
    <div><button>Say hello</button></div>
  </li>
  <li>
    <div>John</div>
    <div><button>Say goodbye</button></div>
  </li>
  <li>
    <div>Mary</div>
    <div><button>Say goodbye</button></div>
  </li>
</ul>

```

To take a screenshot of the row with "Mary" and "Say goodbye":

- Sync
- Async

```codeBlockLines_e6Vv
row_locator = page.get_by_role("listitem")

row_locator.filter(has_text="Mary").filter(
    has=page.get_by_role("button", name="Say goodbye")
).screenshot(path="screenshot.png")

```

```codeBlockLines_e6Vv
row_locator = page.get_by_role("listitem")

await row_locator.filter(has_text="Mary").filter(
    has=page.get_by_role("button", name="Say goodbye")
).screenshot(path="screenshot.png")

```

You should now have a "screenshot.png" file in your project's root directory.

### Rare use cases [​](https://playwright.dev/python/docs/locators\#rare-use-cases "Direct link to Rare use cases")

#### Do something with each element in the list [​](https://playwright.dev/python/docs/locators\#do-something-with-each-element-in-the-list "Direct link to Do something with each element in the list")

Iterate elements:

- Sync
- Async

```codeBlockLines_e6Vv
for row in page.get_by_role("listitem").all():
    print(row.text_content())

```

```codeBlockLines_e6Vv
for row in await page.get_by_role("listitem").all():
    print(await row.text_content())

```

Iterate using regular for loop:

- Sync
- Async

```codeBlockLines_e6Vv
rows = page.get_by_role("listitem")
count = rows.count()
for i in range(count):
    print(rows.nth(i).text_content())

```

```codeBlockLines_e6Vv
rows = page.get_by_role("listitem")
count = await rows.count()
for i in range(count):
    print(await rows.nth(i).text_content())

```

#### Evaluate in the page [​](https://playwright.dev/python/docs/locators\#evaluate-in-the-page "Direct link to Evaluate in the page")

The code inside [locator.evaluate\_all()](https://playwright.dev/python/docs/api/class-locator#locator-evaluate-all) runs in the page, you can call any DOM apis there.

- Sync
- Async

```codeBlockLines_e6Vv
rows = page.get_by_role("listitem")
texts = rows.evaluate_all("list => list.map(element => element.textContent)")

```

```codeBlockLines_e6Vv
rows = page.get_by_role("listitem")
texts = await rows.evaluate_all("list => list.map(element => element.textContent)")

```

## Strictness [​](https://playwright.dev/python/docs/locators\#strictness "Direct link to Strictness")

Locators are strict. This means that all operations on locators that imply some target DOM element will throw an exception if more than one element matches. For example, the following call throws if there are several buttons in the DOM:

#### Throws an error if more than one [​](https://playwright.dev/python/docs/locators\#throws-an-error-if-more-than-one "Direct link to Throws an error if more than one")

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_role("button").click()

```

```codeBlockLines_e6Vv
await page.get_by_role("button").click()

```

On the other hand, Playwright understands when you perform a multiple-element operation, so the following call works perfectly fine when the locator resolves to multiple elements.

#### Works fine with multiple elements [​](https://playwright.dev/python/docs/locators\#works-fine-with-multiple-elements "Direct link to Works fine with multiple elements")

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_role("button").count()

```

```codeBlockLines_e6Vv
await page.get_by_role("button").count()

```

You can explicitly opt-out from strictness check by telling Playwright which element to use when multiple elements match, through [locator.first](https://playwright.dev/python/docs/api/class-locator#locator-first), [locator.last](https://playwright.dev/python/docs/api/class-locator#locator-last), and [locator.nth()](https://playwright.dev/python/docs/api/class-locator#locator-nth). These methods are **not recommended** because when your page changes, Playwright may click on an element you did not intend. Instead, follow best practices above to create a locator that uniquely identifies the target element.

## More Locators [​](https://playwright.dev/python/docs/locators\#more-locators "Direct link to More Locators")

For less commonly used locators, look at the [other locators](https://playwright.dev/python/docs/other-locators) guide.

- [Introduction](https://playwright.dev/python/docs/locators#introduction)
  - [Quick Guide](https://playwright.dev/python/docs/locators#quick-guide)
- [Locating elements](https://playwright.dev/python/docs/locators#locating-elements)
  - [Locate by role](https://playwright.dev/python/docs/locators#locate-by-role)
  - [Locate by label](https://playwright.dev/python/docs/locators#locate-by-label)
  - [Locate by placeholder](https://playwright.dev/python/docs/locators#locate-by-placeholder)
  - [Locate by text](https://playwright.dev/python/docs/locators#locate-by-text)
  - [Locate by alt text](https://playwright.dev/python/docs/locators#locate-by-alt-text)
  - [Locate by title](https://playwright.dev/python/docs/locators#locate-by-title)
  - [Locate by test id](https://playwright.dev/python/docs/locators#locate-by-test-id)
  - [Locate by CSS or XPath](https://playwright.dev/python/docs/locators#locate-by-css-or-xpath)
- [Locate in Shadow DOM](https://playwright.dev/python/docs/locators#locate-in-shadow-dom)
- [Filtering Locators](https://playwright.dev/python/docs/locators#filtering-locators)
  - [Filter by text](https://playwright.dev/python/docs/locators#filter-by-text)
  - [Filter by not having text](https://playwright.dev/python/docs/locators#filter-by-not-having-text)
  - [Filter by child/descendant](https://playwright.dev/python/docs/locators#filter-by-childdescendant)
  - [Filter by not having child/descendant](https://playwright.dev/python/docs/locators#filter-by-not-having-childdescendant)
- [Locator operators](https://playwright.dev/python/docs/locators#locator-operators)
  - [Matching inside a locator](https://playwright.dev/python/docs/locators#matching-inside-a-locator)
  - [Matching two locators simultaneously](https://playwright.dev/python/docs/locators#matching-two-locators-simultaneously)
  - [Matching one of the two alternative locators](https://playwright.dev/python/docs/locators#matching-one-of-the-two-alternative-locators)
  - [Matching only visible elements](https://playwright.dev/python/docs/locators#matching-only-visible-elements)
- [Lists](https://playwright.dev/python/docs/locators#lists)
  - [Count items in a list](https://playwright.dev/python/docs/locators#count-items-in-a-list)
  - [Assert all text in a list](https://playwright.dev/python/docs/locators#assert-all-text-in-a-list)
  - [Get a specific item](https://playwright.dev/python/docs/locators#get-a-specific-item)
  - [Chaining filters](https://playwright.dev/python/docs/locators#chaining-filters)
  - [Rare use cases](https://playwright.dev/python/docs/locators#rare-use-cases)
- [Strictness](https://playwright.dev/python/docs/locators#strictness)
- [More Locators](https://playwright.dev/python/docs/locators#more-locators)

## Playwright Video Recording
[Skip to main content](https://playwright.dev/python/docs/videos#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/videos\#introduction "Direct link to Introduction")

With Playwright you can record videos for your tests.

## Record video [​](https://playwright.dev/python/docs/videos\#record-video "Direct link to Record video")

Videos are saved upon [browser context](https://playwright.dev/python/docs/browser-contexts) closure at the end of a test. If you create a browser context manually, make sure to await [browser\_context.close()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-close).

- Sync
- Async

```codeBlockLines_e6Vv
context = browser.new_context(record_video_dir="videos/")
# Make sure to close, so that videos are saved.
context.close()

```

```codeBlockLines_e6Vv
context = await browser.new_context(record_video_dir="videos/")
# Make sure to await close, so that videos are saved.
await context.close()

```

You can also specify video size. The video size defaults to the viewport size scaled down to fit 800x800. The video of the viewport is placed in the top-left corner of the output video, scaled down to fit if necessary. You may need to set the viewport size to match your desired video size.

- Sync
- Async

```codeBlockLines_e6Vv
context = browser.new_context(
    record_video_dir="videos/",
    record_video_size={"width": 640, "height": 480}
)

```

```codeBlockLines_e6Vv
context = await browser.new_context(
    record_video_dir="videos/",
    record_video_size={"width": 640, "height": 480}
)

```

Saved video files will appear in the specified folder. They all have generated unique names. For the multi-page scenarios, you can access the video file associated with the page via the [page.video](https://playwright.dev/python/docs/api/class-page#page-video).

- Sync
- Async

```codeBlockLines_e6Vv
path = page.video.path()

```

```codeBlockLines_e6Vv
path = await page.video.path()

```

note

Note that the video is only available after the page or browser context is closed.

- [Introduction](https://playwright.dev/python/docs/videos#introduction)
- [Record video](https://playwright.dev/python/docs/videos#record-video)

## Page Object Models
[Skip to main content](https://playwright.dev/python/docs/pom#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/pom\#introduction "Direct link to Introduction")

Large test suites can be structured to optimize ease of authoring and maintenance. Page object models are one such approach to structure your test suite.

A page object represents a part of your web application. An e-commerce web application might have a home page, a listings page and a checkout page. Each of them can be represented by page object models.

Page objects **simplify authoring** by creating a higher-level API which suits your application and **simplify maintenance** by capturing element selectors in one place and create reusable code to avoid repetition.

## Implementation [​](https://playwright.dev/python/docs/pom\#implementation "Direct link to Implementation")

Page object models wrap over a Playwright [Page](https://playwright.dev/python/docs/api/class-page "Page").

- Sync
- Async

models/search.py

```codeBlockLines_e6Vv
class SearchPage:
    def __init__(self, page):
        self.page = page
        self.search_term_input = page.locator('[aria-label="Enter your search term"]')

    def navigate(self):
        self.page.goto("https://bing.com")

    def search(self, text):
        self.search_term_input.fill(text)
        self.search_term_input.press("Enter")

```

models/search.py

```codeBlockLines_e6Vv
class SearchPage:
    def __init__(self, page):
        self.page = page
        self.search_term_input = page.locator('[aria-label="Enter your search term"]')

    async def navigate(self):
        await self.page.goto("https://bing.com")

    async def search(self, text):
        await self.search_term_input.fill(text)
        await self.search_term_input.press("Enter")

```

Page objects can then be used inside a test.

- Sync
- Async

test\_search.py

```codeBlockLines_e6Vv
from models.search import SearchPage

# in the test
page = browser.new_page()
search_page = SearchPage(page)
search_page.navigate()
search_page.search("search query")

```

test\_search.py

```codeBlockLines_e6Vv
from models.search import SearchPage

# in the test
page = await browser.new_page()
search_page = SearchPage(page)
await search_page.navigate()
await search_page.search("search query")

```

- [Introduction](https://playwright.dev/python/docs/pom#introduction)
- [Implementation](https://playwright.dev/python/docs/pom#implementation)

## Playwright Handles Overview
[Skip to main content](https://playwright.dev/python/docs/handles#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/handles\#introduction "Direct link to Introduction")

Playwright can create handles to the page DOM elements or any other objects inside the page. These handles live in the Playwright process, whereas the actual objects live in the browser. There are two types of handles:

- [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle") to reference any JavaScript objects in the page
- [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") to reference DOM elements in the page, it has extra methods that allow performing actions on the elements and asserting their properties.

Since any DOM element in the page is also a JavaScript object, any [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") is a [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle") as well.

Handles are used to perform operations on those actual objects in the page. You can evaluate on a handle, get handle properties, pass handle as an evaluation parameter, serialize page object into JSON etc. See the [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle") class API for these and methods.

### API reference [​](https://playwright.dev/python/docs/handles\#api-reference "Direct link to API reference")

- [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle")
- [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle")

Here is the easiest way to obtain a [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle").

- Sync
- Async

```codeBlockLines_e6Vv
js_handle = page.evaluate_handle('window')
#  Use jsHandle for evaluations.

```

```codeBlockLines_e6Vv
js_handle = await page.evaluate_handle('window')
#  Use jsHandle for evaluations.

```

## Element Handles [​](https://playwright.dev/python/docs/handles\#element-handles "Direct link to Element Handles")

Discouraged

The use of [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") is discouraged, use [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") objects and web-first assertions instead.

When [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") is required, it is recommended to fetch it with the [page.wait\_for\_selector()](https://playwright.dev/python/docs/api/class-page#page-wait-for-selector) or [frame.wait\_for\_selector()](https://playwright.dev/python/docs/api/class-frame#frame-wait-for-selector) methods. These APIs wait for the element to be attached and visible.

- Sync
- Async

```codeBlockLines_e6Vv
# Get the element handle
element_handle = page.wait_for_selector('#box')

# Assert bounding box for the element
bounding_box = element_handle.bounding_box()
assert bounding_box.width == 100

# Assert attribute for the element
class_names = element_handle.get_attribute('class')
assert 'highlighted' in class_names

```

```codeBlockLines_e6Vv
# Get the element handle
element_handle = page.wait_for_selector('#box')

# Assert bounding box for the element
bounding_box = await element_handle.bounding_box()
assert bounding_box.width == 100

# Assert attribute for the element
class_names = await element_handle.get_attribute('class')
assert 'highlighted' in class_names

```

## Handles as parameters [​](https://playwright.dev/python/docs/handles\#handles-as-parameters "Direct link to Handles as parameters")

Handles can be passed into the [page.evaluate()](https://playwright.dev/python/docs/api/class-page#page-evaluate) and similar methods. The following snippet creates a new array in the page, initializes it with data and returns a handle to this array into Playwright. It then uses the handle in subsequent evaluations:

- Sync
- Async

```codeBlockLines_e6Vv
# Create new array in page.
my_array_handle = page.evaluate_handle("""() => {
  window.myArray = [1];
  return myArray;
}""")

# Get current length of the array.
length = page.evaluate("a => a.length", my_array_handle)

# Add one more element to the array using the handle
page.evaluate("(arg) => arg.myArray.push(arg.newElement)", {
  'myArray': my_array_handle,
  'newElement': 2
})

# Release the object when it's no longer needed.
my_array_handle.dispose()

```

```codeBlockLines_e6Vv
# Create new array in page.
my_array_handle = await page.evaluate_handle("""() => {
  window.myArray = [1];
  return myArray;
}""")

# Get current length of the array.
length = await page.evaluate("a => a.length", my_array_handle)

# Add one more element to the array using the handle
await page.evaluate("(arg) => arg.myArray.push(arg.newElement)", {
  'myArray': my_array_handle,
  'newElement': 2
})

# Release the object when it's no longer needed.
await my_array_handle.dispose()

```

## Handle Lifecycle [​](https://playwright.dev/python/docs/handles\#handle-lifecycle "Direct link to Handle Lifecycle")

Handles can be acquired using the page methods such as [page.evaluate\_handle()](https://playwright.dev/python/docs/api/class-page#page-evaluate-handle), [page.query\_selector()](https://playwright.dev/python/docs/api/class-page#page-query-selector) or [page.query\_selector\_all()](https://playwright.dev/python/docs/api/class-page#page-query-selector-all) or their frame counterparts [frame.evaluate\_handle()](https://playwright.dev/python/docs/api/class-frame#frame-evaluate-handle), [frame.query\_selector()](https://playwright.dev/python/docs/api/class-frame#frame-query-selector) or [frame.query\_selector\_all()](https://playwright.dev/python/docs/api/class-frame#frame-query-selector-all). Once created, handles will retain object from [garbage collection](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management) unless page navigates or the handle is manually disposed via the [js\_handle.dispose()](https://playwright.dev/python/docs/api/class-jshandle#js-handle-dispose) method.

### API reference [​](https://playwright.dev/python/docs/handles\#api-reference-1 "Direct link to API reference")

- [JSHandle](https://playwright.dev/python/docs/api/class-jshandle "JSHandle")
- [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle")
- [element\_handle.bounding\_box()](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-bounding-box)
- [element\_handle.get\_attribute()](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-get-attribute)
- [element\_handle.inner\_text()](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-inner-text)
- [element\_handle.inner\_html()](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-inner-html)
- [element\_handle.text\_content()](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-text-content)
- [js\_handle.evaluate()](https://playwright.dev/python/docs/api/class-jshandle#js-handle-evaluate)
- [page.evaluate\_handle()](https://playwright.dev/python/docs/api/class-page#page-evaluate-handle)
- [page.query\_selector()](https://playwright.dev/python/docs/api/class-page#page-query-selector)
- [page.query\_selector\_all()](https://playwright.dev/python/docs/api/class-page#page-query-selector-all)

## Locator vs ElementHandle [​](https://playwright.dev/python/docs/handles\#locator-vs-elementhandle "Direct link to Locator vs ElementHandle")

caution

We only recommend using [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") in the rare cases when you need to perform extensive DOM traversal on a static page. For all user actions and assertions use locator instead.

The difference between the [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") and [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle "ElementHandle") is that the latter points to a particular element, while Locator captures the logic of how to retrieve that element.

In the example below, handle points to a particular DOM element on page. If that element changes text or is used by React to render an entirely different component, handle is still pointing to that very stale DOM element. This can lead to unexpected behaviors.

- Sync
- Async

```codeBlockLines_e6Vv
handle = page.query_selector("text=Submit")
handle.hover()
handle.click()

```

```codeBlockLines_e6Vv
handle = await page.query_selector("text=Submit")
await handle.hover()
await handle.click()

```

With the locator, every time the locator is used, up-to-date DOM element is located in the page using the selector. So in the snippet below, underlying DOM element is going to be located twice.

- Sync
- Async

```codeBlockLines_e6Vv
locator = page.get_by_text("Submit")
locator.hover()
locator.click()

```

```codeBlockLines_e6Vv
locator = page.get_by_text("Submit")
await locator.hover()
await locator.click()

```

- [Introduction](https://playwright.dev/python/docs/handles#introduction)
  - [API reference](https://playwright.dev/python/docs/handles#api-reference)
- [Element Handles](https://playwright.dev/python/docs/handles#element-handles)
- [Handles as parameters](https://playwright.dev/python/docs/handles#handles-as-parameters)
- [Handle Lifecycle](https://playwright.dev/python/docs/handles#handle-lifecycle)
  - [API reference](https://playwright.dev/python/docs/handles#api-reference-1)
- [Locator vs ElementHandle](https://playwright.dev/python/docs/handles#locator-vs-elementhandle)

## Playwright CI Setup
[Skip to main content](https://playwright.dev/python/docs/ci#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/ci\#introduction "Direct link to Introduction")

Playwright tests can be executed in CI environments. We have created sample configurations for common CI providers.

3 steps to get your tests running on CI:

1. **Ensure CI agent can run browsers**: Use [our Docker image](https://playwright.dev/python/docs/docker) in Linux agents or install your dependencies using the [CLI](https://playwright.dev/python/docs/browsers#install-system-dependencies).

2. **Install Playwright**:





```codeBlockLines_e6Vv
pip install playwright
playwright install --with-deps

```

3. **Run your tests**:





```codeBlockLines_e6Vv
pytest

```


## CI configurations [​](https://playwright.dev/python/docs/ci\#ci-configurations "Direct link to CI configurations")

The [Command line tools](https://playwright.dev/python/docs/browsers#install-system-dependencies) can be used to install all operating system dependencies in CI.

### GitHub Actions [​](https://playwright.dev/python/docs/ci\#github-actions "Direct link to GitHub Actions")

#### On push/pull\_request [​](https://playwright.dev/python/docs/ci\#on-pushpull_request "Direct link to On push/pull_request")

Tests will run on push or pull request on branches main/master. The [workflow](https://docs.github.com/en/actions/using-workflows/about-workflows) will install all dependencies, install Playwright and then run the tests.

.github/workflows/playwright.yml

```codeBlockLines_e6Vv
name: Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Ensure browsers are installed
      run: python -m playwright install --with-deps
    - name: Run your tests
      run: pytest --tracing=retain-on-failure
    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-traces
        path: test-results/

```

#### Via Containers [​](https://playwright.dev/python/docs/ci\#via-containers "Direct link to Via Containers")

GitHub Actions support [running jobs in a container](https://docs.github.com/en/actions/using-jobs/running-jobs-in-a-container) by using the [`jobs.<job_id>.container`](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idcontainer) option. This is useful to not pollute the host environment with dependencies and to have a consistent environment for e.g. screenshots/visual regression testing across different operating systems.

.github/workflows/playwright.yml

```codeBlockLines_e6Vv
name: Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
jobs:
  playwright:
    name: 'Playwright Tests'
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright/python:v1.50.0-noble
      options: --user 1001
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r local-requirements.txt
          pip install -e .
      - name: Run your tests
        run: pytest

```

#### On deployment [​](https://playwright.dev/python/docs/ci\#on-deployment "Direct link to On deployment")

This will start the tests after a [GitHub Deployment](https://developer.github.com/v3/repos/deployments/) went into the `success` state. Services like Vercel use this pattern so you can run your end-to-end tests on their deployed environment.

.github/workflows/playwright.yml

```codeBlockLines_e6Vv
name: Playwright Tests
on:
  deployment_status:
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    if: github.event.deployment_status.state == 'success'
    steps:
    - uses: actions/checkout@v4
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Ensure browsers are installed
      run: python -m playwright install --with-deps
    - name: Run tests
      run: pytest
      env:
        # This might depend on your test-runner
        PLAYWRIGHT_TEST_BASE_URL: ${{ github.event.deployment_status.target_url }}

```

### Docker [​](https://playwright.dev/python/docs/ci\#docker "Direct link to Docker")

We have a [pre-built Docker image](https://playwright.dev/python/docs/docker) which can either be used directly or as a reference to update your existing Docker definitions.

Suggested configuration

1. Using `--ipc=host` is also recommended when using Chromium. Without it Chromium can run out of memory and crash. Learn more about this option in [Docker docs](https://docs.docker.com/reference/cli/docker/container/run/#ipc).
2. Seeing other weird errors when launching Chromium? Try running your container with `docker run --cap-add=SYS_ADMIN` when developing locally.
3. Using `--init` Docker flag or [dumb-init](https://github.com/Yelp/dumb-init) is recommended to avoid special treatment for processes with PID=1. This is a common reason for zombie processes.

### Azure Pipelines [​](https://playwright.dev/python/docs/ci\#azure-pipelines "Direct link to Azure Pipelines")

For Windows or macOS agents, no additional configuration is required, just install Playwright and run your tests.

For Linux agents, you can use [our Docker container](https://playwright.dev/python/docs/docker) with Azure Pipelines support [running containerized jobs](https://docs.microsoft.com/en-us/azure/devops/pipelines/process/container-phases?view=azure-devops). Alternatively, you can use [Command line tools](https://playwright.dev/python/docs/browsers#install-system-dependencies) to install all necessary dependencies.

For running the Playwright tests use this pipeline task:

```codeBlockLines_e6Vv
trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.11'
  displayName: 'Use Python'
- script: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt
  displayName: 'Install dependencies'
- script: playwright install --with-deps
  displayName: 'Install Playwright browsers'
- script: pytest
  displayName: 'Run Playwright tests'

```

#### Azure Pipelines (containerized) [​](https://playwright.dev/python/docs/ci\#azure-pipelines-containerized "Direct link to Azure Pipelines (containerized)")

```codeBlockLines_e6Vv
trigger:
- main

pool:
  vmImage: ubuntu-latest
container: mcr.microsoft.com/playwright/python:v1.50.0-noble

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.11'
  displayName: 'Use Python'

- script: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt
  displayName: 'Install dependencies'
- script: pytest
  displayName: 'Run tests'

```

### CircleCI [​](https://playwright.dev/python/docs/ci\#circleci "Direct link to CircleCI")

Running Playwright on CircleCI is very similar to running on GitHub Actions. In order to specify the pre-built Playwright [Docker image](https://playwright.dev/python/docs/docker), simply modify the agent definition with `docker:` in your config like so:

```codeBlockLines_e6Vv
executors:
  pw-noble-development:
    docker:
      - image: mcr.microsoft.com/playwright/python:v1.50.0-noble

```

Note: When using the docker agent definition, you are specifying the resource class of where playwright runs to the 'medium' tier [here](https://circleci.com/docs/configuration-reference?#docker-execution-environment). The default behavior of Playwright is to set the number of workers to the detected core count (2 in the case of the medium tier). Overriding the number of workers to greater than this number will cause unnecessary timeouts and failures.

### Jenkins [​](https://playwright.dev/python/docs/ci\#jenkins "Direct link to Jenkins")

Jenkins supports Docker agents for pipelines. Use the [Playwright Docker image](https://playwright.dev/python/docs/docker) to run tests on Jenkins.

```codeBlockLines_e6Vv
pipeline {
   agent { docker { image 'mcr.microsoft.com/playwright/python:v1.50.0-noble' } }
   stages {
      stage('e2e-tests') {
         steps {
            sh 'pip install -r requirements.txt'
            sh 'pytest'
         }
      }
   }
}

```

### Bitbucket Pipelines [​](https://playwright.dev/python/docs/ci\#bitbucket-pipelines "Direct link to Bitbucket Pipelines")

Bitbucket Pipelines can use public [Docker images as build environments](https://confluence.atlassian.com/bitbucket/use-docker-images-as-build-environments-792298897.html). To run Playwright tests on Bitbucket, use our public Docker image ( [see Dockerfile](https://playwright.dev/python/docs/docker)).

```codeBlockLines_e6Vv
image: mcr.microsoft.com/playwright/python:v1.50.0-noble

```

### GitLab CI [​](https://playwright.dev/python/docs/ci\#gitlab-ci "Direct link to GitLab CI")

To run Playwright tests on GitLab, use our public Docker image ( [see Dockerfile](https://playwright.dev/python/docs/docker)).

```codeBlockLines_e6Vv
stages:
  - test

tests:
  stage: test
  image: mcr.microsoft.com/playwright/python:v1.50.0-noble
  script:
  ...

```

## Caching browsers [​](https://playwright.dev/python/docs/ci\#caching-browsers "Direct link to Caching browsers")

Caching browser binaries is not recommended, since the amount of time it takes to restore the cache is comparable to the time it takes to download the binaries. Especially under Linux, [operating system dependencies](https://playwright.dev/python/docs/browsers#install-system-dependencies) need to be installed, which are not cacheable.

If you still want to cache the browser binaries between CI runs, cache [these directories](https://playwright.dev/python/docs/browsers#managing-browser-binaries) in your CI configuration, against a hash of the Playwright version.

## Debugging browser launches [​](https://playwright.dev/python/docs/ci\#debugging-browser-launches "Direct link to Debugging browser launches")

Playwright supports the `DEBUG` environment variable to output debug logs during execution. Setting it to `pw:browser` is helpful while debugging `Error: Failed to launch browser` errors.

```codeBlockLines_e6Vv
DEBUG=pw:browser pytest

```

## Running headed [​](https://playwright.dev/python/docs/ci\#running-headed "Direct link to Running headed")

By default, Playwright launches browsers in headless mode. See in our [Running tests](https://playwright.dev/python/docs/running-tests#run-tests-in-headed-mode) guide how to run tests in headed mode.

On Linux agents, headed execution requires [Xvfb](https://en.wikipedia.org/wiki/Xvfb) to be installed. Our [Docker image](https://playwright.dev/python/docs/docker) and GitHub Action have Xvfb pre-installed. To run browsers in headed mode with Xvfb, add `xvfb-run` before the actual command.

```codeBlockLines_e6Vv
xvfb-run pytest

```

- [Introduction](https://playwright.dev/python/docs/ci#introduction)
- [CI configurations](https://playwright.dev/python/docs/ci#ci-configurations)
  - [GitHub Actions](https://playwright.dev/python/docs/ci#github-actions)
  - [Docker](https://playwright.dev/python/docs/ci#docker)
  - [Azure Pipelines](https://playwright.dev/python/docs/ci#azure-pipelines)
  - [CircleCI](https://playwright.dev/python/docs/ci#circleci)
  - [Jenkins](https://playwright.dev/python/docs/ci#jenkins)
  - [Bitbucket Pipelines](https://playwright.dev/python/docs/ci#bitbucket-pipelines)
  - [GitLab CI](https://playwright.dev/python/docs/ci#gitlab-ci)
- [Caching browsers](https://playwright.dev/python/docs/ci#caching-browsers)
- [Debugging browser launches](https://playwright.dev/python/docs/ci#debugging-browser-launches)
- [Running headed](https://playwright.dev/python/docs/ci#running-headed)

## Playwright Python Guide
[Skip to main content](https://playwright.dev/python/docs/intro#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/intro\#introduction "Direct link to Introduction")

Playwright was created specifically to accommodate the needs of end-to-end testing. Playwright supports all modern rendering engines including Chromium, WebKit, and Firefox. Test on Windows, Linux, and macOS, locally or on CI, headless or headed with native mobile emulation.

The [Playwright library](https://playwright.dev/python/docs/library) can be used as a general purpose browser automation tool, providing a powerful set of APIs to automate web applications, for both sync and async Python.

This introduction describes the Playwright Pytest plugin, which is the recommended way to write end-to-end tests.

**You will learn**

- [How to install Playwright Pytest](https://playwright.dev/python/docs/intro#installing-playwright-pytest)
- [How to run the example test](https://playwright.dev/python/docs/intro#running-the-example-test)

## Installing Playwright Pytest [​](https://playwright.dev/python/docs/intro\#installing-playwright-pytest "Direct link to Installing Playwright Pytest")

Playwright recommends using the official [Playwright Pytest plugin](https://playwright.dev/python/docs/test-runners) to write end-to-end tests. It provides context isolation, running it on multiple browser configurations out of the box.

Get started by installing Playwright and running the example test to see it in action.

- PyPI
- Anaconda

Install the [Pytest plugin](https://pypi.org/project/pytest-playwright/):

```codeBlockLines_e6Vv
pip install pytest-playwright

```

Install the [Pytest plugin](https://anaconda.org/Microsoft/pytest-playwright):

```codeBlockLines_e6Vv
conda config --add channels conda-forge
conda config --add channels microsoft
conda install pytest-playwright

```

Install the required browsers:

```codeBlockLines_e6Vv
playwright install

```

## Add Example Test [​](https://playwright.dev/python/docs/intro\#add-example-test "Direct link to Add Example Test")

Create a file that follows the `test_` prefix convention, such as `test_example.py`, inside the current working directory or in a sub-directory with the code below. Make sure your test name also follows the `test_` prefix convention.

test\_example.py

```codeBlockLines_e6Vv
import re
from playwright.sync_api import Page, expect

def test_has_title(page: Page):
    page.goto("https://playwright.dev/")

    # Expect a title "to contain" a substring.
    expect(page).to_have_title(re.compile("Playwright"))

def test_get_started_link(page: Page):
    page.goto("https://playwright.dev/")

    # Click the get started link.
    page.get_by_role("link", name="Get started").click()

    # Expects page to have a heading with the name of Installation.
    expect(page.get_by_role("heading", name="Installation")).to_be_visible()

```

## Running the Example Test [​](https://playwright.dev/python/docs/intro\#running-the-example-test "Direct link to Running the Example Test")

By default tests will be run on chromium. This can be configured via the [CLI options](https://playwright.dev/python/docs/running-tests). Tests are run in headless mode meaning no browser UI will open up when running the tests. Results of the tests and test logs will be shown in the terminal.

```codeBlockLines_e6Vv
pytest

```

## Updating Playwright [​](https://playwright.dev/python/docs/intro\#updating-playwright "Direct link to Updating Playwright")

To update Playwright to the latest version run the following command:

```codeBlockLines_e6Vv
pip install pytest-playwright playwright -U

```

## System requirements [​](https://playwright.dev/python/docs/intro\#system-requirements "Direct link to System requirements")

- Python 3.8 or higher.
- Windows 10+, Windows Server 2016+ or Windows Subsystem for Linux (WSL).
- macOS 13 Ventura, or later.
- Debian 12, Ubuntu 22.04, Ubuntu 24.04, on x86-64 and arm64 architecture.

## What's next [​](https://playwright.dev/python/docs/intro\#whats-next "Direct link to What's next")

- [Write tests using web first assertions, page fixtures and locators](https://playwright.dev/python/docs/writing-tests)
- [Run single test, multiple tests, headed mode](https://playwright.dev/python/docs/running-tests)
- [Generate tests with Codegen](https://playwright.dev/python/docs/codegen)
- [See a trace of your tests](https://playwright.dev/python/docs/trace-viewer-intro)

- [Introduction](https://playwright.dev/python/docs/intro#introduction)
- [Installing Playwright Pytest](https://playwright.dev/python/docs/intro#installing-playwright-pytest)
- [Add Example Test](https://playwright.dev/python/docs/intro#add-example-test)
- [Running the Example Test](https://playwright.dev/python/docs/intro#running-the-example-test)
- [Updating Playwright](https://playwright.dev/python/docs/intro#updating-playwright)
- [System requirements](https://playwright.dev/python/docs/intro#system-requirements)
- [What's next](https://playwright.dev/python/docs/intro#whats-next)

## Playwright Event Handling
[Skip to main content](https://playwright.dev/python/docs/events#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/events\#introduction "Direct link to Introduction")

Playwright allows listening to various types of events happening on the web page, such as network requests, creation of child pages, dedicated workers etc. There are several ways to subscribe to such events, such as waiting for events or adding or removing event listeners.

## Waiting for event [​](https://playwright.dev/python/docs/events\#waiting-for-event "Direct link to Waiting for event")

Most of the time, scripts will need to wait for a particular event to happen. Below are some of the typical event awaiting patterns.

Wait for a request with the specified url using [page.expect\_request()](https://playwright.dev/python/docs/api/class-page#page-wait-for-request):

- Sync
- Async

```codeBlockLines_e6Vv
with page.expect_request("**/*logo*.png") as first:
  page.goto("https://wikipedia.org")
print(first.value.url)

```

```codeBlockLines_e6Vv
async with page.expect_request("**/*logo*.png") as first:
  await page.goto("https://wikipedia.org")
first_request = await first.value
print(first_request.url)

```

Wait for popup window:

- Sync
- Async

```codeBlockLines_e6Vv
with page.expect_popup() as popup:
  page.get_by_text("open the popup").click()
popup.value.goto("https://wikipedia.org")

```

```codeBlockLines_e6Vv
async with page.expect_popup() as popup:
  await page.get_by_text("open the popup").click()
child_page = await popup.value
await child_page.goto("https://wikipedia.org")

```

## Adding/removing event listener [​](https://playwright.dev/python/docs/events\#addingremoving-event-listener "Direct link to Adding/removing event listener")

Sometimes, events happen in random time and instead of waiting for them, they need to be handled. Playwright supports traditional language mechanisms for subscribing and unsubscribing from the events:

- Sync
- Async

```codeBlockLines_e6Vv
def print_request_sent(request):
  print("Request sent: " + request.url)

def print_request_finished(request):
  print("Request finished: " + request.url)

page.on("request", print_request_sent)
page.on("requestfinished", print_request_finished)
page.goto("https://wikipedia.org")

page.remove_listener("requestfinished", print_request_finished)
page.goto("https://www.openstreetmap.org/")

```

```codeBlockLines_e6Vv
def print_request_sent(request):
  print("Request sent: " + request.url)

def print_request_finished(request):
  print("Request finished: " + request.url)

page.on("request", print_request_sent)
page.on("requestfinished", print_request_finished)
await page.goto("https://wikipedia.org")

page.remove_listener("requestfinished", print_request_finished)
await page.goto("https://www.openstreetmap.org/")

```

## Adding one-off listeners [​](https://playwright.dev/python/docs/events\#adding-one-off-listeners "Direct link to Adding one-off listeners")

If a certain event needs to be handled once, there is a convenience API for that:

- Sync
- Async

```codeBlockLines_e6Vv
page.once("dialog", lambda dialog: dialog.accept("2021"))
page.evaluate("prompt('Enter a number:')")

```

```codeBlockLines_e6Vv
page.once("dialog", lambda dialog: dialog.accept("2021"))
await page.evaluate("prompt('Enter a number:')")

```

- [Introduction](https://playwright.dev/python/docs/events#introduction)
- [Waiting for event](https://playwright.dev/python/docs/events#waiting-for-event)
- [Adding/removing event listener](https://playwright.dev/python/docs/events#addingremoving-event-listener)
- [Adding one-off listeners](https://playwright.dev/python/docs/events#adding-one-off-listeners)

## Playwright Input Handling
[Skip to main content](https://playwright.dev/python/docs/input#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/input\#introduction "Direct link to Introduction")

Playwright can interact with HTML Input elements such as text inputs, checkboxes, radio buttons, select options, mouse clicks, type characters, keys and shortcuts as well as upload files and focus elements.

## Text input [​](https://playwright.dev/python/docs/input\#text-input "Direct link to Text input")

Using [locator.fill()](https://playwright.dev/python/docs/api/class-locator#locator-fill) is the easiest way to fill out the form fields. It focuses the element and triggers an `input` event with the entered text. It works for `<input>`, `<textarea>` and `[contenteditable]` elements.

- Sync
- Async

```codeBlockLines_e6Vv
# Text input
page.get_by_role("textbox").fill("Peter")

# Date input
page.get_by_label("Birth date").fill("2020-02-02")

# Time input
page.get_by_label("Appointment time").fill("13:15")

# Local datetime input
page.get_by_label("Local time").fill("2020-03-02T05:15")

```

```codeBlockLines_e6Vv
# Text input
await page.get_by_role("textbox").fill("Peter")

# Date input
await page.get_by_label("Birth date").fill("2020-02-02")

# Time input
await page.get_by_label("Appointment time").fill("13:15")

# Local datetime input
await page.get_by_label("Local time").fill("2020-03-02T05:15")

```

## Checkboxes and radio buttons [​](https://playwright.dev/python/docs/input\#checkboxes-and-radio-buttons "Direct link to Checkboxes and radio buttons")

Using [locator.set\_checked()](https://playwright.dev/python/docs/api/class-locator#locator-set-checked) is the easiest way to check and uncheck a checkbox or a radio button. This method can be used with `input[type=checkbox]`, `input[type=radio]` and `[role=checkbox]` elements.

- Sync
- Async

```codeBlockLines_e6Vv
# Check the checkbox
page.get_by_label('I agree to the terms above').check()

# Assert the checked state
expect(page.get_by_label('Subscribe to newsletter')).to_be_checked()

# Select the radio button
page.get_by_label('XL').check()

```

```codeBlockLines_e6Vv
# Check the checkbox
await page.get_by_label('I agree to the terms above').check()

# Assert the checked state
await expect(page.get_by_label('Subscribe to newsletter')).to_be_checked()

# Select the radio button
await page.get_by_label('XL').check()

```

## Select options [​](https://playwright.dev/python/docs/input\#select-options "Direct link to Select options")

Selects one or multiple options in the `<select>` element with [locator.select\_option()](https://playwright.dev/python/docs/api/class-locator#locator-select-option). You can specify option `value`, or `label` to select. Multiple options can be selected.

- Sync
- Async

```codeBlockLines_e6Vv
# Single selection matching the value or label
page.get_by_label('Choose a color').select_option('blue')

# Single selection matching the label
page.get_by_label('Choose a color').select_option(label='Blue')

# Multiple selected items
page.get_by_label('Choose multiple colors').select_option(['red', 'green', 'blue'])

```

```codeBlockLines_e6Vv
# Single selection matching the value or label
await page.get_by_label('Choose a color').select_option('blue')

# Single selection matching the label
await page.get_by_label('Choose a color').select_option(label='Blue')

# Multiple selected items
await page.get_by_label('Choose multiple colors').select_option(['red', 'green', 'blue'])

```

## Mouse click [​](https://playwright.dev/python/docs/input\#mouse-click "Direct link to Mouse click")

Performs a simple human click.

- Sync
- Async

```codeBlockLines_e6Vv
# Generic click
page.get_by_role("button").click()

# Double click
page.get_by_text("Item").dblclick()

# Right click
page.get_by_text("Item").click(button="right")

# Shift + click
page.get_by_text("Item").click(modifiers=["Shift"])

# Hover over element
page.get_by_text("Item").hover()

# Click the top left corner
page.get_by_text("Item").click(position={ "x": 0, "y": 0})

```

```codeBlockLines_e6Vv
# Generic click
await page.get_by_role("button").click()

# Double click
await page.get_by_text("Item").dblclick()

# Right click
await page.get_by_text("Item").click(button="right")

# Shift + click
await page.get_by_text("Item").click(modifiers=["Shift"])

# Ctrl + click on Windows and Linux
# Meta + click on macOS
await page.get_by_text("Item").click(modifiers=["ControlOrMeta"])

# Hover over element
await page.get_by_text("Item").hover()

# Click the top left corner
await page.get_by_text("Item").click(position={ "x": 0, "y": 0})

```

Under the hood, this and other pointer-related methods:

- wait for element with given selector to be in DOM
- wait for it to become displayed, i.e. not empty, no `display:none`, no `visibility:hidden`
- wait for it to stop moving, for example, until css transition finishes
- scroll the element into view
- wait for it to receive pointer events at the action point, for example, waits until element becomes non-obscured by other elements
- retry if the element is detached during any of the above checks

#### Forcing the click [​](https://playwright.dev/python/docs/input\#forcing-the-click "Direct link to Forcing the click")

Sometimes, apps use non-trivial logic where hovering the element overlays it with another element that intercepts the click. This behavior is indistinguishable from a bug where element gets covered and the click is dispatched elsewhere. If you know this is taking place, you can bypass the [actionability](https://playwright.dev/python/docs/actionability) checks and force the click:

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_role("button").click(force=True)

```

```codeBlockLines_e6Vv
await page.get_by_role("button").click(force=True)

```

#### Programmatic click [​](https://playwright.dev/python/docs/input\#programmatic-click "Direct link to Programmatic click")

If you are not interested in testing your app under the real conditions and want to simulate the click by any means possible, you can trigger the [`HTMLElement.click()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click) behavior via simply dispatching a click event on the element with [locator.dispatch\_event()](https://playwright.dev/python/docs/api/class-locator#locator-dispatch-event):

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_role("button").dispatch_event('click')

```

```codeBlockLines_e6Vv
await page.get_by_role("button").dispatch_event('click')

```

## Type characters [​](https://playwright.dev/python/docs/input\#type-characters "Direct link to Type characters")

caution

Most of the time, you should input text with [locator.fill()](https://playwright.dev/python/docs/api/class-locator#locator-fill). See the [Text input](https://playwright.dev/python/docs/input#text-input) section above. You only need to type characters if there is special keyboard handling on the page.

Type into the field character by character, as if it was a user with a real keyboard with [locator.press\_sequentially()](https://playwright.dev/python/docs/api/class-locator#locator-press-sequentially).

- Sync
- Async

```codeBlockLines_e6Vv
# Press keys one by one
page.locator('#area').press_sequentially('Hello World!')

```

```codeBlockLines_e6Vv
# Press keys one by one
await page.locator('#area').press_sequentially('Hello World!')

```

This method will emit all the necessary keyboard events, with all the `keydown`, `keyup`, `keypress` events in place. You can even specify the optional `delay` between the key presses to simulate real user behavior.

## Keys and shortcuts [​](https://playwright.dev/python/docs/input\#keys-and-shortcuts "Direct link to Keys and shortcuts")

- Sync
- Async

```codeBlockLines_e6Vv
# Hit Enter
page.get_by_text("Submit").press("Enter")

# Dispatch Control+Right
page.get_by_role("textbox").press("Control+ArrowRight")

# Press $ sign on keyboard
page.get_by_role("textbox").press("$")

```

```codeBlockLines_e6Vv
# Hit Enter
await page.get_by_text("Submit").press("Enter")

# Dispatch Control+Right
await page.get_by_role("textbox").press("Control+ArrowRight")

# Press $ sign on keyboard
await page.get_by_role("textbox").press("$")

```

The [locator.press()](https://playwright.dev/python/docs/api/class-locator#locator-press) method focuses the selected element and produces a single keystroke. It accepts the logical key names that are emitted in the [keyboardEvent.key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) property of the keyboard events:

```codeBlockLines_e6Vv
Backquote, Minus, Equal, Backslash, Backspace, Tab, Delete, Escape,
ArrowDown, End, Enter, Home, Insert, PageDown, PageUp, ArrowRight,
ArrowUp, F1 - F12, Digit0 - Digit9, KeyA - KeyZ, etc.

```

- You can alternatively specify a single character you'd like to produce such as `"a"` or `"#"`.
- Following modification shortcuts are also supported: `Shift, Control, Alt, Meta`.

Simple version produces a single character. This character is case-sensitive, so `"a"` and `"A"` will produce different results.

- Sync
- Async

```codeBlockLines_e6Vv
# <input id=name>
page.locator('#name').press('Shift+A')

# <input id=name>
page.locator('#name').press('Shift+ArrowLeft')

```

```codeBlockLines_e6Vv
# <input id=name>
await page.locator('#name').press('Shift+A')

# <input id=name>
await page.locator('#name').press('Shift+ArrowLeft')

```

Shortcuts such as `"Control+o"` or `"Control+Shift+T"` are supported as well. When specified with the modifier, modifier is pressed and being held while the subsequent key is being pressed.

Note that you still need to specify the capital `A` in `Shift-A` to produce the capital character. `Shift-a` produces a lower-case one as if you had the `CapsLock` toggled.

## Upload files [​](https://playwright.dev/python/docs/input\#upload-files "Direct link to Upload files")

You can select input files for upload using the [locator.set\_input\_files()](https://playwright.dev/python/docs/api/class-locator#locator-set-input-files) method. It expects first argument to point to an [input element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input) with the type `"file"`. Multiple files can be passed in the array. If some of the file paths are relative, they are resolved relative to the current working directory. Empty array clears the selected files.

- Sync
- Async

```codeBlockLines_e6Vv
# Select one file
page.get_by_label("Upload file").set_input_files('myfile.pdf')

# Select multiple files
page.get_by_label("Upload files").set_input_files(['file1.txt', 'file2.txt'])

# Select a directory
page.get_by_label("Upload directory").set_input_files('mydir')

# Remove all the selected files
page.get_by_label("Upload file").set_input_files([])

# Upload buffer from memory
page.get_by_label("Upload file").set_input_files(
    files=[\
        {"name": "test.txt", "mimeType": "text/plain", "buffer": b"this is a test"}\
    ],
)

```

```codeBlockLines_e6Vv
# Select one file
await page.get_by_label("Upload file").set_input_files('myfile.pdf')

# Select multiple files
await page.get_by_label("Upload files").set_input_files(['file1.txt', 'file2.txt'])

# Select a directory
await page.get_by_label("Upload directory").set_input_files('mydir')

# Remove all the selected files
await page.get_by_label("Upload file").set_input_files([])

# Upload buffer from memory
await page.get_by_label("Upload file").set_input_files(
    files=[\
        {"name": "test.txt", "mimeType": "text/plain", "buffer": b"this is a test"}\
    ],
)

```

If you don't have input element in hand (it is created dynamically), you can handle the [page.on("filechooser")](https://playwright.dev/python/docs/api/class-page#page-event-file-chooser) event or use a corresponding waiting method upon your action:

- Sync
- Async

```codeBlockLines_e6Vv
with page.expect_file_chooser() as fc_info:
    page.get_by_label("Upload file").click()
file_chooser = fc_info.value
file_chooser.set_files("myfile.pdf")

```

```codeBlockLines_e6Vv
async with page.expect_file_chooser() as fc_info:
    await page.get_by_label("Upload file").click()
file_chooser = await fc_info.value
await file_chooser.set_files("myfile.pdf")

```

## Focus element [​](https://playwright.dev/python/docs/input\#focus-element "Direct link to Focus element")

For the dynamic pages that handle focus events, you can focus the given element with [locator.focus()](https://playwright.dev/python/docs/api/class-locator#locator-focus).

- Sync
- Async

```codeBlockLines_e6Vv
page.get_by_label('password').focus()

```

```codeBlockLines_e6Vv
await page.get_by_label('password').focus()

```

## Drag and Drop [​](https://playwright.dev/python/docs/input\#drag-and-drop "Direct link to Drag and Drop")

You can perform drag&drop operation with [locator.drag\_to()](https://playwright.dev/python/docs/api/class-locator#locator-drag-to). This method will:

- Hover the element that will be dragged.
- Press left mouse button.
- Move mouse to the element that will receive the drop.
- Release left mouse button.

- Sync
- Async

```codeBlockLines_e6Vv
page.locator("#item-to-be-dragged").drag_to(page.locator("#item-to-drop-at"))

```

```codeBlockLines_e6Vv
await page.locator("#item-to-be-dragged").drag_to(page.locator("#item-to-drop-at"))

```

### Dragging manually [​](https://playwright.dev/python/docs/input\#dragging-manually "Direct link to Dragging manually")

If you want precise control over the drag operation, use lower-level methods like [locator.hover()](https://playwright.dev/python/docs/api/class-locator#locator-hover), [mouse.down()](https://playwright.dev/python/docs/api/class-mouse#mouse-down), [mouse.move()](https://playwright.dev/python/docs/api/class-mouse#mouse-move) and [mouse.up()](https://playwright.dev/python/docs/api/class-mouse#mouse-up).

- Sync
- Async

```codeBlockLines_e6Vv
page.locator("#item-to-be-dragged").hover()
page.mouse.down()
page.locator("#item-to-drop-at").hover()
page.mouse.up()

```

```codeBlockLines_e6Vv
await page.locator("#item-to-be-dragged").hover()
await page.mouse.down()
await page.locator("#item-to-drop-at").hover()
await page.mouse.up()

```

note

If your page relies on the `dragover` event being dispatched, you need at least two mouse moves to trigger it in all browsers. To reliably issue the second mouse move, repeat your [mouse.move()](https://playwright.dev/python/docs/api/class-mouse#mouse-move) or [locator.hover()](https://playwright.dev/python/docs/api/class-locator#locator-hover) twice. The sequence of operations would be: hover the drag element, mouse down, hover the drop element, hover the drop element second time, mouse up.

## Scrolling [​](https://playwright.dev/python/docs/input\#scrolling "Direct link to Scrolling")

Most of the time, Playwright will automatically scroll for you before doing any actions. Therefore, you do not need to scroll explicitly.

- Sync
- Async

```codeBlockLines_e6Vv
# Scrolls automatically so that button is visible
page.get_by_role("button").click()

```

```codeBlockLines_e6Vv
# Scrolls automatically so that button is visible
await page.get_by_role("button").click()

```

However, in rare cases you might need to manually scroll. For example, you might want to force an "infinite list" to load more elements, or position the page for a specific screenshot. In such a case, the most reliable way is to find an element that you want to make visible at the bottom, and scroll it into view.

- Sync
- Async

```codeBlockLines_e6Vv
# Scroll the footer into view, forcing an "infinite list" to load more content
page.get_by_text("Footer text").scroll_into_view_if_needed()

```

```codeBlockLines_e6Vv
# Scroll the footer into view, forcing an "infinite list" to load more content
await page.get_by_text("Footer text").scroll_into_view_if_needed()

```

If you would like to control the scrolling more precisely, use [mouse.wheel()](https://playwright.dev/python/docs/api/class-mouse#mouse-wheel) or [locator.evaluate()](https://playwright.dev/python/docs/api/class-locator#locator-evaluate):

- Sync
- Async

```codeBlockLines_e6Vv
# Position the mouse and scroll with the mouse wheel
page.get_by_test_id("scrolling-container").hover()
page.mouse.wheel(0, 10)

# Alternatively, programmatically scroll a specific element
page.get_by_test_id("scrolling-container").evaluate("e => e.scrollTop += 100")

```

```codeBlockLines_e6Vv
# Position the mouse and scroll with the mouse wheel
await page.get_by_test_id("scrolling-container").hover()
await page.mouse.wheel(0, 10)

# Alternatively, programmatically scroll a specific element
await page.get_by_test_id("scrolling-container").evaluate("e => e.scrollTop += 100")

```

- [Introduction](https://playwright.dev/python/docs/input#introduction)
- [Text input](https://playwright.dev/python/docs/input#text-input)
- [Checkboxes and radio buttons](https://playwright.dev/python/docs/input#checkboxes-and-radio-buttons)
- [Select options](https://playwright.dev/python/docs/input#select-options)
- [Mouse click](https://playwright.dev/python/docs/input#mouse-click)
- [Type characters](https://playwright.dev/python/docs/input#type-characters)
- [Keys and shortcuts](https://playwright.dev/python/docs/input#keys-and-shortcuts)
- [Upload files](https://playwright.dev/python/docs/input#upload-files)
- [Focus element](https://playwright.dev/python/docs/input#focus-element)
- [Drag and Drop](https://playwright.dev/python/docs/input#drag-and-drop)
  - [Dragging manually](https://playwright.dev/python/docs/input#dragging-manually)
- [Scrolling](https://playwright.dev/python/docs/input#scrolling)

## Element Actionability Checks
[Skip to main content](https://playwright.dev/python/docs/actionability#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/actionability\#introduction "Direct link to Introduction")

Playwright performs a range of actionability checks on the elements before making actions to ensure these actions behave as expected. It auto-waits for all the relevant checks to pass and only then performs the requested action. If the required checks do not pass within the given `timeout`, action fails with the `TimeoutError`.

For example, for [locator.click()](https://playwright.dev/python/docs/api/class-locator#locator-click), Playwright will ensure that:

- locator resolves to exactly one element
- element is [Visible](https://playwright.dev/python/docs/actionability#visible "Visible")
- element is [Stable](https://playwright.dev/python/docs/actionability#stable "Stable"), as in not animating or completed animation
- element [Receives Events](https://playwright.dev/python/docs/actionability#receives-events "Receives Events"), as in not obscured by other elements
- element is [Enabled](https://playwright.dev/python/docs/actionability#enabled "Enabled")

Here is the complete list of actionability checks performed for each action:

| Action | [Visible](https://playwright.dev/python/docs/actionability#visible "Visible") | [Stable](https://playwright.dev/python/docs/actionability#stable "Stable") | [Receives Events](https://playwright.dev/python/docs/actionability#receives-events "Receives Events") | [Enabled](https://playwright.dev/python/docs/actionability#enabled "Enabled") | [Editable](https://playwright.dev/python/docs/actionability#editable "Editable") |
| --- | --- | --- | --- | --- | --- |
| [locator.check()](https://playwright.dev/python/docs/api/class-locator#locator-check) | Yes | Yes | Yes | Yes | - |
| [locator.click()](https://playwright.dev/python/docs/api/class-locator#locator-click) | Yes | Yes | Yes | Yes | - |
| [locator.dblclick()](https://playwright.dev/python/docs/api/class-locator#locator-dblclick) | Yes | Yes | Yes | Yes | - |
| [locator.set\_checked()](https://playwright.dev/python/docs/api/class-locator#locator-set-checked) | Yes | Yes | Yes | Yes | - |
| [locator.tap()](https://playwright.dev/python/docs/api/class-locator#locator-tap) | Yes | Yes | Yes | Yes | - |
| [locator.uncheck()](https://playwright.dev/python/docs/api/class-locator#locator-uncheck) | Yes | Yes | Yes | Yes | - |
| [locator.hover()](https://playwright.dev/python/docs/api/class-locator#locator-hover) | Yes | Yes | Yes | - | - |
| [locator.drag\_to()](https://playwright.dev/python/docs/api/class-locator#locator-drag-to) | Yes | Yes | Yes | - | - |
| [locator.screenshot()](https://playwright.dev/python/docs/api/class-locator#locator-screenshot) | Yes | Yes | - | - | - |
| [locator.fill()](https://playwright.dev/python/docs/api/class-locator#locator-fill) | Yes | - | - | Yes | Yes |
| [locator.clear()](https://playwright.dev/python/docs/api/class-locator#locator-clear) | Yes | - | - | Yes | Yes |
| [locator.select\_option()](https://playwright.dev/python/docs/api/class-locator#locator-select-option) | Yes | - | - | Yes | - |
| [locator.select\_text()](https://playwright.dev/python/docs/api/class-locator#locator-select-text) | Yes | - | - | - | - |
| [locator.scroll\_into\_view\_if\_needed()](https://playwright.dev/python/docs/api/class-locator#locator-scroll-into-view-if-needed) | - | Yes | - | - | - |
| [locator.blur()](https://playwright.dev/python/docs/api/class-locator#locator-blur) | - | - | - | - | - |
| [locator.dispatch\_event()](https://playwright.dev/python/docs/api/class-locator#locator-dispatch-event) | - | - | - | - | - |
| [locator.focus()](https://playwright.dev/python/docs/api/class-locator#locator-focus) | - | - | - | - | - |
| [locator.press()](https://playwright.dev/python/docs/api/class-locator#locator-press) | - | - | - | - | - |
| [locator.press\_sequentially()](https://playwright.dev/python/docs/api/class-locator#locator-press-sequentially) | - | - | - | - | - |
| [locator.set\_input\_files()](https://playwright.dev/python/docs/api/class-locator#locator-set-input-files) | - | - | - | - | - |

## Forcing actions [​](https://playwright.dev/python/docs/actionability\#forcing-actions "Direct link to Forcing actions")

Some actions like [locator.click()](https://playwright.dev/python/docs/api/class-locator#locator-click) support `force` option that disables non-essential actionability checks, for example passing truthy `force` to [locator.click()](https://playwright.dev/python/docs/api/class-locator#locator-click) method will not check that the target element actually receives click events.

## Assertions [​](https://playwright.dev/python/docs/actionability\#assertions "Direct link to Assertions")

Playwright includes auto-retrying assertions that remove flakiness by waiting until the condition is met, similarly to auto-waiting before actions.

| Assertion | Description |
| --- | --- |
| [expect(locator).to\_be\_attached()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-attached) | Element is attached |
| [expect(locator).to\_be\_checked()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-checked) | Checkbox is checked |
| [expect(locator).to\_be\_disabled()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-disabled) | Element is disabled |
| [expect(locator).to\_be\_editable()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-editable) | Element is editable |
| [expect(locator).to\_be\_empty()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-empty) | Container is empty |
| [expect(locator).to\_be\_enabled()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-enabled) | Element is enabled |
| [expect(locator).to\_be\_focused()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-focused) | Element is focused |
| [expect(locator).to\_be\_hidden()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-hidden) | Element is not visible |
| [expect(locator).to\_be\_in\_viewport()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-in-viewport) | Element intersects viewport |
| [expect(locator).to\_be\_visible()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-visible) | Element is visible |
| [expect(locator).to\_contain\_text()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-contain-text) | Element contains text |
| [expect(locator).to\_have\_attribute()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-attribute) | Element has a DOM attribute |
| [expect(locator).to\_have\_class()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-class) | Element has a class property |
| [expect(locator).to\_have\_count()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-count) | List has exact number of children |
| [expect(locator).to\_have\_css()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-css) | Element has CSS property |
| [expect(locator).to\_have\_id()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-id) | Element has an ID |
| [expect(locator).to\_have\_js\_property()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-js-property) | Element has a JavaScript property |
| [expect(locator).to\_have\_text()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-text) | Element matches text |
| [expect(locator).to\_have\_value()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-value) | Input has a value |
| [expect(locator).to\_have\_values()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-values) | Select has options selected |
| [expect(page).to\_have\_title()](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-to-have-title) | Page has a title |
| [expect(page).to\_have\_url()](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-to-have-url) | Page has a URL |
| [expect(response).to\_be\_ok()](https://playwright.dev/python/docs/api/class-apiresponseassertions#api-response-assertions-to-be-ok) | Response has an OK status |

Learn more in the [assertions guide](https://playwright.dev/python/docs/test-assertions).

## Visible [​](https://playwright.dev/python/docs/actionability\#visible "Direct link to Visible")

Element is considered visible when it has non-empty bounding box and does not have `visibility:hidden` computed style.

Note that according to this definition:

- Elements of zero size **are not** considered visible.
- Elements with `display:none` **are not** considered visible.
- Elements with `opacity:0` **are** considered visible.

## Stable [​](https://playwright.dev/python/docs/actionability\#stable "Direct link to Stable")

Element is considered stable when it has maintained the same bounding box for at least two consecutive animation frames.

## Enabled [​](https://playwright.dev/python/docs/actionability\#enabled "Direct link to Enabled")

Element is considered enabled when it is **not disabled**.

Element is **disabled** when:

- it is a `<button>`, `<select>`, `<input>`, `<textarea>`, `<option>` or `<optgroup>` with a `[disabled]` attribute;
- it is a `<button>`, `<select>`, `<input>`, `<textarea>`, `<option>` or `<optgroup>` that is a part of a `<fieldset>` with a `[disabled]` attribute;
- it is a descendant of an element with `[aria-disabled=true]` attribute.

## Editable [​](https://playwright.dev/python/docs/actionability\#editable "Direct link to Editable")

Element is considered editable when it is [enabled](https://playwright.dev/python/docs/actionability#enabled "Enabled") and is **not readonly**.

Element is **readonly** when:

- it is a `<select>`, `<input>` or `<textarea>` with a `[readonly]` attribute;
- it has an `[aria-readonly=true]` attribute and an aria role that [supports it](https://w3c.github.io/aria/#aria-readonly).

## Receives Events [​](https://playwright.dev/python/docs/actionability\#receives-events "Direct link to Receives Events")

Element is considered receiving pointer events when it is the hit target of the pointer event at the action point. For example, when clicking at the point `(10;10)`, Playwright checks whether some other element (usually an overlay) will instead capture the click at `(10;10)`.

For example, consider a scenario where Playwright will click `Sign Up` button regardless of when the [locator.click()](https://playwright.dev/python/docs/api/class-locator#locator-click) call was made:

- page is checking that user name is unique and `Sign Up` button is disabled;
- after checking with the server, the disabled `Sign Up` button is replaced with another one that is now enabled.

- [Introduction](https://playwright.dev/python/docs/actionability#introduction)
- [Forcing actions](https://playwright.dev/python/docs/actionability#forcing-actions)
- [Assertions](https://playwright.dev/python/docs/actionability#assertions)
- [Visible](https://playwright.dev/python/docs/actionability#visible)
- [Stable](https://playwright.dev/python/docs/actionability#stable)
- [Enabled](https://playwright.dev/python/docs/actionability#enabled)
- [Editable](https://playwright.dev/python/docs/actionability#editable)
- [Receives Events](https://playwright.dev/python/docs/actionability#receives-events)

## Automate WebView2 with Playwright
[Skip to main content](https://playwright.dev/python/docs/webview2#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/webview2\#introduction "Direct link to Introduction")

The following will explain how to use Playwright with [Microsoft Edge WebView2](https://docs.microsoft.com/en-us/microsoft-edge/webview2/). WebView2 is a WinForms control, which will use Microsoft Edge under the hood to render web content. It is a part of the Microsoft Edge browser and is available on Windows 10 and Windows 11. Playwright can be used to automate WebView2 applications and can be used to test web content in WebView2. For connecting to WebView2, Playwright uses [browser\_type.connect\_over\_cdp()](https://playwright.dev/python/docs/api/class-browsertype#browser-type-connect-over-cdp) which connects to it via the Chrome DevTools Protocol (CDP).

## Overview [​](https://playwright.dev/python/docs/webview2\#overview "Direct link to Overview")

A WebView2 control can be instructed to listen to incoming CDP connections by setting either the `WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS` environment variable with `--remote-debugging-port=9222` or calling [EnsureCoreWebView2Async](https://docs.microsoft.com/en-us/dotnet/api/microsoft.web.webview2.wpf.webview2.ensurecorewebview2async?view=webview2-dotnet-1.0.1343.22) with the `--remote-debugging-port=9222` argument. This will start the WebView2 process with the Chrome DevTools Protocol enabled which allows the automation by Playwright. 9222 is an example port in this case, but any other unused port can be used as well.

```codeBlockLines_e6Vv
await this.webView.EnsureCoreWebView2Async(await CoreWebView2Environment.CreateAsync(null, null, new CoreWebView2EnvironmentOptions()
{
  AdditionalBrowserArguments = "--remote-debugging-port=9222",
})).ConfigureAwait(false);

```

Once your application with the WebView2 control is running, you can connect to it via Playwright:

- Sync
- Async

```codeBlockLines_e6Vv
browser = playwright.chromium.connect_over_cdp("http://localhost:9222")
context = browser.contexts[0]
page = context.pages[0]

```

```codeBlockLines_e6Vv
browser = await playwright.chromium.connect_over_cdp("http://localhost:9222")
context = browser.contexts[0]
page = context.pages[0]

```

To ensure that the WebView2 control is ready, you can wait for the [`CoreWebView2InitializationCompleted`](https://learn.microsoft.com/en-us/dotnet/api/microsoft.web.webview2.wpf.webview2.corewebview2initializationcompleted?view=webview2-dotnet-1.0.1343.22) event:

```codeBlockLines_e6Vv
this.webView.CoreWebView2InitializationCompleted += (_, e) =>
{
    if (e.IsSuccess)
    {
        Console.WriteLine("WebView2 initialized");
    }
};

```

## Writing and running tests [​](https://playwright.dev/python/docs/webview2\#writing-and-running-tests "Direct link to Writing and running tests")

By default, the WebView2 control will use the same user data directory for all instances. This means that if you run multiple tests in parallel, they will interfere with each other. To avoid this, you should set the `WEBVIEW2_USER_DATA_FOLDER` environment variable (or use [WebView2.EnsureCoreWebView2Async Method](https://docs.microsoft.com/en-us/dotnet/api/microsoft.web.webview2.wpf.webview2.ensurecorewebview2async?view=webview2-dotnet-1.0.1343.22)) to a different folder for each test. This will make sure that each test runs in its own user data directory.

Using the following, Playwright will run your WebView2 application as a sub-process, assign a unique user data directory to it and provide the [Page](https://playwright.dev/python/docs/api/class-page "Page") instance to your test:

conftest.py

```codeBlockLines_e6Vv
import os
import socket
import tempfile
import pytest
from pathlib import Path
from playwright.sync_api import Playwright, Browser, BrowserContext
import subprocess

EXECUTABLE_PATH = (
    Path(__file__).parent
    / ".."
    / "webview2-app"
    / "bin"
    / "Debug"
    / "net8.0-windows"
    / "webview2.exe"
)

@pytest.fixture(scope="session")
def data_dir():
    with tempfile.TemporaryDirectory(
        prefix="playwright-webview2-tests", ignore_cleanup_errors=True
    ) as tmpdirname:
        yield tmpdirname

@pytest.fixture(scope="session")
def webview2_process_cdp_port(data_dir: str):
    cdp_port = _find_free_port()
    process = subprocess.Popen(
        [EXECUTABLE_PATH],
        env={
            **dict(os.environ),
            "WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS": f"--remote-debugging-port={cdp_port}",
            "WEBVIEW2_USER_DATA_FOLDER": data_dir,
        },
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        universal_newlines=True,
    )
    while True:
        line = process.stdout.readline()
        if "WebView2 initialized" in line:
            break
    yield cdp_port
    process.terminate()

@pytest.fixture(scope="session")
def browser(playwright: Playwright, webview2_process_cdp_port: int):
    browser = playwright.chromium.connect_over_cdp(
        f"http://127.0.0.1:{webview2_process_cdp_port}"
    )
    yield browser

@pytest.fixture(scope="function")
def context(browser: Browser):
    context = browser.contexts[0]
    yield context

@pytest.fixture(scope="function")
def page(context: BrowserContext):
    page = context.pages[0]
    yield page

def _find_free_port(port=9000, max_port=65535):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    while port <= max_port:
        try:
            sock.bind(("", port))
            sock.close()
            return port
        except OSError:
            port += 1
    raise IOError("no free ports")

```

test\_webview2.py

```codeBlockLines_e6Vv
from playwright.sync_api import Page, expect

def test_webview2(page: Page):
    page.goto("https://playwright.dev")
    get_started = page.get_by_text("Get Started")
    expect(get_started).to_be_visible()

```

## Debugging [​](https://playwright.dev/python/docs/webview2\#debugging "Direct link to Debugging")

Inside your webview2 control, you can just right-click to open the context menu and select "Inspect" to open the DevTools or press `F12`. You can also use the [WebView2.CoreWebView2.OpenDevToolsWindow](https://learn.microsoft.com/en-us/dotnet/api/microsoft.web.webview2.core.corewebview2.opendevtoolswindow?view=webview2-dotnet-1.0.1462.37) method to open the DevTools programmatically.

For debugging tests, see the Playwright [Debugging guide](https://playwright.dev/python/docs/debug).

- [Introduction](https://playwright.dev/python/docs/webview2#introduction)
- [Overview](https://playwright.dev/python/docs/webview2#overview)
- [Writing and running tests](https://playwright.dev/python/docs/webview2#writing-and-running-tests)
- [Debugging](https://playwright.dev/python/docs/webview2#debugging)

## Playwright Docker Guide
[Skip to main content](https://playwright.dev/python/docs/docker#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/docker\#introduction "Direct link to Introduction")

[Dockerfile.noble](https://github.com/microsoft/playwright-python/blob/main/utils/docker/Dockerfile.noble "Dockerfile.noble") can be used to run Playwright scripts in Docker environment. This image includes the [Playwright browsers](https://playwright.dev/python/docs/browsers#install-browsers) and [browser system dependencies](https://playwright.dev/python/docs/browsers#install-system-dependencies). The Playwright package/dependency is not included in the image and should be installed separately.

## Usage [​](https://playwright.dev/python/docs/docker\#usage "Direct link to Usage")

This Docker image is published to [Microsoft Artifact Registry](https://mcr.microsoft.com/en-us/product/playwright/python/about "Microsoft Artifact Registry").

info

This Docker image is intended to be used for testing and development purposes only. It is not recommended to use this Docker image to visit untrusted websites.

### Pull the image [​](https://playwright.dev/python/docs/docker\#pull-the-image "Direct link to Pull the image")

```codeBlockLines_e6Vv
docker pull mcr.microsoft.com/playwright/python:v1.50.0-noble

```

### Run the image [​](https://playwright.dev/python/docs/docker\#run-the-image "Direct link to Run the image")

By default, the Docker image will use the `root` user to run the browsers. This will disable the Chromium sandbox which is not available with root. If you run trusted code (e.g. End-to-end tests) and want to avoid the hassle of managing separate user then the root user may be fine. For web scraping or crawling, we recommend to create a separate user inside the Docker container and use the seccomp profile.

#### End-to-end tests [​](https://playwright.dev/python/docs/docker\#end-to-end-tests "Direct link to End-to-end tests")

On trusted websites, you can avoid creating a separate user and use root for it since you trust the code which will run on the browsers.

```codeBlockLines_e6Vv
docker run -it --rm --ipc=host mcr.microsoft.com/playwright/python:v1.50.0-noble /bin/bash

```

#### Crawling and scraping [​](https://playwright.dev/python/docs/docker\#crawling-and-scraping "Direct link to Crawling and scraping")

On untrusted websites, it's recommended to use a separate user for launching the browsers in combination with the seccomp profile. Inside the container or if you are using the Docker image as a base image you have to use `adduser` for it.

```codeBlockLines_e6Vv
docker run -it --rm --ipc=host --user pwuser --security-opt seccomp=seccomp_profile.json mcr.microsoft.com/playwright/python:v1.50.0-noble /bin/bash

```

[`seccomp_profile.json`](https://github.com/microsoft/playwright/blob/main/utils/docker/seccomp_profile.json) is needed to run Chromium with sandbox. This is a [default Docker seccomp profile](https://github.com/docker/engine/blob/d0d99b04cf6e00ed3fc27e81fc3d94e7eda70af3/profiles/seccomp/default.json) with extra user namespace cloning permissions:

```codeBlockLines_e6Vv
{
  "comment": "Allow create user namespaces",
  "names": [\
    "clone",\
    "setns",\
    "unshare"\
  ],
  "action": "SCMP_ACT_ALLOW",
  "args": [],
  "includes": {},
  "excludes": {}
}

```

note

Using `--ipc=host` is recommended when using Chrome ( [Docker docs](https://docs.docker.com/engine/reference/run/#ipc-settings---ipc)). Chrome can run out of memory without this flag.

### Using on CI [​](https://playwright.dev/python/docs/docker\#using-on-ci "Direct link to Using on CI")

See our [Continuous Integration guides](https://playwright.dev/python/docs/ci) for sample configs.

### Remote Connection [​](https://playwright.dev/python/docs/docker\#remote-connection "Direct link to Remote Connection")

You can run Playwright Server in Docker while keeping your tests running on the host system or another machine. This is useful for running tests on unsupported Linux distributions or remote execution scenarios.

#### Running the Playwright Server [​](https://playwright.dev/python/docs/docker\#running-the-playwright-server "Direct link to Running the Playwright Server")

Start the Playwright Server in Docker:

```codeBlockLines_e6Vv
docker run -p 3000:3000 --rm --init -it --workdir /home/pwuser --user pwuser mcr.microsoft.com/playwright:v1.50.0-noble /bin/sh -c "npx -y playwright@1.50.0 run-server --port 3000 --host 0.0.0.0"

```

#### Connecting to the Server [​](https://playwright.dev/python/docs/docker\#connecting-to-the-server "Direct link to Connecting to the Server")

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright

with sync_playwright() as p:
    browser = p.chromium.connect("ws://127.0.0.1:3000/")

```

```codeBlockLines_e6Vv
from playwright.async_api import async_playwright

async with async_playwright() as p:
    browser = await p.chromium.connect("ws://127.0.0.1:3000/")

```

#### Network Configuration [​](https://playwright.dev/python/docs/docker\#network-configuration "Direct link to Network Configuration")

If you need to access local servers from within the Docker container:

```codeBlockLines_e6Vv
docker run --add-host=hostmachine:host-gateway -p 3000:3000 --rm --init -it --workdir /home/pwuser --user pwuser mcr.microsoft.com/playwright:v1.50.0-noble /bin/sh -c "npx -y playwright@1.50.0 run-server --port 3000 --host 0.0.0.0"

```

This makes `hostmachine` point to the host's localhost. Your tests should use `hostmachine` instead of `localhost` when accessing local servers.

note

When running tests remotely, ensure the Playwright version in your tests matches the version running in the Docker container.

## Image tags [​](https://playwright.dev/python/docs/docker\#image-tags "Direct link to Image tags")

See [all available image tags](https://mcr.microsoft.com/en-us/product/playwright/python/about "all available image tags").

We currently publish images with the following tags:

- `:v1.50.0` \- Playwright v1.50.0 release docker image based on Ubuntu 24.04 LTS (Noble Numbat).
- `:v1.50.0-noble` \- Playwright v1.50.0 release docker image based on Ubuntu 24.04 LTS (Noble Numbat).
- `:v1.50.0-jammy` \- Playwright v1.50.0 release docker image based on Ubuntu 22.04 LTS (Jammy Jellyfish).

note

It is recommended to always pin your Docker image to a specific version if possible. If the Playwright version in your Docker image does not match the version in your project/tests, Playwright will be unable to locate browser executables.

### Base images [​](https://playwright.dev/python/docs/docker\#base-images "Direct link to Base images")

We currently publish images based on the following [Ubuntu](https://hub.docker.com/_/ubuntu) versions:

- **Ubuntu 24.04 LTS** (Noble Numbat), image tags include `noble`
- **Ubuntu 22.04 LTS** (Jammy Jellyfish), image tags include `jammy`

#### Alpine [​](https://playwright.dev/python/docs/docker\#alpine "Direct link to Alpine")

Browser builds for Firefox and WebKit are built for the [glibc](https://en.wikipedia.org/wiki/Glibc) library. Alpine Linux and other distributions that are based on the [musl](https://en.wikipedia.org/wiki/Musl) standard library are not supported.

## Build your own image [​](https://playwright.dev/python/docs/docker\#build-your-own-image "Direct link to Build your own image")

To run Playwright inside Docker, you need to have Python, [Playwright browsers](https://playwright.dev/python/docs/browsers#install-browsers) and [browser system dependencies](https://playwright.dev/python/docs/browsers#install-system-dependencies) installed. See the following Dockerfile:

```codeBlockLines_e6Vv
FROM python:3.12-bookworm

RUN pip install playwright==@1.50.0 && \
    playwright install --with-deps

```

- [Introduction](https://playwright.dev/python/docs/docker#introduction)
- [Usage](https://playwright.dev/python/docs/docker#usage)
  - [Pull the image](https://playwright.dev/python/docs/docker#pull-the-image)
  - [Run the image](https://playwright.dev/python/docs/docker#run-the-image)
  - [Using on CI](https://playwright.dev/python/docs/docker#using-on-ci)
  - [Remote Connection](https://playwright.dev/python/docs/docker#remote-connection)
- [Image tags](https://playwright.dev/python/docs/docker#image-tags)
  - [Base images](https://playwright.dev/python/docs/docker#base-images)
- [Build your own image](https://playwright.dev/python/docs/docker#build-your-own-image)

## Playwright Frames Guide
[Skip to main content](https://playwright.dev/python/docs/frames#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/frames\#introduction "Direct link to Introduction")

A [Page](https://playwright.dev/python/docs/api/class-page "Page") can have one or more [Frame](https://playwright.dev/python/docs/api/class-frame "Frame") objects attached to it. Each page has a main frame and page-level interactions (like `click`) are assumed to operate in the main frame.

A page can have additional frames attached with the `iframe` HTML tag. These frames can be accessed for interactions inside the frame.

- Sync
- Async

```codeBlockLines_e6Vv
# Locate element inside frame
# Get frame using any other selector
username = page.frame_locator('.frame-class').get_by_label('User Name')
username.fill('John')

```

```codeBlockLines_e6Vv
# Locate element inside frame
username = await page.frame_locator('.frame-class').get_by_label('User Name')
await username.fill('John')

```

## Frame objects [​](https://playwright.dev/python/docs/frames\#frame-objects "Direct link to Frame objects")

One can access frame objects using the [page.frame()](https://playwright.dev/python/docs/api/class-page#page-frame) API:

- Sync
- Async

```codeBlockLines_e6Vv
# Get frame using the frame's name attribute
frame = page.frame('frame-login')

# Get frame using frame's URL
frame = page.frame(url=r'.*domain.*')

# Interact with the frame
frame.fill('#username-input', 'John')

```

```codeBlockLines_e6Vv
# Get frame using the frame's name attribute
frame = page.frame('frame-login')

# Get frame using frame's URL
frame = page.frame(url=r'.*domain.*')

# Interact with the frame
await frame.fill('#username-input', 'John')

```

- [Introduction](https://playwright.dev/python/docs/frames#introduction)
- [Frame objects](https://playwright.dev/python/docs/frames#frame-objects)

## Playwright Browser Setup
[Skip to main content](https://playwright.dev/python/docs/browsers#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/browsers\#introduction "Direct link to Introduction")

Each version of Playwright needs specific versions of browser binaries to operate. You will need to use the Playwright CLI to install these browsers.

With every release, Playwright updates the versions of the browsers it supports, so that the latest Playwright would support the latest browsers at any moment. It means that every time you update Playwright, you might need to re-run the `install` CLI command.

## Install browsers [​](https://playwright.dev/python/docs/browsers\#install-browsers "Direct link to Install browsers")

Playwright can install supported browsers. Running the command without arguments will install the default browsers.

```codeBlockLines_e6Vv
playwright install

```

You can also install specific browsers by providing an argument:

```codeBlockLines_e6Vv
playwright install webkit

```

See all supported browsers:

```codeBlockLines_e6Vv
playwright install --help

```

## Install system dependencies [​](https://playwright.dev/python/docs/browsers\#install-system-dependencies "Direct link to Install system dependencies")

System dependencies can get installed automatically. This is useful for CI environments.

```codeBlockLines_e6Vv
playwright install-deps

```

You can also install the dependencies for a single browser by passing it as an argument:

```codeBlockLines_e6Vv
playwright install-deps chromium

```

It's also possible to combine `install-deps` with `install` so that the browsers and OS dependencies are installed with a single command.

```codeBlockLines_e6Vv
playwright install --with-deps chromium

```

See [system requirements](https://playwright.dev/python/docs/intro#system-requirements) for officially supported operating systems.

## Configure Browsers [​](https://playwright.dev/python/docs/browsers\#configure-browsers "Direct link to Configure Browsers")

Playwright can run tests on Chromium, WebKit and Firefox browsers as well as branded browsers such as Google Chrome and Microsoft Edge. It can also run on emulated tablet and mobile devices. See the [registry of device parameters](https://github.com/microsoft/playwright/blob/main/packages/playwright-core/src/server/deviceDescriptorsSource.json) for a complete list of selected desktop, tablet and mobile devices.

### Run tests on different browsers [​](https://playwright.dev/python/docs/browsers\#run-tests-on-different-browsers "Direct link to Run tests on different browsers")

Run tests on a specific browser:

```codeBlockLines_e6Vv
pytest test_login.py --browser webkit

```

Run tests on multiple browsers:

```codeBlockLines_e6Vv
pytest test_login.py --browser webkit --browser firefox

```

Test against mobile viewports:

```codeBlockLines_e6Vv
pytest test_login.py --device="iPhone 13"

```

Test against branded browsers:

```codeBlockLines_e6Vv
pytest test_login.py --browser-channel msedge

```

### Chromium [​](https://playwright.dev/python/docs/browsers\#chromium "Direct link to Chromium")

For Google Chrome, Microsoft Edge and other Chromium-based browsers, by default, Playwright uses open source Chromium builds. Since the Chromium project is ahead of the branded browsers, when the world is on Google Chrome N, Playwright already supports Chromium N+1 that will be released in Google Chrome and Microsoft Edge a few weeks later.

### Chromium: headless shell [​](https://playwright.dev/python/docs/browsers\#chromium-headless-shell "Direct link to Chromium: headless shell")

Playwright ships a regular Chromium build for headed operations and a separate [chromium headless shell](https://developer.chrome.com/blog/chrome-headless-shell) for headless mode.

If you are only running tests in headless shell (i.e. the `channel` option is **not** specified), for example on CI, you can avoid downloading the full Chromium browser by passing `--only-shell` during installation.

```codeBlockLines_e6Vv
# only running tests headlessly
playwright install --with-deps --only-shell

```

### Chromium: new headless mode [​](https://playwright.dev/python/docs/browsers\#chromium-new-headless-mode "Direct link to Chromium: new headless mode")

You can opt into the new headless mode by using `'chromium'` channel. As [official Chrome documentation puts it](https://developer.chrome.com/blog/chrome-headless-shell):

> New Headless on the other hand is the real Chrome browser, and is thus more authentic, reliable, and offers more features. This makes it more suitable for high-accuracy end-to-end web app testing or browser extension testing.

See [issue #33566](https://github.com/microsoft/playwright/issues/33566) for details.

```codeBlockLines_e6Vv
pytest test_login.py --browser-channel chromium

```

With the new headless mode, you can skip downloading the headless shell during browser installation by using the `--no-shell` option:

```codeBlockLines_e6Vv
# only running tests headlessly
playwright install --with-deps --no-shell

```

### Google Chrome & Microsoft Edge [​](https://playwright.dev/python/docs/browsers\#google-chrome--microsoft-edge "Direct link to Google Chrome & Microsoft Edge")

While Playwright can download and use the recent Chromium build, it can operate against the branded Google Chrome and Microsoft Edge browsers available on the machine (note that Playwright doesn't install them by default). In particular, the current Playwright version will support Stable and Beta channels of these browsers.

Available channels are `chrome`, `msedge`, `chrome-beta`, `msedge-beta`, `chrome-dev`, `msedge-dev`, `chrome-canary`, `msedge-canary`.

warning

Certain Enterprise Browser Policies may impact Playwright's ability to launch and control Google Chrome and Microsoft Edge. Running in an environment with browser policies is outside of the Playwright project's scope.

warning

Google Chrome and Microsoft Edge have switched to a [new headless mode](https://developer.chrome.com/docs/chromium/headless) implementation that is closer to a regular headed mode. This differs from [chromium headless shell](https://developer.chrome.com/blog/chrome-headless-shell) that is used in Playwright by default when running headless, so expect different behavior in some cases. See [issue #33566](https://github.com/microsoft/playwright/issues/33566) for details.

```codeBlockLines_e6Vv
pytest test_login.py --browser-channel msedge

```

Alternatively when using the library directly, you can specify the browser [channel](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-option-channel) when launching the browser:

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright

with sync_playwright() as p:
    # Channel can be "chrome", "msedge", "chrome-beta", "msedge-beta" or "msedge-dev".
    browser = p.chromium.launch(channel="msedge")
    page = browser.new_page()
    page.goto("http://playwright.dev")
    print(page.title())
    browser.close()

```

#### Installing Google Chrome & Microsoft Edge [​](https://playwright.dev/python/docs/browsers\#installing-google-chrome--microsoft-edge "Direct link to Installing Google Chrome & Microsoft Edge")

If Google Chrome or Microsoft Edge is not available on your machine, you can install them using the Playwright command line tool:

```codeBlockLines_e6Vv
playwright install msedge

```

warning

Google Chrome or Microsoft Edge installations will be installed at the default global location of your operating system overriding your current browser installation.

Run with the `--help` option to see a full a list of browsers that can be installed.

#### When to use Google Chrome & Microsoft Edge and when not to? [​](https://playwright.dev/python/docs/browsers\#when-to-use-google-chrome--microsoft-edge-and-when-not-to "Direct link to When to use Google Chrome & Microsoft Edge and when not to?")

##### Defaults [​](https://playwright.dev/python/docs/browsers\#defaults "Direct link to Defaults")

Using the default Playwright configuration with the latest Chromium is a good idea most of the time. Since Playwright is ahead of Stable channels for the browsers, it gives peace of mind that the upcoming Google Chrome or Microsoft Edge releases won't break your site. You catch breakage early and have a lot of time to fix it before the official Chrome update.

##### Regression testing [​](https://playwright.dev/python/docs/browsers\#regression-testing "Direct link to Regression testing")

Having said that, testing policies often require regression testing to be performed against the current publicly available browsers. In this case, you can opt into one of the stable channels, `"chrome"` or `"msedge"`.

##### Media codecs [​](https://playwright.dev/python/docs/browsers\#media-codecs "Direct link to Media codecs")

Another reason for testing using official binaries is to test functionality related to media codecs. Chromium does not have all the codecs that Google Chrome or Microsoft Edge are bundling due to various licensing considerations and agreements. If your site relies on this kind of codecs (which is rarely the case), you will also want to use the official channel.

##### Enterprise policy [​](https://playwright.dev/python/docs/browsers\#enterprise-policy "Direct link to Enterprise policy")

Google Chrome and Microsoft Edge respect enterprise policies, which include limitations to the capabilities, network proxy, mandatory extensions that stand in the way of testing. So if you are part of the organization that uses such policies, it is easiest to use bundled Chromium for your local testing, you can still opt into stable channels on the bots that are typically free of such restrictions.

### Firefox [​](https://playwright.dev/python/docs/browsers\#firefox "Direct link to Firefox")

Playwright's Firefox version matches the recent [Firefox Stable](https://www.mozilla.org/en-US/firefox/new/) build. Playwright doesn't work with the branded version of Firefox since it relies on patches.

Note that availability of certain features, which depend heavily on the underlying platform, may vary between operating systems. For example, available media codecs vary substantially between Linux, macOS and Windows.

### WebKit [​](https://playwright.dev/python/docs/browsers\#webkit "Direct link to WebKit")

Playwright's WebKit is derived from the latest WebKit main branch sources, often before these updates are incorporated into Apple Safari and other WebKit-based browsers. This gives a lot of lead time to react on the potential browser update issues. Playwright doesn't work with the branded version of Safari since it relies on patches. Instead, you can test using the most recent WebKit build.

Note that availability of certain features, which depend heavily on the underlying platform, may vary between operating systems. For example, available media codecs vary substantially between Linux, macOS and Windows. While running WebKit on Linux CI is usually the most affordable option, for the closest-to-Safari experience you should run WebKit on mac, for example if you do video playback.

## Install behind a firewall or a proxy [​](https://playwright.dev/python/docs/browsers\#install-behind-a-firewall-or-a-proxy "Direct link to Install behind a firewall or a proxy")

By default, Playwright downloads browsers from Microsoft's CDN.

Sometimes companies maintain an internal proxy that blocks direct access to the public resources. In this case, Playwright can be configured to download browsers via a proxy server.

- Bash
- PowerShell
- Batch

```codeBlockLines_e6Vv
pip install playwright
HTTPS_PROXY=https://192.0.2.1 playwright install

```

```codeBlockLines_e6Vv
$Env:HTTPS_PROXY="https://192.0.2.1"
pip install playwright
playwright install

```

```codeBlockLines_e6Vv
set HTTPS_PROXY=https://192.0.2.1
pip install playwright
playwright install

```

If the requests of the proxy get intercepted with a custom untrusted certificate authority (CA) and it yields to `Error: self signed certificate in certificate chain` while downloading the browsers, you must set your custom root certificates via the [`NODE_EXTRA_CA_CERTS`](https://nodejs.org/api/cli.html#node_extra_ca_certsfile) environment variable before installing the browsers:

- Bash
- PowerShell
- Batch

```codeBlockLines_e6Vv
export NODE_EXTRA_CA_CERTS="/path/to/cert.pem"

```

```codeBlockLines_e6Vv
$Env:NODE_EXTRA_CA_CERTS="C:\certs\root.crt"

```

```codeBlockLines_e6Vv
set NODE_EXTRA_CA_CERTS="C:\certs\root.crt"

```

If your network is slow to connect to Playwright browser archive, you can increase the connection timeout in milliseconds with `PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT` environment variable:

- Bash
- PowerShell
- Batch

```codeBlockLines_e6Vv
pip install playwright
PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000 playwright install

```

```codeBlockLines_e6Vv
$Env:PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT="120000"
pip install playwright
playwright install

```

```codeBlockLines_e6Vv
set PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000
pip install playwright
playwright install

```

If you are [installing dependencies](https://playwright.dev/python/docs/browsers#install-system-dependencies) and need to use a proxy on Linux, make sure to run the command as a root user. Otherwise, Playwright will attempt to become a root and will not pass environment variables like `HTTPS_PROXY` to the linux package manager.

```codeBlockLines_e6Vv
sudo HTTPS_PROXY=https://192.0.2.1 playwright install-deps

```

## Download from artifact repository [​](https://playwright.dev/python/docs/browsers\#download-from-artifact-repository "Direct link to Download from artifact repository")

By default, Playwright downloads browsers from Microsoft's CDN.

Sometimes companies maintain an internal artifact repository to host browser binaries. In this case, Playwright can be configured to download from a custom location using the `PLAYWRIGHT_DOWNLOAD_HOST` env variable.

- Bash
- PowerShell
- Batch

```codeBlockLines_e6Vv
pip install playwright
PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 playwright install

```

```codeBlockLines_e6Vv
$Env:PLAYWRIGHT_DOWNLOAD_HOST="http://192.0.2.1"
pip install playwright
playwright install

```

```codeBlockLines_e6Vv
set PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1
pip install playwright
playwright install

```

It is also possible to use a per-browser download hosts using `PLAYWRIGHT_CHROMIUM_DOWNLOAD_HOST`, `PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST` and `PLAYWRIGHT_WEBKIT_DOWNLOAD_HOST` env variables that take precedence over `PLAYWRIGHT_DOWNLOAD_HOST`.

- Bash
- PowerShell
- Batch

```codeBlockLines_e6Vv
pip install playwright
PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3 PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 playwright install

```

```codeBlockLines_e6Vv
$Env:PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST="http://203.0.113.3"
$Env:PLAYWRIGHT_DOWNLOAD_HOST="http://192.0.2.1"
pip install playwright
playwright install

```

```codeBlockLines_e6Vv
set PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3
set PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1
pip install playwright
playwright install

```

## Managing browser binaries [​](https://playwright.dev/python/docs/browsers\#managing-browser-binaries "Direct link to Managing browser binaries")

Playwright downloads Chromium, WebKit and Firefox browsers into the OS-specific cache folders:

- `%USERPROFILE%\AppData\Local\ms-playwright` on Windows
- `~/Library/Caches/ms-playwright` on macOS
- `~/.cache/ms-playwright` on Linux

These browsers will take a few hundred megabytes of disk space when installed:

```codeBlockLines_e6Vv
du -hs ~/Library/Caches/ms-playwright/*
281M  chromium-XXXXXX
187M  firefox-XXXX
180M  webkit-XXXX

```

You can override default behavior using environment variables. When installing Playwright, ask it to download browsers into a specific location:

- Bash
- PowerShell
- Batch

```codeBlockLines_e6Vv
pip install playwright
PLAYWRIGHT_BROWSERS_PATH=$HOME/pw-browsers python -m playwright install

```

```codeBlockLines_e6Vv
$Env:PLAYWRIGHT_BROWSERS_PATH="$Env:USERPROFILE\pw-browsers"
pip install playwright
playwright install

```

```codeBlockLines_e6Vv
set PLAYWRIGHT_BROWSERS_PATH=%USERPROFILE%\pw-browsers
pip install playwright
playwright install

```

When running Playwright scripts, ask it to search for browsers in a shared location.

- Bash
- PowerShell
- Batch

```codeBlockLines_e6Vv
PLAYWRIGHT_BROWSERS_PATH=$HOME/pw-browsers python playwright_script.py

```

```codeBlockLines_e6Vv

$Env:PLAYWRIGHT_BROWSERS_PATH="$Env:USERPROFILE\pw-browsers"
python playwright_script.py

```

```codeBlockLines_e6Vv
set PLAYWRIGHT_BROWSERS_PATH=%USERPROFILE%\pw-browsers
python playwright_script.py

```

Playwright keeps track of packages that need those browsers and will garbage collect them as you update Playwright to the newer versions.

note

Developers can opt-in in this mode via exporting `PLAYWRIGHT_BROWSERS_PATH=$HOME/pw-browsers` in their `.bashrc`.

### Stale browser removal [​](https://playwright.dev/python/docs/browsers\#stale-browser-removal "Direct link to Stale browser removal")

Playwright keeps track of the clients that use its browsers. When there are no more clients that require a particular version of the browser, that version is deleted from the system. That way you can safely use Playwright instances of different versions and at the same time, you don't waste disk space for the browsers that are no longer in use.

To opt-out from the unused browser removal, you can set the `PLAYWRIGHT_SKIP_BROWSER_GC=1` environment variable.

### Uninstall browsers [​](https://playwright.dev/python/docs/browsers\#uninstall-browsers "Direct link to Uninstall browsers")

This will remove the browsers (chromium, firefox, webkit) of the current Playwright installation:

```codeBlockLines_e6Vv
playwright uninstall

```

To remove browsers of other Playwright installations as well, pass `--all` flag:

```codeBlockLines_e6Vv
playwright uninstall --all

```

- [Introduction](https://playwright.dev/python/docs/browsers#introduction)
- [Install browsers](https://playwright.dev/python/docs/browsers#install-browsers)
- [Install system dependencies](https://playwright.dev/python/docs/browsers#install-system-dependencies)
- [Configure Browsers](https://playwright.dev/python/docs/browsers#configure-browsers)
  - [Run tests on different browsers](https://playwright.dev/python/docs/browsers#run-tests-on-different-browsers)
  - [Chromium](https://playwright.dev/python/docs/browsers#chromium)
  - [Chromium: headless shell](https://playwright.dev/python/docs/browsers#chromium-headless-shell)
  - [Chromium: new headless mode](https://playwright.dev/python/docs/browsers#chromium-new-headless-mode)
  - [Google Chrome & Microsoft Edge](https://playwright.dev/python/docs/browsers#google-chrome--microsoft-edge)
  - [Firefox](https://playwright.dev/python/docs/browsers#firefox)
  - [WebKit](https://playwright.dev/python/docs/browsers#webkit)
- [Install behind a firewall or a proxy](https://playwright.dev/python/docs/browsers#install-behind-a-firewall-or-a-proxy)
- [Download from artifact repository](https://playwright.dev/python/docs/browsers#download-from-artifact-repository)
- [Managing browser binaries](https://playwright.dev/python/docs/browsers#managing-browser-binaries)
  - [Stale browser removal](https://playwright.dev/python/docs/browsers#stale-browser-removal)
  - [Uninstall browsers](https://playwright.dev/python/docs/browsers#uninstall-browsers)

## Network Traffic Management
[Skip to main content](https://playwright.dev/python/docs/network#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/network\#introduction "Direct link to Introduction")

Playwright provides APIs to **monitor** and **modify** browser network traffic, both HTTP and HTTPS. Any requests that a page does, including [XHRs](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) and [fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) requests, can be tracked, modified and handled.

## Mock APIs [​](https://playwright.dev/python/docs/network\#mock-apis "Direct link to Mock APIs")

Check out our [API mocking guide](https://playwright.dev/python/docs/mock) to learn more on how to

- mock API requests and never hit the API
- perform the API request and modify the response
- use HAR files to mock network requests.

## HTTP Authentication [​](https://playwright.dev/python/docs/network\#http-authentication "Direct link to HTTP Authentication")

Perform HTTP Authentication.

- Sync
- Async

```codeBlockLines_e6Vv
context = browser.new_context(
    http_credentials={"username": "bill", "password": "pa55w0rd"}
)
page = context.new_page()
page.goto("https://example.com")

```

```codeBlockLines_e6Vv
context = await browser.new_context(
    http_credentials={"username": "bill", "password": "pa55w0rd"}
)
page = await context.new_page()
await page.goto("https://example.com")

```

## HTTP Proxy [​](https://playwright.dev/python/docs/network\#http-proxy "Direct link to HTTP Proxy")

You can configure pages to load over the HTTP(S) proxy or SOCKSv5. Proxy can be either set globally for the entire browser, or for each browser context individually.

You can optionally specify username and password for HTTP(S) proxy, you can also specify hosts to bypass the [proxy](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-proxy) for.

Here is an example of a global proxy:

- Sync
- Async

```codeBlockLines_e6Vv
browser = chromium.launch(proxy={
  "server": "http://myproxy.com:3128",
  "username": "usr",
  "password": "pwd"
})

```

```codeBlockLines_e6Vv
browser = await chromium.launch(proxy={
  "server": "http://myproxy.com:3128",
  "username": "usr",
  "password": "pwd"
})

```

Its also possible to specify it per context:

- Sync
- Async

```codeBlockLines_e6Vv
browser = chromium.launch()
context = browser.new_context(proxy={"server": "http://myproxy.com:3128"})

```

```codeBlockLines_e6Vv
browser = await chromium.launch()
context = await browser.new_context(proxy={"server": "http://myproxy.com:3128"})

```

## Network events [​](https://playwright.dev/python/docs/network\#network-events "Direct link to Network events")

You can monitor all the [Request](https://playwright.dev/python/docs/api/class-request "Request") s and [Response](https://playwright.dev/python/docs/api/class-response "Response") s:

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    chromium = playwright.chromium
    browser = chromium.launch()
    page = browser.new_page()
    # Subscribe to "request" and "response" events.
    page.on("request", lambda request: print(">>", request.method, request.url))
    page.on("response", lambda response: print("<<", response.status, response.url))
    page.goto("https://example.com")
    browser.close()

with sync_playwright() as playwright:
    run(playwright)

```

```codeBlockLines_e6Vv
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    chromium = playwright.chromium
    browser = await chromium.launch()
    page = await browser.new_page()
    # Subscribe to "request" and "response" events.
    page.on("request", lambda request: print(">>", request.method, request.url))
    page.on("response", lambda response: print("<<", response.status, response.url))
    await page.goto("https://example.com")
    await browser.close()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())

```

Or wait for a network response after the button click with [page.expect\_response()](https://playwright.dev/python/docs/api/class-page#page-wait-for-response):

- Sync
- Async

```codeBlockLines_e6Vv
# Use a glob url pattern
with page.expect_response("**/api/fetch_data") as response_info:
    page.get_by_text("Update").click()
response = response_info.value

```

```codeBlockLines_e6Vv
# Use a glob url pattern
async with page.expect_response("**/api/fetch_data") as response_info:
    await page.get_by_text("Update").click()
response = await response_info.value

```

#### Variations [​](https://playwright.dev/python/docs/network\#variations "Direct link to Variations")

Wait for [Response](https://playwright.dev/python/docs/api/class-response "Response") s with [page.expect\_response()](https://playwright.dev/python/docs/api/class-page#page-wait-for-response)

- Sync
- Async

```codeBlockLines_e6Vv
# Use a regular expression
with page.expect_response(re.compile(r"\.jpeg$")) as response_info:
    page.get_by_text("Update").click()
response = response_info.value

# Use a predicate taking a response object
with page.expect_response(lambda response: token in response.url) as response_info:
    page.get_by_text("Update").click()
response = response_info.value

```

```codeBlockLines_e6Vv
# Use a regular expression
async with page.expect_response(re.compile(r"\.jpeg$")) as response_info:
    await page.get_by_text("Update").click()
response = await response_info.value

# Use a predicate taking a response object
async with page.expect_response(lambda response: token in response.url) as response_info:
    await page.get_by_text("Update").click()
response = await response_info.value

```

## Handle requests [​](https://playwright.dev/python/docs/network\#handle-requests "Direct link to Handle requests")

- Sync
- Async

```codeBlockLines_e6Vv
page.route(
    "**/api/fetch_data",
    lambda route: route.fulfill(status=200, body=test_data))
page.goto("https://example.com")

```

```codeBlockLines_e6Vv
await page.route(
    "**/api/fetch_data",
    lambda route: route.fulfill(status=200, body=test_data))
await page.goto("https://example.com")

```

You can mock API endpoints via handling the network requests in your Playwright script.

#### Variations [​](https://playwright.dev/python/docs/network\#variations-1 "Direct link to Variations")

Set up route on the entire browser context with [browser\_context.route()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route) or page with [page.route()](https://playwright.dev/python/docs/api/class-page#page-route). It will apply to popup windows and opened links.

- Sync
- Async

```codeBlockLines_e6Vv
context.route(
    "**/api/login",
    lambda route: route.fulfill(status=200, body="accept"))
page.goto("https://example.com")

```

```codeBlockLines_e6Vv
await context.route(
    "**/api/login",
    lambda route: route.fulfill(status=200, body="accept"))
await page.goto("https://example.com")

```

## Modify requests [​](https://playwright.dev/python/docs/network\#modify-requests "Direct link to Modify requests")

- Sync
- Async

```codeBlockLines_e6Vv
# Delete header
def handle_route(route):
    headers = route.request.headers
    del headers["x-secret"]
    route.continue_(headers=headers)
page.route("**/*", handle_route)

# Continue requests as POST.
page.route("**/*", lambda route: route.continue_(method="POST"))

```

```codeBlockLines_e6Vv
# Delete header
async def handle_route(route):
    headers = route.request.headers
    del headers["x-secret"]
    await route.continue_(headers=headers)
await page.route("**/*", handle_route)

# Continue requests as POST.
await page.route("**/*", lambda route: route.continue_(method="POST"))

```

You can continue requests with modifications. Example above removes an HTTP header from the outgoing requests.

## Abort requests [​](https://playwright.dev/python/docs/network\#abort-requests "Direct link to Abort requests")

You can abort requests using [page.route()](https://playwright.dev/python/docs/api/class-page#page-route) and [route.abort()](https://playwright.dev/python/docs/api/class-route#route-abort).

- Sync
- Async

```codeBlockLines_e6Vv
page.route("**/*.{png,jpg,jpeg}", lambda route: route.abort())

# Abort based on the request type
page.route("**/*", lambda route: route.abort() if route.request.resource_type == "image"  else route.continue_())

```

```codeBlockLines_e6Vv
await page.route("**/*.{png,jpg,jpeg}", lambda route: route.abort())

# Abort based on the request type
await page.route("**/*", lambda route: route.abort() if route.request.resource_type == "image"  else route.continue_())

```

## Modify responses [​](https://playwright.dev/python/docs/network\#modify-responses "Direct link to Modify responses")

To modify a response use [APIRequestContext](https://playwright.dev/python/docs/api/class-apirequestcontext "APIRequestContext") to get the original response and then pass the response to [route.fulfill()](https://playwright.dev/python/docs/api/class-route#route-fulfill). You can override individual fields on the response via options:

- Sync
- Async

```codeBlockLines_e6Vv
def handle_route(route: Route) -> None:
    # Fetch original response.
    response = route.fetch()
    # Add a prefix to the title.
    body = response.text()
    body = body.replace("<title>", "<title>My prefix:")
    route.fulfill(
        # Pass all fields from the response.
        response=response,
        # Override response body.
        body=body,
        # Force content type to be html.
        headers={**response.headers, "content-type": "text/html"},
    )

page.route("**/title.html", handle_route)

```

```codeBlockLines_e6Vv
async def handle_route(route: Route) -> None:
    # Fetch original response.
    response = await route.fetch()
    # Add a prefix to the title.
    body = await response.text()
    body = body.replace("<title>", "<title>My prefix:")
    await route.fulfill(
        # Pass all fields from the response.
        response=response,
        # Override response body.
        body=body,
        # Force content type to be html.
        headers={**response.headers, "content-type": "text/html"},
    )

await page.route("**/title.html", handle_route)

```

## Glob URL patterns [​](https://playwright.dev/python/docs/network\#glob-url-patterns "Direct link to Glob URL patterns")

Playwright uses simplified glob patterns for URL matching in network interception methods like [page.route()](https://playwright.dev/python/docs/api/class-page#page-route) or [page.expect\_response()](https://playwright.dev/python/docs/api/class-page#page-wait-for-response). These patterns support basic wildcards:

1. Asterisks:
   - A single `*` matches any characters except `/`
   - A double `**` matches any characters including `/`
2. Question mark `?` matches any single character except `/`
3. Curly braces `{}` can be used to match a list of options separated by commas `,`
4. Square brackets `[]` can be used to match a set of characters
5. Backslash `\` can be used to escape any of special characters (note to escape backslash itself as `\\`)

Examples:

- `https://example.com/*.js` matches `https://example.com/file.js` but not `https://example.com/path/file.js`
- `https://example.com/\\?page=1` matches `https://example.com/?page=1` but not `https://example.com`
- `**/v[0-9]*` matches `https://example.com/v1/` but not `https://example.com/vote/`
- `**/*.js` matches both `https://example.com/file.js` and `https://example.com/path/file.js`
- `**/*.{png,jpg,jpeg}` matches all image requests

Important notes:

- The glob pattern must match the entire URL, not just a part of it.
- When using globs for URL matching, consider the full URL structure, including the protocol and path separators.
- For more complex matching requirements, consider using \[RegExp\] instead of glob patterns.

## WebSockets [​](https://playwright.dev/python/docs/network\#websockets "Direct link to WebSockets")

Playwright supports [WebSockets](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API) inspection, mocking and modifying out of the box. See our [API mocking guide](https://playwright.dev/python/docs/mock#mock-websockets) to learn how to mock WebSockets.

Every time a WebSocket is created, the [page.on("websocket")](https://playwright.dev/python/docs/api/class-page#page-event-web-socket) event is fired. This event contains the [WebSocket](https://playwright.dev/python/docs/api/class-websocket "WebSocket") instance for further web socket frames inspection:

```codeBlockLines_e6Vv
def on_web_socket(ws):
    print(f"WebSocket opened: {ws.url}")
    ws.on("framesent", lambda payload: print(payload))
    ws.on("framereceived", lambda payload: print(payload))
    ws.on("close", lambda payload: print("WebSocket closed"))

page.on("websocket", on_web_socket)

```

## Missing Network Events and Service Workers [​](https://playwright.dev/python/docs/network\#missing-network-events-and-service-workers "Direct link to Missing Network Events and Service Workers")

Playwright's built-in [browser\_context.route()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route) and [page.route()](https://playwright.dev/python/docs/api/class-page#page-route) allow your tests to natively route requests and perform mocking and interception.

1. If you're using Playwright's native [browser\_context.route()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route) and [page.route()](https://playwright.dev/python/docs/api/class-page#page-route), and it appears network events are missing, disable Service Workers by setting [service\_workers](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-service-workers) to `'block'`.
2. It might be that you are using a mock tool such as Mock Service Worker (MSW). While this tool works out of the box for mocking responses, it adds its own Service Worker that takes over the network requests, hence making them invisible to [browser\_context.route()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route) and [page.route()](https://playwright.dev/python/docs/api/class-page#page-route). If you are interested in both network testing and mocking, consider using built-in [browser\_context.route()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route) and [page.route()](https://playwright.dev/python/docs/api/class-page#page-route) for [response mocking](https://playwright.dev/python/docs/network#handle-requests).
3. If you're interested in not solely using Service Workers for testing and network mocking, but in routing and listening for requests made by Service Workers themselves, please see [this experimental feature](https://github.com/microsoft/playwright/issues/15684).

- [Introduction](https://playwright.dev/python/docs/network#introduction)
- [Mock APIs](https://playwright.dev/python/docs/network#mock-apis)
- [HTTP Authentication](https://playwright.dev/python/docs/network#http-authentication)
- [HTTP Proxy](https://playwright.dev/python/docs/network#http-proxy)
- [Network events](https://playwright.dev/python/docs/network#network-events)
- [Handle requests](https://playwright.dev/python/docs/network#handle-requests)
- [Modify requests](https://playwright.dev/python/docs/network#modify-requests)
- [Abort requests](https://playwright.dev/python/docs/network#abort-requests)
- [Modify responses](https://playwright.dev/python/docs/network#modify-responses)
- [Glob URL patterns](https://playwright.dev/python/docs/network#glob-url-patterns)
- [WebSockets](https://playwright.dev/python/docs/network#websockets)
- [Missing Network Events and Service Workers](https://playwright.dev/python/docs/network#missing-network-events-and-service-workers)

## Playwright Language Support
[Skip to main content](https://playwright.dev/python/docs/languages#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/languages\#introduction "Direct link to Introduction")

Playwright is available in multiple languages that share the same underlying implementation. All core features for automating the browser are supported in all languages, while testing ecosystem integration is different. Pick the language based on your experience, familiarity with its testing ecosystem and your project constraints. For the best experience pick the test runner that we recommend for each language.

## JavaScript and TypeScript [​](https://playwright.dev/python/docs/languages\#javascript-and-typescript "Direct link to JavaScript and TypeScript")

Playwright for Node.js comes with its own [test runner](https://playwright.dev/docs/running-tests) that provides great parallelization mechanism, screenshot assertions, html reporter, automatic tracing etc.

- [Documentation](https://playwright.dev/docs/intro)
- [GitHub repo](https://github.com/microsoft/playwright)

## Python [​](https://playwright.dev/python/docs/languages\#python "Direct link to Python")

Playwright [Pytest plugin](https://playwright.dev/python/docs/test-runners) is the recommended way to run end-to-end tests. It provides context isolation, running it on multiple browser configurations and more out of the box.

- [Documentation](https://playwright.dev/python/docs/intro)
- [GitHub repo](https://github.com/microsoft/playwright-python)

## Java [​](https://playwright.dev/python/docs/languages\#java "Direct link to Java")

You can choose any testing framework such as JUnit or TestNG based on your project requirements.

- [Documentation](https://playwright.dev/java/docs/intro)
- [GitHub repo](https://github.com/microsoft/playwright-java)

## .NET [​](https://playwright.dev/python/docs/languages\#net "Direct link to .NET")

Playwright for .NET comes with MSTest, NUnit, and xUnit [base classes](https://playwright.dev/dotnet/docs/test-runners) for writing end-to-end tests.

- [Documentation](https://playwright.dev/dotnet/docs/intro)
- [GitHub repo](https://github.com/microsoft/playwright-dotnet)

- [Introduction](https://playwright.dev/python/docs/languages#introduction)
- [JavaScript and TypeScript](https://playwright.dev/python/docs/languages#javascript-and-typescript)
- [Python](https://playwright.dev/python/docs/languages#python)
- [Java](https://playwright.dev/python/docs/languages#java)
- [.NET](https://playwright.dev/python/docs/languages#net)

## Playwright Codegen Overview
[Skip to main content](https://playwright.dev/python/docs/codegen-intro#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/codegen-intro\#introduction "Direct link to Introduction")

Playwright comes with the ability to generate tests out of the box and is a great way to quickly get started with testing. It will open two windows, a browser window where you interact with the website you wish to test and the Playwright Inspector window where you can record your tests, copy the tests, clear your tests as well as change the language of your tests.

**You will learn**

- [How to record a test](https://playwright.dev/python/docs/codegen#recording-a-test)
- [How to generate locators](https://playwright.dev/python/docs/codegen#generating-locators)

## Running Codegen [​](https://playwright.dev/python/docs/codegen-intro\#running-codegen "Direct link to Running Codegen")

Use the `codegen` command to run the test generator followed by the URL of the website you want to generate tests for. The URL is optional and you can always run the command without it and then add the URL directly into the browser window instead.

```codeBlockLines_e6Vv
playwright codegen demo.playwright.dev/todomvc

```

### Recording a test [​](https://playwright.dev/python/docs/codegen-intro\#recording-a-test "Direct link to Recording a test")

Run `codegen` and perform actions in the browser. Playwright will generate the code for the user interactions. `Codegen` will look at the rendered page and figure out the recommended locator, prioritizing role, text and test id locators. If the generator identifies multiple elements matching the locator, it will improve the locator to make it resilient and uniquely identify the target element, therefore eliminating and reducing test(s) failing and flaking due to locators.

With the test generator you can record:

- Actions like click or fill by simply interacting with the page
- Assertions by clicking on one of the icons in the toolbar and then clicking on an element on the page to assert against. You can choose:
  - `'assert visibility'` to assert that an element is visible
  - `'assert text'` to assert that an element contains specific text
  - `'assert value'` to assert that an element has a specific value

![recording a test](https://github.com/microsoft/playwright/assets/13063165/9751b609-6e4c-486b-a961-f86f177b1d58)

###### [​](https://playwright.dev/python/docs/codegen-intro\#-1 "Direct link to -1")

When you have finished interacting with the page, press the `'record'` button to stop the recording and use the `'copy'` button to copy the generated code to your editor.

Use the `'clear'` button to clear the code to start recording again. Once finished close the Playwright inspector window or stop the terminal command.

To learn more about generating tests check out or detailed guide on [Codegen](https://playwright.dev/python/docs/codegen).

### Generating locators [​](https://playwright.dev/python/docs/codegen-intro\#generating-locators "Direct link to Generating locators")

You can generate [locators](https://playwright.dev/python/docs/locators) with the test generator.

- Press the `'Record'` button to stop the recording and the `'Pick Locator'` button will appear.
- Click on the `'Pick Locator'` button and then hover over elements in the browser window to see the locator highlighted underneath each element.
- To choose a locator click on the element you would like to locate and the code for that locator will appear in the locator playground next to the Pick Locator button.
- You can then edit the locator in the locator playground to fine tune it and see the matching element highlighted in the browser window.
- Use the copy button to copy the locator and paste it into your code.

###### [​](https://playwright.dev/python/docs/codegen-intro\#-2 "Direct link to -2")

![picking a locator](https://github.com/microsoft/playwright/assets/13063165/95d11f48-96a4-46b9-9c2a-63c3aa4fdce7)

### Emulation [​](https://playwright.dev/python/docs/codegen-intro\#emulation "Direct link to Emulation")

You can also generate tests using emulation so as to generate a test for a specific viewport, device, color scheme, as well as emulate the geolocation, language or timezone. The test generator can also generate a test while preserving authenticated state. Check out the [Test Generator](https://playwright.dev/python/docs/codegen#emulation) guide to learn more.

## What's Next [​](https://playwright.dev/python/docs/codegen-intro\#whats-next "Direct link to What's Next")

- [See a trace of your tests](https://playwright.dev/python/docs/trace-viewer-intro)

- [Introduction](https://playwright.dev/python/docs/codegen-intro#introduction)
- [Running Codegen](https://playwright.dev/python/docs/codegen-intro#running-codegen)
  - [Recording a test](https://playwright.dev/python/docs/codegen-intro#recording-a-test)
  - [Generating locators](https://playwright.dev/python/docs/codegen-intro#generating-locators)
  - [Emulation](https://playwright.dev/python/docs/codegen-intro#emulation)
- [What's Next](https://playwright.dev/python/docs/codegen-intro#whats-next)

## Playwright Release Notes
[Skip to main content](https://playwright.dev/python/docs/release-notes#__docusaurus_skipToContent_fallback)

On this page

## Version 1.51 [​](https://playwright.dev/python/docs/release-notes\#version-151 "Direct link to Version 1.51")

### Highlights [​](https://playwright.dev/python/docs/release-notes\#highlights "Direct link to Highlights")

- New option [indexed\_db](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-storage-state-option-indexed-db) for [browser\_context.storage\_state()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-storage-state) allows to save and restore IndexedDB contents. Useful when your application uses [IndexedDB API](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API) to store authentication tokens, like Firebase Authentication.

Here is an example following the [authentication guide](https://playwright.dev/python/docs/auth#reusing-signed-in-state):





```codeBlockLines_e6Vv
# Save storage state into the file. Make sure to include IndexedDB.
storage = await context.storage_state(path="state.json", indexed_db=True)

# Create a new context with the saved storage state.
context = await browser.new_context(storage_state="state.json")

```

- New option [visible](https://playwright.dev/python/docs/api/class-locator#locator-filter-option-visible) for [locator.filter()](https://playwright.dev/python/docs/api/class-locator#locator-filter) allows matching only visible elements.





```codeBlockLines_e6Vv
# Ignore invisible todo items.
todo_items = page.get_by_test_id("todo-item").filter(visible=True)
# Check there are exactly 3 visible ones.
await expect(todo_items).to_have_count(3)

```

- New option `contrast` for methods [page.emulate\_media()](https://playwright.dev/python/docs/api/class-page#page-emulate-media) and [browser.new\_context()](https://playwright.dev/python/docs/api/class-browser#browser-new-context) allows to emulate the `prefers-contrast` media feature.

- New option [fail\_on\_status\_code](https://playwright.dev/python/docs/api/class-apirequest#api-request-new-context-option-fail-on-status-code) makes all fetch requests made through the [APIRequestContext](https://playwright.dev/python/docs/api/class-apirequestcontext "APIRequestContext") throw on response codes other than 2xx and 3xx.


### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions "Direct link to Browser Versions")

- Chromium 134.0.6998.35
- Mozilla Firefox 135.0
- WebKit 18.4

This version was also tested against the following stable channels:

- Google Chrome 133
- Microsoft Edge 133

## Version 1.50 [​](https://playwright.dev/python/docs/release-notes\#version-150 "Direct link to Version 1.50")

### Async Pytest Plugin [​](https://playwright.dev/python/docs/release-notes\#async-pytest-plugin "Direct link to Async Pytest Plugin")

- [Playwright's Pytest plugin](https://playwright.dev/python/docs/test-runners) now has support for [Async Fixtures](https://playwright.dev/python/docs/test-runners#async-fixtures).

### Miscellaneous [​](https://playwright.dev/python/docs/release-notes\#miscellaneous "Direct link to Miscellaneous")

- Added method [expect(locator).to\_have\_accessible\_error\_message()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-accessible-error-message) to assert the Locator points to an element with a given [aria errormessage](https://w3c.github.io/aria/#aria-errormessage).

### UI updates [​](https://playwright.dev/python/docs/release-notes\#ui-updates "Direct link to UI updates")

- New button in Codegen for picking elements to produce aria snapshots.
- Additional details (such as keys pressed) are now displayed alongside action API calls in traces.
- Display of `canvas` content in traces is error-prone. Display is now disabled by default, and can be enabled via the `Display canvas content` UI setting.
- `Call` and `Network` panels now display additional time information.

### Breaking [​](https://playwright.dev/python/docs/release-notes\#breaking "Direct link to Breaking")

- [expect(locator).to\_be\_editable()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-editable) and [locator.is\_editable()](https://playwright.dev/python/docs/api/class-locator#locator-is-editable) now throw if the target element is not `<input>`, `<select>`, or a number of other editable elements.

### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-1 "Direct link to Browser Versions")

- Chromium 133.0.6943.16
- Mozilla Firefox 134.0
- WebKit 18.2

This version was also tested against the following stable channels:

- Google Chrome 132
- Microsoft Edge 132

## Version 1.49 [​](https://playwright.dev/python/docs/release-notes\#version-149 "Direct link to Version 1.49")

### Aria snapshots [​](https://playwright.dev/python/docs/release-notes\#aria-snapshots "Direct link to Aria snapshots")

New assertion [expect(locator).to\_match\_aria\_snapshot()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-match-aria-snapshot) verifies page structure by comparing to an expected accessibility tree, represented as YAML.

```codeBlockLines_e6Vv
page.goto("https://playwright.dev")
expect(page.locator('body')).to_match_aria_snapshot('''
  - banner:
    - heading /Playwright enables reliable/ [level=1]
    - link "Get started"
    - link "Star microsoft/playwright on GitHub"
  - main:
    - img "Browsers (Chromium, Firefox, WebKit)"
    - heading "Any browser • Any platform • One API"
''')

```

You can generate this assertion with [Test Generator](https://playwright.dev/python/docs/codegen) or by calling [locator.aria\_snapshot()](https://playwright.dev/python/docs/api/class-locator#locator-aria-snapshot).

Learn more in the [aria snapshots guide](https://playwright.dev/python/docs/aria-snapshots).

### Tracing groups [​](https://playwright.dev/python/docs/release-notes\#tracing-groups "Direct link to Tracing groups")

New method [tracing.group()](https://playwright.dev/python/docs/api/class-tracing#tracing-group) allows you to visually group actions in the trace viewer.

```codeBlockLines_e6Vv
# All actions between group and group_end
# will be shown in the trace viewer as a group.
page.context.tracing.group("Open Playwright.dev > API")
page.goto("https://playwright.dev/")
page.get_by_role("link", name="API").click()
page.context.tracing.group_end()

```

### Breaking: `chrome` and `msedge` channels switch to new headless mode [​](https://playwright.dev/python/docs/release-notes\#breaking-chrome-and-msedge-channels-switch-to-new-headless-mode "Direct link to breaking-chrome-and-msedge-channels-switch-to-new-headless-mode")

This change affects you if you're using one of the following channels in your `playwright.config.ts`:

- `chrome`, `chrome-dev`, `chrome-beta`, or `chrome-canary`
- `msedge`, `msedge-dev`, `msedge-beta`, or `msedge-canary`

After updating to Playwright v1.49, run your test suite. If it still passes, you're good to go. If not, you will probably need to update your snapshots, and adapt some of your test code around PDF viewers and extensions. See [issue #33566](https://github.com/microsoft/playwright/issues/33566) for more details.

### Try new Chromium headless [​](https://playwright.dev/python/docs/release-notes\#try-new-chromium-headless "Direct link to Try new Chromium headless")

You can opt into the new headless mode by using `'chromium'` channel. As [official Chrome documentation puts it](https://developer.chrome.com/blog/chrome-headless-shell):

> New Headless on the other hand is the real Chrome browser, and is thus more authentic, reliable, and offers more features. This makes it more suitable for high-accuracy end-to-end web app testing or browser extension testing.

See [issue #33566](https://github.com/microsoft/playwright/issues/33566) for the list of possible breakages you could encounter and more details on Chromium headless. Please file an issue if you see any problems after opting in.

```codeBlockLines_e6Vv
pytest test_login.py --browser-channel chromium

```

### Miscellaneous [​](https://playwright.dev/python/docs/release-notes\#miscellaneous-1 "Direct link to Miscellaneous")

- There will be no more updates for WebKit on Ubuntu 20.04 and Debian 11. We recommend updating your OS to a later version.
- `<canvas>` elements inside a snapshot now draw a preview.
- Python 3.8 is not supported anymore.

### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-2 "Direct link to Browser Versions")

- Chromium 131.0.6778.33
- Mozilla Firefox 132.0
- WebKit 18.2

This version was also tested against the following stable channels:

- Google Chrome 130
- Microsoft Edge 130

## Version 1.48 [​](https://playwright.dev/python/docs/release-notes\#version-148 "Direct link to Version 1.48")

### WebSocket routing [​](https://playwright.dev/python/docs/release-notes\#websocket-routing "Direct link to WebSocket routing")

New methods [page.route\_web\_socket()](https://playwright.dev/python/docs/api/class-page#page-route-web-socket) and [browser\_context.route\_web\_socket()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route-web-socket) allow to intercept, modify and mock WebSocket connections initiated in the page. Below is a simple example that mocks WebSocket communication by responding to a `"request"` with a `"response"`.

```codeBlockLines_e6Vv
def message_handler(ws: WebSocketRoute, message: Union[str, bytes]):
  if message == "request":
    ws.send("response")

page.route_web_socket("/ws", lambda ws: ws.on_message(
    lambda message: message_handler(ws, message)
))

```

See [WebSocketRoute](https://playwright.dev/python/docs/api/class-websocketroute "WebSocketRoute") for more details.

### UI updates [​](https://playwright.dev/python/docs/release-notes\#ui-updates-1 "Direct link to UI updates")

- New "copy" buttons for annotations and test location in the HTML report.
- Route method calls like [route.fulfill()](https://playwright.dev/python/docs/api/class-route#route-fulfill) are not shown in the report and trace viewer anymore. You can see which network requests were routed in the network tab instead.
- New "Copy as cURL" and "Copy as fetch" buttons for requests in the network tab.

### Miscellaneous [​](https://playwright.dev/python/docs/release-notes\#miscellaneous-2 "Direct link to Miscellaneous")

- New method [page.request\_gc()](https://playwright.dev/python/docs/api/class-page#page-request-gc) may help detect memory leaks.
- Requests made by [APIRequestContext](https://playwright.dev/python/docs/api/class-apirequestcontext "APIRequestContext") now record detailed timing and security information in the HAR.

### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-3 "Direct link to Browser Versions")

- Chromium 130.0.6723.19
- Mozilla Firefox 130.0
- WebKit 18.0

This version was also tested against the following stable channels:

- Google Chrome 129
- Microsoft Edge 129

## Version 1.47 [​](https://playwright.dev/python/docs/release-notes\#version-147 "Direct link to Version 1.47")

### Network Tab improvements [​](https://playwright.dev/python/docs/release-notes\#network-tab-improvements "Direct link to Network Tab improvements")

The Network tab in the trace viewer has several nice improvements:

- filtering by asset type and URL
- better display of query string parameters
- preview of font assets

![Network tab now has filters](https://github.com/user-attachments/assets/4bd1b67d-90bd-438b-a227-00b9e86872e2)

### Miscellaneous [​](https://playwright.dev/python/docs/release-notes\#miscellaneous-3 "Direct link to Miscellaneous")

- The `mcr.microsoft.com/playwright/python:v1.47.0` now serves a Playwright image based on Ubuntu 24.04 Noble. To use the 22.04 jammy-based image, please use `mcr.microsoft.com/playwright/python:v1.47.0-jammy` instead.
- The `:latest`/ `:focal`/ `:jammy` tag for Playwright Docker images is no longer being published. Pin to a specific version for better stability and reproducibility.
- TLS client certificates can now be passed from memory by passing [client\_certificates.cert](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-client-certificates) and [client\_certificates.key](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-client-certificates) as bytes instead of file paths.
- [no\_wait\_after](https://playwright.dev/python/docs/api/class-locator#locator-select-option-option-no-wait-after) in [locator.select\_option()](https://playwright.dev/python/docs/api/class-locator#locator-select-option) was deprecated.
- We've seen reports of WebGL in Webkit misbehaving on GitHub Actions `macos-13`. We recommend upgrading GitHub Actions to `macos-14`.

### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-4 "Direct link to Browser Versions")

- Chromium 129.0.6668.29
- Mozilla Firefox 130.0
- WebKit 18.0

This version was also tested against the following stable channels:

- Google Chrome 128
- Microsoft Edge 128

## Version 1.46 [​](https://playwright.dev/python/docs/release-notes\#version-146 "Direct link to Version 1.46")

### TLS Client Certificates [​](https://playwright.dev/python/docs/release-notes\#tls-client-certificates "Direct link to TLS Client Certificates")

Playwright now allows to supply client-side certificates, so that server can verify them, as specified by TLS Client Authentication.

You can provide client certificates as a parameter of [browser.new\_context()](https://playwright.dev/python/docs/api/class-browser#browser-new-context) and [api\_request.new\_context()](https://playwright.dev/python/docs/api/class-apirequest#api-request-new-context). The following snippet sets up a client certificate for `https://example.com`:

```codeBlockLines_e6Vv
context = browser.new_context(
    client_certificates=[\
        {\
            "origin": "https://example.com",\
            "certPath": "client-certificates/cert.pem",\
            "keyPath": "client-certificates/key.pem",\
        }\
    ],
)

```

### Trace Viewer Updates [​](https://playwright.dev/python/docs/release-notes\#trace-viewer-updates "Direct link to Trace Viewer Updates")

- Content of text attachments is now rendered inline in the attachments pane.
- New setting to show/hide routing actions like [route.continue\_()](https://playwright.dev/python/docs/api/class-route#route-continue).
- Request method and status are shown in the network details tab.
- New button to copy source file location to clipboard.
- Metadata pane now displays the `base_url`.

### Miscellaneous [​](https://playwright.dev/python/docs/release-notes\#miscellaneous-4 "Direct link to Miscellaneous")

- New `maxRetries` option in [api\_request\_context.fetch()](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-fetch) which retries on the `ECONNRESET` network error.

### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-5 "Direct link to Browser Versions")

- Chromium 128.0.6613.18
- Mozilla Firefox 128.0
- WebKit 18.0

This version was also tested against the following stable channels:

- Google Chrome 127
- Microsoft Edge 127

## Version 1.45 [​](https://playwright.dev/python/docs/release-notes\#version-145 "Direct link to Version 1.45")

### Clock [​](https://playwright.dev/python/docs/release-notes\#clock "Direct link to Clock")

Utilizing the new [Clock](https://playwright.dev/python/docs/api/class-clock "Clock") API allows to manipulate and control time within tests to verify time-related behavior. This API covers many common scenarios, including:

- testing with predefined time;
- keeping consistent time and timers;
- monitoring inactivity;
- ticking through time manually.

```codeBlockLines_e6Vv
# Initialize clock with some time before the test time and let the page load
# naturally. `Date.now` will progress as the timers fire.
page.clock.install(time=datetime.datetime(2024, 2, 2, 8, 0, 0))
page.goto("http://localhost:3333")

# Pretend that the user closed the laptop lid and opened it again at 10am.
# Pause the time once reached that point.
page.clock.pause_at(datetime.datetime(2024, 2, 2, 10, 0, 0))

# Assert the page state.
expect(page.get_by_test_id("current-time")).to_have_text("2/2/2024, 10:00:00 AM")

# Close the laptop lid again and open it at 10:30am.
page.clock.fast_forward("30:00")
expect(page.get_by_test_id("current-time")).to_have_text("2/2/2024, 10:30:00 AM")

```

See [the clock guide](https://playwright.dev/python/docs/clock) for more details.

### Miscellaneous [​](https://playwright.dev/python/docs/release-notes\#miscellaneous-5 "Direct link to Miscellaneous")

- Method [locator.set\_input\_files()](https://playwright.dev/python/docs/api/class-locator#locator-set-input-files) now supports uploading a directory for `<input type=file webkitdirectory>` elements.





```codeBlockLines_e6Vv
page.get_by_label("Upload directory").set_input_files('mydir')

```

- Multiple methods like [locator.click()](https://playwright.dev/python/docs/api/class-locator#locator-click) or [locator.press()](https://playwright.dev/python/docs/api/class-locator#locator-press) now support a `ControlOrMeta` modifier key. This key maps to `Meta` on macOS and maps to `Control` on Windows and Linux.





```codeBlockLines_e6Vv
# Press the common keyboard shortcut Control+S or Meta+S to trigger a "Save" operation.
page.keyboard.press("ControlOrMeta+S")

```

- New property `httpCredentials.send` in [api\_request.new\_context()](https://playwright.dev/python/docs/api/class-apirequest#api-request-new-context) that allows to either always send the `Authorization` header or only send it in response to `401 Unauthorized`.

- Playwright now supports Chromium, Firefox and WebKit on Ubuntu 24.04.

- v1.45 is the last release to receive WebKit update for macOS 12 Monterey. Please update macOS to keep using the latest WebKit.


### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-6 "Direct link to Browser Versions")

- Chromium 127.0.6533.5
- Mozilla Firefox 127.0
- WebKit 17.4

This version was also tested against the following stable channels:

- Google Chrome 126
- Microsoft Edge 126

## Version 1.44 [​](https://playwright.dev/python/docs/release-notes\#version-144 "Direct link to Version 1.44")

### New APIs [​](https://playwright.dev/python/docs/release-notes\#new-apis "Direct link to New APIs")

**Accessibility assertions**

- [expect(locator).to\_have\_accessible\_name()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-accessible-name) checks if the element has the specified accessible name:





```codeBlockLines_e6Vv
locator = page.get_by_role("button")
expect(locator).to_have_accessible_name("Submit")

```

- [expect(locator).to\_have\_accessible\_description()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-accessible-description) checks if the element has the specified accessible description:





```codeBlockLines_e6Vv
locator = page.get_by_role("button")
expect(locator).to_have_accessible_description("Upload a photo")

```

- [expect(locator).to\_have\_role()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-role) checks if the element has the specified ARIA role:





```codeBlockLines_e6Vv
locator = page.get_by_test_id("save-button")
expect(locator).to_have_role("button")

```


**Locator handler**

- After executing the handler added with [page.add\_locator\_handler()](https://playwright.dev/python/docs/api/class-page#page-add-locator-handler), Playwright will now wait until the overlay that triggered the handler is not visible anymore. You can opt-out of this behavior with the new `no_wait_after` option.
- You can use new `times` option in [page.add\_locator\_handler()](https://playwright.dev/python/docs/api/class-page#page-add-locator-handler) to specify maximum number of times the handler should be run.
- The handler in [page.add\_locator\_handler()](https://playwright.dev/python/docs/api/class-page#page-add-locator-handler) now accepts the locator as argument.
- New [page.remove\_locator\_handler()](https://playwright.dev/python/docs/api/class-page#page-remove-locator-handler) method for removing previously added locator handlers.

```codeBlockLines_e6Vv
locator = page.get_by_text("This interstitial covers the button")
page.add_locator_handler(locator, lambda overlay: overlay.locator("#close").click(), times=3, no_wait_after=True)
# Run your tests that can be interrupted by the overlay.
# ...
page.remove_locator_handler(locator)

```

**Miscellaneous options**

- [expect(page).to\_have\_url()](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-to-have-url) now supports `ignore_case` [option](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-to-have-url-option-ignore-case).

### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-7 "Direct link to Browser Versions")

- Chromium 125.0.6422.14
- Mozilla Firefox 125.0.1
- WebKit 17.4

This version was also tested against the following stable channels:

- Google Chrome 124
- Microsoft Edge 124

## Version 1.43 [​](https://playwright.dev/python/docs/release-notes\#version-143 "Direct link to Version 1.43")

### New APIs [​](https://playwright.dev/python/docs/release-notes\#new-apis-1 "Direct link to New APIs")

- Method [browser\_context.clear\_cookies()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-clear-cookies) now supports filters to remove only some cookies.





```codeBlockLines_e6Vv
# Clear all cookies.
context.clear_cookies()
# New: clear cookies with a particular name.
context.clear_cookies(name="session-id")
# New: clear cookies for a particular domain.
context.clear_cookies(domain="my-origin.com")

```

- New method [locator.content\_frame](https://playwright.dev/python/docs/api/class-locator#locator-content-frame) converts a [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") object to a [FrameLocator](https://playwright.dev/python/docs/api/class-framelocator "FrameLocator"). This can be useful when you have a [Locator](https://playwright.dev/python/docs/api/class-locator "Locator") object obtained somewhere, and later on would like to interact with the content inside the frame.





```codeBlockLines_e6Vv
locator = page.locator("iframe[name='embedded']")
# ...
frame_locator = locator.content_frame
frame_locator.getByRole("button").click()

```

- New method [frame\_locator.owner](https://playwright.dev/python/docs/api/class-framelocator#frame-locator-owner) converts a [FrameLocator](https://playwright.dev/python/docs/api/class-framelocator "FrameLocator") object to a [Locator](https://playwright.dev/python/docs/api/class-locator "Locator"). This can be useful when you have a [FrameLocator](https://playwright.dev/python/docs/api/class-framelocator "FrameLocator") object obtained somewhere, and later on would like to interact with the `iframe` element.





```codeBlockLines_e6Vv
frame_locator = page.frame_locator("iframe[name='embedded']")
# ...
locator = frame_locator.owner
expect(locator).to_be_visible()

```

- Conda builds are now published for macOS-arm64 and Linux-arm64.


### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-8 "Direct link to Browser Versions")

- Chromium 124.0.6367.8
- Mozilla Firefox 124.0
- WebKit 17.4

This version was also tested against the following stable channels:

- Google Chrome 123
- Microsoft Edge 123

## Version 1.42 [​](https://playwright.dev/python/docs/release-notes\#version-142 "Direct link to Version 1.42")

### New Locator Handler [​](https://playwright.dev/python/docs/release-notes\#new-locator-handler "Direct link to New Locator Handler")

New method [page.add\_locator\_handler()](https://playwright.dev/python/docs/api/class-page#page-add-locator-handler) registers a callback that will be invoked when specified element becomes visible and may block Playwright actions. The callback can get rid of the overlay. Here is an example that closes a cookie dialog when it appears.

```codeBlockLines_e6Vv
# Setup the handler.
page.add_locator_handler(
    page.get_by_role("heading", name="Hej! You are in control of your cookies."),
    lambda: page.get_by_role("button", name="Accept all").click(),
)
# Write the test as usual.
page.goto("https://www.ikea.com/")
page.get_by_role("link", name="Collection of blue and white").click()
expect(page.get_by_role("heading", name="Light and easy")).to_be_visible()

```

### New APIs [​](https://playwright.dev/python/docs/release-notes\#new-apis-2 "Direct link to New APIs")

- [page.pdf()](https://playwright.dev/python/docs/api/class-page#page-pdf) accepts two new options [tagged](https://playwright.dev/python/docs/api/class-page#page-pdf-option-tagged) and [outline](https://playwright.dev/python/docs/api/class-page#page-pdf-option-outline).

### Announcements [​](https://playwright.dev/python/docs/release-notes\#announcements "Direct link to Announcements")

- ⚠️ Ubuntu 18 is not supported anymore.

### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-9 "Direct link to Browser Versions")

- Chromium 123.0.6312.4
- Mozilla Firefox 123.0
- WebKit 17.4

This version was also tested against the following stable channels:

- Google Chrome 122
- Microsoft Edge 123

## Version 1.41 [​](https://playwright.dev/python/docs/release-notes\#version-141 "Direct link to Version 1.41")

### New APIs [​](https://playwright.dev/python/docs/release-notes\#new-apis-3 "Direct link to New APIs")

- New method [page.unroute\_all()](https://playwright.dev/python/docs/api/class-page#page-unroute-all) removes all routes registered by [page.route()](https://playwright.dev/python/docs/api/class-page#page-route) and [page.route\_from\_har()](https://playwright.dev/python/docs/api/class-page#page-route-from-har). Optionally allows to wait for ongoing routes to finish, or ignore any errors from them.
- New method [browser\_context.unroute\_all()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-unroute-all) removes all routes registered by [browser\_context.route()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route) and [browser\_context.route\_from\_har()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route-from-har). Optionally allows to wait for ongoing routes to finish, or ignore any errors from them.
- New options [style](https://playwright.dev/python/docs/api/class-page#page-screenshot-option-style) in [page.screenshot()](https://playwright.dev/python/docs/api/class-page#page-screenshot) and [style](https://playwright.dev/python/docs/api/class-locator#locator-screenshot-option-style) in [locator.screenshot()](https://playwright.dev/python/docs/api/class-locator#locator-screenshot) to add custom CSS to the page before taking a screenshot.

### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-10 "Direct link to Browser Versions")

- Chromium 121.0.6167.57
- Mozilla Firefox 121.0
- WebKit 17.4

This version was also tested against the following stable channels:

- Google Chrome 120
- Microsoft Edge 120

## Version 1.40 [​](https://playwright.dev/python/docs/release-notes\#version-140 "Direct link to Version 1.40")

### Test Generator Update [​](https://playwright.dev/python/docs/release-notes\#test-generator-update "Direct link to Test Generator Update")

![Playwright Test Generator](https://github.com/microsoft/playwright/assets/9881434/e8d67e2e-f36d-4301-8631-023948d3e190)

New tools to generate assertions:

- "Assert visibility" tool generates [expect(locator).to\_be\_visible()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-visible).
- "Assert value" tool generates [expect(locator).to\_have\_value()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-value).
- "Assert text" tool generates [expect(locator).to\_contain\_text()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-contain-text).

Here is an example of a generated test with assertions:

```codeBlockLines_e6Vv
from playwright.sync_api import Page, expect

def test_example(page: Page) -> None:
    page.goto("https://playwright.dev/")
    page.get_by_role("link", name="Get started").click()
    expect(page.get_by_label("Breadcrumbs").get_by_role("list")).to_contain_text("Installation")
    expect(page.get_by_label("Search")).to_be_visible()
    page.get_by_label("Search").click()
    page.get_by_placeholder("Search docs").fill("locator")
    expect(page.get_by_placeholder("Search docs")).to_have_value("locator");

```

### New APIs [​](https://playwright.dev/python/docs/release-notes\#new-apis-4 "Direct link to New APIs")

- Options [reason](https://playwright.dev/python/docs/api/class-page#page-close-option-reason) in [page.close()](https://playwright.dev/python/docs/api/class-page#page-close), [reason](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-close-option-reason) in [browser\_context.close()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-close) and [reason](https://playwright.dev/python/docs/api/class-browser#browser-close-option-reason) in [browser.close()](https://playwright.dev/python/docs/api/class-browser#browser-close). Close reason is reported for all operations interrupted by the closure.
- Option [firefox\_user\_prefs](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context-option-firefox-user-prefs) in [browser\_type.launch\_persistent\_context()](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context).

### Other Changes [​](https://playwright.dev/python/docs/release-notes\#other-changes "Direct link to Other Changes")

- Method [download.path()](https://playwright.dev/python/docs/api/class-download#download-path) throws an error for failed and cancelled downloads.

### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-11 "Direct link to Browser Versions")

- Chromium 120.0.6099.28
- Mozilla Firefox 119.0
- WebKit 17.4

This version was also tested against the following stable channels:

- Google Chrome 119
- Microsoft Edge 119

## Version 1.39 [​](https://playwright.dev/python/docs/release-notes\#version-139 "Direct link to Version 1.39")

Evergreen browsers update.

### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-12 "Direct link to Browser Versions")

- Chromium 119.0.6045.9
- Mozilla Firefox 118.0.1
- WebKit 17.4

This version was also tested against the following stable channels:

- Google Chrome 118
- Microsoft Edge 118

## Version 1.38 [​](https://playwright.dev/python/docs/release-notes\#version-138 "Direct link to Version 1.38")

### Trace Viewer Updates [​](https://playwright.dev/python/docs/release-notes\#trace-viewer-updates-1 "Direct link to Trace Viewer Updates")

![Playwright Trace Viewer](https://github.com/microsoft/playwright/assets/746130/0c41e20d-c54b-4600-8ca8-1cbb6393ddef)

1. Zoom into time range.
2. Network panel redesign.

### New APIs [​](https://playwright.dev/python/docs/release-notes\#new-apis-5 "Direct link to New APIs")

- [browser\_context.on("weberror")](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-event-web-error)
- [locator.press\_sequentially()](https://playwright.dev/python/docs/api/class-locator#locator-press-sequentially)

### Deprecations [​](https://playwright.dev/python/docs/release-notes\#deprecations "Direct link to Deprecations")

- The following methods were deprecated: [page.type()](https://playwright.dev/python/docs/api/class-page#page-type), [frame.type()](https://playwright.dev/python/docs/api/class-frame#frame-type), [locator.type()](https://playwright.dev/python/docs/api/class-locator#locator-type) and [element\_handle.type()](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-type). Please use [locator.fill()](https://playwright.dev/python/docs/api/class-locator#locator-fill) instead which is much faster. Use [locator.press\_sequentially()](https://playwright.dev/python/docs/api/class-locator#locator-press-sequentially) only if there is a special keyboard handling on the page, and you need to press keys one-by-one.

### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-13 "Direct link to Browser Versions")

- Chromium 117.0.5938.62
- Mozilla Firefox 117.0
- WebKit 17.0

This version was also tested against the following stable channels:

- Google Chrome 116
- Microsoft Edge 116

## Version 1.37 [​](https://playwright.dev/python/docs/release-notes\#version-137 "Direct link to Version 1.37")

### Highlights [​](https://playwright.dev/python/docs/release-notes\#highlights-1 "Direct link to Highlights")

- New [--full-page-screenshot](https://playwright.dev/python/docs/test-runners#cli-arguments) command line flag allows taking a full page screenshot on failure.
- It is now possible to override the context options for a single test by using the [browser\_context\_args](https://playwright.dev/python/docs/test-runners#fixtures) marker.
- `pytest-playwright` is now also getting published [on Anaconda](https://anaconda.org/Microsoft/pytest-playwright/)

### 📚 Debian 12 Bookworm Support [​](https://playwright.dev/python/docs/release-notes\#-debian-12-bookworm-support "Direct link to 📚 Debian 12 Bookworm Support")

Playwright now supports Debian 12 Bookworm on both x86\_64 and arm64 for Chromium, Firefox and WebKit. Let us know if you encounter any issues!

Linux support looks like this:

|  | Ubuntu 20.04 | Ubuntu 22.04 | Debian 11 | Debian 12 |
| --- | --- | --- | --- | --- |
| Chromium | ✅ | ✅ | ✅ | ✅ |
| WebKit | ✅ | ✅ | ✅ | ✅ |
| Firefox | ✅ | ✅ | ✅ | ✅ |

### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-14 "Direct link to Browser Versions")

- Chromium 116.0.5845.82
- Mozilla Firefox 115.0
- WebKit 17.0

This version was also tested against the following stable channels:

- Google Chrome 115
- Microsoft Edge 115

## Version 1.36 [​](https://playwright.dev/python/docs/release-notes\#version-136 "Direct link to Version 1.36")

🏝️ Summer maintenance release.

### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-15 "Direct link to Browser Versions")

- Chromium 115.0.5790.75
- Mozilla Firefox 115.0
- WebKit 17.0

This version was also tested against the following stable channels:

- Google Chrome 114
- Microsoft Edge 114

## Version 1.35 [​](https://playwright.dev/python/docs/release-notes\#version-135 "Direct link to Version 1.35")

### Highlights [​](https://playwright.dev/python/docs/release-notes\#highlights-2 "Direct link to Highlights")

- New option `mask_color` for methods [page.screenshot()](https://playwright.dev/python/docs/api/class-page#page-screenshot) and [locator.screenshot()](https://playwright.dev/python/docs/api/class-locator#locator-screenshot) to change default masking color.

- New `uninstall` CLI command to uninstall browser binaries:





```codeBlockLines_e6Vv
$ playwright uninstall # remove browsers installed by this installation
$ playwright uninstall --all # remove all ever-install Playwright browsers

```


### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-16 "Direct link to Browser Versions")

- Chromium 115.0.5790.13
- Mozilla Firefox 113.0
- WebKit 16.4

This version was also tested against the following stable channels:

- Google Chrome 114
- Microsoft Edge 114

## Version 1.34 [​](https://playwright.dev/python/docs/release-notes\#version-134 "Direct link to Version 1.34")

### Highlights [​](https://playwright.dev/python/docs/release-notes\#highlights-3 "Direct link to Highlights")

- New [locator.and\_()](https://playwright.dev/python/docs/api/class-locator#locator-and) to create a locator that matches both locators.





```codeBlockLines_e6Vv
button = page.get_by_role("button").and_(page.get_by_title("Subscribe"))

```

- New events [browser\_context.on("console")](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-event-console) and [browser\_context.on("dialog")](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-event-dialog) to subscribe to any dialogs and console messages from any page from the given browser context. Use the new methods [console\_message.page](https://playwright.dev/python/docs/api/class-consolemessage#console-message-page) and [dialog.page](https://playwright.dev/python/docs/api/class-dialog#dialog-page) to pin-point event source.


### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-17 "Direct link to Browser Versions")

- Chromium 114.0.5735.26
- Mozilla Firefox 113.0
- WebKit 16.4

This version was also tested against the following stable channels:

- Google Chrome 113
- Microsoft Edge 113

## Version 1.33 [​](https://playwright.dev/python/docs/release-notes\#version-133 "Direct link to Version 1.33")

### Locators Update [​](https://playwright.dev/python/docs/release-notes\#locators-update "Direct link to Locators Update")

- Use [locator.or\_()](https://playwright.dev/python/docs/api/class-locator#locator-or) to create a locator that matches either of the two locators. Consider a scenario where you'd like to click on a "New email" button, but sometimes a security settings dialog shows up instead. In this case, you can wait for either a "New email" button, or a dialog and act accordingly:





```codeBlockLines_e6Vv
new_email = page.get_by_role("button", name="New email")
dialog = page.get_by_text("Confirm security settings")
expect(new_email.or_(dialog)).is_visible()
if (dialog.is_visible()):
    page.get_by_role("button", name="Dismiss").click()
new_email.click()

```

- Use new options [has\_not](https://playwright.dev/python/docs/api/class-locator#locator-filter-option-has-not) and [has\_not\_text](https://playwright.dev/python/docs/api/class-locator#locator-filter-option-has-not-text) in [locator.filter()](https://playwright.dev/python/docs/api/class-locator#locator-filter) to find elements that **do not match** certain conditions.





```codeBlockLines_e6Vv
row_locator = page.locator("tr")
row_locator.filter(has_not_text="text in column 1").filter(
      has_not=page.get_by_role("button", name="column 2 button")
).screenshot()

```

- Use new web-first assertion [expect(locator).to\_be\_attached()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-attached) to ensure that the element is present in the page's DOM. Do not confuse with the [expect(locator).to\_be\_visible()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-visible) that ensures that element is both attached & visible.


### New APIs [​](https://playwright.dev/python/docs/release-notes\#new-apis-6 "Direct link to New APIs")

- [locator.or\_()](https://playwright.dev/python/docs/api/class-locator#locator-or)
- New option [has\_not](https://playwright.dev/python/docs/api/class-locator#locator-filter-option-has-not) in [locator.filter()](https://playwright.dev/python/docs/api/class-locator#locator-filter)
- New option [has\_not\_text](https://playwright.dev/python/docs/api/class-locator#locator-filter-option-has-not-text) in [locator.filter()](https://playwright.dev/python/docs/api/class-locator#locator-filter)
- [expect(locator).to\_be\_attached()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-attached)
- New option [timeout](https://playwright.dev/python/docs/api/class-route#route-fetch-option-timeout) in [route.fetch()](https://playwright.dev/python/docs/api/class-route#route-fetch)

### ⚠️ Breaking change [​](https://playwright.dev/python/docs/release-notes\#%EF%B8%8F-breaking-change "Direct link to ⚠️ Breaking change")

- The `mcr.microsoft.com/playwright/python:v1.33.0` now serves a Playwright image based on Ubuntu Jammy. To use the focal-based image, please use `mcr.microsoft.com/playwright/python:v1.33.0-focal` instead.

### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-18 "Direct link to Browser Versions")

- Chromium 113.0.5672.53
- Mozilla Firefox 112.0
- WebKit 16.4

This version was also tested against the following stable channels:

- Google Chrome 112
- Microsoft Edge 112

## Version 1.32 [​](https://playwright.dev/python/docs/release-notes\#version-132 "Direct link to Version 1.32")

### New APIs [​](https://playwright.dev/python/docs/release-notes\#new-apis-7 "Direct link to New APIs")

- Custom expect message, see [test assertions documentation](https://playwright.dev/python/docs/test-assertions#custom-expect-message).
- New options [update\_mode](https://playwright.dev/python/docs/api/class-page#page-route-from-har-option-update-mode) and [update\_content](https://playwright.dev/python/docs/api/class-page#page-route-from-har-option-update-content) in [page.route\_from\_har()](https://playwright.dev/python/docs/api/class-page#page-route-from-har) and [browser\_context.route\_from\_har()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route-from-har).
- Chaining existing locator objects, see [locator docs](https://playwright.dev/python/docs/locators#matching-inside-a-locator) for details.
- New option [name](https://playwright.dev/python/docs/api/class-tracing#tracing-start-chunk-option-name) in method [tracing.start\_chunk()](https://playwright.dev/python/docs/api/class-tracing#tracing-start-chunk).

### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-19 "Direct link to Browser Versions")

- Chromium 112.0.5615.29
- Mozilla Firefox 111.0
- WebKit 16.4

This version was also tested against the following stable channels:

- Google Chrome 111
- Microsoft Edge 111

## Version 1.31 [​](https://playwright.dev/python/docs/release-notes\#version-131 "Direct link to Version 1.31")

### New APIs [​](https://playwright.dev/python/docs/release-notes\#new-apis-8 "Direct link to New APIs")

- New assertion [expect(locator).to\_be\_in\_viewport()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-in-viewport) ensures that locator points to an element that intersects viewport, according to the [intersection observer API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API).





```codeBlockLines_e6Vv
from playwright.sync_api import expect

locator = page.get_by_role("button")

# Make sure at least some part of element intersects viewport.
expect(locator).to_be_in_viewport()

# Make sure element is fully outside of viewport.
expect(locator).not_to_be_in_viewport()

# Make sure that at least half of the element intersects viewport.
expect(locator).to_be_in_viewport(ratio=0.5)

```


### Miscellaneous [​](https://playwright.dev/python/docs/release-notes\#miscellaneous-6 "Direct link to Miscellaneous")

- DOM snapshots in trace viewer can be now opened in a separate window.
- New option [max\_redirects](https://playwright.dev/python/docs/api/class-route#route-fetch-option-max-redirects) for method [route.fetch()](https://playwright.dev/python/docs/api/class-route#route-fetch).
- Playwright now supports Debian 11 arm64.
- Official [docker images](https://playwright.dev/python/docs/docker) now include Node 18 instead of Node 16.

### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-20 "Direct link to Browser Versions")

- Chromium 111.0.5563.19
- Mozilla Firefox 109.0
- WebKit 16.4

This version was also tested against the following stable channels:

- Google Chrome 110
- Microsoft Edge 110

## Version 1.30 [​](https://playwright.dev/python/docs/release-notes\#version-130 "Direct link to Version 1.30")

### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-21 "Direct link to Browser Versions")

- Chromium 110.0.5481.38
- Mozilla Firefox 108.0.2
- WebKit 16.4

This version was also tested against the following stable channels:

- Google Chrome 109
- Microsoft Edge 109

## Version 1.29 [​](https://playwright.dev/python/docs/release-notes\#version-129 "Direct link to Version 1.29")

### New APIs [​](https://playwright.dev/python/docs/release-notes\#new-apis-9 "Direct link to New APIs")

- New method [route.fetch()](https://playwright.dev/python/docs/api/class-route#route-fetch) and new option `json` for [route.fulfill()](https://playwright.dev/python/docs/api/class-route#route-fulfill):





```codeBlockLines_e6Vv
def handle_route(route: Route):
    # Fetch original settings.
    response = route.fetch()

    # Force settings theme to a predefined value.
    json = response.json()
    json["theme"] = "Solorized"

    # Fulfill with modified data.
    route.fulfill(json=json)


page.route("**/api/settings", handle_route)

```

- New method [locator.all()](https://playwright.dev/python/docs/api/class-locator#locator-all) to iterate over all matching elements:





```codeBlockLines_e6Vv
# Check all checkboxes!
checkboxes = page.get_by_role("checkbox")
for checkbox in checkboxes.all():
    checkbox.check()

```

- [locator.select\_option()](https://playwright.dev/python/docs/api/class-locator#locator-select-option) matches now by value or label:





```codeBlockLines_e6Vv
<select multiple>
    <option value="red">Red</option>
    <option value="green">Green</option>
    <option value="blue">Blue</option>
</select>

```













```codeBlockLines_e6Vv
element.select_option("Red")

```


### Miscellaneous [​](https://playwright.dev/python/docs/release-notes\#miscellaneous-7 "Direct link to Miscellaneous")

- Option `postData` in method [route.continue\_()](https://playwright.dev/python/docs/api/class-route#route-continue) now supports [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable") values.

### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-22 "Direct link to Browser Versions")

- Chromium 109.0.5414.46
- Mozilla Firefox 107.0
- WebKit 16.4

This version was also tested against the following stable channels:

- Google Chrome 108
- Microsoft Edge 108

## Version 1.28 [​](https://playwright.dev/python/docs/release-notes\#version-128 "Direct link to Version 1.28")

### Playwright Tools [​](https://playwright.dev/python/docs/release-notes\#playwright-tools "Direct link to Playwright Tools")

- **Live Locators in CodeGen.** Generate a locator for any element on the page using "Explore" tool.

![Locator Explorer](https://user-images.githubusercontent.com/9798949/202293514-8e2eade6-c809-4b0a-864b-899dfcee3d84.png)

### New APIs [​](https://playwright.dev/python/docs/release-notes\#new-apis-10 "Direct link to New APIs")

- [locator.blur()](https://playwright.dev/python/docs/api/class-locator#locator-blur)
- [locator.clear()](https://playwright.dev/python/docs/api/class-locator#locator-clear)

### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-23 "Direct link to Browser Versions")

- Chromium 108.0.5359.29
- Mozilla Firefox 106.0
- WebKit 16.4

This version was also tested against the following stable channels:

- Google Chrome 107
- Microsoft Edge 107

## Version 1.27 [​](https://playwright.dev/python/docs/release-notes\#version-127 "Direct link to Version 1.27")

### Locators [​](https://playwright.dev/python/docs/release-notes\#locators "Direct link to Locators")

With these new APIs writing locators is a joy:

- [page.get\_by\_text()](https://playwright.dev/python/docs/api/class-page#page-get-by-text) to locate by text content.
- [page.get\_by\_role()](https://playwright.dev/python/docs/api/class-page#page-get-by-role) to locate by [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).
- [page.get\_by\_label()](https://playwright.dev/python/docs/api/class-page#page-get-by-label) to locate a form control by associated label's text.
- [page.get\_by\_test\_id()](https://playwright.dev/python/docs/api/class-page#page-get-by-test-id) to locate an element based on its `data-testid` attribute (other attribute can be configured).
- [page.get\_by\_placeholder()](https://playwright.dev/python/docs/api/class-page#page-get-by-placeholder) to locate an input by placeholder.
- [page.get\_by\_alt\_text()](https://playwright.dev/python/docs/api/class-page#page-get-by-alt-text) to locate an element, usually image, by its text alternative.
- [page.get\_by\_title()](https://playwright.dev/python/docs/api/class-page#page-get-by-title) to locate an element by its title.

```codeBlockLines_e6Vv
page.get_by_label("User Name").fill("John")

page.get_by_label("Password").fill("secret-password")

page.get_by_role("button", name="Sign in").click()

expect(page.get_by_text("Welcome, John!")).to_be_visible()

```

All the same methods are also available on [Locator](https://playwright.dev/python/docs/api/class-locator "Locator"), [FrameLocator](https://playwright.dev/python/docs/api/class-framelocator "FrameLocator") and [Frame](https://playwright.dev/python/docs/api/class-frame "Frame") classes.

### Other highlights [​](https://playwright.dev/python/docs/release-notes\#other-highlights "Direct link to Other highlights")

- As announced in v1.25, Ubuntu 18 will not be supported as of Dec 2022. In addition to that, there will be no WebKit updates on Ubuntu 18 starting from the next Playwright release.

### Behavior Changes [​](https://playwright.dev/python/docs/release-notes\#behavior-changes "Direct link to Behavior Changes")

- [expect(locator).to\_have\_attribute()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-attribute) with an empty value does not match missing attribute anymore. For example, the following snippet will succeed when `button` **does not** have a `disabled` attribute.





```codeBlockLines_e6Vv
expect(page.get_by_role("button")).to_have_attribute("disabled", "")

```


### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-24 "Direct link to Browser Versions")

- Chromium 107.0.5304.18
- Mozilla Firefox 105.0.1
- WebKit 16.0

This version was also tested against the following stable channels:

- Google Chrome 106
- Microsoft Edge 106

## Version 1.26 [​](https://playwright.dev/python/docs/release-notes\#version-126 "Direct link to Version 1.26")

### Assertions [​](https://playwright.dev/python/docs/release-notes\#assertions "Direct link to Assertions")

- New option `enabled` for [expect(locator).to\_be\_enabled()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-enabled).
- [expect(locator).to\_have\_text()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-text) now pierces open shadow roots.
- New option `editable` for [expect(locator).to\_be\_editable()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-editable).
- New option `visible` for [expect(locator).to\_be\_visible()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-visible).

### Other highlights [​](https://playwright.dev/python/docs/release-notes\#other-highlights-1 "Direct link to Other highlights")

- New option `max_redirects` for [api\_request\_context.get()](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-get) and others to limit redirect count.
- Python 3.11 is now supported.

### Behavior Change [​](https://playwright.dev/python/docs/release-notes\#behavior-change "Direct link to Behavior Change")

A bunch of Playwright APIs already support the `wait_until: "domcontentloaded"` option. For example:

```codeBlockLines_e6Vv
page.goto("https://playwright.dev", wait_until="domcontentloaded")

```

Prior to 1.26, this would wait for all iframes to fire the `DOMContentLoaded` event.

To align with web specification, the `'domcontentloaded'` value only waits for the target frame to fire the `'DOMContentLoaded'` event. Use `wait_until="load"` to wait for all iframes.

### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-25 "Direct link to Browser Versions")

- Chromium 106.0.5249.30
- Mozilla Firefox 104.0
- WebKit 16.0

This version was also tested against the following stable channels:

- Google Chrome 105
- Microsoft Edge 105

## Version 1.25 [​](https://playwright.dev/python/docs/release-notes\#version-125 "Direct link to Version 1.25")

### Announcements [​](https://playwright.dev/python/docs/release-notes\#announcements-1 "Direct link to Announcements")

- 🎁 We now ship Ubuntu 22.04 Jammy Jellyfish docker image: `mcr.microsoft.com/playwright/python:v1.34.0-jammy`.
- 🪦 This is the last release with macOS 10.15 support (deprecated as of 1.21).
- ⚠️ Ubuntu 18 is now deprecated and will not be supported as of Dec 2022.

### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-26 "Direct link to Browser Versions")

- Chromium 105.0.5195.19
- Mozilla Firefox 103.0
- WebKit 16.0

This version was also tested against the following stable channels:

- Google Chrome 104
- Microsoft Edge 104

## Version 1.24 [​](https://playwright.dev/python/docs/release-notes\#version-124 "Direct link to Version 1.24")

What's new in Playwright v1.24 - YouTube

Playwright

15.1K subscribers

[What's new in Playwright v1.24](https://www.youtube.com/watch?v=9F05o1shxcY)

Playwright

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

If playback doesn't begin shortly, try restarting your device.

Full screen is unavailable. [Learn More](https://support.google.com/youtube/answer/6276924)

More videos

## More videos

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

[Watch on](https://www.youtube.com/watch?v=9F05o1shxcY&embeds_referring_euri=https%3A%2F%2Fplaywright.dev%2F)

0:00

0:00 / 7:02•Live

•

[Watch on YouTube](https://www.youtube.com/watch?v=9F05o1shxcY "Watch on YouTube")

### 🐂 Debian 11 Bullseye Support [​](https://playwright.dev/python/docs/release-notes\#-debian-11-bullseye-support "Direct link to 🐂 Debian 11 Bullseye Support")

Playwright now supports Debian 11 Bullseye on x86\_64 for Chromium, Firefox and WebKit. Let us know if you encounter any issues!

Linux support looks like this:

\| \| Ubuntu 20.04 \| Ubuntu 22.04 \| Debian 11
\| :\-\-\- \| :---: \| :---: \| :---: \| :---: \|
\| Chromium \| ✅ \| ✅ \| ✅ \|
\| WebKit \| ✅ \| ✅ \| ✅ \|
\| Firefox \| ✅ \| ✅ \| ✅ \|

### New introduction docs [​](https://playwright.dev/python/docs/release-notes\#new-introduction-docs "Direct link to New introduction docs")

We rewrote our Getting Started docs to be more end-to-end testing focused. Check them out on [playwright.dev](https://playwright.dev/python/docs/intro).

## Version 1.23 [​](https://playwright.dev/python/docs/release-notes\#version-123 "Direct link to Version 1.23")

### Network Replay [​](https://playwright.dev/python/docs/release-notes\#network-replay "Direct link to Network Replay")

Now you can record network traffic into a HAR file and re-use this traffic in your tests.

To record network into HAR file:

```codeBlockLines_e6Vv
npx playwright open --save-har=github.har.zip https://github.com/microsoft

```

Alternatively, you can record HAR programmatically:

- Sync
- Async

```codeBlockLines_e6Vv
context = browser.new_context(record_har_path="github.har.zip")
# ... do stuff ...
context.close()

```

Use the new methods [page.route\_from\_har()](https://playwright.dev/python/docs/api/class-page#page-route-from-har) or [browser\_context.route\_from\_har()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route-from-har) to serve matching responses from the [HAR](http://www.softwareishard.com/blog/har-12-spec/) file:

- Sync
- Async

```codeBlockLines_e6Vv
context.route_from_har("github.har.zip")

```

Read more in [our documentation](https://playwright.dev/python/docs/mock#mocking-with-har-files).

### Advanced Routing [​](https://playwright.dev/python/docs/release-notes\#advanced-routing "Direct link to Advanced Routing")

You can now use [route.fallback()](https://playwright.dev/python/docs/api/class-route#route-fallback) to defer routing to other handlers.

Consider the following example:

- Sync
- Async

```codeBlockLines_e6Vv
# Remove a header from all requests
def remove_header_handler(route: Route) -> None:
    headers = route.request.all_headers()
    if "if-none-match" in headers:
        del headers["if-none-match"]
    route.fallback(headers=headers)

page.route("**/*", remove_header_handler)

# Abort all images
def abort_images_handler(route: Route) -> None:
    if route.request.resource_type == "image":
        route.abort()
    else:
        route.fallback()

page.route("**/*", abort_images_handler)

```

Note that the new methods [page.route\_from\_har()](https://playwright.dev/python/docs/api/class-page#page-route-from-har) and [browser\_context.route\_from\_har()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-route-from-har) also participate in routing and could be deferred to.

### Web-First Assertions Update [​](https://playwright.dev/python/docs/release-notes\#web-first-assertions-update "Direct link to Web-First Assertions Update")

- New method [expect(locator).to\_have\_values()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-values) that asserts all selected values of `<select multiple>` element.
- Methods [expect(locator).to\_contain\_text()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-contain-text) and [expect(locator).to\_have\_text()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-text) now accept `ignore_case` option.

### Miscellaneous [​](https://playwright.dev/python/docs/release-notes\#miscellaneous-8 "Direct link to Miscellaneous")

- If there's a service worker that's in your way, you can now easily disable it with a new context option `service_workers`:



- Sync
- Async

```codeBlockLines_e6Vv
context = browser.new_context(service_workers="block")
page = context.new_page()

```

- Using `.zip` path for `recordHar` context option automatically zips the resulting HAR:



- Sync
- Async

```codeBlockLines_e6Vv
context = browser.new_context(record_har_path="github.har.zip")

```

- If you intend to edit HAR by hand, consider using the `"minimal"` HAR recording mode that only records information that is essential for replaying:



- Sync
- Async

```codeBlockLines_e6Vv
context = browser.new_context(record_har_mode="minimal", record_har_path="har.har")

```

- Playwright now runs on Ubuntu 22 amd64 and Ubuntu 22 arm64.


## Version 1.22 [​](https://playwright.dev/python/docs/release-notes\#version-122 "Direct link to Version 1.22")

### Highlights [​](https://playwright.dev/python/docs/release-notes\#highlights-4 "Direct link to Highlights")

- Role selectors that allow selecting elements by their [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).





```codeBlockLines_e6Vv
# Click a button with accessible name "log in"
page.locator("role=button[name='log in']").click()

```









Read more in [our documentation](https://playwright.dev/python/docs/locators#locate-by-role).

- New [locator.filter()](https://playwright.dev/python/docs/api/class-locator#locator-filter) API to filter an existing locator





```codeBlockLines_e6Vv
buttons = page.locator("role=button")
# ...
submit_button = buttons.filter(has_text="Submit")
submit_button.click()

```

- Codegen now supports generating Pytest Tests

![Graphics](https://user-images.githubusercontent.com/746130/168098384-40784024-6c26-4426-8255-e714862af6fc.png)


## Version 1.21 [​](https://playwright.dev/python/docs/release-notes\#version-121 "Direct link to Version 1.21")

### Highlights [​](https://playwright.dev/python/docs/release-notes\#highlights-5 "Direct link to Highlights")

- New role selectors that allow selecting elements by their [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).



- Sync
- Async

```codeBlockLines_e6Vv
# Click a button with accessible name "log in"
page.locator("role=button[name='log in']").click()

```

Read more in [our documentation](https://playwright.dev/python/docs/locators#locate-by-role).

- New `scale` option in [page.screenshot()](https://playwright.dev/python/docs/api/class-page#page-screenshot) for smaller sized screenshots.

- New `caret` option in [page.screenshot()](https://playwright.dev/python/docs/api/class-page#page-screenshot) to control text caret. Defaults to `"hide"`.


### Behavior Changes [​](https://playwright.dev/python/docs/release-notes\#behavior-changes-1 "Direct link to Behavior Changes")

- The `mcr.microsoft.com/playwright` docker image no longer contains Python. Please use `mcr.microsoft.com/playwright/python` as a Playwright-ready docker image with pre-installed Python.
- Playwright now supports large file uploads (100s of MBs) via [locator.set\_input\_files()](https://playwright.dev/python/docs/api/class-locator#locator-set-input-files) API.

### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-27 "Direct link to Browser Versions")

- Chromium 101.0.4951.26
- Mozilla Firefox 98.0.2
- WebKit 15.4

This version was also tested against the following stable channels:

- Google Chrome 100
- Microsoft Edge 100

## Version 1.20 [​](https://playwright.dev/python/docs/release-notes\#version-120 "Direct link to Version 1.20")

### Highlights [​](https://playwright.dev/python/docs/release-notes\#highlights-6 "Direct link to Highlights")

- New options for methods [page.screenshot()](https://playwright.dev/python/docs/api/class-page#page-screenshot), [locator.screenshot()](https://playwright.dev/python/docs/api/class-locator#locator-screenshot) and [element\_handle.screenshot()](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-screenshot):
  - Option `animations: "disabled"` rewinds all CSS animations and transitions to a consistent state
  - Option `mask: Locator[]` masks given elements, overlaying them with pink `#FF00FF` boxes.
- [Trace Viewer](https://playwright.dev/python/docs/trace-viewer) now shows [API testing requests](https://playwright.dev/python/docs/api-testing).
- [locator.highlight()](https://playwright.dev/python/docs/api/class-locator#locator-highlight) visually reveals element(s) for easier debugging.

### Announcements [​](https://playwright.dev/python/docs/release-notes\#announcements-2 "Direct link to Announcements")

- We now ship a designated Python docker image `mcr.microsoft.com/playwright/python`. Please switch over to it if you use Python. This is the last release that includes Python inside our javascript `mcr.microsoft.com/playwright` docker image.
- v1.20 is the last release to receive WebKit update for macOS 10.15 Catalina. Please update macOS to keep using latest & greatest WebKit!

### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-28 "Direct link to Browser Versions")

- Chromium 101.0.4921.0
- Mozilla Firefox 97.0.1
- WebKit 15.4

This version was also tested against the following stable channels:

- Google Chrome 99
- Microsoft Edge 99

## Version 1.19 [​](https://playwright.dev/python/docs/release-notes\#version-119 "Direct link to Version 1.19")

### Highlights [​](https://playwright.dev/python/docs/release-notes\#highlights-7 "Direct link to Highlights")

- Locator now supports a `has` option that makes sure it contains another locator inside:



- Sync
- Async

```codeBlockLines_e6Vv
page.locator("article", has=page.locator(".highlight")).click()

```

Read more in [locator documentation](https://playwright.dev/python/docs/api/class-locator#locator-locator)

- New [locator.page](https://playwright.dev/python/docs/api/class-locator#locator-page)

- [page.screenshot()](https://playwright.dev/python/docs/api/class-page#page-screenshot) and [locator.screenshot()](https://playwright.dev/python/docs/api/class-locator#locator-screenshot) now automatically hide blinking caret

- Playwright Codegen now generates locators and frame locators


### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-29 "Direct link to Browser Versions")

- Chromium 100.0.4863.0
- Mozilla Firefox 96.0.1
- WebKit 15.4

This version was also tested against the following stable channels:

- Google Chrome 98
- Microsoft Edge 98

## Version 1.18 [​](https://playwright.dev/python/docs/release-notes\#version-118 "Direct link to Version 1.18")

### API Testing [​](https://playwright.dev/python/docs/release-notes\#api-testing "Direct link to API Testing")

Playwright for Python 1.18 introduces new [API Testing](https://playwright.dev/python/docs/api/class-apirequestcontext) that lets you send requests to the server directly from Python! Now you can:

- test your server API
- prepare server side state before visiting the web application in a test
- validate server side post-conditions after running some actions in the browser

To do a request on behalf of Playwright's Page, use **new [page.request](https://playwright.dev/python/docs/api/class-page#page-request) API**:

- Sync
- Async

```codeBlockLines_e6Vv
# Do a GET request on behalf of page
res = page.request.get("http://example.com/foo.json")

```

Read more in [our documentation](https://playwright.dev/python/docs/api/class-apirequestcontext).

### Web-First Assertions [​](https://playwright.dev/python/docs/release-notes\#web-first-assertions "Direct link to Web-First Assertions")

Playwright for Python 1.18 introduces [Web-First Assertions](https://playwright.dev/python/docs/test-assertions).

Consider the following example:

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import Page, expect

def test_status_becomes_submitted(page: Page) -> None:
    # ..
    page.locator("#submit-button").click()
    expect(page.locator(".status")).to_have_text("Submitted")

```

Playwright will be re-testing the node with the selector `.status` until fetched Node has the `"Submitted"` text. It will be re-fetching the node and checking it over and over, until the condition is met or until the timeout is reached. You can pass this timeout as an option.

Read more in [our documentation](https://playwright.dev/python/docs/test-assertions).

### Locator Improvements [​](https://playwright.dev/python/docs/release-notes\#locator-improvements "Direct link to Locator Improvements")

- [locator.drag\_to()](https://playwright.dev/python/docs/api/class-locator#locator-drag-to)

- Each locator can now be optionally filtered by the text it contains:



- Sync
- Async

```codeBlockLines_e6Vv
page.locator("li", has_text="my item").locator("button").click()

```

Read more in [locator documentation](https://playwright.dev/python/docs/api/class-locator#locator-locator)

### New APIs & changes [​](https://playwright.dev/python/docs/release-notes\#new-apis--changes "Direct link to New APIs & changes")

- [`accept_downloads`](https://playwright.dev/python/docs/api/class-browser#browser-new-context-option-accept-downloads) option now defaults to `True`.
- [`sources`](https://playwright.dev/python/docs/api/class-tracing#tracing-start-option-sources) option to embed sources into traces.

### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-30 "Direct link to Browser Versions")

- Chromium 99.0.4812.0
- Mozilla Firefox 95.0
- WebKit 15.4

This version was also tested against the following stable channels:

- Google Chrome 97
- Microsoft Edge 97

## Version 1.17 [​](https://playwright.dev/python/docs/release-notes\#version-117 "Direct link to Version 1.17")

### Frame Locators [​](https://playwright.dev/python/docs/release-notes\#frame-locators "Direct link to Frame Locators")

Playwright 1.17 introduces [frame locators](https://playwright.dev/python/docs/api/class-framelocator) \- a locator to the iframe on the page. Frame locators capture the logic sufficient to retrieve the `iframe` and then locate elements in that iframe. Frame locators are strict by default, will wait for `iframe` to appear and can be used in Web-First assertions.

![Graphics](https://user-images.githubusercontent.com/746130/142082759-2170db38-370d-43ec-8d41-5f9941f57d83.png)

Frame locators can be created with either [page.frame\_locator()](https://playwright.dev/python/docs/api/class-page#page-frame-locator) or [locator.frame\_locator()](https://playwright.dev/python/docs/api/class-locator#locator-frame-locator) method.

```codeBlockLines_e6Vv
locator = page.frame_locator("my-frame").locator("text=Submit")
locator.click()

```

Read more at [our documentation](https://playwright.dev/python/docs/api/class-framelocator).

### Trace Viewer Update [​](https://playwright.dev/python/docs/release-notes\#trace-viewer-update "Direct link to Trace Viewer Update")

Playwright Trace Viewer is now **available online** at [https://trace.playwright.dev](https://trace.playwright.dev/)! Just drag-and-drop your `trace.zip` file to inspect its contents.

> **NOTE**: trace files are not uploaded anywhere; [trace.playwright.dev](https://trace.playwright.dev/) is a [progressive web application](https://web.dev/progressive-web-apps/) that processes traces locally.

- Playwright Test traces now include sources by default (these could be turned off with tracing option)
- Trace Viewer now shows test name
- New trace metadata tab with browser details
- Snapshots now have URL bar

![image](https://user-images.githubusercontent.com/746130/141877831-29e37cd1-e574-4bd9-aab5-b13a463bb4ae.png)

### HTML Report Update [​](https://playwright.dev/python/docs/release-notes\#html-report-update "Direct link to HTML Report Update")

- HTML report now supports dynamic filtering
- Report is now a **single static HTML file** that could be sent by e-mail or as a slack attachment.

![image](https://user-images.githubusercontent.com/746130/141877402-e486643d-72c7-4db3-8844-ed2072c5d676.png)

### Ubuntu ARM64 support + more [​](https://playwright.dev/python/docs/release-notes\#ubuntu-arm64-support--more "Direct link to Ubuntu ARM64 support + more")

- Playwright now supports **Ubuntu 20.04 ARM64**. You can now run Playwright tests inside Docker on Apple M1 and on Raspberry Pi.

- You can now use Playwright to install stable version of Edge on Linux:





```codeBlockLines_e6Vv
npx playwright install msedge

```


### New APIs [​](https://playwright.dev/python/docs/release-notes\#new-apis-11 "Direct link to New APIs")

- Tracing now supports a [`'title'`](https://playwright.dev/python/docs/api/class-tracing#tracing-start-option-title) option
- Page navigations support a new [`'commit'`](https://playwright.dev/python/docs/api/class-page#page-goto) waiting option

## Version 1.16 [​](https://playwright.dev/python/docs/release-notes\#version-116 "Direct link to Version 1.16")

### 🎭 Playwright Library [​](https://playwright.dev/python/docs/release-notes\#-playwright-library "Direct link to 🎭 Playwright Library")

#### `locator.wait_for` [​](https://playwright.dev/python/docs/release-notes\#locatorwait_for "Direct link to locatorwait_for")

Wait for a locator to resolve to a single element with a given state. Defaults to the `state: 'visible'`.

Comes especially handy when working with lists:

```codeBlockLines_e6Vv
order_sent = page.locator("#order-sent")
order_sent.wait_for()

```

Read more about [locator.wait\_for()](https://playwright.dev/python/docs/api/class-locator#locator-wait-for).

### Docker support for Arm64 [​](https://playwright.dev/python/docs/release-notes\#docker-support-for-arm64 "Direct link to Docker support for Arm64")

Playwright Docker image is now published for Arm64 so it can be used on Apple Silicon.

Read more about [Docker integration](https://playwright.dev/python/docs/docker).

### 🎭 Playwright Trace Viewer [​](https://playwright.dev/python/docs/release-notes\#-playwright-trace-viewer "Direct link to 🎭 Playwright Trace Viewer")

- run trace viewer with `npx playwright show-trace` and drop trace files to the trace viewer PWA
- better visual attribution of action targets

Read more about [Trace Viewer](https://playwright.dev/python/docs/trace-viewer).

### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-31 "Direct link to Browser Versions")

- Chromium 97.0.4666.0
- Mozilla Firefox 93.0
- WebKit 15.4

This version of Playwright was also tested against the following stable channels:

- Google Chrome 94
- Microsoft Edge 94

## Version 1.15 [​](https://playwright.dev/python/docs/release-notes\#version-115 "Direct link to Version 1.15")

### 🖱️ Mouse Wheel [​](https://playwright.dev/python/docs/release-notes\#%EF%B8%8F-mouse-wheel "Direct link to 🖱️ Mouse Wheel")

By using [mouse.wheel()](https://playwright.dev/python/docs/api/class-mouse#mouse-wheel) you are now able to scroll vertically or horizontally.

### 📜 New Headers API [​](https://playwright.dev/python/docs/release-notes\#-new-headers-api "Direct link to 📜 New Headers API")

Previously it was not possible to get multiple header values of a response. This is now possible and additional helper functions are available:

- [request.all\_headers()](https://playwright.dev/python/docs/api/class-request#request-all-headers)
- [request.headers\_array()](https://playwright.dev/python/docs/api/class-request#request-headers-array)
- [request.header\_value()](https://playwright.dev/python/docs/api/class-request#request-header-value)
- [response.all\_headers()](https://playwright.dev/python/docs/api/class-response#response-all-headers)
- [response.headers\_array()](https://playwright.dev/python/docs/api/class-response#response-headers-array)
- [response.header\_value()](https://playwright.dev/python/docs/api/class-response#response-header-value)
- [response.header\_values()](https://playwright.dev/python/docs/api/class-response#response-header-values)

### 🌈 Forced-Colors emulation [​](https://playwright.dev/python/docs/release-notes\#-forced-colors-emulation "Direct link to 🌈 Forced-Colors emulation")

Its now possible to emulate the `forced-colors` CSS media feature by passing it in the [browser.new\_context()](https://playwright.dev/python/docs/api/class-browser#browser-new-context) or calling [page.emulate\_media()](https://playwright.dev/python/docs/api/class-page#page-emulate-media).

### New APIs [​](https://playwright.dev/python/docs/release-notes\#new-apis-12 "Direct link to New APIs")

- [page.route()](https://playwright.dev/python/docs/api/class-page#page-route) accepts new `times` option to specify how many times this route should be matched.
- [page.set\_checked()](https://playwright.dev/python/docs/api/class-page#page-set-checked) and [locator.set\_checked()](https://playwright.dev/python/docs/api/class-locator#locator-set-checked) were introduced to set the checked state of a checkbox.
- [request.sizes()](https://playwright.dev/python/docs/api/class-request#request-sizes) Returns resource size information for given http request.
- [tracing.start\_chunk()](https://playwright.dev/python/docs/api/class-tracing#tracing-start-chunk) \- Start a new trace chunk.
- [tracing.stop\_chunk()](https://playwright.dev/python/docs/api/class-tracing#tracing-stop-chunk) \- Stops a new trace chunk.

### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-32 "Direct link to Browser Versions")

- Chromium 96.0.4641.0
- Mozilla Firefox 92.0
- WebKit 15.0

## Version 1.14 [​](https://playwright.dev/python/docs/release-notes\#version-114 "Direct link to Version 1.14")

#### ⚡️ New "strict" mode [​](https://playwright.dev/python/docs/release-notes\#%EF%B8%8F-new-strict-mode "Direct link to ⚡️ New \"strict\" mode")

Selector ambiguity is a common problem in automation testing. **"strict" mode** ensures that your selector points to a single element and throws otherwise.

Pass `strict=true` into your action calls to opt in.

```codeBlockLines_e6Vv
# This will throw if you have more than one button!
page.click("button", strict=True)

```

#### 📍 New [**Locators API**](https://playwright.dev/python/docs/api/class-locator) [​](https://playwright.dev/python/docs/release-notes\#-new-locators-api "Direct link to -new-locators-api")

Locator represents a view to the element(s) on the page. It captures the logic sufficient to retrieve the element at any given moment.

The difference between the [Locator](https://playwright.dev/python/docs/api/class-locator) and [ElementHandle](https://playwright.dev/python/docs/api/class-elementhandle) is that the latter points to a particular element, while [Locator](https://playwright.dev/python/docs/api/class-locator) captures the logic of how to retrieve that element.

Also, locators are **"strict" by default**!

```codeBlockLines_e6Vv
locator = page.locator("button")
locator.click()

```

Learn more in the [documentation](https://playwright.dev/python/docs/api/class-locator).

#### 🧩 Experimental [**React**](https://playwright.dev/python/docs/other-locators\#react-locator) and [**Vue**](https://playwright.dev/python/docs/other-locators\#vue-locator) selector engines [​](https://playwright.dev/python/docs/release-notes\#-experimental-react-and-vue-selector-engines "Direct link to -experimental-react-and-vue-selector-engines")

React and Vue selectors allow selecting elements by its component name and/or property values. The syntax is very similar to [attribute selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors) and supports all attribute selector operators.

```codeBlockLines_e6Vv
page.locator("_react=SubmitButton[enabled=true]").click()
page.locator("_vue=submit-button[enabled=true]").click()

```

Learn more in the [react selectors documentation](https://playwright.dev/python/docs/other-locators#react-locator) and the [vue selectors documentation](https://playwright.dev/python/docs/other-locators#vue-locator).

#### ✨ New [**`nth`**](https://playwright.dev/python/docs/other-locators\#n-th-element-locator) and [**`visible`**](https://playwright.dev/python/docs/other-locators\#css-matching-only-visible-elements) selector engines [​](https://playwright.dev/python/docs/release-notes\#-new-nth-and-visible-selector-engines "Direct link to -new-nth-and-visible-selector-engines")

- [`nth`](https://playwright.dev/python/docs/other-locators#n-th-element-locator) selector engine is equivalent to the `:nth-match` pseudo class, but could be combined with other selector engines.
- [`visible`](https://playwright.dev/python/docs/other-locators#css-matching-only-visible-elements) selector engine is equivalent to the `:visible` pseudo class, but could be combined with other selector engines.

```codeBlockLines_e6Vv
# select the first button among all buttons
button.click("button >> nth=0")
# or if you are using locators, you can use first, nth() and last
page.locator("button").first.click()

# click a visible button
button.click("button >> visible=true")

```

### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-33 "Direct link to Browser Versions")

- Chromium 94.0.4595.0
- Mozilla Firefox 91.0
- WebKit 15.0

## Version 1.13 [​](https://playwright.dev/python/docs/release-notes\#version-113 "Direct link to Version 1.13")

#### Playwright [​](https://playwright.dev/python/docs/release-notes\#playwright "Direct link to Playwright")

- **🖖 Programmatic drag-and-drop support** via the [page.drag\_and\_drop()](https://playwright.dev/python/docs/api/class-page#page-drag-and-drop) API.
- **🔎 Enhanced HAR** with body sizes for requests and responses. Use via `recordHar` option in [browser.new\_context()](https://playwright.dev/python/docs/api/class-browser#browser-new-context).

#### Tools [​](https://playwright.dev/python/docs/release-notes\#tools "Direct link to Tools")

- Playwright Trace Viewer now shows parameters, returned values and `console.log()` calls.

#### New and Overhauled Guides [​](https://playwright.dev/python/docs/release-notes\#new-and-overhauled-guides "Direct link to New and Overhauled Guides")

- [Intro](https://playwright.dev/python/docs/intro)
- [Authentication](https://playwright.dev/python/docs/auth)
- [Chrome Extensions](https://playwright.dev/python/docs/chrome-extensions)

#### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-34 "Direct link to Browser Versions")

- Chromium 93.0.4576.0
- Mozilla Firefox 90.0
- WebKit 14.2

#### New Playwright APIs [​](https://playwright.dev/python/docs/release-notes\#new-playwright-apis "Direct link to New Playwright APIs")

- new `baseURL` option in [browser.new\_context()](https://playwright.dev/python/docs/api/class-browser#browser-new-context) and [browser.new\_page()](https://playwright.dev/python/docs/api/class-browser#browser-new-page)
- [response.security\_details()](https://playwright.dev/python/docs/api/class-response#response-security-details) and [response.server\_addr()](https://playwright.dev/python/docs/api/class-response#response-server-addr)
- [page.drag\_and\_drop()](https://playwright.dev/python/docs/api/class-page#page-drag-and-drop) and [frame.drag\_and\_drop()](https://playwright.dev/python/docs/api/class-frame#frame-drag-and-drop)
- [download.cancel()](https://playwright.dev/python/docs/api/class-download#download-cancel)
- [page.input\_value()](https://playwright.dev/python/docs/api/class-page#page-input-value), [frame.input\_value()](https://playwright.dev/python/docs/api/class-frame#frame-input-value) and [element\_handle.input\_value()](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-input-value)
- new `force` option in [page.fill()](https://playwright.dev/python/docs/api/class-page#page-fill), [frame.fill()](https://playwright.dev/python/docs/api/class-frame#frame-fill), and [element\_handle.fill()](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-fill)
- new `force` option in [page.select\_option()](https://playwright.dev/python/docs/api/class-page#page-select-option), [frame.select\_option()](https://playwright.dev/python/docs/api/class-frame#frame-select-option), and [element\_handle.select\_option()](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-select-option)

## Version 1.12 [​](https://playwright.dev/python/docs/release-notes\#version-112 "Direct link to Version 1.12")

#### 🧟‍♂️ Introducing Playwright Trace Viewer [​](https://playwright.dev/python/docs/release-notes\#%EF%B8%8F-introducing-playwright-trace-viewer "Direct link to 🧟‍♂️ Introducing Playwright Trace Viewer")

[Playwright Trace Viewer](https://playwright.dev/python/docs/trace-viewer) is a new GUI tool that helps exploring recorded Playwright traces after the script ran. Playwright traces let you examine:

- page DOM before and after each Playwright action
- page rendering before and after each Playwright action
- browser network during script execution

Traces are recorded using the new [browser\_context.tracing](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-tracing) API:

```codeBlockLines_e6Vv
browser = chromium.launch()
context = browser.new_context()

# Start tracing before creating / navigating a page.
context.tracing.start(screenshots=True, snapshots=True)

page.goto("https://playwright.dev")

# Stop tracing and export it into a zip archive.
context.tracing.stop(path = "trace.zip")

```

Traces are examined later with the Playwright CLI:

```codeBlockLines_e6Vv
playwright show-trace trace.zip

```

That will open the following GUI:

![image](https://user-images.githubusercontent.com/746130/121109654-d66c4480-c7c0-11eb-8d4d-eb70d2b03811.png)

👉 Read more in [trace viewer documentation](https://playwright.dev/python/docs/trace-viewer).

#### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-35 "Direct link to Browser Versions")

- Chromium 93.0.4530.0
- Mozilla Firefox 89.0
- WebKit 14.2

This version of Playwright was also tested against the following stable channels:

- Google Chrome 91
- Microsoft Edge 91

#### New APIs [​](https://playwright.dev/python/docs/release-notes\#new-apis-13 "Direct link to New APIs")

- `reducedMotion` option in [page.emulate\_media()](https://playwright.dev/python/docs/api/class-page#page-emulate-media), [browser\_type.launch\_persistent\_context()](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context), [browser.new\_context()](https://playwright.dev/python/docs/api/class-browser#browser-new-context) and [browser.new\_page()](https://playwright.dev/python/docs/api/class-browser#browser-new-page)
- [browser\_context.on("request")](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-event-request)
- [browser\_context.on("requestfailed")](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-event-request-failed)
- [browser\_context.on("requestfinished")](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-event-request-finished)
- [browser\_context.on("response")](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-event-response)
- `tracesDir` option in [browser\_type.launch()](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch) and [browser\_type.launch\_persistent\_context()](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch-persistent-context)
- new [browser\_context.tracing](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-tracing) API namespace
- new [download.page](https://playwright.dev/python/docs/api/class-download#download-page) method

## Version 1.11 [​](https://playwright.dev/python/docs/release-notes\#version-111 "Direct link to Version 1.11")

🎥 New video: [Playwright: A New Test Automation Framework for the Modern Web](https://youtu.be/_Jla6DyuEu4) ( [slides](https://docs.google.com/presentation/d/1xFhZIJrdHkVe2CuMKOrni92HoG2SWslo0DhJJQMR1DI/edit?usp=sharing))

- We talked about Playwright
- Showed engineering work behind the scenes
- Did live demos with new features ✨
- **Special thanks** to [applitools](http://applitools.com/) for hosting the event and inviting us!

#### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-36 "Direct link to Browser Versions")

- Chromium 92.0.4498.0
- Mozilla Firefox 89.0b6
- WebKit 14.2

#### New APIs [​](https://playwright.dev/python/docs/release-notes\#new-apis-14 "Direct link to New APIs")

- support for **async predicates** across the API in methods such as [page.expect\_request()](https://playwright.dev/python/docs/api/class-page#page-wait-for-request) and others
- new **emulation devices**: Galaxy S8, Galaxy S9+, Galaxy Tab S4, Pixel 3, Pixel 4
- new methods:
  - [page.wait\_for\_url()](https://playwright.dev/python/docs/api/class-page#page-wait-for-url) to await navigations to URL
  - [video.delete()](https://playwright.dev/python/docs/api/class-video#video-delete) and [video.save\_as()](https://playwright.dev/python/docs/api/class-video#video-save-as) to manage screen recording
- new options:
  - `screen` option in the [browser.new\_context()](https://playwright.dev/python/docs/api/class-browser#browser-new-context) method to emulate `window.screen` dimensions
  - `position` option in [page.check()](https://playwright.dev/python/docs/api/class-page#page-check) and [page.uncheck()](https://playwright.dev/python/docs/api/class-page#page-uncheck) methods
  - `trial` option to dry-run actions in [page.check()](https://playwright.dev/python/docs/api/class-page#page-check), [page.uncheck()](https://playwright.dev/python/docs/api/class-page#page-uncheck), [page.click()](https://playwright.dev/python/docs/api/class-page#page-click), [page.dblclick()](https://playwright.dev/python/docs/api/class-page#page-dblclick), [page.hover()](https://playwright.dev/python/docs/api/class-page#page-hover) and [page.tap()](https://playwright.dev/python/docs/api/class-page#page-tap)

## Version 1.10 [​](https://playwright.dev/python/docs/release-notes\#version-110 "Direct link to Version 1.10")

- [Playwright for Java v1.10](https://github.com/microsoft/playwright-java) is **now stable**!
- Run Playwright against **Google Chrome** and **Microsoft Edge** stable channels with the [new channels API](https://playwright.dev/python/docs/browsers).
- Chromium screenshots are **fast** on Mac & Windows.

#### Bundled Browser Versions [​](https://playwright.dev/python/docs/release-notes\#bundled-browser-versions "Direct link to Bundled Browser Versions")

- Chromium 90.0.4430.0
- Mozilla Firefox 87.0b10
- WebKit 14.2

This version of Playwright was also tested against the following stable channels:

- Google Chrome 89
- Microsoft Edge 89

#### New APIs [​](https://playwright.dev/python/docs/release-notes\#new-apis-15 "Direct link to New APIs")

- [browser\_type.launch()](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch) now accepts the new `'channel'` option. Read more in [our documentation](https://playwright.dev/python/docs/browsers).

## Version 1.9 [​](https://playwright.dev/python/docs/release-notes\#version-19 "Direct link to Version 1.9")

- [Playwright Inspector](https://playwright.dev/python/docs/debug) is a **new GUI tool** to author and debug your tests.
  - **Line-by-line debugging** of your Playwright scripts, with play, pause and step-through.
  - Author new scripts by **recording user actions**.
  - **Generate element selectors** for your script by hovering over elements.
  - Set the `PWDEBUG=1` environment variable to launch the Inspector
- **Pause script execution** with [page.pause()](https://playwright.dev/python/docs/api/class-page#page-pause) in headed mode. Pausing the page launches [Playwright Inspector](https://playwright.dev/python/docs/debug) for debugging.
- **New has-text pseudo-class** for CSS selectors. `:has-text("example")` matches any element containing `"example"` somewhere inside, possibly in a child or a descendant element. See [more examples](https://playwright.dev/python/docs/other-locators#css-matching-by-text).
- **Page dialogs are now auto-dismissed** during execution, unless a listener for `dialog` event is configured. [Learn more](https://playwright.dev/python/docs/dialogs) about this.
- [Playwright for Python](https://github.com/microsoft/playwright-python) is **now stable** with an idiomatic snake case API and pre-built [Docker image](https://playwright.dev/python/docs/docker) to run tests in CI/CD.

#### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-37 "Direct link to Browser Versions")

- Chromium 90.0.4421.0
- Mozilla Firefox 86.0b10
- WebKit 14.1

#### New APIs [​](https://playwright.dev/python/docs/release-notes\#new-apis-16 "Direct link to New APIs")

- [page.pause()](https://playwright.dev/python/docs/api/class-page#page-pause).

## Version 1.8 [​](https://playwright.dev/python/docs/release-notes\#version-18 "Direct link to Version 1.8")

- [Selecting elements based on layout](https://playwright.dev/python/docs/other-locators#css-matching-elements-based-on-layout) with `:left-of()`, `:right-of()`, `:above()` and `:below()`.

- Playwright now includes command line interface, former playwright-cli.





```codeBlockLines_e6Vv
playwright --help

```

- [page.select\_option()](https://playwright.dev/python/docs/api/class-page#page-select-option) now waits for the options to be present.

- New methods to [assert element state](https://playwright.dev/python/docs/actionability#assertions) like [page.is\_editable()](https://playwright.dev/python/docs/api/class-page#page-is-editable).


#### New APIs [​](https://playwright.dev/python/docs/release-notes\#new-apis-17 "Direct link to New APIs")

- [element\_handle.is\_checked()](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-is-checked).
- [element\_handle.is\_disabled()](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-is-disabled).
- [element\_handle.is\_editable()](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-is-editable).
- [element\_handle.is\_enabled()](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-is-enabled).
- [element\_handle.is\_hidden()](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-is-hidden).
- [element\_handle.is\_visible()](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-is-visible).
- [page.is\_checked()](https://playwright.dev/python/docs/api/class-page#page-is-checked).
- [page.is\_disabled()](https://playwright.dev/python/docs/api/class-page#page-is-disabled).
- [page.is\_editable()](https://playwright.dev/python/docs/api/class-page#page-is-editable).
- [page.is\_enabled()](https://playwright.dev/python/docs/api/class-page#page-is-enabled).
- [page.is\_hidden()](https://playwright.dev/python/docs/api/class-page#page-is-hidden).
- [page.is\_visible()](https://playwright.dev/python/docs/api/class-page#page-is-visible).
- New option `'editable'` in [element\_handle.wait\_for\_element\_state()](https://playwright.dev/python/docs/api/class-elementhandle#element-handle-wait-for-element-state).

#### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-38 "Direct link to Browser Versions")

- Chromium 90.0.4392.0
- Mozilla Firefox 85.0b5
- WebKit 14.1

## Version 1.7 [​](https://playwright.dev/python/docs/release-notes\#version-17 "Direct link to Version 1.7")

- **New Java SDK**: [Playwright for Java](https://github.com/microsoft/playwright-java) is now on par with [JavaScript](https://github.com/microsoft/playwright), [Python](https://github.com/microsoft/playwright-python) and [.NET bindings](https://github.com/microsoft/playwright-dotnet).
- **Browser storage API**: New convenience APIs to save and load browser storage state (cookies, local storage) to simplify automation scenarios with authentication.
- **New CSS selectors**: We heard your feedback for more flexible selectors and have revamped the selectors implementation. Playwright 1.7 introduces [new CSS extensions](https://playwright.dev/python/docs/other-locators#css-locator) and there's more coming soon.
- **New website**: The docs website at [playwright.dev](https://playwright.dev/) has been updated and is now built with [Docusaurus](https://v2.docusaurus.io/).
- **Support for Apple Silicon**: Playwright browser binaries for WebKit and Chromium are now built for Apple Silicon.

#### New APIs [​](https://playwright.dev/python/docs/release-notes\#new-apis-18 "Direct link to New APIs")

- [browser\_context.storage\_state()](https://playwright.dev/python/docs/api/class-browsercontext#browser-context-storage-state) to get current state for later reuse.
- `storageState` option in [browser.new\_context()](https://playwright.dev/python/docs/api/class-browser#browser-new-context) and [browser.new\_page()](https://playwright.dev/python/docs/api/class-browser#browser-new-page) to setup browser context state.

#### Browser Versions [​](https://playwright.dev/python/docs/release-notes\#browser-versions-39 "Direct link to Browser Versions")

- Chromium 89.0.4344.0
- Mozilla Firefox 84.0b9
- WebKit 14.1

- [Version 1.51](https://playwright.dev/python/docs/release-notes#version-151)
- [Version 1.50](https://playwright.dev/python/docs/release-notes#version-150)
- [Version 1.49](https://playwright.dev/python/docs/release-notes#version-149)
- [Version 1.48](https://playwright.dev/python/docs/release-notes#version-148)
- [Version 1.47](https://playwright.dev/python/docs/release-notes#version-147)
- [Version 1.46](https://playwright.dev/python/docs/release-notes#version-146)
- [Version 1.45](https://playwright.dev/python/docs/release-notes#version-145)
- [Version 1.44](https://playwright.dev/python/docs/release-notes#version-144)
- [Version 1.43](https://playwright.dev/python/docs/release-notes#version-143)
- [Version 1.42](https://playwright.dev/python/docs/release-notes#version-142)
- [Version 1.41](https://playwright.dev/python/docs/release-notes#version-141)
- [Version 1.40](https://playwright.dev/python/docs/release-notes#version-140)
- [Version 1.39](https://playwright.dev/python/docs/release-notes#version-139)
- [Version 1.38](https://playwright.dev/python/docs/release-notes#version-138)
- [Version 1.37](https://playwright.dev/python/docs/release-notes#version-137)
- [Version 1.36](https://playwright.dev/python/docs/release-notes#version-136)
- [Version 1.35](https://playwright.dev/python/docs/release-notes#version-135)
- [Version 1.34](https://playwright.dev/python/docs/release-notes#version-134)
- [Version 1.33](https://playwright.dev/python/docs/release-notes#version-133)
- [Version 1.32](https://playwright.dev/python/docs/release-notes#version-132)
- [Version 1.31](https://playwright.dev/python/docs/release-notes#version-131)
- [Version 1.30](https://playwright.dev/python/docs/release-notes#version-130)
- [Version 1.29](https://playwright.dev/python/docs/release-notes#version-129)
- [Version 1.28](https://playwright.dev/python/docs/release-notes#version-128)
- [Version 1.27](https://playwright.dev/python/docs/release-notes#version-127)
- [Version 1.26](https://playwright.dev/python/docs/release-notes#version-126)
- [Version 1.25](https://playwright.dev/python/docs/release-notes#version-125)
- [Version 1.24](https://playwright.dev/python/docs/release-notes#version-124)
- [Version 1.23](https://playwright.dev/python/docs/release-notes#version-123)
- [Version 1.22](https://playwright.dev/python/docs/release-notes#version-122)
- [Version 1.21](https://playwright.dev/python/docs/release-notes#version-121)
- [Version 1.20](https://playwright.dev/python/docs/release-notes#version-120)
- [Version 1.19](https://playwright.dev/python/docs/release-notes#version-119)
- [Version 1.18](https://playwright.dev/python/docs/release-notes#version-118)
- [Version 1.17](https://playwright.dev/python/docs/release-notes#version-117)
- [Version 1.16](https://playwright.dev/python/docs/release-notes#version-116)
- [Version 1.15](https://playwright.dev/python/docs/release-notes#version-115)
- [Version 1.14](https://playwright.dev/python/docs/release-notes#version-114)
- [Version 1.13](https://playwright.dev/python/docs/release-notes#version-113)
- [Version 1.12](https://playwright.dev/python/docs/release-notes#version-112)
- [Version 1.11](https://playwright.dev/python/docs/release-notes#version-111)
- [Version 1.10](https://playwright.dev/python/docs/release-notes#version-110)
- [Version 1.9](https://playwright.dev/python/docs/release-notes#version-19)
- [Version 1.8](https://playwright.dev/python/docs/release-notes#version-18)
- [Version 1.7](https://playwright.dev/python/docs/release-notes#version-17)

## Browser Contexts Overview
[Skip to main content](https://playwright.dev/python/docs/browser-contexts#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/browser-contexts\#introduction "Direct link to Introduction")

Tests written with Playwright execute in isolated clean-slate environments called browser contexts. This isolation model improves reproducibility and prevents cascading test failures.

## What is Test Isolation? [​](https://playwright.dev/python/docs/browser-contexts\#what-is-test-isolation "Direct link to What is Test Isolation?")

Test Isolation is when each test is completely isolated from another test. Every test runs independently from any other test. This means that each test has its own local storage, session storage, cookies etc. Playwright achieves this using [BrowserContext](https://playwright.dev/python/docs/api/class-browsercontext "BrowserContext") s which are equivalent to incognito-like profiles. They are fast and cheap to create and are completely isolated, even when running in a single browser. Playwright creates a context for each test, and provides a default [Page](https://playwright.dev/python/docs/api/class-page "Page") in that context.

## Why is Test Isolation Important? [​](https://playwright.dev/python/docs/browser-contexts\#why-is-test-isolation-important "Direct link to Why is Test Isolation Important?")

- No failure carry-over. If one test fails it doesn't affect the other test.
- Easy to debug errors or flakiness, because you can run just a single test as many times as you'd like.
- Don't have to think about the order when running in parallel, sharding, etc.

## Two Ways of Test Isolation [​](https://playwright.dev/python/docs/browser-contexts\#two-ways-of-test-isolation "Direct link to Two Ways of Test Isolation")

There are two different strategies when it comes to Test Isolation: start from scratch or cleanup in between. The problem with cleaning up in between tests is that it can be easy to forget to clean up and some things are impossible to clean up such as "visited links". State from one test can leak into the next test which could cause your test to fail and make debugging harder as the problem comes from another test. Starting from scratch means everything is new, so if the test fails you only have to look within that test to debug.

## How Playwright Achieves Test Isolation [​](https://playwright.dev/python/docs/browser-contexts\#how-playwright-achieves-test-isolation "Direct link to How Playwright Achieves Test Isolation")

Playwright uses browser contexts to achieve Test Isolation. Each test has its own Browser Context. Running the test creates a new browser context each time. When using Playwright as a Test Runner, browser contexts are created by default. Otherwise, you can create browser contexts manually.

- Sync
- Async

```codeBlockLines_e6Vv
browser = playwright.chromium.launch()
context = browser.new_context()
page = context.new_page()

```

```codeBlockLines_e6Vv
browser = await playwright.chromium.launch()
context = await browser.new_context()
page = await context.new_page()

```

Browser contexts can also be used to emulate multi-page scenarios involving mobile devices, permissions, locale and color scheme. Check out our [Emulation](https://playwright.dev/python/docs/emulation) guide for more details.

## Multiple Contexts in a Single Test [​](https://playwright.dev/python/docs/browser-contexts\#multiple-contexts-in-a-single-test "Direct link to Multiple Contexts in a Single Test")

Playwright can create multiple browser contexts within a single scenario. This is useful when you want to test for multi-user functionality, like a chat.

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    # create a chromium browser instance
    chromium = playwright.chromium
    browser = chromium.launch()

    # create two isolated browser contexts
    user_context = browser.new_context()
    admin_context = browser.new_context()

    # create pages and interact with contexts independently

with sync_playwright() as playwright:
    run(playwright)

```

```codeBlockLines_e6Vv
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    # create a chromium browser instance
    chromium = playwright.chromium
    browser = await chromium.launch()

    # create two isolated browser contexts
    user_context = await browser.new_context()
    admin_context = await browser.new_context()

    # create pages and interact with contexts independently

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())

```

- [Introduction](https://playwright.dev/python/docs/browser-contexts#introduction)
- [What is Test Isolation?](https://playwright.dev/python/docs/browser-contexts#what-is-test-isolation)
- [Why is Test Isolation Important?](https://playwright.dev/python/docs/browser-contexts#why-is-test-isolation-important)
- [Two Ways of Test Isolation](https://playwright.dev/python/docs/browser-contexts#two-ways-of-test-isolation)
- [How Playwright Achieves Test Isolation](https://playwright.dev/python/docs/browser-contexts#how-playwright-achieves-test-isolation)
- [Multiple Contexts in a Single Test](https://playwright.dev/python/docs/browser-contexts#multiple-contexts-in-a-single-test)

## Playwright Test Assertions
[Skip to main content](https://playwright.dev/python/docs/test-assertions#__docusaurus_skipToContent_fallback)

On this page

## List of assertions [​](https://playwright.dev/python/docs/test-assertions\#list-of-assertions "Direct link to List of assertions")

| Assertion | Description |
| --- | --- |
| [expect(locator).to\_be\_attached()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-attached) | Element is attached |
| [expect(locator).to\_be\_checked()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-checked) | Checkbox is checked |
| [expect(locator).to\_be\_disabled()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-disabled) | Element is disabled |
| [expect(locator).to\_be\_editable()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-editable) | Element is editable |
| [expect(locator).to\_be\_empty()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-empty) | Container is empty |
| [expect(locator).to\_be\_enabled()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-enabled) | Element is enabled |
| [expect(locator).to\_be\_focused()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-focused) | Element is focused |
| [expect(locator).to\_be\_hidden()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-hidden) | Element is not visible |
| [expect(locator).to\_be\_in\_viewport()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-in-viewport) | Element intersects viewport |
| [expect(locator).to\_be\_visible()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-visible) | Element is visible |
| [expect(locator).to\_contain\_text()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-contain-text) | Element contains text |
| [expect(locator).to\_have\_accessible\_description()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-accessible-description) | Element has a matching [accessible description](https://w3c.github.io/accname/#dfn-accessible-description) |
| [expect(locator).to\_have\_accessible\_name()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-accessible-name) | Element has a matching [accessible name](https://w3c.github.io/accname/#dfn-accessible-name) |
| [expect(locator).to\_have\_attribute()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-attribute) | Element has a DOM attribute |
| [expect(locator).to\_have\_class()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-class) | Element has a class property |
| [expect(locator).to\_have\_count()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-count) | List has exact number of children |
| [expect(locator).to\_have\_css()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-css) | Element has CSS property |
| [expect(locator).to\_have\_id()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-id) | Element has an ID |
| [expect(locator).to\_have\_js\_property()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-js-property) | Element has a JavaScript property |
| [expect(locator).to\_have\_role()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-role) | Element has a specific [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles) |
| [expect(locator).to\_have\_text()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-text) | Element matches text |
| [expect(locator).to\_have\_value()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-value) | Input has a value |
| [expect(locator).to\_have\_values()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-values) | Select has options selected |
| [expect(page).to\_have\_title()](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-to-have-title) | Page has a title |
| [expect(page).to\_have\_url()](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-to-have-url) | Page has a URL |
| [expect(response).to\_be\_ok()](https://playwright.dev/python/docs/api/class-apiresponseassertions#api-response-assertions-to-be-ok) | Response has an OK status |

## Custom Expect Message [​](https://playwright.dev/python/docs/test-assertions\#custom-expect-message "Direct link to Custom Expect Message")

You can specify a custom expect message as a second argument to the `expect` function, for example:

```codeBlockLines_e6Vv
expect(page.get_by_text("Name"), "should be logged in").to_be_visible()

```

When expect fails, the error would look like this:

```codeBlockLines_e6Vv
    def test_foobar(page: Page) -> None:
>       expect(page.get_by_text("Name"), "should be logged in").to_be_visible()
E       AssertionError: should be logged in
E       Actual value: None
E       Call log:
E       LocatorAssertions.to_be_visible with timeout 5000ms
E       waiting for get_by_text("Name")
E       waiting for get_by_text("Name")

tests/test_foobar.py:22: AssertionError

```

## Setting a custom timeout [​](https://playwright.dev/python/docs/test-assertions\#setting-a-custom-timeout "Direct link to Setting a custom timeout")

You can specify a custom timeout for assertions either globally or per assertion. The default timeout is 5 seconds.

### Global timeout [​](https://playwright.dev/python/docs/test-assertions\#global-timeout "Direct link to Global timeout")

conftest.py

```codeBlockLines_e6Vv
from playwright.sync_api import expect

expect.set_options(timeout=10_000)

```

### Per assertion timeout [​](https://playwright.dev/python/docs/test-assertions\#per-assertion-timeout "Direct link to Per assertion timeout")

test\_foobar.py

```codeBlockLines_e6Vv
from playwright.sync_api import expect

def test_foobar(page: Page) -> None:
    expect(page.get_by_text("Name")).to_be_visible(timeout=10_000)

```

- [List of assertions](https://playwright.dev/python/docs/test-assertions#list-of-assertions)
- [Custom Expect Message](https://playwright.dev/python/docs/test-assertions#custom-expect-message)
- [Setting a custom timeout](https://playwright.dev/python/docs/test-assertions#setting-a-custom-timeout)
  - [Global timeout](https://playwright.dev/python/docs/test-assertions#global-timeout)
  - [Per assertion timeout](https://playwright.dev/python/docs/test-assertions#per-assertion-timeout)

## Playwright and Selenium Grid
[Skip to main content](https://playwright.dev/python/docs/selenium-grid#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/selenium-grid\#introduction "Direct link to Introduction")

Playwright can connect to [Selenium Grid Hub](https://www.selenium.dev/documentation/grid/) that runs Selenium 4 to launch **Google Chrome** or **Microsoft Edge** browser, instead of running browser on the local machine. Note this feature is **experimental** and is prioritized accordingly.

warning

There is a risk of Playwright integration with Selenium Grid Hub breaking in the future. Make sure you weight risks against benefits before using it.

More details

Internally, Playwright connects to the browser using [Chrome DevTools Protocol](https://chromedevtools.github.io/devtools-protocol/) websocket. Selenium 4 currently exposes this capability. However, this [might not be the case in the future](https://github.com/SeleniumHQ/selenium/issues/11590#issuecomment-1436113950). If Selenium drops this capability, Playwright will stop working with it.

Before connecting Playwright to your Selenium Grid, make sure that grid works with [Selenium WebDriver](https://www.selenium.dev/documentation/webdriver/). For example, run [one of the examples](https://github.com/SeleniumHQ/selenium/tree/trunk/javascript/node/selenium-webdriver/example) and pass `SELENIUM_REMOTE_URL` environment variable. If webdriver example does not work, look for any errors at your Selenium hub/node/standalone output and search [Selenium issues](https://github.com/SeleniumHQ/selenium/issues) for a possible solution.

## Starting Selenium Grid [​](https://playwright.dev/python/docs/selenium-grid\#starting-selenium-grid "Direct link to Starting Selenium Grid")

If you run distributed Selenium Grid, Playwright needs selenium nodes to be registered with an accessible address, so that it could connect to the browsers. To make sure it works as expected, set `SE_NODE_GRID_URL` environment variable pointing to the hub when running selenium nodes.

```codeBlockLines_e6Vv
# Start selenium node
SE_NODE_GRID_URL="http://<selenium-hub-ip>:4444" java -jar selenium-server-<version>.jar node

```

## Connecting Playwright to Selenium Grid [​](https://playwright.dev/python/docs/selenium-grid\#connecting-playwright-to-selenium-grid "Direct link to Connecting Playwright to Selenium Grid")

To connect Playwright to **Selenium Grid 4**, set `SELENIUM_REMOTE_URL` environment variable pointing to your Selenium Grid Hub. Note that this only works for Google Chrome and Microsoft Edge.

```codeBlockLines_e6Vv
SELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 pytest --browser chromium

```

You don't have to change your code, just use your testing harness or [browser\_type.launch()](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch) as usual.

### Passing additional capabilities [​](https://playwright.dev/python/docs/selenium-grid\#passing-additional-capabilities "Direct link to Passing additional capabilities")

If your grid requires additional capabilities to be set (for example, you use an external service), you can set `SELENIUM_REMOTE_CAPABILITIES` environment variable to provide JSON-serialized capabilities.

```codeBlockLines_e6Vv
SELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_CAPABILITIES="{'mygrid:options':{os:'windows',username:'John',password:'secure'}}" pytest --browser chromium

```

### Passing additional headers [​](https://playwright.dev/python/docs/selenium-grid\#passing-additional-headers "Direct link to Passing additional headers")

If your grid requires additional headers to be set (for example, you should provide authorization token to use browsers in your cloud), you can set `SELENIUM_REMOTE_HEADERS` environment variable to provide JSON-serialized headers.

```codeBlockLines_e6Vv
SELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_HEADERS="{'Authorization':'Basic b64enc'}" pytest --browser chromium

```

### Detailed logs [​](https://playwright.dev/python/docs/selenium-grid\#detailed-logs "Direct link to Detailed logs")

Run with `DEBUG=pw:browser*` environment variable to see how Playwright is connecting to Selenium Grid.

```codeBlockLines_e6Vv
DEBUG=pw:browser* SELENIUM_REMOTE_URL=http://internal.grid:4444 pytest --browser chromium

```

If you file an issue, please include this log.

## Using Selenium Docker [​](https://playwright.dev/python/docs/selenium-grid\#using-selenium-docker "Direct link to Using Selenium Docker")

One easy way to use Selenium Grid is to run official docker containers. Read more in [selenium docker images](https://github.com/SeleniumHQ/docker-selenium) documentation. For image tagging convention, [read more](https://github.com/SeleniumHQ/docker-selenium/wiki/Tagging-Convention#selenium-grid-4x-and-above).

### Standalone mode [​](https://playwright.dev/python/docs/selenium-grid\#standalone-mode "Direct link to Standalone mode")

Here is an example of running selenium standalone and connecting Playwright to it. Note that hub and node are on the same `localhost`, and we pass `SE_NODE_GRID_URL` environment variable pointing to it.

First start Selenium.

```codeBlockLines_e6Vv
docker run -d -p 4444:4444 --shm-size="2g" -e SE_NODE_GRID_URL="http://localhost:4444" selenium/standalone-chromium:latest

```

Then run Playwright.

```codeBlockLines_e6Vv
SELENIUM_REMOTE_URL=http://localhost:4444 pytest --browser chromium

```

### Hub and nodes mode [​](https://playwright.dev/python/docs/selenium-grid\#hub-and-nodes-mode "Direct link to Hub and nodes mode")

Here is an example of running selenium hub and a single selenium node, and connecting Playwright to the hub. Note that hub and node have different IPs, and we pass `SE_NODE_GRID_URL` environment variable pointing to the hub when starting node containers.

First start the hub container and one or more node containers.

```codeBlockLines_e6Vv
docker run -d -p 4442-4444:4442-4444 --name selenium-hub selenium/hub:4.25.0
docker run -d -p 5555:5555 \
    --shm-size="2g" \
    -e SE_EVENT_BUS_HOST=<selenium-hub-ip> \
    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \
    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \
    -e SE_NODE_GRID_URL="http://<selenium-hub-ip>:4444"
    selenium/node-chromium:4.25.0

```

Then run Playwright.

```codeBlockLines_e6Vv
SELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 pytest --browser chromium

```

## Selenium 3 [​](https://playwright.dev/python/docs/selenium-grid\#selenium-3 "Direct link to Selenium 3")

Internally, Playwright connects to the browser using [Chrome DevTools Protocol](https://chromedevtools.github.io/devtools-protocol/) websocket. Selenium 4 exposes this capability, while Selenium 3 does not.

This means that Selenium 3 is supported in a best-effort manner, where Playwright tries to connect to the grid node directly. Grid nodes must be directly accessible from the machine that runs Playwright.

- [Introduction](https://playwright.dev/python/docs/selenium-grid#introduction)
- [Starting Selenium Grid](https://playwright.dev/python/docs/selenium-grid#starting-selenium-grid)
- [Connecting Playwright to Selenium Grid](https://playwright.dev/python/docs/selenium-grid#connecting-playwright-to-selenium-grid)
  - [Passing additional capabilities](https://playwright.dev/python/docs/selenium-grid#passing-additional-capabilities)
  - [Passing additional headers](https://playwright.dev/python/docs/selenium-grid#passing-additional-headers)
  - [Detailed logs](https://playwright.dev/python/docs/selenium-grid#detailed-logs)
- [Using Selenium Docker](https://playwright.dev/python/docs/selenium-grid#using-selenium-docker)
  - [Standalone mode](https://playwright.dev/python/docs/selenium-grid#standalone-mode)
  - [Hub and nodes mode](https://playwright.dev/python/docs/selenium-grid#hub-and-nodes-mode)
- [Selenium 3](https://playwright.dev/python/docs/selenium-grid#selenium-3)

## Writing Playwright Tests
[Skip to main content](https://playwright.dev/python/docs/writing-tests#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/writing-tests\#introduction "Direct link to Introduction")

Playwright tests are simple, they

- **perform actions**, and
- **assert the state** against expectations.

There is no need to wait for anything prior to performing an action: Playwright automatically waits for the wide range of [actionability](https://playwright.dev/python/docs/actionability) checks to pass prior to performing each action.

There is also no need to deal with the race conditions when performing the checks - Playwright assertions are designed in a way that they describe the expectations that need to be eventually met.

That's it! These design choices allow Playwright users to forget about flaky timeouts and racy checks in their tests altogether.

**You will learn**

- [How to write the first test](https://playwright.dev/python/docs/writing-tests#first-test)
- [How to perform actions](https://playwright.dev/python/docs/writing-tests#actions)
- [How to use assertions](https://playwright.dev/python/docs/writing-tests#assertions)
- [How tests run in isolation](https://playwright.dev/python/docs/writing-tests#test-isolation)
- [How to use test hooks](https://playwright.dev/python/docs/writing-tests#using-fixtures)

## First test [​](https://playwright.dev/python/docs/writing-tests\#first-test "Direct link to First test")

Take a look at the following example to see how to write a test. Note how the file name follows the `test_` prefix convention as well as each test name.

test\_example.py

```codeBlockLines_e6Vv
import re
from playwright.sync_api import Page, expect

def test_has_title(page: Page):
    page.goto("https://playwright.dev/")

    # Expect a title "to contain" a substring.
    expect(page).to_have_title(re.compile("Playwright"))

def test_get_started_link(page: Page):
    page.goto("https://playwright.dev/")

    # Click the get started link.
    page.get_by_role("link", name="Get started").click()

    # Expects page to have a heading with the name of Installation.
    expect(page.get_by_role("heading", name="Installation")).to_be_visible()

```

## Actions [​](https://playwright.dev/python/docs/writing-tests\#actions "Direct link to Actions")

### Navigation [​](https://playwright.dev/python/docs/writing-tests\#navigation "Direct link to Navigation")

Most of the tests will start with navigating page to the URL. After that, test will be able to interact with the page elements.

```codeBlockLines_e6Vv
page.goto("https://playwright.dev/")

```

Playwright will wait for page to reach the load state prior to moving forward. Learn more about the [page.goto()](https://playwright.dev/python/docs/api/class-page#page-goto) options.

### Interactions [​](https://playwright.dev/python/docs/writing-tests\#interactions "Direct link to Interactions")

Performing actions starts with locating the elements. Playwright uses [Locators API](https://playwright.dev/python/docs/locators) for that. Locators represent a way to find element(s) on the page at any moment, learn more about the [different types](https://playwright.dev/python/docs/locators) of locators available. Playwright will wait for the element to be [actionable](https://playwright.dev/python/docs/actionability) prior to performing the action, so there is no need to wait for it to become available.

```codeBlockLines_e6Vv
# Create a locator.
get_started = page.get_by_role("link", name="Get started")

# Click it.
get_started.click()

```

In most cases, it'll be written in one line:

```codeBlockLines_e6Vv
page.get_by_role("link", name="Get started").click()

```

### Basic actions [​](https://playwright.dev/python/docs/writing-tests\#basic-actions "Direct link to Basic actions")

This is the list of the most popular Playwright actions. Note that there are many more, so make sure to check the [Locator API](https://playwright.dev/python/docs/api/class-locator) section to learn more about them.

| Action | Description |
| --- | --- |
| [locator.check()](https://playwright.dev/python/docs/api/class-locator#locator-check) | Check the input checkbox |
| [locator.click()](https://playwright.dev/python/docs/api/class-locator#locator-click) | Click the element |
| [locator.uncheck()](https://playwright.dev/python/docs/api/class-locator#locator-uncheck) | Uncheck the input checkbox |
| [locator.hover()](https://playwright.dev/python/docs/api/class-locator#locator-hover) | Hover mouse over the element |
| [locator.fill()](https://playwright.dev/python/docs/api/class-locator#locator-fill) | Fill the form field, input text |
| [locator.focus()](https://playwright.dev/python/docs/api/class-locator#locator-focus) | Focus the element |
| [locator.press()](https://playwright.dev/python/docs/api/class-locator#locator-press) | Press single key |
| [locator.set\_input\_files()](https://playwright.dev/python/docs/api/class-locator#locator-set-input-files) | Pick files to upload |
| [locator.select\_option()](https://playwright.dev/python/docs/api/class-locator#locator-select-option) | Select option in the drop down |

## Assertions [​](https://playwright.dev/python/docs/writing-tests\#assertions "Direct link to Assertions")

Playwright includes [assertions](https://playwright.dev/python/docs/test-assertions) that will wait until the expected condition is met. Using these assertions allows making the tests non-flaky and resilient. For example, this code will wait until the page gets the title containing "Playwright":

```codeBlockLines_e6Vv
import re
from playwright.sync_api import expect

expect(page).to_have_title(re.compile("Playwright"))

```

Here is the list of the most popular async assertions. Note that there are [many more](https://playwright.dev/python/docs/test-assertions) to get familiar with:

| Assertion | Description |
| --- | --- |
| [expect(locator).to\_be\_checked()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-checked) | Checkbox is checked |
| [expect(locator).to\_be\_enabled()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-enabled) | Control is enabled |
| [expect(locator).to\_be\_visible()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-be-visible) | Element is visible |
| [expect(locator).to\_contain\_text()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-contain-text) | Element contains text |
| [expect(locator).to\_have\_attribute()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-attribute) | Element has attribute |
| [expect(locator).to\_have\_count()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-count) | List of elements has given length |
| [expect(locator).to\_have\_text()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-text) | Element matches text |
| [expect(locator).to\_have\_value()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-value) | Input element has value |
| [expect(page).to\_have\_title()](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-to-have-title) | Page has title |
| [expect(page).to\_have\_url()](https://playwright.dev/python/docs/api/class-pageassertions#page-assertions-to-have-url) | Page has URL |

### Test isolation [​](https://playwright.dev/python/docs/writing-tests\#test-isolation "Direct link to Test isolation")

The Playwright Pytest plugin is based on the concept of test fixtures such as the [built in page fixture](https://playwright.dev/python/docs/test-runners), which is passed into your test. Pages are [isolated between tests due to the Browser Context](https://playwright.dev/python/docs/browser-contexts), which is equivalent to a brand new browser profile, where every test gets a fresh environment, even when multiple tests run in a single Browser.

test\_example.py

```codeBlockLines_e6Vv
from playwright.sync_api import Page

def test_example_test(page: Page):
  pass
  # "page" belongs to an isolated BrowserContext, created for this specific test.

def test_another_test(page: Page):
  pass
  # "page" in this second test is completely isolated from the first test.

```

### Using fixtures [​](https://playwright.dev/python/docs/writing-tests\#using-fixtures "Direct link to Using fixtures")

You can use various [fixtures](https://docs.pytest.org/en/6.2.x/fixture.html#autouse-fixtures-fixtures-you-don-t-have-to-request) to execute code before or after your tests and to share objects between them. A `function` scoped fixture e.g. with autouse behaves like a beforeEach/afterEach. And a `module` scoped fixture with autouse behaves like a beforeAll/afterAll which runs before all and after all the tests.

test\_example.py

```codeBlockLines_e6Vv
import pytest
from playwright.sync_api import Page, expect

@pytest.fixture(scope="function", autouse=True)
def before_each_after_each(page: Page):

    print("before the test runs")

    # Go to the starting url before each test.
    page.goto("https://playwright.dev/")
    yield

    print("after the test runs")

def test_main_navigation(page: Page):
    # Assertions use the expect API.
    expect(page).to_have_url("https://playwright.dev/")

```

## What's next [​](https://playwright.dev/python/docs/writing-tests\#whats-next "Direct link to What's next")

- [Run single test, multiple tests, headed mode](https://playwright.dev/python/docs/running-tests)
- [Generate tests with Codegen](https://playwright.dev/python/docs/codegen-intro)
- [See a trace of your tests](https://playwright.dev/python/docs/trace-viewer-intro)
- [Run tests on CI with GitHub Actions](https://playwright.dev/python/docs/ci-intro)

- [Introduction](https://playwright.dev/python/docs/writing-tests#introduction)
- [First test](https://playwright.dev/python/docs/writing-tests#first-test)
- [Actions](https://playwright.dev/python/docs/writing-tests#actions)
  - [Navigation](https://playwright.dev/python/docs/writing-tests#navigation)
  - [Interactions](https://playwright.dev/python/docs/writing-tests#interactions)
  - [Basic actions](https://playwright.dev/python/docs/writing-tests#basic-actions)
- [Assertions](https://playwright.dev/python/docs/writing-tests#assertions)
  - [Test isolation](https://playwright.dev/python/docs/writing-tests#test-isolation)
  - [Using fixtures](https://playwright.dev/python/docs/writing-tests#using-fixtures)
- [What's next](https://playwright.dev/python/docs/writing-tests#whats-next)

## Testing Chrome Extensions
[Skip to main content](https://playwright.dev/python/docs/chrome-extensions#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/chrome-extensions\#introduction "Direct link to Introduction")

note

Extensions only work in Chrome / Chromium launched with a persistent context. Use custom browser args at your own risk, as some of them may break Playwright functionality.

The snippet below retrieves the [background page](https://developer.chrome.com/extensions/background_pages) of a [Manifest v2](https://developer.chrome.com/docs/extensions/mv2/) extension whose source is located in `./my-extension`.

Note the use of the `chromium` channel that allows to run extensions in headless mode. Alternatively, you can launch the browser in headed mode.

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright, Playwright

path_to_extension = "./my-extension"
user_data_dir = "/tmp/test-user-data-dir"

def run(playwright: Playwright):
    context = playwright.chromium.launch_persistent_context(
        user_data_dir,
        channel="chromium",
        args=[\
            f"--disable-extensions-except={path_to_extension}",\
            f"--load-extension={path_to_extension}",\
        ],
    )
    if len(context.background_pages) == 0:
        background_page = context.wait_for_event('backgroundpage')
    else:
        background_page = context.background_pages[0]

    # Test the background page as you would any other page.
    context.close()

with sync_playwright() as playwright:
    run(playwright)

```

```codeBlockLines_e6Vv
import asyncio
from playwright.async_api import async_playwright, Playwright

path_to_extension = "./my-extension"
user_data_dir = "/tmp/test-user-data-dir"

async def run(playwright: Playwright):
    context = await playwright.chromium.launch_persistent_context(
        user_data_dir,
        channel="chromium",
        args=[\
            f"--disable-extensions-except={path_to_extension}",\
            f"--load-extension={path_to_extension}",\
        ],
    )

    if len(context.background_pages) == 0:
        background_page = await context.wait_for_event('backgroundpage')
    else:
        background_page = context.background_pages[0]

    # Test the background page as you would any other page.
    await context.close()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)

asyncio.run(main())

```

## Testing [​](https://playwright.dev/python/docs/chrome-extensions\#testing "Direct link to Testing")

To have the extension loaded when running tests you can use a test fixture to set the context. You can also dynamically retrieve the extension id and use it to load and test the popup page for example.

Note the use of the `chromium` channel that allows to run extensions in headless mode. Alternatively, you can launch the browser in headed mode.

First, add fixtures that will load the extension:

conftest.py

```codeBlockLines_e6Vv
from typing import Generator
from pathlib import Path
from playwright.sync_api import Playwright, BrowserContext
import pytest

@pytest.fixture()
def context(playwright: Playwright) -> Generator[BrowserContext, None, None]:
    path_to_extension = Path(__file__).parent.joinpath("my-extension")
    context = playwright.chromium.launch_persistent_context(
        "",
        channel="chromium",
        args=[\
            f"--disable-extensions-except={path_to_extension}",\
            f"--load-extension={path_to_extension}",\
        ],
    )
    yield context
    context.close()

@pytest.fixture()
def extension_id(context) -> Generator[str, None, None]:
    # for manifest v2:
    # background = context.background_pages[0]
    # if not background:
    #     background = context.wait_for_event("backgroundpage")

    # for manifest v3:
    background = context.service_workers[0]
    if not background:
        background = context.wait_for_event("serviceworker")

    extension_id = background.url.split("/")[2]
    yield extension_id

```

Then use these fixtures in a test:

test\_foo.py

```codeBlockLines_e6Vv
from playwright.sync_api import expect, Page

def test_example_test(page: Page) -> None:
    page.goto("https://example.com")
    expect(page.locator("body")).to_contain_text("Changed by my-extension")

def test_popup_page(page: Page, extension_id: str) -> None:
    page.goto(f"chrome-extension://{extension_id}/popup.html")
    expect(page.locator("body")).to_have_text("my-extension popup")

```

- [Introduction](https://playwright.dev/python/docs/chrome-extensions#introduction)
- [Testing](https://playwright.dev/python/docs/chrome-extensions#testing)

## Playwright Locators Guide
[Skip to main content](https://playwright.dev/python/docs/other-locators#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/other-locators\#introduction "Direct link to Introduction")

note

Check out the main [locators guide](https://playwright.dev/python/docs/locators) for most common and recommended locators.

In addition to recommended locators like [page.get\_by\_role()](https://playwright.dev/python/docs/api/class-page#page-get-by-role) and [page.get\_by\_text()](https://playwright.dev/python/docs/api/class-page#page-get-by-text), Playwright supports a variety of other locators described in this guide.

## CSS locator [​](https://playwright.dev/python/docs/other-locators\#css-locator "Direct link to CSS locator")

note

We recommend prioritizing [user-visible locators](https://playwright.dev/python/docs/locators#quick-guide) like text or accessible role instead of using CSS that is tied to the implementation and could break when the page changes.

Playwright can locate an element by CSS selector.

- Sync
- Async

```codeBlockLines_e6Vv
page.locator("css=button").click()

```

```codeBlockLines_e6Vv
await page.locator("css=button").click()

```

Playwright augments standard CSS selectors in two ways:

- CSS selectors pierce open shadow DOM.
- Playwright adds custom pseudo-classes like `:visible`, `:has-text()`, `:has()`, `:is()`, `:nth-match()` and more.

### CSS: matching by text [​](https://playwright.dev/python/docs/other-locators\#css-matching-by-text "Direct link to CSS: matching by text")

Playwright include a number of CSS pseudo-classes to match elements by their text content.

- `article:has-text("Playwright")` \- the `:has-text()` matches any element containing specified text somewhere inside, possibly in a child or a descendant element. Matching is case-insensitive, trims whitespace and searches for a substring.

For example, `article:has-text("Playwright")` matches `<article><div>Playwright</div></article>`.

Note that `:has-text()` should be used together with other CSS specifiers, otherwise it will match all the elements containing specified text, including the `<body>`.



- Sync
- Async

```codeBlockLines_e6Vv
# Wrong, will match many elements including <body>
page.locator(':has-text("Playwright")').click()
# Correct, only matches the <article> element
page.locator('article:has-text("All products")').click()

```

```codeBlockLines_e6Vv
# Wrong, will match many elements including <body>
await page.locator(':has-text("Playwright")').click()
# Correct, only matches the <article> element
await page.locator('article:has-text("Playwright")').click()

```

- `#nav-bar :text("Home")` \- the `:text()` pseudo-class matches the smallest element containing specified text. Matching is case-insensitive, trims whitespace and searches for a substring.

For example, this will find an element with text "Home" somewhere inside the `#nav-bar` element:



- Sync
- Async

```codeBlockLines_e6Vv
page.locator("#nav-bar :text('Home')").click()

```

```codeBlockLines_e6Vv
await page.locator("#nav-bar :text('Home')").click()

```

- `#nav-bar :text-is("Home")` \- the `:text-is()` pseudo-class matches the smallest element with exact text. Exact matching is case-sensitive, trims whitespace and searches for the full string.

For example, `:text-is("Log")` does not match `<button>Log in</button>` because `<button>` contains a single text node `"Log in"` that is not equal to `"Log"`. However, `:text-is("Log")` matches `<button> Log <span>in</span></button>`, because `<button>` contains a text node `" Log "`.

Similarly, `:text-is("Download")` will not match `<button>download</button>` because it is case-sensitive.


- `#nav-bar :text-matches("reg?ex", "i")` \- the `:text-matches()` pseudo-class matches the smallest element with text content matching the [JavaScript-like regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp).

For example, `:text-matches("Log\s*in", "i")` matches `<button>Login</button>` and `<button>log IN</button>`.


note

Text matching always normalizes whitespace. For example, it turns multiple spaces into one, turns line breaks into spaces and ignores leading and trailing whitespace.

note

Input elements of the type `button` and `submit` are matched by their `value` instead of text content. For example, `:text("Log in")` matches `<input type=button value="Log in">`.

### CSS: matching only visible elements [​](https://playwright.dev/python/docs/other-locators\#css-matching-only-visible-elements "Direct link to CSS: matching only visible elements")

Playwright supports the `:visible` pseudo class in CSS selectors. For example, `css=button` matches all the buttons on the page, while `css=button:visible` only matches visible buttons. This is useful to distinguish elements that are very similar but differ in visibility.

Consider a page with two buttons, first invisible and second visible.

```codeBlockLines_e6Vv
<button style='display: none'>Invisible</button>
<button>Visible</button>

```

- This will find both buttons and throw a [strictness](https://playwright.dev/python/docs/locators#strictness) violation error:



- Sync
- Async

```codeBlockLines_e6Vv
page.locator("button").click()

```

```codeBlockLines_e6Vv
await page.locator("button").click()

```

- This will only find a second button, because it is visible, and then click it.



- Sync
- Async

```codeBlockLines_e6Vv
page.locator("button:visible").click()

```

```codeBlockLines_e6Vv
await page.locator("button:visible").click()

```

### CSS: elements that contain other elements [​](https://playwright.dev/python/docs/other-locators\#css-elements-that-contain-other-elements "Direct link to CSS: elements that contain other elements")

The `:has()` pseudo-class is an [experimental CSS pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/:has). It returns an element if any of the selectors passed as parameters relative to the `:scope` of the given element match at least one element.

Following snippet returns text content of an `<article>` element that has a `<div class=promo>` inside.

- Sync
- Async

```codeBlockLines_e6Vv
page.locator("article:has(div.promo)").text_content()

```

```codeBlockLines_e6Vv
await page.locator("article:has(div.promo)").text_content()

```

### CSS: elements matching one of the conditions [​](https://playwright.dev/python/docs/other-locators\#css-elements-matching-one-of-the-conditions "Direct link to CSS: elements matching one of the conditions")

Comma-separated list of CSS selectors will match all elements that can be selected by one of the selectors in that list.

- Sync
- Async

```codeBlockLines_e6Vv
# Clicks a <button> that has either a "Log in" or "Sign in" text.
page.locator('button:has-text("Log in"), button:has-text("Sign in")').click()

```

```codeBlockLines_e6Vv
# Clicks a <button> that has either a "Log in" or "Sign in" text.
await page.locator('button:has-text("Log in"), button:has-text("Sign in")').click()

```

The `:is()` pseudo-class is an [experimental CSS pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/:is) that may be useful for specifying a list of extra conditions on an element.

### CSS: matching elements based on layout [​](https://playwright.dev/python/docs/other-locators\#css-matching-elements-based-on-layout "Direct link to CSS: matching elements based on layout")

note

Matching based on layout may produce unexpected results. For example, a different element could be matched when layout changes by one pixel.

Sometimes, it is hard to come up with a good selector to the target element when it lacks distinctive features. In this case, using Playwright layout CSS pseudo-classes could help. These can be combined with regular CSS to pinpoint one of the multiple choices.

For example, `input:right-of(:text("Password"))` matches an input field that is to the right of text "Password" - useful when the page has multiple inputs that are hard to distinguish between each other.

Note that layout pseudo-classes are useful in addition to something else, like `input`. If you use a layout pseudo-class alone, like `:right-of(:text("Password"))`, most likely you'll get not the input you are looking for, but some empty element in between the text and the target input.

Layout pseudo-classes use [bounding client rect](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect) to compute distance and relative position of the elements.

- `:right-of(div > button)` \- Matches elements that are to the right of any element matching the inner selector, at any vertical position.
- `:left-of(div > button)` \- Matches elements that are to the left of any element matching the inner selector, at any vertical position.
- `:above(div > button)` \- Matches elements that are above any of the elements matching the inner selector, at any horizontal position.
- `:below(div > button)` \- Matches elements that are below any of the elements matching the inner selector, at any horizontal position.
- `:near(div > button)` \- Matches elements that are near (within 50 CSS pixels) any of the elements matching the inner selector.

Note that resulting matches are sorted by their distance to the anchor element, so you can use [locator.first](https://playwright.dev/python/docs/api/class-locator#locator-first) to pick the closest one. This is only useful if you have something like a list of similar elements, where the closest is obviously the right one. However, using [locator.first](https://playwright.dev/python/docs/api/class-locator#locator-first) in other cases most likely won't work as expected - it will not target the element you are searching for, but some other element that happens to be the closest like a random empty `<div>`, or an element that is scrolled out and is not currently visible.

- Sync
- Async

```codeBlockLines_e6Vv
# Fill an input to the right of "Username".
page.locator("input:right-of(:text(\"Username\"))").fill("value")

# Click a button near the promo card.
page.locator("button:near(.promo-card)").click()

# Click the radio input in the list closest to the "Label 3".
page.locator("[type=radio]:left-of(:text(\"Label 3\"))").first.click()

```

```codeBlockLines_e6Vv
# Fill an input to the right of "Username".
await page.locator("input:right-of(:text(\"Username\"))").fill("value")

# Click a button near the promo card.
await page.locator("button:near(.promo-card)").click()

# Click the radio input in the list closest to the "Label 3".
await page.locator("[type=radio]:left-of(:text(\"Label 3\"))").first.click()

```

All layout pseudo-classes support optional maximum pixel distance as the last argument. For example `button:near(:text("Username"), 120)` matches a button that is at most 120 CSS pixels away from the element with the text "Username".

### CSS: pick n-th match from the query result [​](https://playwright.dev/python/docs/other-locators\#css-pick-n-th-match-from-the-query-result "Direct link to CSS: pick n-th match from the query result")

note

It is usually possible to distinguish elements by some attribute or text content, which is more resilient to page changes.

Sometimes page contains a number of similar elements, and it is hard to select a particular one. For example:

```codeBlockLines_e6Vv
<section> <button>Buy</button> </section>
<article><div> <button>Buy</button> </div></article>
<div><div> <button>Buy</button> </div></div>

```

In this case, `:nth-match(:text("Buy"), 3)` will select the third button from the snippet above. Note that index is one-based.

- Sync
- Async

```codeBlockLines_e6Vv
# Click the third "Buy" button
page.locator(":nth-match(:text('Buy'), 3)").click()

```

```codeBlockLines_e6Vv
# Click the third "Buy" button
await page.locator(":nth-match(:text('Buy'), 3)").click()

```

`:nth-match()` is also useful to wait until a specified number of elements appear, using [locator.wait\_for()](https://playwright.dev/python/docs/api/class-locator#locator-wait-for).

- Sync
- Async

```codeBlockLines_e6Vv
# Wait until all three buttons are visible
page.locator(":nth-match(:text('Buy'), 3)").wait_for()

```

```codeBlockLines_e6Vv
# Wait until all three buttons are visible
await page.locator(":nth-match(:text('Buy'), 3)").wait_for()

```

note

Unlike [`:nth-child()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-child), elements do not have to be siblings, they could be anywhere on the page. In the snippet above, all three buttons match `:text("Buy")` selector, and `:nth-match()` selects the third button.

## N-th element locator [​](https://playwright.dev/python/docs/other-locators\#n-th-element-locator "Direct link to N-th element locator")

You can narrow down query to the n-th match using the `nth=` locator passing a zero-based index.

- Sync
- Async

```codeBlockLines_e6Vv
# Click first button
page.locator("button").locator("nth=0").click()

# Click last button
page.locator("button").locator("nth=-1").click()

```

```codeBlockLines_e6Vv
# Click first button
await page.locator("button").locator("nth=0").click()

# Click last button
await page.locator("button").locator("nth=-1").click()

```

## Parent element locator [​](https://playwright.dev/python/docs/other-locators\#parent-element-locator "Direct link to Parent element locator")

When you need to target a parent element of some other element, most of the time you should [locator.filter()](https://playwright.dev/python/docs/api/class-locator#locator-filter) by the child locator. For example, consider the following DOM structure:

```codeBlockLines_e6Vv
<li><label>Hello</label></li>
<li><label>World</label></li>

```

If you'd like to target the parent `<li>` of a label with text `"Hello"`, using [locator.filter()](https://playwright.dev/python/docs/api/class-locator#locator-filter) works best:

- Sync
- Async

```codeBlockLines_e6Vv
child = page.get_by_text("Hello")
parent = page.get_by_role("listitem").filter(has=child)

```

```codeBlockLines_e6Vv
child = page.get_by_text("Hello")
parent = page.get_by_role("listitem").filter(has=child)

```

Alternatively, if you cannot find a suitable locator for the parent element, use `xpath=..`. Note that this method is not as reliable, because any changes to the DOM structure will break your tests. Prefer [locator.filter()](https://playwright.dev/python/docs/api/class-locator#locator-filter) when possible.

- Sync
- Async

```codeBlockLines_e6Vv
parent = page.get_by_text("Hello").locator('xpath=..')

```

```codeBlockLines_e6Vv
parent = page.get_by_text("Hello").locator('xpath=..')

```

## React locator [​](https://playwright.dev/python/docs/other-locators\#react-locator "Direct link to React locator")

note

React locator is experimental and prefixed with `_`. The functionality might change in future.

React locator allows finding elements by their component name and property values. The syntax is very similar to [CSS attribute selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors) and supports all CSS attribute selector operators.

In React locator, component names are transcribed with **CamelCase**.

- Sync
- Async

```codeBlockLines_e6Vv
page.locator("_react=BookItem").click()

```

```codeBlockLines_e6Vv
await page.locator("_react=BookItem").click()

```

More examples:

- match by **component**: `_react=BookItem`
- match by component and **exact property value**, case-sensitive: `_react=BookItem[author = "Steven King"]`
- match by property value only, **case-insensitive**: `_react=[author = "steven king" i]`
- match by component and **truthy property value**: `_react=MyButton[enabled]`
- match by component and **boolean value**: `_react=MyButton[enabled = false]`
- match by property **value substring**: `_react=[author *= "King"]`
- match by component and **multiple properties**: `_react=BookItem[author *= "king" i][year = 1990]`
- match by **nested** property value: `_react=[some.nested.value = 12]`
- match by component and property value **prefix**: `_react=BookItem[author ^= "Steven"]`
- match by component and property value **suffix**: `_react=BookItem[author $= "Steven"]`
- match by component and **key**: `_react=BookItem[key = '2']`
- match by property value **regex**: `_react=[author = /Steven(\\s+King)?/i]`

To find React element names in a tree use [React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi).

note

React locator supports React 15 and above.

note

React locator, as well as [React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi), only work against **unminified** application builds.

## Vue locator [​](https://playwright.dev/python/docs/other-locators\#vue-locator "Direct link to Vue locator")

note

Vue locator is experimental and prefixed with `_`. The functionality might change in future.

Vue locator allows finding elements by their component name and property values. The syntax is very similar to [CSS attribute selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors) and supports all CSS attribute selector operators.

In Vue locator, component names are transcribed with **kebab-case**.

- Sync
- Async

```codeBlockLines_e6Vv
page.locator("_vue=book-item").click()

```

```codeBlockLines_e6Vv
await page.locator("_vue=book-item").click()

```

More examples:

- match by **component**: `_vue=book-item`
- match by component and **exact property value**, case-sensitive: `_vue=book-item[author = "Steven King"]`
- match by property value only, **case-insensitive**: `_vue=[author = "steven king" i]`
- match by component and **truthy property value**: `_vue=my-button[enabled]`
- match by component and **boolean value**: `_vue=my-button[enabled = false]`
- match by property **value substring**: `_vue=[author *= "King"]`
- match by component and **multiple properties**: `_vue=book-item[author *= "king" i][year = 1990]`
- match by **nested** property value: `_vue=[some.nested.value = 12]`
- match by component and property value **prefix**: `_vue=book-item[author ^= "Steven"]`
- match by component and property value **suffix**: `_vue=book-item[author $= "Steven"]`
- match by property value **regex**: `_vue=[author = /Steven(\\s+King)?/i]`

To find Vue element names in a tree use [Vue DevTools](https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=en).

note

Vue locator supports Vue2 and above.

note

Vue locator, as well as [Vue DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi), only work against **unminified** application builds.

## XPath locator [​](https://playwright.dev/python/docs/other-locators\#xpath-locator "Direct link to XPath locator")

warning

We recommend prioritizing [user-visible locators](https://playwright.dev/python/docs/locators#quick-guide) like text or accessible role instead of using XPath that is tied to the implementation and easily break when the page changes.

XPath locators are equivalent to calling [`Document.evaluate`](https://developer.mozilla.org/en/docs/Web/API/Document/evaluate).

- Sync
- Async

```codeBlockLines_e6Vv
page.locator("xpath=//button").click()

```

```codeBlockLines_e6Vv
await page.locator("xpath=//button").click()

```

note

Any selector string starting with `//` or `..` are assumed to be an xpath selector. For example, Playwright converts `'//html/body'` to `'xpath=//html/body'`.

note

XPath does not pierce shadow roots.

### XPath union [​](https://playwright.dev/python/docs/other-locators\#xpath-union "Direct link to XPath union")

Pipe operator ( `|`) can be used to specify multiple selectors in XPath. It will match all elements that can be selected by one of the selectors in that list.

- Sync
- Async

```codeBlockLines_e6Vv
# Waits for either confirmation dialog or load spinner.
page.locator("//span[contains(@class, 'spinner__loading')]|//div[@id='confirmation']").wait_for()

```

```codeBlockLines_e6Vv
# Waits for either confirmation dialog or load spinner.
await page.locator("//span[contains(@class, 'spinner__loading')]|//div[@id='confirmation']").wait_for()

```

## Label to form control retargeting [​](https://playwright.dev/python/docs/other-locators\#label-to-form-control-retargeting "Direct link to Label to form control retargeting")

warning

We recommend [locating by label text](https://playwright.dev/python/docs/locators#locate-by-label) instead of relying to label-to-control retargeting.

Targeted input actions in Playwright automatically distinguish between labels and controls, so you can target the label to perform an action on the associated control.

For example, consider the following DOM structure: `<label for="password">Password:</label><input id="password" type="password">`. You can target the label by its "Password" text using [page.get\_by\_text()](https://playwright.dev/python/docs/api/class-page#page-get-by-text). However, the following actions will be performed on the input instead of the label:

- [locator.click()](https://playwright.dev/python/docs/api/class-locator#locator-click) will click the label and automatically focus the input field;
- [locator.fill()](https://playwright.dev/python/docs/api/class-locator#locator-fill) will fill the input field;
- [locator.input\_value()](https://playwright.dev/python/docs/api/class-locator#locator-input-value) will return the value of the input field;
- [locator.select\_text()](https://playwright.dev/python/docs/api/class-locator#locator-select-text) will select text in the input field;
- [locator.set\_input\_files()](https://playwright.dev/python/docs/api/class-locator#locator-set-input-files) will set files for the input field with `type=file`;
- [locator.select\_option()](https://playwright.dev/python/docs/api/class-locator#locator-select-option) will select an option from the select box.

- Sync
- Async

```codeBlockLines_e6Vv
# Fill the input by targeting the label.
page.get_by_text("Password").fill("secret")

```

```codeBlockLines_e6Vv
# Fill the input by targeting the label.
await page.get_by_text("Password").fill("secret")

```

However, other methods will target the label itself, for example [expect(locator).to\_have\_text()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-text) will assert the text content of the label, not the input field.

- Sync
- Async

```codeBlockLines_e6Vv
# Fill the input by targeting the label.
expect(page.locator("label")).to_have_text("Password")

```

```codeBlockLines_e6Vv
# Fill the input by targeting the label.
await expect(page.locator("label")).to_have_text("Password")

```

## Legacy text locator [​](https://playwright.dev/python/docs/other-locators\#legacy-text-locator "Direct link to Legacy text locator")

warning

We recommend the modern [text locator](https://playwright.dev/python/docs/locators#get-by-text) instead.

Legacy text locator matches elements that contain passed text.

- Sync
- Async

```codeBlockLines_e6Vv
page.locator("text=Log in").click()

```

```codeBlockLines_e6Vv
await page.locator("text=Log in").click()

```

Legacy text locator has a few variations:

- `text=Log in` \- default matching is case-insensitive, trims whitespace and searches for a substring. For example, `text=Log` matches `<button>Log in</button>`.



- Sync
- Async

```codeBlockLines_e6Vv
page.locator("text=Log in").click()

```

```codeBlockLines_e6Vv
await page.locator("text=Log in").click()

```

- `text="Log in"` \- text body can be escaped with single or double quotes to search for a text node with exact content after trimming whitespace.

For example, `text="Log"` does not match `<button>Log in</button>` because `<button>` contains a single text node `"Log in"` that is not equal to `"Log"`. However, `text="Log"` matches `<button> Log <span>in</span></button>`, because `<button>` contains a text node `" Log "`. This exact mode implies case-sensitive matching, so `text="Download"` will not match `<button>download</button>`.

Quoted body follows the usual escaping rules, e.g. use `\"` to escape double quote in a double-quoted string: `text="foo\"bar"`.



- Sync
- Async

```codeBlockLines_e6Vv
page.locator("text='Log in'").click()

```

```codeBlockLines_e6Vv
await page.locator("text='Log in'").click()

```

- `/Log\s*in/i` \- body can be a [JavaScript-like regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) wrapped in `/` symbols. For example, `text=/Log\s*in/i` matches `<button>Login</button>` and `<button>log IN</button>`.



- Sync
- Async

```codeBlockLines_e6Vv
page.locator("text=/Log\s*in/i").click()

```

```codeBlockLines_e6Vv
await page.locator("text=/Log\s*in/i").click()

```

note

String selectors starting and ending with a quote (either `"` or `'`) are assumed to be a legacy text locators. For example, `"Log in"` is converted to `text="Log in"` internally.

note

Matching always normalizes whitespace. For example, it turns multiple spaces into one, turns line breaks into spaces and ignores leading and trailing whitespace.

note

Input elements of the type `button` and `submit` are matched by their `value` instead of text content. For example, `text=Log in` matches `<input type=button value="Log in">`.

## id, data-testid, data-test-id, data-test selectors [​](https://playwright.dev/python/docs/other-locators\#id-data-testid-data-test-id-data-test-selectors "Direct link to id, data-testid, data-test-id, data-test selectors")

warning

We recommend [locating by test id](https://playwright.dev/python/docs/locators#locate-by-test-id) instead.

Playwright supports shorthand for selecting elements using certain attributes. Currently, only the following attributes are supported:

- `id`
- `data-testid`
- `data-test-id`
- `data-test`

- Sync
- Async

```codeBlockLines_e6Vv
# Fill an input with the id "username"
page.locator('id=username').fill('value')

# Click an element with data-test-id "submit"
page.locator('data-test-id=submit').click()

```

```codeBlockLines_e6Vv
# Fill an input with the id "username"
await page.locator('id=username').fill('value')

# Click an element with data-test-id "submit"
await page.locator('data-test-id=submit').click()

```

note

Attribute selectors are not CSS selectors, so anything CSS-specific like `:enabled` is not supported. For more features, use a proper [css](https://playwright.dev/python/docs/other-locators#css-locator) selector, e.g. `css=[data-test="login"]:enabled`.

## Chaining selectors [​](https://playwright.dev/python/docs/other-locators\#chaining-selectors "Direct link to Chaining selectors")

warning

We recommend [chaining locators](https://playwright.dev/python/docs/locators#matching-inside-a-locator) instead.

Selectors defined as `engine=body` or in short-form can be combined with the `>>` token, e.g. `selector1 >> selector2 >> selectors3`. When selectors are chained, the next one is queried relative to the previous one's result.

For example,

```codeBlockLines_e6Vv
css=article >> css=.bar > .baz >> css=span[attr=value]

```

is equivalent to

```codeBlockLines_e6Vv
document
    .querySelector('article')
    .querySelector('.bar > .baz')
    .querySelector('span[attr=value]');

```

If a selector needs to include `>>` in the body, it should be escaped inside a string to not be confused with chaining separator, e.g. `text="some >> text"`.

### Intermediate matches [​](https://playwright.dev/python/docs/other-locators\#intermediate-matches "Direct link to Intermediate matches")

warning

We recommend [filtering by another locator](https://playwright.dev/python/docs/locators#filter-by-childdescendant) to locate elements that contain other elements.

By default, chained selectors resolve to an element queried by the last selector. A selector can be prefixed with `*` to capture elements that are queried by an intermediate selector.

For example, `css=article >> text=Hello` captures the element with the text `Hello`, and `*css=article >> text=Hello` (note the `*`) captures the `article` element that contains some element with the text `Hello`.

- [Introduction](https://playwright.dev/python/docs/other-locators#introduction)
- [CSS locator](https://playwright.dev/python/docs/other-locators#css-locator)
  - [CSS: matching by text](https://playwright.dev/python/docs/other-locators#css-matching-by-text)
  - [CSS: matching only visible elements](https://playwright.dev/python/docs/other-locators#css-matching-only-visible-elements)
  - [CSS: elements that contain other elements](https://playwright.dev/python/docs/other-locators#css-elements-that-contain-other-elements)
  - [CSS: elements matching one of the conditions](https://playwright.dev/python/docs/other-locators#css-elements-matching-one-of-the-conditions)
  - [CSS: matching elements based on layout](https://playwright.dev/python/docs/other-locators#css-matching-elements-based-on-layout)
  - [CSS: pick n-th match from the query result](https://playwright.dev/python/docs/other-locators#css-pick-n-th-match-from-the-query-result)
- [N-th element locator](https://playwright.dev/python/docs/other-locators#n-th-element-locator)
- [Parent element locator](https://playwright.dev/python/docs/other-locators#parent-element-locator)
- [React locator](https://playwright.dev/python/docs/other-locators#react-locator)
- [Vue locator](https://playwright.dev/python/docs/other-locators#vue-locator)
- [XPath locator](https://playwright.dev/python/docs/other-locators#xpath-locator)
  - [XPath union](https://playwright.dev/python/docs/other-locators#xpath-union)
- [Label to form control retargeting](https://playwright.dev/python/docs/other-locators#label-to-form-control-retargeting)
- [Legacy text locator](https://playwright.dev/python/docs/other-locators#legacy-text-locator)
- [id, data-testid, data-test-id, data-test selectors](https://playwright.dev/python/docs/other-locators#id-data-testid-data-test-id-data-test-selectors)
- [Chaining selectors](https://playwright.dev/python/docs/other-locators#chaining-selectors)
  - [Intermediate matches](https://playwright.dev/python/docs/other-locators#intermediate-matches)

## Running Playwright Tests
[Skip to main content](https://playwright.dev/python/docs/running-tests#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/running-tests\#introduction "Direct link to Introduction")

You can run a single test, a set of tests or all tests. Tests can be run on one browser or multiple browsers by using the `--browser` flag. By default, tests are run in a headless manner, meaning no browser window will be opened while running the tests and results will be seen in the terminal. If you prefer, you can run your tests in headed mode by using the `--headed` CLI argument.

**You will learn**

- [How to run tests from the command line](https://playwright.dev/python/docs/running-tests#command-line)
- [How to debug tests](https://playwright.dev/python/docs/running-tests#debugging-tests)

## Running tests [​](https://playwright.dev/python/docs/running-tests\#running-tests "Direct link to Running tests")

### Command Line [​](https://playwright.dev/python/docs/running-tests\#command-line "Direct link to Command Line")

To run your tests, use the `pytest` command. This will run your tests on the Chromium browser by default. Tests run in headless mode by default meaning no browser window will be opened while running the tests and results will be seen in the terminal.

```codeBlockLines_e6Vv
pytest

```

### Run tests in headed mode [​](https://playwright.dev/python/docs/running-tests\#run-tests-in-headed-mode "Direct link to Run tests in headed mode")

To run your tests in headed mode, use the `--headed` flag. This will open up a browser window while running your tests and once finished the browser window will close.

```codeBlockLines_e6Vv
pytest --headed

```

### Run tests on different browsers [​](https://playwright.dev/python/docs/running-tests\#run-tests-on-different-browsers "Direct link to Run tests on different browsers")

To specify which browser you would like to run your tests on, use the `--browser` flag followed by the name of the browser.

```codeBlockLines_e6Vv
pytest --browser webkit

```

To specify multiple browsers to run your tests on, use the `--browser` flag multiple times followed by the name of each browser.

```codeBlockLines_e6Vv
pytest --browser webkit --browser firefox

```

### Run specific tests [​](https://playwright.dev/python/docs/running-tests\#run-specific-tests "Direct link to Run specific tests")

To run a single test file, pass in the name of the test file that you want to run.

```codeBlockLines_e6Vv
pytest test_login.py

```

To run a set of test files, pass in the names of the test files that you want to run.

```codeBlockLines_e6Vv
pytest tests/test_todo_page.py tests/test_landing_page.py

```

To run a specific test, pass in the function name of the test you want to run.

```codeBlockLines_e6Vv
pytest -k test_add_a_todo_item

```

### Run tests in parallel [​](https://playwright.dev/python/docs/running-tests\#run-tests-in-parallel "Direct link to Run tests in parallel")

To run your tests in parallel, use the `--numprocesses` flag followed by the number of processes you would like to run your tests on. We recommend half of logical CPU cores.

```codeBlockLines_e6Vv
pytest --numprocesses 2

```

(This assumes `pytest-xdist` is installed. For more information see [here](https://playwright.dev/python/docs/test-runners#parallelism-running-multiple-tests-at-once).)

For more information, see [Playwright Pytest usage](https://playwright.dev/python/docs/test-runners) or the Pytest documentation for [general CLI usage](https://docs.pytest.org/en/stable/usage.html).

## Debugging tests [​](https://playwright.dev/python/docs/running-tests\#debugging-tests "Direct link to Debugging tests")

Since Playwright runs in Python, you can debug it with your debugger of choice, e.g., with the [Python extension](https://code.visualstudio.com/docs/python/python-tutorial) in Visual Studio Code. Playwright comes with the Playwright Inspector which allows you to step through Playwright API calls, see their debug logs and explore [locators](https://playwright.dev/python/docs/locators).

To debug all tests, run the following command.

- Bash
- PowerShell
- Batch

```codeBlockLines_e6Vv
PWDEBUG=1 pytest -s

```

```codeBlockLines_e6Vv
$env:PWDEBUG=1
pytest -s

```

```codeBlockLines_e6Vv
set PWDEBUG=1
pytest -s

```

To debug one test file, run the command followed by the name of the test file that you want to debug.

- Bash
- PowerShell
- Batch

```codeBlockLines_e6Vv
PWDEBUG=1 pytest -s test_example.py

```

```codeBlockLines_e6Vv
$env:PWDEBUG=1
pytest -s test_example.py

```

```codeBlockLines_e6Vv
set PWDEBUG=1
pytest -s test_example.py

```

To debug a specific test, add `-k` followed by the name of the test that you want to debug.

- Bash
- PowerShell
- Batch

```codeBlockLines_e6Vv
PWDEBUG=1 pytest -s -k test_get_started_link

```

```codeBlockLines_e6Vv
$env:PWDEBUG=1
pytest -s -k test_get_started_link

```

```codeBlockLines_e6Vv
set PWDEBUG=1
pytest -s -k test_get_started_link

```

This command will open up a Browser window as well as the Playwright Inspector. You can use the step over button at the top of the inspector to step through your test. Or press the play button to run your test from start to finish. Once the test has finished, the browser window will close.

While debugging you can use the Pick Locator button to select an element on the page and see the locator that Playwright would use to find that element. You can also edit the locator and see it highlighting live on the Browser window. Use the Copy Locator button to copy the locator to your clipboard and then paste it into your test.

![Playwright Inspector](https://github.com/microsoft/playwright/assets/13063165/c94c89c8-f945-460c-a653-7809c6ca50ee)

Check out our [debugging guide](https://playwright.dev/python/docs/debug) to learn more about the [Playwright Inspector](https://playwright.dev/python/docs/debug#playwright-inspector) as well as debugging with [Browser Developer tools](https://playwright.dev/python/docs/debug#browser-developer-tools).

## What's next [​](https://playwright.dev/python/docs/running-tests\#whats-next "Direct link to What's next")

- [Generate tests with Codegen](https://playwright.dev/python/docs/codegen)
- [See a trace of your tests](https://playwright.dev/python/docs/trace-viewer-intro)
- [Run your tests on CI with GitHub Actions](https://playwright.dev/python/docs/ci-intro)

- [Introduction](https://playwright.dev/python/docs/running-tests#introduction)
- [Running tests](https://playwright.dev/python/docs/running-tests#running-tests)
  - [Command Line](https://playwright.dev/python/docs/running-tests#command-line)
  - [Run tests in headed mode](https://playwright.dev/python/docs/running-tests#run-tests-in-headed-mode)
  - [Run tests on different browsers](https://playwright.dev/python/docs/running-tests#run-tests-on-different-browsers)
  - [Run specific tests](https://playwright.dev/python/docs/running-tests#run-specific-tests)
  - [Run tests in parallel](https://playwright.dev/python/docs/running-tests#run-tests-in-parallel)
- [Debugging tests](https://playwright.dev/python/docs/running-tests#debugging-tests)
- [What's next](https://playwright.dev/python/docs/running-tests#whats-next)

## Playwright CI Setup
[Skip to main content](https://playwright.dev/python/docs/ci-intro#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/ci-intro\#introduction "Direct link to Introduction")

Playwright tests can be run on any CI provider. In this section we will cover running tests on GitHub using GitHub actions. If you would like to see how to configure other CI providers check out our detailed doc on Continuous Integration.

#### You will learn [​](https://playwright.dev/python/docs/ci-intro\#you-will-learn "Direct link to You will learn")

- [How to set up GitHub Actions](https://playwright.dev/python/docs/ci-intro#setting-up-github-actions)
- [How to view test logs](https://playwright.dev/python/docs/ci-intro#viewing-test-logs)
- [How to view the trace](https://playwright.dev/python/docs/ci-intro#viewing-the-trace)

## Setting up GitHub Actions [​](https://playwright.dev/python/docs/ci-intro\#setting-up-github-actions "Direct link to Setting up GitHub Actions")

To add a [GitHub Actions](https://docs.github.com/en/actions) file first create `.github/workflows` folder and inside it add a `playwright.yml` file containing the example code below so that your tests will run on each push and pull request for the main/master branch.

.github/workflows/playwright.yml

```codeBlockLines_e6Vv
name: Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Ensure browsers are installed
      run: python -m playwright install --with-deps
    - name: Run your tests
      run: pytest --tracing=retain-on-failure
    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-traces
        path: test-results/

```

To learn more about this, see ["Understanding GitHub Actions"](https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions).

Looking at the list of steps in `jobs.test.steps`, you can see that the workflow performs these steps:

1. Clone your repository 2. Install language dependencies 3. Install project dependencies and build 4. Install Playwright Browsers 5. Run tests

## Create a Repo and Push to GitHub [​](https://playwright.dev/python/docs/ci-intro\#create-a-repo-and-push-to-github "Direct link to Create a Repo and Push to GitHub")

Once you have your [GitHub actions workflow](https://playwright.dev/python/docs/ci-intro#setting-up-github-actions) setup then all you need to do is [Create a repo on GitHub](https://docs.github.com/en/get-started/quickstart/create-a-repo) or push your code to an existing repository. Follow the instructions on GitHub and don't forget to [initialize a git repository](https://github.com/git-guides/git-init) using the `git init` command so you can [add](https://github.com/git-guides/git-add), [commit](https://github.com/git-guides/git-commit) and [push](https://github.com/git-guides/git-push) your code.

![Create a Repo and Push to GitHub](https://user-images.githubusercontent.com/13063165/183423254-d2735278-a2ab-4d63-bb99-48d8e5e447bc.png)

## Opening the Workflows [​](https://playwright.dev/python/docs/ci-intro\#opening-the-workflows "Direct link to Opening the Workflows")

Click on the **Actions** tab to see the workflows. Here you will see if your tests have passed or failed.

###### [​](https://playwright.dev/python/docs/ci-intro\#-1 "Direct link to -1")

![opening the workflow](https://user-images.githubusercontent.com/13063165/183423783-58bf2008-514e-4f96-9c12-c9a55703960c.png)

## Viewing Test Logs [​](https://playwright.dev/python/docs/ci-intro\#viewing-test-logs "Direct link to Viewing Test Logs")

Clicking on the workflow run will show you the all the actions that GitHub performed and clicking on **Run Playwright tests** will show the error messages, what was expected and what was received as well as the call log.

###### [​](https://playwright.dev/python/docs/ci-intro\#-2 "Direct link to -2")

![Viewing Test Logs](https://user-images.githubusercontent.com/13063165/183423783-58bf2008-514e-4f96-9c12-c9a55703960c.png)

## Viewing the Trace [​](https://playwright.dev/python/docs/ci-intro\#viewing-the-trace "Direct link to Viewing the Trace")

[trace.playwright.dev](https://trace.playwright.dev/) is a statically hosted variant of the Trace Viewer. You can upload trace files using drag and drop.

![playwright trace viewer](https://github.com/microsoft/playwright/assets/13063165/6d5885dc-d511-4c20-b728-040a7ef6cea4)

## What's Next [​](https://playwright.dev/python/docs/ci-intro\#whats-next "Direct link to What's Next")

- [Learn how to use Locators](https://playwright.dev/python/docs/locators)
- [Learn how to perform Actions](https://playwright.dev/python/docs/input)
- [Learn how to write Assertions](https://playwright.dev/python/docs/test-assertions)
- [Learn more about the Trace Viewer](https://playwright.dev/python/docs/trace-viewer)
- [Learn more ways of running tests on GitHub Actions](https://playwright.dev/python/docs/ci#github-actions)
- [Learn more about running tests on other CI providers](https://playwright.dev/python/docs/ci)

- [Introduction](https://playwright.dev/python/docs/ci-intro#introduction)
- [Setting up GitHub Actions](https://playwright.dev/python/docs/ci-intro#setting-up-github-actions)
- [Create a Repo and Push to GitHub](https://playwright.dev/python/docs/ci-intro#create-a-repo-and-push-to-github)
- [Opening the Workflows](https://playwright.dev/python/docs/ci-intro#opening-the-workflows)
- [Viewing Test Logs](https://playwright.dev/python/docs/ci-intro#viewing-test-logs)
- [Viewing the Trace](https://playwright.dev/python/docs/ci-intro#viewing-the-trace)
- [What's Next](https://playwright.dev/python/docs/ci-intro#whats-next)

## Touch Events Testing
[Skip to main content](https://playwright.dev/python/docs/touch-events#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/touch-events\#introduction "Direct link to Introduction")

Web applications that handle legacy [touch events](https://developer.mozilla.org/en-US/docs/Web/API/Touch_events) to respond to gestures like swipe, pinch, and tap can be tested by manually dispatching [TouchEvent](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/TouchEvent) s to the page. The examples below demonstrate how to use [locator.dispatch\_event()](https://playwright.dev/python/docs/api/class-locator#locator-dispatch-event) and pass [Touch](https://developer.mozilla.org/en-US/docs/Web/API/Touch) points as arguments.

### Emulating pan gesture [​](https://playwright.dev/python/docs/touch-events\#emulating-pan-gesture "Direct link to Emulating pan gesture")

In the example below, we emulate pan gesture that is expected to move the map. The app under test only uses `clientX/clientY` coordinates of the touch point, so we initialize just that. In a more complex scenario you may need to also set `pageX/pageY/screenX/screenY`, if your app needs them.

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright, expect

def pan(locator, deltaX=0, deltaY=0, steps=5):
    bounds = locator.bounding_box()
    centerX = bounds['x'] + bounds['width'] / 2
    centerY = bounds['y'] + bounds['height'] / 2

    touches = [{\
        'identifier': 0,\
        'clientX': centerX,\
        'clientY': centerY,\
    }]
    locator.dispatch_event('touchstart', {
        'touches': touches,
        'changedTouches': touches,
        'targetTouches': touches
    })

    for i in range(1, steps + 1):
        touches = [{\
            'identifier': 0,\
            'clientX': centerX + deltaX * i / steps,\
            'clientY': centerY + deltaY * i / steps,\
        }]
        locator.dispatch_event('touchmove', {
            'touches': touches,
            'changedTouches': touches,
            'targetTouches': touches
        })

    locator.dispatch_event('touchend')

def test_pan_gesture_to_move_the_map(page):
    page.goto('https://www.google.com/maps/place/@37.4117722,-122.0713234,15z', wait_until='commit')
    page.get_by_role('button', name='Keep using web').click()
    expect(page.get_by_role('button', name='Keep using web')).not_to_be_visible()
    met = page.locator('[data-test-id="met"]')
    for _ in range(5):
        pan(met, 200, 100)
    page.screenshot(path="screenshot.png")

with sync_playwright() as p:
    browser = p.chromium.launch()
    context = browser.new_context(**p.devices['Pixel 7'])
    page = context.new_page()
    test_pan_gesture_to_move_the_map(page)
    browser.close()

```

```codeBlockLines_e6Vv
from playwright.async_api import async_playwright, expect

async def pan(locator, deltaX=0, deltaY=0, steps=5):
    bounds = await locator.bounding_box()
    centerX = bounds['x'] + bounds['width'] / 2
    centerY = bounds['y'] + bounds['height'] / 2

    touches = [{\
        'identifier': 0,\
        'clientX': centerX,\
        'clientY': centerY,\
    }]
    await locator.dispatch_event('touchstart', {
        'touches': touches,
        'changedTouches': touches,
        'targetTouches': touches
    })

    for i in range(1, steps + 1):
        touches = [{\
            'identifier': 0,\
            'clientX': centerX + deltaX * i / steps,\
            'clientY': centerY + deltaY * i / steps,\
        }]
        await locator.dispatch_event('touchmove', {
            'touches': touches,
            'changedTouches': touches,
            'targetTouches': touches
        })

    await locator.dispatch_event('touchend')

async def test_pan_gesture_to_move_the_map(page):
    await page.goto('https://www.google.com/maps/place/@37.4117722,-122.0713234,15z', wait_until='commit')
    await page.get_by_role('button', name='Keep using web').click()
    await expect(page.get_by_role('button', name='Keep using web')).not_to_be_visible()
    met = page.locator('[data-test-id="met"]')
    for _ in range(5):
        await pan(met, 200, 100)
    await page.screenshot(path="screenshot.png")

async def main():
    async with async_playwright() as p:
        browser = await p.chromium.launch()
        context = await browser.new_context(**p.devices['Pixel 7'])
        page = await context.new_page()
        await test_pan_gesture_to_move_the_map(page)
        await browser.close()

import asyncio
asyncio.run(main())

```

### Emulating pinch gesture [​](https://playwright.dev/python/docs/touch-events\#emulating-pinch-gesture "Direct link to Emulating pinch gesture")

In the example below, we emulate pinch gesture, i.e. two touch points moving closer to each other. It is expected to zoom out the map. The app under test only uses `clientX/clientY` coordinates of touch points, so we initialize just that. In a more complex scenario you may need to also set `pageX/pageY/screenX/screenY`, if your app needs them.

- Sync
- Async

```codeBlockLines_e6Vv
from playwright.sync_api import sync_playwright, expect

def pinch(locator, arg):
    bounds = locator.bounding_box()
    centerX = bounds['x'] + bounds['width'] / 2
    centerY = bounds['y'] + bounds['height'] / 2

    deltaX = arg.get('deltaX', 50)
    steps = arg.get('steps', 5)
    stepDeltaX = deltaX / (steps + 1)

    touches = [\
        {\
            'identifier': 0,\
            'clientX': centerX - (deltaX if arg.get('direction') == 'in' else stepDeltaX),\
            'clientY': centerY,\
        },\
        {\
            'identifier': 1,\
            'clientX': centerX + (deltaX if arg.get('direction') == 'in' else stepDeltaX),\
            'clientY': centerY,\
        },\
    ]
    locator.dispatch_event('touchstart', {
        'touches': touches,
        'changedTouches': touches,
        'targetTouches': touches
    })

    for i in range(1, steps + 1):
        offset = deltaX - i * stepDeltaX if arg.get('direction') == 'in' else stepDeltaX * (i + 1)
        touches = [\
            {\
                'identifier': 0,\
                'clientX': centerX - offset,\
                'clientY': centerY,\
            },\
            {\
                'identifier': 1,\
                'clientX': centerX + offset,\
                'clientY': centerY,\
            },\
        ]
        locator.dispatch_event('touchmove', {
            'touches': touches,
            'changedTouches': touches,
            'targetTouches': touches
        })

    locator.dispatch_event('touchend', {
        'touches': [],
        'changedTouches': [],
        'targetTouches': []
    })

def test_pinch_in_gesture_to_zoom_out_the_map(page):
    page.goto('https://www.google.com/maps/place/@37.4117722,-122.0713234,15z', wait_until='commit')
    page.get_by_role('button', name='Keep using web').click()
    expect(page.get_by_role('button', name='Keep using web')).not_to_be_visible()
    met = page.locator('[data-test-id="met"]')
    for _ in range(5):
        pinch(met, {'deltaX': 40, 'direction': 'in'})
    page.screenshot(path="screenshot.png")

with sync_playwright() as p:
    browser = p.chromium.launch()
    context = browser.new_context(**p.devices['Pixel 7'])
    page = context.new_page()
    test_pinch_in_gesture_to_zoom_out_the_map(page)
    browser.close()

```

```codeBlockLines_e6Vv
from playwright.async_api import async_playwright, expect

async def pinch(locator, arg):
    bounds = await locator.bounding_box()
    centerX = bounds['x'] + bounds['width'] / 2
    centerY = bounds['y'] + bounds['height'] / 2

    deltaX = arg.get('deltaX', 50)
    steps = arg.get('steps', 5)
    stepDeltaX = deltaX / (steps + 1)

    touches = [\
        {\
            'identifier': 0,\
            'clientX': centerX - (deltaX if arg.get('direction') == 'in' else stepDeltaX),\
            'clientY': centerY,\
        },\
        {\
            'identifier': 1,\
            'clientX': centerX + (deltaX if arg.get('direction') == 'in' else stepDeltaX),\
            'clientY': centerY,\
        },\
    ]
    await locator.dispatch_event('touchstart', {
        'touches': touches,
        'changedTouches': touches,
        'targetTouches': touches
    })

    for i in range(1, steps + 1):
        offset = deltaX - i * stepDeltaX if arg.get('direction') == 'in' else stepDeltaX * (i + 1)
        touches = [\
            {\
                'identifier': 0,\
                'clientX': centerX - offset,\
                'clientY': centerY,\
            },\
            {\
                'identifier': 1,\
                'clientX': centerX + offset,\
                'clientY': centerY,\
            },\
        ]
        await locator.dispatch_event('touchmove', {
            'touches': touches,
            'changedTouches': touches,
            'targetTouches': touches
        })

    await locator.dispatch_event('touchend', {
        'touches': [],
        'changedTouches': [],
        'targetTouches': []
    })

async def test_pinch_in_gesture_to_zoom_out_the_map(page):
    await page.goto('https://www.google.com/maps/place/@37.4117722,-122.0713234,15z', wait_until='commit')
    await page.get_by_role('button', name='Keep using web').click()
    await expect(page.get_by_role('button', name='Keep using web')).not_to_be_visible()
    met = page.locator('[data-test-id="met"]')
    for _ in range(5):
        await pinch(met, {'deltaX': 40, 'direction': 'in'})
    await page.screenshot(path="screenshot.png")

async def main():
    async with async_playwright() as p:
        browser = await p.chromium.launch()
        context = await browser.new_context(**p.devices['Pixel 7'])
        page = await context.new_page()
        await test_pinch_in_gesture_to_zoom_out_the_map(page)
        await browser.close()

import asyncio
asyncio.run(main())

```

- [Introduction](https://playwright.dev/python/docs/touch-events#introduction)
  - [Emulating pan gesture](https://playwright.dev/python/docs/touch-events#emulating-pan-gesture)
  - [Emulating pinch gesture](https://playwright.dev/python/docs/touch-events#emulating-pinch-gesture)

## Playwright Test Runners
[Skip to main content](https://playwright.dev/python/docs/test-runners#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/test-runners\#introduction "Direct link to Introduction")

Playwright provides a [Pytest](https://docs.pytest.org/en/stable/) plugin to write end-to-end tests. To get started with it, refer to the [getting started guide](https://playwright.dev/python/docs/intro).

## Usage [​](https://playwright.dev/python/docs/test-runners\#usage "Direct link to Usage")

To run your tests, use [Pytest](https://docs.pytest.org/en/stable/) CLI.

```codeBlockLines_e6Vv
pytest --browser webkit --headed

```

If you want to add the CLI arguments automatically without specifying them, you can use the [pytest.ini](https://docs.pytest.org/en/stable/reference.html#ini-options-ref) file:

```codeBlockLines_e6Vv
# content of pytest.ini
[pytest]
# Run firefox with UI
addopts = --headed --browser firefox

```

## CLI arguments [​](https://playwright.dev/python/docs/test-runners\#cli-arguments "Direct link to CLI arguments")

Note that CLI arguments are only applied to the default `browser`, `context` and `page` fixtures. If you create a browser, a context or a page with the API call like [browser.new\_context()](https://playwright.dev/python/docs/api/class-browser#browser-new-context), the CLI arguments are not applied.

- `--headed`: Run tests in headed mode (default: headless).
- `--browser`: Run tests in a different browser `chromium`, `firefox`, or `webkit`. It can be specified multiple times (default: `chromium`).
- `--browser-channel` [Browser channel](https://playwright.dev/python/docs/browsers) to be used.
- `--slowmo` Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going on (default: 0).
- `--device` [Device](https://playwright.dev/python/docs/emulation) to be emulated.
- `--output` Directory for artifacts produced by tests (default: `test-results`).
- `--tracing` Whether to record a [trace](https://playwright.dev/python/docs/trace-viewer) for each test. `on`, `off`, or `retain-on-failure` (default: `off`).
- `--video` Whether to record video for each test. `on`, `off`, or `retain-on-failure` (default: `off`).
- `--screenshot` Whether to automatically capture a screenshot after each test. `on`, `off`, or `only-on-failure` (default: `off`).
- `--full-page-screenshot` Whether to take a full page screenshot on failure. By default, only the viewport is captured. Requires `--screenshot` to be enabled (default: `off`).

## Fixtures [​](https://playwright.dev/python/docs/test-runners\#fixtures "Direct link to Fixtures")

This plugin configures Playwright-specific [fixtures for pytest](https://docs.pytest.org/en/latest/fixture.html). To use these fixtures, use the fixture name as an argument to the test function.

```codeBlockLines_e6Vv
def test_my_app_is_working(fixture_name):
    pass
    # Test using fixture_name
    # ...

```

**Function scope**: These fixtures are created when requested in a test function and destroyed when the test ends.

- `context`: New [browser context](https://playwright.dev/python/docs/browser-contexts) for a test.
- `page`: New [browser page](https://playwright.dev/python/docs/pages) for a test.
- `new_context`: Allows creating different [browser contexts](https://playwright.dev/python/docs/browser-contexts) for a test. Useful for multi-user scenarios. Accepts the same parameters as [browser.new\_context()](https://playwright.dev/python/docs/api/class-browser#browser-new-context).

**Session scope**: These fixtures are created when requested in a test function and destroyed when all tests end.

- `playwright`: [Playwright](https://playwright.dev/python/docs/api/class-playwright) instance.
- `browser_type`: [BrowserType](https://playwright.dev/python/docs/api/class-browsertype) instance of the current browser.
- `browser`: [Browser](https://playwright.dev/python/docs/api/class-browser) instance launched by Playwright.
- `browser_name`: Browser name as string.
- `browser_channel`: Browser channel as string.
- `is_chromium`, `is_webkit`, `is_firefox`: Booleans for the respective browser types.

**Customizing fixture options**: For `browser` and `context` fixtures, use the following fixtures to define custom launch options.

- `browser_type_launch_args`: Override launch arguments for [browser\_type.launch()](https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch). It should return a Dict.
- `browser_context_args`: Override the options for [browser.new\_context()](https://playwright.dev/python/docs/api/class-browser#browser-new-context). It should return a Dict.

Its also possible to override the context options ( [browser.new\_context()](https://playwright.dev/python/docs/api/class-browser#browser-new-context)) for a single test by using the `browser_context_args` marker:

```codeBlockLines_e6Vv
import pytest

@pytest.mark.browser_context_args(timezone_id="Europe/Berlin", locale="en-GB")
def test_browser_context_args(page):
    assert page.evaluate("window.navigator.userAgent") == "Europe/Berlin"
    assert page.evaluate("window.navigator.languages") == ["de-DE"]

```

## Parallelism: Running Multiple Tests at Once [​](https://playwright.dev/python/docs/test-runners\#parallelism-running-multiple-tests-at-once "Direct link to Parallelism: Running Multiple Tests at Once")

If your tests are running on a machine with a lot of CPUs, you can speed up the overall execution time of your test suite by using [`pytest-xdist`](https://pypi.org/project/pytest-xdist/) to run multiple tests at once:

```codeBlockLines_e6Vv
# install dependency
pip install pytest-xdist
# use the --numprocesses flag
pytest --numprocesses auto

```

Depending on the hardware and nature of your tests, you can set `numprocesses` to be anywhere from `2` to the number of CPUs on the machine. If set too high, you may notice unexpected behavior.

See [Running Tests](https://playwright.dev/python/docs/running-tests) for general information on `pytest` options.

## Examples [​](https://playwright.dev/python/docs/test-runners\#examples "Direct link to Examples")

### Configure typings for auto-completion [​](https://playwright.dev/python/docs/test-runners\#configure-typings-for-auto-completion "Direct link to Configure typings for auto-completion")

test\_my\_application.py

```codeBlockLines_e6Vv
from playwright.sync_api import Page

def test_visit_admin_dashboard(page: Page):
    page.goto("/admin")
    # ...

```

If you're using VSCode with Pylance, these types can be inferred by enabling the `python.testing.pytestEnabled` setting so you don't need the type annotation.

### Using multiple contexts [​](https://playwright.dev/python/docs/test-runners\#using-multiple-contexts "Direct link to Using multiple contexts")

In order to simulate multiple users, you can create multiple [`BrowserContext`](https://playwright.dev/python/docs/browser-contexts) instances.

test\_my\_application.py

```codeBlockLines_e6Vv
from playwright.sync_api import Page, BrowserContext
from pytest_playwright.pytest_playwright import CreateContextCallback

def test_foo(page: Page, new_context: CreateContextCallback) -> None:
    page.goto("https://example.com")
    context = new_context()
    page2 = context.new_page()
    # page and page2 are in different contexts

```

### Skip test by browser [​](https://playwright.dev/python/docs/test-runners\#skip-test-by-browser "Direct link to Skip test by browser")

test\_my\_application.py

```codeBlockLines_e6Vv
import pytest

@pytest.mark.skip_browser("firefox")
def test_visit_example(page):
    page.goto("https://example.com")
    # ...

```

### Run on a specific browser [​](https://playwright.dev/python/docs/test-runners\#run-on-a-specific-browser "Direct link to Run on a specific browser")

conftest.py

```codeBlockLines_e6Vv
import pytest

@pytest.mark.only_browser("chromium")
def test_visit_example(page):
    page.goto("https://example.com")
    # ...

```

### Run with a custom browser channel like Google Chrome or Microsoft Edge [​](https://playwright.dev/python/docs/test-runners\#run-with-a-custom-browser-channel-like-google-chrome-or-microsoft-edge "Direct link to Run with a custom browser channel like Google Chrome or Microsoft Edge")

```codeBlockLines_e6Vv
pytest --browser-channel chrome

```

test\_my\_application.py

```codeBlockLines_e6Vv
def test_example(page):
    page.goto("https://example.com")

```

### Configure base-url [​](https://playwright.dev/python/docs/test-runners\#configure-base-url "Direct link to Configure base-url")

Start Pytest with the `base-url` argument. The [`pytest-base-url`](https://github.com/pytest-dev/pytest-base-url) plugin is used for that which allows you to set the base url from the config, CLI arg or as a fixture.

```codeBlockLines_e6Vv
pytest --base-url http://localhost:8080

```

test\_my\_application.py

```codeBlockLines_e6Vv
def test_visit_example(page):
    page.goto("/admin")
    # -> Will result in http://localhost:8080/admin

```

### Ignore HTTPS errors [​](https://playwright.dev/python/docs/test-runners\#ignore-https-errors "Direct link to Ignore HTTPS errors")

conftest.py

```codeBlockLines_e6Vv
import pytest

@pytest.fixture(scope="session")
def browser_context_args(browser_context_args):
    return {
        **browser_context_args,
        "ignore_https_errors": True
    }

```

### Use custom viewport size [​](https://playwright.dev/python/docs/test-runners\#use-custom-viewport-size "Direct link to Use custom viewport size")

conftest.py

```codeBlockLines_e6Vv
import pytest

@pytest.fixture(scope="session")
def browser_context_args(browser_context_args):
    return {
        **browser_context_args,
        "viewport": {
            "width": 1920,
            "height": 1080,
        }
    }

```

### Device emulation / BrowserContext option overrides [​](https://playwright.dev/python/docs/test-runners\#device-emulation--browsercontext-option-overrides "Direct link to Device emulation / BrowserContext option overrides")

conftest.py

```codeBlockLines_e6Vv
import pytest

@pytest.fixture(scope="session")
def browser_context_args(browser_context_args, playwright):
    iphone_11 = playwright.devices['iPhone 11 Pro']
    return {
        **browser_context_args,
        **iphone_11,
    }

```

Or via the CLI `--device="iPhone 11 Pro"`

### Using with `unittest.TestCase` [​](https://playwright.dev/python/docs/test-runners\#using-with-unittesttestcase "Direct link to using-with-unittesttestcase")

See the following example for using it with `unittest.TestCase`. This has a limitation, that only a single browser can be specified and no matrix of multiple browsers gets generated when specifying multiple.

```codeBlockLines_e6Vv
import pytest
import unittest

from playwright.sync_api import Page

class MyTest(unittest.TestCase):
    @pytest.fixture(autouse=True)
    def setup(self, page: Page):
        self.page = page

    def test_foobar(self):
        self.page.goto("https://microsoft.com")
        self.page.locator("#foobar").click()
        assert self.page.evaluate("1 + 1") == 2

```

## Debugging [​](https://playwright.dev/python/docs/test-runners\#debugging "Direct link to Debugging")

### Use with pdb [​](https://playwright.dev/python/docs/test-runners\#use-with-pdb "Direct link to Use with pdb")

Use the `breakpoint()` statement in your test code to pause execution and get a [pdb](https://docs.python.org/3/library/pdb.html) REPL.

```codeBlockLines_e6Vv
def test_bing_is_working(page):
    page.goto("https://bing.com")
    breakpoint()
    # ...

```

## Deploy to CI [​](https://playwright.dev/python/docs/test-runners\#deploy-to-ci "Direct link to Deploy to CI")

See the [guides for CI providers](https://playwright.dev/python/docs/ci) to deploy your tests to CI/CD.

## Async Fixtures [​](https://playwright.dev/python/docs/test-runners\#async-fixtures "Direct link to Async Fixtures")

If you want to use async fixtures, you can use the [`pytest-playwright-asyncio`](https://pypi.org/project/pytest-playwright-asyncio/) plugin. Make sure to use `pytest-asyncio>=0.24.0` and make your tests use of [`loop_scope=session`](https://pytest-asyncio.readthedocs.io/en/latest/how-to-guides/run_session_tests_in_same_loop.html).

```codeBlockLines_e6Vv
import pytest
from playwright.async_api import Page

@pytest.mark.asyncio(loop_scope="session")
async def test_foo(page: Page):
    await page.goto("https://github.com")
    # ...

```

- [Introduction](https://playwright.dev/python/docs/test-runners#introduction)
- [Usage](https://playwright.dev/python/docs/test-runners#usage)
- [CLI arguments](https://playwright.dev/python/docs/test-runners#cli-arguments)
- [Fixtures](https://playwright.dev/python/docs/test-runners#fixtures)
- [Parallelism: Running Multiple Tests at Once](https://playwright.dev/python/docs/test-runners#parallelism-running-multiple-tests-at-once)
- [Examples](https://playwright.dev/python/docs/test-runners#examples)
  - [Configure typings for auto-completion](https://playwright.dev/python/docs/test-runners#configure-typings-for-auto-completion)
  - [Using multiple contexts](https://playwright.dev/python/docs/test-runners#using-multiple-contexts)
  - [Skip test by browser](https://playwright.dev/python/docs/test-runners#skip-test-by-browser)
  - [Run on a specific browser](https://playwright.dev/python/docs/test-runners#run-on-a-specific-browser)
  - [Run with a custom browser channel like Google Chrome or Microsoft Edge](https://playwright.dev/python/docs/test-runners#run-with-a-custom-browser-channel-like-google-chrome-or-microsoft-edge)
  - [Configure base-url](https://playwright.dev/python/docs/test-runners#configure-base-url)
  - [Ignore HTTPS errors](https://playwright.dev/python/docs/test-runners#ignore-https-errors)
  - [Use custom viewport size](https://playwright.dev/python/docs/test-runners#use-custom-viewport-size)
  - [Device emulation / BrowserContext option overrides](https://playwright.dev/python/docs/test-runners#device-emulation--browsercontext-option-overrides)
  - [Using with `unittest.TestCase`](https://playwright.dev/python/docs/test-runners#using-with-unittesttestcase)
- [Debugging](https://playwright.dev/python/docs/test-runners#debugging)
  - [Use with pdb](https://playwright.dev/python/docs/test-runners#use-with-pdb)
- [Deploy to CI](https://playwright.dev/python/docs/test-runners#deploy-to-ci)
- [Async Fixtures](https://playwright.dev/python/docs/test-runners#async-fixtures)

## API Testing with Playwright
[Skip to main content](https://playwright.dev/python/docs/api-testing#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/api-testing\#introduction "Direct link to Introduction")

Playwright can be used to get access to the [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API of your application.

Sometimes you may want to send requests to the server directly from Python without loading a page and running js code in it. A few examples where it may come in handy:

- Test your server API.
- Prepare server side state before visiting the web application in a test.
- Validate server side post-conditions after running some actions in the browser.

All of that could be achieved via [APIRequestContext](https://playwright.dev/python/docs/api/class-apirequestcontext "APIRequestContext") methods.

The following examples rely on the [`pytest-playwright`](https://playwright.dev/python/docs/test-runners) package which add Playwright fixtures to the Pytest test-runner.

## Writing API Test [​](https://playwright.dev/python/docs/api-testing\#writing-api-test "Direct link to Writing API Test")

[APIRequestContext](https://playwright.dev/python/docs/api/class-apirequestcontext "APIRequestContext") can send all kinds of HTTP(S) requests over network.

The following example demonstrates how to use Playwright to test issues creation via [GitHub API](https://docs.github.com/en/rest). The test suite will do the following:

- Create a new repository before running tests.
- Create a few issues and validate server state.
- Delete the repository after running tests.

### Configure [​](https://playwright.dev/python/docs/api-testing\#configure "Direct link to Configure")

GitHub API requires authorization, so we'll configure the token once for all tests. While at it, we'll also set the `baseURL` to simplify the tests.

```codeBlockLines_e6Vv
import os
from typing import Generator

import pytest
from playwright.sync_api import Playwright, APIRequestContext

GITHUB_API_TOKEN = os.getenv("GITHUB_API_TOKEN")
assert GITHUB_API_TOKEN, "GITHUB_API_TOKEN is not set"

@pytest.fixture(scope="session")
def api_request_context(
    playwright: Playwright,
) -> Generator[APIRequestContext, None, None]:
    headers = {
        # We set this header per GitHub guidelines.
        "Accept": "application/vnd.github.v3+json",
        # Add authorization token to all requests.
        # Assuming personal access token available in the environment.
        "Authorization": f"token {GITHUB_API_TOKEN}",
    }
    request_context = playwright.request.new_context(
        base_url="https://api.github.com", extra_http_headers=headers
    )
    yield request_context
    request_context.dispose()

```

### Write tests [​](https://playwright.dev/python/docs/api-testing\#write-tests "Direct link to Write tests")

Now that we initialized request object we can add a few tests that will create new issues in the repository.

```codeBlockLines_e6Vv
import os
from typing import Generator

import pytest
from playwright.sync_api import Playwright, APIRequestContext

GITHUB_API_TOKEN = os.getenv("GITHUB_API_TOKEN")
assert GITHUB_API_TOKEN, "GITHUB_API_TOKEN is not set"

GITHUB_USER = os.getenv("GITHUB_USER")
assert GITHUB_USER, "GITHUB_USER is not set"

GITHUB_REPO = "test"

# ...

def test_should_create_bug_report(api_request_context: APIRequestContext) -> None:
    data = {
        "title": "[Bug] report 1",
        "body": "Bug description",
    }
    new_issue = api_request_context.post(f"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues", data=data)
    assert new_issue.ok

    issues = api_request_context.get(f"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues")
    assert issues.ok
    issues_response = issues.json()
    issue = list(filter(lambda issue: issue["title"] == "[Bug] report 1", issues_response))[0]
    assert issue
    assert issue["body"] == "Bug description"

def test_should_create_feature_request(api_request_context: APIRequestContext) -> None:
    data = {
        "title": "[Feature] request 1",
        "body": "Feature description",
    }
    new_issue = api_request_context.post(f"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues", data=data)
    assert new_issue.ok

    issues = api_request_context.get(f"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues")
    assert issues.ok
    issues_response = issues.json()
    issue = list(filter(lambda issue: issue["title"] == "[Feature] request 1", issues_response))[0]
    assert issue
    assert issue["body"] == "Feature description"

```

### Setup and teardown [​](https://playwright.dev/python/docs/api-testing\#setup-and-teardown "Direct link to Setup and teardown")

These tests assume that repository exists. You probably want to create a new one before running tests and delete it afterwards. Use a [session fixture](https://docs.pytest.org/en/stable/fixture.html#fixture-scopes) for that. The part before `yield` is the before all and after is the after all.

```codeBlockLines_e6Vv
# ...
@pytest.fixture(scope="session", autouse=True)
def create_test_repository(
    api_request_context: APIRequestContext,
) -> Generator[None, None, None]:
    # Before all
    new_repo = api_request_context.post("/user/repos", data={"name": GITHUB_REPO})
    assert new_repo.ok
    yield
    # After all
    deleted_repo = api_request_context.delete(f"/repos/{GITHUB_USER}/{GITHUB_REPO}")
    assert deleted_repo.ok

```

### Complete test example [​](https://playwright.dev/python/docs/api-testing\#complete-test-example "Direct link to Complete test example")

Here is the complete example of an API test:

```codeBlockLines_e6Vv
from enum import auto
import os
from typing import Generator

import pytest
from playwright.sync_api import Playwright, Page, APIRequestContext, expect

GITHUB_API_TOKEN = os.getenv("GITHUB_API_TOKEN")
assert GITHUB_API_TOKEN, "GITHUB_API_TOKEN is not set"

GITHUB_USER = os.getenv("GITHUB_USER")
assert GITHUB_USER, "GITHUB_USER is not set"

GITHUB_REPO = "test"

@pytest.fixture(scope="session")
def api_request_context(
    playwright: Playwright,
) -> Generator[APIRequestContext, None, None]:
    headers = {
        # We set this header per GitHub guidelines.
        "Accept": "application/vnd.github.v3+json",
        # Add authorization token to all requests.
        # Assuming personal access token available in the environment.
        "Authorization": f"token {GITHUB_API_TOKEN}",
    }
    request_context = playwright.request.new_context(
        base_url="https://api.github.com", extra_http_headers=headers
    )
    yield request_context
    request_context.dispose()

@pytest.fixture(scope="session", autouse=True)
def create_test_repository(
    api_request_context: APIRequestContext,
) -> Generator[None, None, None]:
    # Before all
    new_repo = api_request_context.post("/user/repos", data={"name": GITHUB_REPO})
    assert new_repo.ok
    yield
    # After all
    deleted_repo = api_request_context.delete(f"/repos/{GITHUB_USER}/{GITHUB_REPO}")
    assert deleted_repo.ok

def test_should_create_bug_report(api_request_context: APIRequestContext) -> None:
    data = {
        "title": "[Bug] report 1",
        "body": "Bug description",
    }
    new_issue = api_request_context.post(
        f"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues", data=data
    )
    assert new_issue.ok

    issues = api_request_context.get(f"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues")
    assert issues.ok
    issues_response = issues.json()
    issue = list(
        filter(lambda issue: issue["title"] == "[Bug] report 1", issues_response)
    )[0]
    assert issue
    assert issue["body"] == "Bug description"

def test_should_create_feature_request(api_request_context: APIRequestContext) -> None:
    data = {
        "title": "[Feature] request 1",
        "body": "Feature description",
    }
    new_issue = api_request_context.post(
        f"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues", data=data
    )
    assert new_issue.ok

    issues = api_request_context.get(f"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues")
    assert issues.ok
    issues_response = issues.json()
    issue = list(
        filter(lambda issue: issue["title"] == "[Feature] request 1", issues_response)
    )[0]
    assert issue
    assert issue["body"] == "Feature description"

```

## Prepare server state via API calls [​](https://playwright.dev/python/docs/api-testing\#prepare-server-state-via-api-calls "Direct link to Prepare server state via API calls")

The following test creates a new issue via API and then navigates to the list of all issues in the project to check that it appears at the top of the list. The check is performed using [LocatorAssertions](https://playwright.dev/python/docs/api/class-locatorassertions "LocatorAssertions").

```codeBlockLines_e6Vv
def test_last_created_issue_should_be_first_in_the_list(api_request_context: APIRequestContext, page: Page) -> None:
    def create_issue(title: str) -> None:
        data = {
            "title": title,
            "body": "Feature description",
        }
        new_issue = api_request_context.post(
            f"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues", data=data
        )
        assert new_issue.ok
    create_issue("[Feature] request 1")
    create_issue("[Feature] request 2")
    page.goto(f"https://github.com/{GITHUB_USER}/{GITHUB_REPO}/issues")
    first_issue = page.locator("a[data-hovercard-type='issue']").first
    expect(first_issue).to_have_text("[Feature] request 2")

```

## Check the server state after running user actions [​](https://playwright.dev/python/docs/api-testing\#check-the-server-state-after-running-user-actions "Direct link to Check the server state after running user actions")

The following test creates a new issue via user interface in the browser and then checks via API if it was created:

```codeBlockLines_e6Vv
def test_last_created_issue_should_be_on_the_server(api_request_context: APIRequestContext, page: Page) -> None:
    page.goto(f"https://github.com/{GITHUB_USER}/{GITHUB_REPO}/issues")
    page.locator("text=New issue").click()
    page.locator("[aria-label='Title']").fill("Bug report 1")
    page.locator("[aria-label='Comment body']").fill("Bug description")
    page.locator("text=Submit new issue").click()
    issue_id = page.url.split("/")[-1]

    new_issue = api_request_context.get(f"https://github.com/{GITHUB_USER}/{GITHUB_REPO}/issues/{issue_id}")
    assert new_issue.ok
    assert new_issue.json()["title"] == "[Bug] report 1"
    assert new_issue.json()["body"] == "Bug description"

```

## Reuse authentication state [​](https://playwright.dev/python/docs/api-testing\#reuse-authentication-state "Direct link to Reuse authentication state")

Web apps use cookie-based or token-based authentication, where authenticated state is stored as [cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies). Playwright provides [api\_request\_context.storage\_state()](https://playwright.dev/python/docs/api/class-apirequestcontext#api-request-context-storage-state) method that can be used to retrieve storage state from an authenticated context and then create new contexts with that state.

Storage state is interchangeable between [BrowserContext](https://playwright.dev/python/docs/api/class-browsercontext "BrowserContext") and [APIRequestContext](https://playwright.dev/python/docs/api/class-apirequestcontext "APIRequestContext"). You can use it to log in via API calls and then create a new context with cookies already there. The following code snippet retrieves state from an authenticated [APIRequestContext](https://playwright.dev/python/docs/api/class-apirequestcontext "APIRequestContext") and creates a new [BrowserContext](https://playwright.dev/python/docs/api/class-browsercontext "BrowserContext") with that state.

```codeBlockLines_e6Vv
request_context = playwright.request.new_context(http_credentials={"username": "test", "password": "test"})
request_context.get("https://api.example.com/login")
# Save storage state into a variable.
state = request_context.storage_state()

# Create a new context with the saved storage state.
context = browser.new_context(storage_state=state)

```

- [Introduction](https://playwright.dev/python/docs/api-testing#introduction)
- [Writing API Test](https://playwright.dev/python/docs/api-testing#writing-api-test)
  - [Configure](https://playwright.dev/python/docs/api-testing#configure)
  - [Write tests](https://playwright.dev/python/docs/api-testing#write-tests)
  - [Setup and teardown](https://playwright.dev/python/docs/api-testing#setup-and-teardown)
  - [Complete test example](https://playwright.dev/python/docs/api-testing#complete-test-example)
- [Prepare server state via API calls](https://playwright.dev/python/docs/api-testing#prepare-server-state-via-api-calls)
- [Check the server state after running user actions](https://playwright.dev/python/docs/api-testing#check-the-server-state-after-running-user-actions)
- [Reuse authentication state](https://playwright.dev/python/docs/api-testing#reuse-authentication-state)

## Playwright ARIA Snapshots
[Skip to main content](https://playwright.dev/python/docs/aria-snapshots#__docusaurus_skipToContent_fallback)

On this page

## Overview [​](https://playwright.dev/python/docs/aria-snapshots\#overview "Direct link to Overview")

With Playwright's Snapshot testing you can assert the accessibility tree of a page against a predefined snapshot template.

- Sync
- Async

```codeBlockLines_e6Vv
page.goto('https://playwright.dev/')
expect(page.query_selector('banner')).to_match_aria_snapshot("""
  - banner:
    - heading /Playwright enables reliable end-to-end/ [level=1]
    - link "Get started"
    - link "Star microsoft/playwright on GitHub"
    - link /[\\d]+k\\+ stargazers on GitHub/
""")

```

```codeBlockLines_e6Vv
await page.goto('https://playwright.dev/')
await expect(page.query_selector('banner')).to_match_aria_snapshot("""
  - banner:
    - heading /Playwright enables reliable end-to-end/ [level=1]
    - link "Get started"
    - link "Star microsoft/playwright on GitHub"
    - link /[\\d]+k\\+ stargazers on GitHub/
""")

```

## Assertion testing vs Snapshot testing [​](https://playwright.dev/python/docs/aria-snapshots\#assertion-testing-vs-snapshot-testing "Direct link to Assertion testing vs Snapshot testing")

Snapshot testing and assertion testing serve different purposes in test automation:

### Assertion testing [​](https://playwright.dev/python/docs/aria-snapshots\#assertion-testing "Direct link to Assertion testing")

Assertion testing is a targeted approach where you assert specific values or conditions about elements or components. For instance, with Playwright, [expect(locator).to\_have\_text()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-text) verifies that an element contains the expected text, and [expect(locator).to\_have\_value()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-value) confirms that an input field has the expected value. Assertion tests are specific and generally check the current state of an element or property against an expected, predefined state. They work well for predictable, single-value checks but are limited in scope when testing the broader structure or variations.

**Advantages**

- **Clarity**: The intent of the test is explicit and easy to understand.
- **Specificity**: Tests focus on particular aspects of functionality, making them more robust against unrelated changes.
- **Debugging**: Failures provide targeted feedback, pointing directly to the problematic aspect.

**Disadvantages**

- **Verbose for complex outputs**: Writing assertions for complex data structures or large outputs can be cumbersome and error-prone.
- **Maintenance overhead**: As code evolves, manually updating assertions can be time-consuming.

### Snapshot testing [​](https://playwright.dev/python/docs/aria-snapshots\#snapshot-testing "Direct link to Snapshot testing")

Snapshot testing captures a “snapshot” or representation of the entire state of an element, component, or data at a given moment, which is then saved for future comparisons. When re-running tests, the current state is compared to the snapshot, and if there are differences, the test fails. This approach is especially useful for complex or dynamic structures, where manually asserting each detail would be too time-consuming. Snapshot testing is broader and more holistic than assertion testing, allowing you to track more complex changes over time.

**Advantages**

- **Simplifies complex outputs**: For example, testing a UI component's rendered output can be tedious with traditional assertions. Snapshots capture the entire output for easy comparison.
- **Quick Feedback loop**: Developers can easily spot unintended changes in the output.
- **Encourages consistency**: Helps maintain consistent output as code evolves.

**Disadvantages**

- **Over-Reliance**: It can be tempting to accept changes to snapshots without fully understanding them, potentially hiding bugs.
- **Granularity**: Large snapshots may be hard to interpret when differences arise, especially if minor changes affect large portions of the output.
- **Suitability**: Not ideal for highly dynamic content where outputs change frequently or unpredictably.

### When to use [​](https://playwright.dev/python/docs/aria-snapshots\#when-to-use "Direct link to When to use")

- **Snapshot testing** is ideal for:
  - UI testing of whole pages and components.
  - Broad structural checks for complex UI components.
  - Regression testing for outputs that rarely change structure.
- **Assertion testing** is ideal for:
  - Core logic validation.
  - Computed value testing.
  - Fine-grained tests requiring precise conditions.

By combining snapshot testing for broad, structural checks and assertion testing for specific functionality, you can achieve a well-rounded testing strategy.

## Aria snapshots [​](https://playwright.dev/python/docs/aria-snapshots\#aria-snapshots "Direct link to Aria snapshots")

In Playwright, aria snapshots provide a YAML representation of the accessibility tree of a page. These snapshots can be stored and compared later to verify if the page structure remains consistent or meets defined expectations.

The YAML format describes the hierarchical structure of accessible elements on the page, detailing **roles**, **attributes**, **values**, and **text content**. The structure follows a tree-like syntax, where each node represents an accessible element, and indentation indicates nested elements.

Each accessible element in the tree is represented as a YAML node:

```codeBlockLines_e6Vv
- role "name" [attribute=value]

```

- **role**: Specifies the ARIA or HTML role of the element (e.g., `heading`, `list`, `listitem`, `button`).
- **"name"**: Accessible name of the element. Quoted strings indicate exact values, `/patterns/` are used for regular expression.
- **\[attribute=value\]**: Attributes and values, in square brackets, represent specific ARIA attributes, such as `checked`, `disabled`, `expanded`, `level`, `pressed`, or `selected`.

These values are derived from ARIA attributes or calculated based on HTML semantics. To inspect the accessibility tree structure of a page, use the [Chrome DevTools Accessibility Pane](https://developer.chrome.com/docs/devtools/accessibility/reference#pane).

## Snapshot matching [​](https://playwright.dev/python/docs/aria-snapshots\#snapshot-matching "Direct link to Snapshot matching")

The [expect(locator).to\_match\_aria\_snapshot()](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-match-aria-snapshot) assertion method in Playwright compares the accessible structure of the locator scope with a predefined aria snapshot template, helping validate the page's state against testing requirements.

For the following DOM:

```codeBlockLines_e6Vv
<h1>title</h1>

```

You can match it using the following snapshot template:

- Sync
- Async

```codeBlockLines_e6Vv
expect(page.locator("body")).to_match_aria_snapshot("""
  - heading "title"
""")

```

```codeBlockLines_e6Vv
await expect(page.locator("body")).to_match_aria_snapshot("""
  - heading "title"
""")

```

When matching, the snapshot template is compared to the current accessibility tree of the page:

- If the tree structure matches the template, the test passes; otherwise, it fails, indicating a mismatch between expected and actual accessibility states.
- The comparison is case-sensitive and collapses whitespace, so indentation and line breaks are ignored.
- The comparison is order-sensitive, meaning the order of elements in the snapshot template must match the order in the page's accessibility tree.

### Partial matching [​](https://playwright.dev/python/docs/aria-snapshots\#partial-matching "Direct link to Partial matching")

You can perform partial matches on nodes by omitting attributes or accessible names, enabling verification of specific parts of the accessibility tree without requiring exact matches. This flexibility is helpful for dynamic or irrelevant attributes.

```codeBlockLines_e6Vv
<button>Submit</button>

```

_aria snapshot_

```codeBlockLines_e6Vv
- button

```

In this example, the button role is matched, but the accessible name ("Submit") is not specified, allowing the test to pass regardless of the button's label.

* * *

For elements with ARIA attributes like `checked` or `disabled`, omitting these attributes allows partial matching, focusing solely on role and hierarchy.

```codeBlockLines_e6Vv
<input type="checkbox" checked>

```

_aria snapshot for partial match_

```codeBlockLines_e6Vv
- checkbox

```

In this partial match, the `checked` attribute is ignored, so the test will pass regardless of the checkbox state.

* * *

Similarly, you can partially match children in lists or groups by omitting specific list items or nested elements.

```codeBlockLines_e6Vv
<ul>
  <li>Feature A</li>
  <li>Feature B</li>
  <li>Feature C</li>
</ul>

```

_aria snapshot for partial match_

```codeBlockLines_e6Vv
- list
  - listitem: Feature B

```

Partial matches let you create flexible snapshot tests that verify essential page structure without enforcing specific content or attributes.

### Matching with regular expressions [​](https://playwright.dev/python/docs/aria-snapshots\#matching-with-regular-expressions "Direct link to Matching with regular expressions")

Regular expressions allow flexible matching for elements with dynamic or variable text. Accessible names and text can support regex patterns.

```codeBlockLines_e6Vv
<h1>Issues 12</h1>

```

_aria snapshot with regular expression_

```codeBlockLines_e6Vv
- heading /Issues \d+/

```

## Generating snapshots [​](https://playwright.dev/python/docs/aria-snapshots\#generating-snapshots "Direct link to Generating snapshots")

Creating aria snapshots in Playwright helps ensure and maintain your application's structure. You can generate snapshots in various ways depending on your testing setup and workflow.

### Generating snapshots with the Playwright code generator [​](https://playwright.dev/python/docs/aria-snapshots\#generating-snapshots-with-the-playwright-code-generator "Direct link to Generating snapshots with the Playwright code generator")

If you're using Playwright's [Code Generator](https://playwright.dev/python/docs/codegen), generating aria snapshots is streamlined with its interactive interface:

- **"Assert snapshot" Action**: In the code generator, you can use the "Assert snapshot" action to automatically create a snapshot assertion for the selected elements. This is a quick way to capture the aria snapshot as part of your recorded test flow.
- **"Aria snapshot" Tab**: The "Aria snapshot" tab within the code generator interface visually represents the aria snapshot for a selected locator, letting you explore, inspect, and verify element roles, attributes, and accessible names to aid snapshot creation and review.

### Using the `Locator.ariaSnapshot` method [​](https://playwright.dev/python/docs/aria-snapshots\#using-the-locatorariasnapshot-method "Direct link to using-the-locatorariasnapshot-method")

The [locator.aria\_snapshot()](https://playwright.dev/python/docs/api/class-locator#locator-aria-snapshot) method allows you to programmatically create a YAML representation of accessible elements within a locator's scope, especially helpful for generating snapshots dynamically during test execution.

**Example**:

- Sync
- Async

```codeBlockLines_e6Vv
snapshot = page.locator("body").aria_snapshot()
print(snapshot)

```

```codeBlockLines_e6Vv
snapshot = await page.locator("body").aria_snapshot()
print(snapshot)

```

This command outputs the aria snapshot within the specified locator's scope in YAML format, which you can validate or store as needed.

## Accessibility tree examples [​](https://playwright.dev/python/docs/aria-snapshots\#accessibility-tree-examples "Direct link to Accessibility tree examples")

### Headings with level attributes [​](https://playwright.dev/python/docs/aria-snapshots\#headings-with-level-attributes "Direct link to Headings with level attributes")

Headings can include a `level` attribute indicating their heading level.

```codeBlockLines_e6Vv
<h1>Title</h1>
<h2>Subtitle</h2>

```

_aria snapshot_

```codeBlockLines_e6Vv
- heading "Title" [level=1]
- heading "Subtitle" [level=2]

```

### Text nodes [​](https://playwright.dev/python/docs/aria-snapshots\#text-nodes "Direct link to Text nodes")

Standalone or descriptive text elements appear as text nodes.

```codeBlockLines_e6Vv
<div>Sample accessible name</div>

```

_aria snapshot_

```codeBlockLines_e6Vv
- text: Sample accessible name

```

### Inline multiline text [​](https://playwright.dev/python/docs/aria-snapshots\#inline-multiline-text "Direct link to Inline multiline text")

Multiline text, such as paragraphs, is normalized in the aria snapshot.

```codeBlockLines_e6Vv
<p>Line 1<br>Line 2</p>

```

_aria snapshot_

```codeBlockLines_e6Vv
- paragraph: Line 1 Line 2

```

### Links [​](https://playwright.dev/python/docs/aria-snapshots\#links "Direct link to Links")

Links display their text or composed content from pseudo-elements.

```codeBlockLines_e6Vv
<a href="#more-info">Read more about Accessibility</a>

```

_aria snapshot_

```codeBlockLines_e6Vv
- link "Read more about Accessibility"

```

### Text boxes [​](https://playwright.dev/python/docs/aria-snapshots\#text-boxes "Direct link to Text boxes")

Input elements of type `text` show their `value` attribute content.

```codeBlockLines_e6Vv
<input type="text" value="Enter your name">

```

_aria snapshot_

```codeBlockLines_e6Vv
- textbox: Enter your name

```

### Lists with items [​](https://playwright.dev/python/docs/aria-snapshots\#lists-with-items "Direct link to Lists with items")

Ordered and unordered lists include their list items.

```codeBlockLines_e6Vv
<ul aria-label="Main Features">
  <li>Feature 1</li>
  <li>Feature 2</li>
</ul>

```

_aria snapshot_

```codeBlockLines_e6Vv
- list "Main Features":
  - listitem: Feature 1
  - listitem: Feature 2

```

### Grouped elements [​](https://playwright.dev/python/docs/aria-snapshots\#grouped-elements "Direct link to Grouped elements")

Groups capture nested elements, such as `<details>` elements with summary content.

```codeBlockLines_e6Vv
<details>
  <summary>Summary</summary>
  <p>Detail content here</p>
</details>

```

_aria snapshot_

```codeBlockLines_e6Vv
- group: Summary

```

### Attributes and states [​](https://playwright.dev/python/docs/aria-snapshots\#attributes-and-states "Direct link to Attributes and states")

Commonly used ARIA attributes, like `checked`, `disabled`, `expanded`, `level`, `pressed`, and `selected`, represent control states.

#### Checkbox with `checked` attribute [​](https://playwright.dev/python/docs/aria-snapshots\#checkbox-with-checked-attribute "Direct link to checkbox-with-checked-attribute")

```codeBlockLines_e6Vv
<input type="checkbox" checked>

```

_aria snapshot_

```codeBlockLines_e6Vv
- checkbox [checked]

```

#### Button with `pressed` attribute [​](https://playwright.dev/python/docs/aria-snapshots\#button-with-pressed-attribute "Direct link to button-with-pressed-attribute")

```codeBlockLines_e6Vv
<button aria-pressed="true">Toggle</button>

```

_aria snapshot_

```codeBlockLines_e6Vv
- button "Toggle" [pressed=true]

```

- [Overview](https://playwright.dev/python/docs/aria-snapshots#overview)
- [Assertion testing vs Snapshot testing](https://playwright.dev/python/docs/aria-snapshots#assertion-testing-vs-snapshot-testing)
  - [Assertion testing](https://playwright.dev/python/docs/aria-snapshots#assertion-testing)
  - [Snapshot testing](https://playwright.dev/python/docs/aria-snapshots#snapshot-testing)
  - [When to use](https://playwright.dev/python/docs/aria-snapshots#when-to-use)
- [Aria snapshots](https://playwright.dev/python/docs/aria-snapshots#aria-snapshots)
- [Snapshot matching](https://playwright.dev/python/docs/aria-snapshots#snapshot-matching)
  - [Partial matching](https://playwright.dev/python/docs/aria-snapshots#partial-matching)
  - [Matching with regular expressions](https://playwright.dev/python/docs/aria-snapshots#matching-with-regular-expressions)
- [Generating snapshots](https://playwright.dev/python/docs/aria-snapshots#generating-snapshots)
  - [Generating snapshots with the Playwright code generator](https://playwright.dev/python/docs/aria-snapshots#generating-snapshots-with-the-playwright-code-generator)
  - [Using the `Locator.ariaSnapshot` method](https://playwright.dev/python/docs/aria-snapshots#using-the-locatorariasnapshot-method)
- [Accessibility tree examples](https://playwright.dev/python/docs/aria-snapshots#accessibility-tree-examples)
  - [Headings with level attributes](https://playwright.dev/python/docs/aria-snapshots#headings-with-level-attributes)
  - [Text nodes](https://playwright.dev/python/docs/aria-snapshots#text-nodes)
  - [Inline multiline text](https://playwright.dev/python/docs/aria-snapshots#inline-multiline-text)
  - [Links](https://playwright.dev/python/docs/aria-snapshots#links)
  - [Text boxes](https://playwright.dev/python/docs/aria-snapshots#text-boxes)
  - [Lists with items](https://playwright.dev/python/docs/aria-snapshots#lists-with-items)
  - [Grouped elements](https://playwright.dev/python/docs/aria-snapshots#grouped-elements)
  - [Attributes and states](https://playwright.dev/python/docs/aria-snapshots#attributes-and-states)

## Playwright Trace Viewer
[Skip to main content](https://playwright.dev/python/docs/trace-viewer#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/trace-viewer\#introduction "Direct link to Introduction")

Playwright Trace Viewer is a GUI tool that helps you explore recorded Playwright traces after the script has run. Traces are a great way for debugging your tests when they fail on CI. You can open traces [locally](https://playwright.dev/python/docs/trace-viewer#opening-the-trace) or in your browser on [trace.playwright.dev](https://trace.playwright.dev/).

## Opening Trace Viewer [​](https://playwright.dev/python/docs/trace-viewer\#opening-trace-viewer "Direct link to Opening Trace Viewer")

You can open a saved trace using either the Playwright CLI or in the browser at [trace.playwright.dev](https://trace.playwright.dev/). Make sure to add the full path to where your `trace.zip` file is located.

```codeBlockLines_e6Vv
playwright show-trace trace.zip

```

### Using [trace.playwright.dev](https://trace.playwright.dev/) [​](https://playwright.dev/python/docs/trace-viewer\#using-traceplaywrightdev "Direct link to using-traceplaywrightdev")

[trace.playwright.dev](https://trace.playwright.dev/) is a statically hosted variant of the Trace Viewer. You can upload trace files using drag and drop or via the `Select file(s)` button.

Trace Viewer loads the trace entirely in your browser and does not transmit any data externally.

![Drop Playwright Trace to load](https://user-images.githubusercontent.com/13063165/194577918-b4d45726-2692-4093-8a28-9e73552617ef.png)

### Viewing remote traces [​](https://playwright.dev/python/docs/trace-viewer\#viewing-remote-traces "Direct link to Viewing remote traces")

You can open remote traces directly using its URL. This makes it easy to view the remote trace without having to manually download the file from CI runs, for example.

```codeBlockLines_e6Vv
playwright show-trace https://example.com/trace.zip

```

When using [trace.playwright.dev](https://trace.playwright.dev/), you can also pass the URL of your uploaded trace at some accessible storage (e.g. inside your CI) as a query parameter. CORS (Cross-Origin Resource Sharing) rules might apply.

```codeBlockLines_e6Vv
https://trace.playwright.dev/?trace=https://demo.playwright.dev/reports/todomvc/data/cb0fa77ebd9487a5c899f3ae65a7ffdbac681182.zip

```

## Recording a trace [​](https://playwright.dev/python/docs/trace-viewer\#recording-a-trace "Direct link to Recording a trace")

Traces can be recorded by running your tests with the `--tracing` flag.

```codeBlockLines_e6Vv
pytest --tracing on

```

Options for tracing are:

- `on`: Record trace for each test
- `off`: Do not record trace. (default)
- `retain-on-failure`: Record trace for each test, but remove all traces from successful test runs.

This will record the trace and place it into the file named `trace.zip` in your `test-results` directory.

If you are not using Pytest, click here to learn how to record traces.

- Sync
- Async

```codeBlockLines_e6Vv
browser = chromium.launch()
context = browser.new_context()

# Start tracing before creating / navigating a page.
context.tracing.start(screenshots=True, snapshots=True, sources=True)

page = context.new_page()
page.goto("https://playwright.dev")

# Stop tracing and export it into a zip archive.
context.tracing.stop(path = "trace.zip")

```

```codeBlockLines_e6Vv
browser = await chromium.launch()
context = await browser.new_context()

# Start tracing before creating / navigating a page.
await context.tracing.start(screenshots=True, snapshots=True, sources=True)

page = await context.new_page()
await page.goto("https://playwright.dev")

# Stop tracing and export it into a zip archive.
await context.tracing.stop(path = "trace.zip")

```

## Trace Viewer features [​](https://playwright.dev/python/docs/trace-viewer\#trace-viewer-features "Direct link to Trace Viewer features")

### Actions [​](https://playwright.dev/python/docs/trace-viewer\#actions "Direct link to Actions")

In the Actions tab you can see what locator was used for every action and how long each one took to run. Hover over each action of your test and visually see the change in the DOM snapshot. Go back and forward in time and click an action to inspect and debug. Use the Before and After tabs to visually see what happened before and after the action.

![actions tab in trace viewer](https://github.com/microsoft/playwright/assets/13063165/948b65cd-f0fd-4c7f-8e53-2c632b5a07f1)

**Selecting each action reveals:**

- Action snapshots
- Action log
- Source code location

### Screenshots [​](https://playwright.dev/python/docs/trace-viewer\#screenshots "Direct link to Screenshots")

When tracing with the [screenshots](https://playwright.dev/python/docs/api/class-tracing#tracing-start-option-screenshots) option turned on (default), each trace records a screencast and renders it as a film strip. You can hover over the film strip to see a magnified image of for each action and state which helps you easily find the action you want to inspect.

Double click on an action to see the time range for that action. You can use the slider in the timeline to increase the actions selected and these will be shown in the Actions tab and all console logs and network logs will be filtered to only show the logs for the actions selected.

![timeline view in trace viewer](https://github.com/microsoft/playwright/assets/13063165/b04a7d75-54bb-4ab2-9e30-e76f6f74a2c8)

### Snapshots [​](https://playwright.dev/python/docs/trace-viewer\#snapshots "Direct link to Snapshots")

When tracing with the [snapshots](https://playwright.dev/python/docs/api/class-tracing#tracing-start-option-snapshots) option turned on (default), Playwright captures a set of complete DOM snapshots for each action. Depending on the type of the action, it will capture:

| Type | Description |
| --- | --- |
| Before | A snapshot at the time action is called. |
| Action | A snapshot at the moment of the performed input. This type of snapshot is especially useful when exploring where exactly Playwright clicked. |
| After | A snapshot after the action. |

Here is what the typical Action snapshot looks like:

![action tab in trace viewer](https://github.com/microsoft/playwright/assets/13063165/7168d549-eb0a-4964-9c93-483f03711fa9)

Notice how it highlights both, the DOM Node as well as the exact click position.

### Source [​](https://playwright.dev/python/docs/trace-viewer\#source "Direct link to Source")

When you click on an action in the sidebar, the line of code for that action is highlighted in the source panel.

![showing source code tab in trace viewer](https://github.com/microsoft/playwright/assets/13063165/daa8845d-c250-4923-aa7a-5d040da9adc5)

### Call [​](https://playwright.dev/python/docs/trace-viewer\#call "Direct link to Call")

The call tab shows you information about the action such as the time it took, what locator was used, if in strict mode and what key was used.

![showing call tab in trace viewer](https://github.com/microsoft/playwright/assets/13063165/95498580-f9dd-4932-a123-c37fe7cfc3c2)

### Log [​](https://playwright.dev/python/docs/trace-viewer\#log "Direct link to Log")

See a full log of your test to better understand what Playwright is doing behind the scenes such as scrolling into view, waiting for element to be visible, enabled and stable and performing actions such as click, fill, press etc.

![showing log of tests in trace viewer](https://github.com/microsoft/playwright/assets/13063165/de621461-3bab-4140-b39d-9f02d6672dbf)

### Errors [​](https://playwright.dev/python/docs/trace-viewer\#errors "Direct link to Errors")

If your test fails you will see the error messages for each test in the Errors tab. The timeline will also show a red line highlighting where the error occurred. You can also click on the source tab to see on which line of the source code the error is.

![showing errors in trace viewer](https://github.com/microsoft/playwright/assets/13063165/e9ef77b3-05d1-4df2-852c-981023723d34)

### Console [​](https://playwright.dev/python/docs/trace-viewer\#console "Direct link to Console")

See console logs from the browser as well as from your test. Different icons are displayed to show you if the console log came from the browser or from the test file.

![showing log of tests in trace viewer](https://github.com/microsoft/playwright/assets/13063165/4107c08d-1eaf-421c-bdd4-9dd2aa641d4a)

Double click on an action from your test in the actions sidebar. This will filter the console to only show the logs that were made during that action. Click the _Show all_ button to see all console logs again.

Use the timeline to filter actions, by clicking a start point and dragging to an ending point. The console tab will also be filtered to only show the logs that were made during the actions selected.

### Network [​](https://playwright.dev/python/docs/trace-viewer\#network "Direct link to Network")

The Network tab shows you all the network requests that were made during your test. You can sort by different types of requests, status code, method, request, content type, duration and size. Click on a request to see more information about it such as the request headers, response headers, request body and response body.

![network requests tab in trace viewer](https://github.com/microsoft/playwright/assets/13063165/0a3d1671-8ccd-4f7a-a844-35f5eb37f236)

Double click on an action from your test in the actions sidebar. This will filter the network requests to only show the requests that were made during that action. Click the _Show all_ button to see all network requests again.

Use the timeline to filter actions, by clicking a start point and dragging to an ending point. The network tab will also be filtered to only show the network requests that were made during the actions selected.

### Metadata [​](https://playwright.dev/python/docs/trace-viewer\#metadata "Direct link to Metadata")

Next to the Actions tab you will find the Metadata tab which will show you more information on your test such as the Browser, viewport size, test duration and more.

![meta data in trace viewer](https://github.com/microsoft/playwright/assets/13063165/82ab3d33-1ec9-4b8a-9cf2-30a6e2d59091)

- [Introduction](https://playwright.dev/python/docs/trace-viewer#introduction)
- [Opening Trace Viewer](https://playwright.dev/python/docs/trace-viewer#opening-trace-viewer)
  - [Using trace.playwright.dev](https://playwright.dev/python/docs/trace-viewer#using-traceplaywrightdev)
  - [Viewing remote traces](https://playwright.dev/python/docs/trace-viewer#viewing-remote-traces)
- [Recording a trace](https://playwright.dev/python/docs/trace-viewer#recording-a-trace)
- [Trace Viewer features](https://playwright.dev/python/docs/trace-viewer#trace-viewer-features)
  - [Actions](https://playwright.dev/python/docs/trace-viewer#actions)
  - [Screenshots](https://playwright.dev/python/docs/trace-viewer#screenshots)
  - [Snapshots](https://playwright.dev/python/docs/trace-viewer#snapshots)
  - [Source](https://playwright.dev/python/docs/trace-viewer#source)
  - [Call](https://playwright.dev/python/docs/trace-viewer#call)
  - [Log](https://playwright.dev/python/docs/trace-viewer#log)
  - [Errors](https://playwright.dev/python/docs/trace-viewer#errors)
  - [Console](https://playwright.dev/python/docs/trace-viewer#console)
  - [Network](https://playwright.dev/python/docs/trace-viewer#network)
  - [Metadata](https://playwright.dev/python/docs/trace-viewer#metadata)

## Playwright Trace Viewer
[Skip to main content](https://playwright.dev/python/docs/trace-viewer-intro#__docusaurus_skipToContent_fallback)

On this page

## Introduction [​](https://playwright.dev/python/docs/trace-viewer-intro\#introduction "Direct link to Introduction")

Playwright Trace Viewer is a GUI tool that lets you explore recorded Playwright traces of your tests meaning you can go back and forward though each action of your test and visually see what was happening during each action.

**You will learn**

- How to record a trace
- How to open the trace viewer

## Recording a trace [​](https://playwright.dev/python/docs/trace-viewer-intro\#recording-a-trace "Direct link to Recording a trace")

Traces can be recorded by running your tests with the `--tracing` flag.

```codeBlockLines_e6Vv
pytest --tracing on

```

Options for tracing are:

- `on`: Record trace for each test
- `off`: Do not record trace. (default)
- `retain-on-failure`: Record trace for each test, but remove all traces from successful test runs.

This will record the trace and place it into the file named `trace.zip` in your `test-results` directory.

If you are not using Pytest, click here to learn how to record traces.

- Sync
- Async

```codeBlockLines_e6Vv
browser = chromium.launch()
context = browser.new_context()

# Start tracing before creating / navigating a page.
context.tracing.start(screenshots=True, snapshots=True, sources=True)

page = context.new_page()
page.goto("https://playwright.dev")

# Stop tracing and export it into a zip archive.
context.tracing.stop(path = "trace.zip")

```

```codeBlockLines_e6Vv
browser = await chromium.launch()
context = await browser.new_context()

# Start tracing before creating / navigating a page.
await context.tracing.start(screenshots=True, snapshots=True, sources=True)

page = await context.new_page()
await page.goto("https://playwright.dev")

# Stop tracing and export it into a zip archive.
await context.tracing.stop(path = "trace.zip")

```

## Opening the trace [​](https://playwright.dev/python/docs/trace-viewer-intro\#opening-the-trace "Direct link to Opening the trace")

You can open the saved trace using the Playwright CLI or in your browser on [`trace.playwright.dev`](https://trace.playwright.dev/). Make sure to add the full path to where your trace's zip file is located. Once opened you can click on each action or use the timeline to see the state of the page before and after each action. You can also inspect the log, source and network during each step of the test. The trace viewer creates a DOM snapshot so you can fully interact with it, open devtools etc.

```codeBlockLines_e6Vv
playwright show-trace trace.zip

```

![playwright trace viewer](https://github.com/microsoft/playwright/assets/13063165/10fe3585-8401-4051-b1c2-b2e92ac4c274)

To learn more check out our detailed guide on [Trace Viewer](https://playwright.dev/python/docs/trace-viewer).

## What's next [​](https://playwright.dev/python/docs/trace-viewer-intro\#whats-next "Direct link to What's next")

- [Run tests on CI with GitHub Actions](https://playwright.dev/python/docs/ci-intro)
- [Learn more about Trace Viewer](https://playwright.dev/python/docs/trace-viewer)

- [Introduction](https://playwright.dev/python/docs/trace-viewer-intro#introduction)
- [Recording a trace](https://playwright.dev/python/docs/trace-viewer-intro#recording-a-trace)
- [Opening the trace](https://playwright.dev/python/docs/trace-viewer-intro#opening-the-trace)
- [What's next](https://playwright.dev/python/docs/trace-viewer-intro#whats-next)

## Playwright Browser API
[Skip to main content](https://playwright.dev/docs/api/class-playwright#__docusaurus_skipToContent_fallback)

On this page

Playwright module provides a method to launch a browser instance. The following is a typical example of using Playwright to drive automation:

```codeBlockLines_e6Vv
const { chromium, firefox, webkit } = require('playwright');

(async () => {
  const browser = await chromium.launch();  // Or 'firefox' or 'webkit'.
  const page = await browser.newPage();
  await page.goto('http://example.com');
  // other actions...
  await browser.close();
})();

```

* * *

## Properties [​](https://playwright.dev/docs/api/class-playwright\#properties "Direct link to Properties")

### chromium [​](https://playwright.dev/docs/api/class-playwright\#playwright-chromium "Direct link to chromium")

Added before v1.9playwright.chromium

This object can be used to launch or connect to Chromium, returning instances of [Browser](https://playwright.dev/docs/api/class-browser "Browser").

**Usage**

```codeBlockLines_e6Vv
playwright.chromium

```

**Type**

- [BrowserType](https://playwright.dev/docs/api/class-browsertype "BrowserType")

* * *

### devices [​](https://playwright.dev/docs/api/class-playwright\#playwright-devices "Direct link to devices")

Added before v1.9playwright.devices

Returns a dictionary of devices to be used with [browser.newContext()](https://playwright.dev/docs/api/class-browser#browser-new-context) or [browser.newPage()](https://playwright.dev/docs/api/class-browser#browser-new-page).

```codeBlockLines_e6Vv
const { webkit, devices } = require('playwright');
const iPhone = devices['iPhone 6'];

(async () => {
  const browser = await webkit.launch();
  const context = await browser.newContext({
    ...iPhone
  });
  const page = await context.newPage();
  await page.goto('http://example.com');
  // other actions...
  await browser.close();
})();

```

**Usage**

```codeBlockLines_e6Vv
playwright.devices

```

**Type**

- [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")

* * *

### errors [​](https://playwright.dev/docs/api/class-playwright\#playwright-errors "Direct link to errors")

Added before v1.9playwright.errors

Playwright methods might throw errors if they are unable to fulfill a request. For example, [locator.waitFor()](https://playwright.dev/docs/api/class-locator#locator-wait-for) might fail if the selector doesn't match any nodes during the given timeframe.

For certain types of errors Playwright uses specific error classes. These classes are available via [`playwright.errors`](https://playwright.dev/docs/api/class-playwright#playwright-errors).

An example of handling a timeout error:

```codeBlockLines_e6Vv
try {
  await page.locator('.foo').waitFor();
} catch (e) {
  if (e instanceof playwright.errors.TimeoutError) {
    // Do something if this is a timeout.
  }
}

```

**Usage**

```codeBlockLines_e6Vv
playwright.errors

```

**Type**

- [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")
  - `TimeoutError` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")

    A class of [TimeoutError](https://playwright.dev/docs/api/class-timeouterror "TimeoutError").

* * *

### firefox [​](https://playwright.dev/docs/api/class-playwright\#playwright-firefox "Direct link to firefox")

Added before v1.9playwright.firefox

This object can be used to launch or connect to Firefox, returning instances of [Browser](https://playwright.dev/docs/api/class-browser "Browser").

**Usage**

```codeBlockLines_e6Vv
playwright.firefox

```

**Type**

- [BrowserType](https://playwright.dev/docs/api/class-browsertype "BrowserType")

* * *

### request [​](https://playwright.dev/docs/api/class-playwright\#playwright-request "Direct link to request")

Added in: v1.16playwright.request

Exposes API that can be used for the Web API testing.

**Usage**

```codeBlockLines_e6Vv
playwright.request

```

**Type**

- [APIRequest](https://playwright.dev/docs/api/class-apirequest "APIRequest")

* * *

### selectors [​](https://playwright.dev/docs/api/class-playwright\#playwright-selectors "Direct link to selectors")

Added before v1.9playwright.selectors

Selectors can be used to install custom selector engines. See [extensibility](https://playwright.dev/docs/extensibility) for more information.

**Usage**

```codeBlockLines_e6Vv
playwright.selectors

```

**Type**

- [Selectors](https://playwright.dev/docs/api/class-selectors "Selectors")

* * *

### webkit [​](https://playwright.dev/docs/api/class-playwright\#playwright-webkit "Direct link to webkit")

Added before v1.9playwright.webkit

This object can be used to launch or connect to WebKit, returning instances of [Browser](https://playwright.dev/docs/api/class-browser "Browser").

**Usage**

```codeBlockLines_e6Vv
playwright.webkit

```

**Type**

- [BrowserType](https://playwright.dev/docs/api/class-browsertype "BrowserType")

- [Properties](https://playwright.dev/docs/api/class-playwright#properties)
  - [chromium](https://playwright.dev/docs/api/class-playwright#playwright-chromium)
  - [devices](https://playwright.dev/docs/api/class-playwright#playwright-devices)
  - [errors](https://playwright.dev/docs/api/class-playwright#playwright-errors)
  - [firefox](https://playwright.dev/docs/api/class-playwright#playwright-firefox)
  - [request](https://playwright.dev/docs/api/class-playwright#playwright-request)
  - [selectors](https://playwright.dev/docs/api/class-playwright#playwright-selectors)
  - [webkit](https://playwright.dev/docs/api/class-playwright#playwright-webkit)

## Test Project Configuration
[Skip to main content](https://playwright.dev/docs/api/class-fullproject#__docusaurus_skipToContent_fallback)

On this page

Runtime representation of the test project configuration. It is accessible in the tests via [testInfo.project](https://playwright.dev/docs/api/class-testinfo#test-info-project) and [workerInfo.project](https://playwright.dev/docs/api/class-workerinfo#worker-info-project) and is passed to the test reporters. To see the format of the project in the Playwright configuration file please see [TestProject](https://playwright.dev/docs/api/class-testproject "TestProject") instead.

* * *

## Properties [​](https://playwright.dev/docs/api/class-fullproject\#properties "Direct link to Properties")

### dependencies [​](https://playwright.dev/docs/api/class-fullproject\#full-project-dependencies "Direct link to dependencies")

Added in: v1.31fullProject.dependencies

See [testProject.dependencies](https://playwright.dev/docs/api/class-testproject#test-project-dependencies).

**Usage**

```codeBlockLines_e6Vv
fullProject.dependencies

```

**Type**

- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array") < [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") >

* * *

### grep [​](https://playwright.dev/docs/api/class-fullproject\#full-project-grep "Direct link to grep")

Added in: v1.10fullProject.grep

See [testProject.grep](https://playwright.dev/docs/api/class-testproject#test-project-grep).

**Usage**

```codeBlockLines_e6Vv
fullProject.grep

```

**Type**

- [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array") < [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") >

* * *

### grepInvert [​](https://playwright.dev/docs/api/class-fullproject\#full-project-grep-invert "Direct link to grepInvert")

Added in: v1.10fullProject.grepInvert

See [testProject.grepInvert](https://playwright.dev/docs/api/class-testproject#test-project-grep-invert).

**Usage**

```codeBlockLines_e6Vv
fullProject.grepInvert

```

**Type**

- [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array") < [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") >

* * *

### metadata [​](https://playwright.dev/docs/api/class-fullproject\#full-project-metadata "Direct link to metadata")

Added in: v1.10fullProject.metadata

See [testProject.metadata](https://playwright.dev/docs/api/class-testproject#test-project-metadata).

**Usage**

```codeBlockLines_e6Vv
fullProject.metadata

```

**Type**

- [Metadata](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object<string, any>")

* * *

### name [​](https://playwright.dev/docs/api/class-fullproject\#full-project-name "Direct link to name")

Added in: v1.10fullProject.name

See [testProject.name](https://playwright.dev/docs/api/class-testproject#test-project-name).

**Usage**

```codeBlockLines_e6Vv
fullProject.name

```

**Type**

- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

* * *

### outputDir [​](https://playwright.dev/docs/api/class-fullproject\#full-project-output-dir "Direct link to outputDir")

Added in: v1.10fullProject.outputDir

See [testProject.outputDir](https://playwright.dev/docs/api/class-testproject#test-project-output-dir).

**Usage**

```codeBlockLines_e6Vv
fullProject.outputDir

```

**Type**

- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

* * *

### repeatEach [​](https://playwright.dev/docs/api/class-fullproject\#full-project-repeat-each "Direct link to repeatEach")

Added in: v1.10fullProject.repeatEach

See [testProject.repeatEach](https://playwright.dev/docs/api/class-testproject#test-project-repeat-each).

**Usage**

```codeBlockLines_e6Vv
fullProject.repeatEach

```

**Type**

- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

* * *

### retries [​](https://playwright.dev/docs/api/class-fullproject\#full-project-retries "Direct link to retries")

Added in: v1.10fullProject.retries

See [testProject.retries](https://playwright.dev/docs/api/class-testproject#test-project-retries).

**Usage**

```codeBlockLines_e6Vv
fullProject.retries

```

**Type**

- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

* * *

### snapshotDir [​](https://playwright.dev/docs/api/class-fullproject\#full-project-snapshot-dir "Direct link to snapshotDir")

Added in: v1.10fullProject.snapshotDir

See [testProject.snapshotDir](https://playwright.dev/docs/api/class-testproject#test-project-snapshot-dir).

**Usage**

```codeBlockLines_e6Vv
fullProject.snapshotDir

```

**Type**

- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

* * *

### teardown [​](https://playwright.dev/docs/api/class-fullproject\#full-project-teardown "Direct link to teardown")

Added in: v1.34fullProject.teardown

See [testProject.teardown](https://playwright.dev/docs/api/class-testproject#test-project-teardown).

**Usage**

```codeBlockLines_e6Vv
fullProject.teardown

```

**Type**

- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

* * *

### testDir [​](https://playwright.dev/docs/api/class-fullproject\#full-project-test-dir "Direct link to testDir")

Added in: v1.10fullProject.testDir

See [testProject.testDir](https://playwright.dev/docs/api/class-testproject#test-project-test-dir).

**Usage**

```codeBlockLines_e6Vv
fullProject.testDir

```

**Type**

- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

* * *

### testIgnore [​](https://playwright.dev/docs/api/class-fullproject\#full-project-test-ignore "Direct link to testIgnore")

Added in: v1.10fullProject.testIgnore

See [testProject.testIgnore](https://playwright.dev/docs/api/class-testproject#test-project-test-ignore).

**Usage**

```codeBlockLines_e6Vv
fullProject.testIgnore

```

**Type**

- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array") < [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") >

* * *

### testMatch [​](https://playwright.dev/docs/api/class-fullproject\#full-project-test-match "Direct link to testMatch")

Added in: v1.10fullProject.testMatch

See [testProject.testMatch](https://playwright.dev/docs/api/class-testproject#test-project-test-match).

**Usage**

```codeBlockLines_e6Vv
fullProject.testMatch

```

**Type**

- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array") < [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") >

* * *

### timeout [​](https://playwright.dev/docs/api/class-fullproject\#full-project-timeout "Direct link to timeout")

Added in: v1.10fullProject.timeout

See [testProject.timeout](https://playwright.dev/docs/api/class-testproject#test-project-timeout).

**Usage**

```codeBlockLines_e6Vv
fullProject.timeout

```

**Type**

- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

* * *

### use [​](https://playwright.dev/docs/api/class-fullproject\#full-project-use "Direct link to use")

Added in: v1.10fullProject.use

See [testProject.use](https://playwright.dev/docs/api/class-testproject#test-project-use).

**Usage**

```codeBlockLines_e6Vv
fullProject.use

```

**Type**

- [Fixtures](https://playwright.dev/docs/api/class-fixtures "Fixtures")

- [Properties](https://playwright.dev/docs/api/class-fullproject#properties)
  - [dependencies](https://playwright.dev/docs/api/class-fullproject#full-project-dependencies)
  - [grep](https://playwright.dev/docs/api/class-fullproject#full-project-grep)
  - [grepInvert](https://playwright.dev/docs/api/class-fullproject#full-project-grep-invert)
  - [metadata](https://playwright.dev/docs/api/class-fullproject#full-project-metadata)
  - [name](https://playwright.dev/docs/api/class-fullproject#full-project-name)
  - [outputDir](https://playwright.dev/docs/api/class-fullproject#full-project-output-dir)
  - [repeatEach](https://playwright.dev/docs/api/class-fullproject#full-project-repeat-each)
  - [retries](https://playwright.dev/docs/api/class-fullproject#full-project-retries)
  - [snapshotDir](https://playwright.dev/docs/api/class-fullproject#full-project-snapshot-dir)
  - [teardown](https://playwright.dev/docs/api/class-fullproject#full-project-teardown)
  - [testDir](https://playwright.dev/docs/api/class-fullproject#full-project-test-dir)
  - [testIgnore](https://playwright.dev/docs/api/class-fullproject#full-project-test-ignore)
  - [testMatch](https://playwright.dev/docs/api/class-fullproject#full-project-test-match)
  - [timeout](https://playwright.dev/docs/api/class-fullproject#full-project-timeout)
  - [use](https://playwright.dev/docs/api/class-fullproject#full-project-use)

## Playwright Electron Automation
[Skip to main content](https://playwright.dev/docs/api/class-electron#__docusaurus_skipToContent_fallback)

On this page

Playwright has **experimental** support for Electron automation. You can access electron namespace via:

```codeBlockLines_e6Vv
const { _electron } = require('playwright');

```

An example of the Electron automation script would be:

```codeBlockLines_e6Vv
const { _electron: electron } = require('playwright');

(async () => {
  // Launch Electron app.
  const electronApp = await electron.launch({ args: ['main.js'] });

  // Evaluation expression in the Electron context.
  const appPath = await electronApp.evaluate(async ({ app }) => {
    // This runs in the main Electron process, parameter here is always
    // the result of the require('electron') in the main app script.
    return app.getAppPath();
  });
  console.log(appPath);

  // Get the first window that the app opens, wait if necessary.
  const window = await electronApp.firstWindow();
  // Print the title.
  console.log(await window.title());
  // Capture a screenshot.
  await window.screenshot({ path: 'intro.png' });
  // Direct Electron console to Node terminal.
  window.on('console', console.log);
  // Click button.
  await window.click('text=Click me');
  // Exit app.
  await electronApp.close();
})();

```

**Supported Electron versions are:**

- v12.2.0+
- v13.4.0+
- v14+

**Known issues:**

If you are not able to launch Electron and it will end up in timeouts during launch, try the following:

- Ensure that `nodeCliInspect` ( [FuseV1Options.EnableNodeCliInspectArguments](https://www.electronjs.org/docs/latest/tutorial/fuses#nodecliinspect)) fuse is **not** set to `false`.

* * *

## Methods [​](https://playwright.dev/docs/api/class-electron\#methods "Direct link to Methods")

### launch [​](https://playwright.dev/docs/api/class-electron\#electron-launch "Direct link to launch")

Added in: v1.9electron.launch

Launches electron application specified with the [executablePath](https://playwright.dev/docs/api/class-electron#electron-launch-option-executable-path).

**Usage**

```codeBlockLines_e6Vv
await electron.launch();
await electron.launch(options);

```

**Arguments**

- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_
  - `acceptDownloads` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") _(optional)_ Added in: v1.12 [#](https://playwright.dev/docs/api/class-electron#electron-launch-option-accept-downloads)

    Whether to automatically download all the attachments. Defaults to `true` where all the downloads are accepted.

  - `args` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array") < [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \> _(optional)_ [#](https://playwright.dev/docs/api/class-electron#electron-launch-option-args)

    Additional arguments to pass to the application when launching. You typically pass the main script name here.

  - `bypassCSP` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") _(optional)_ Added in: v1.12 [#](https://playwright.dev/docs/api/class-electron#electron-launch-option-bypass-csp)

    Toggles bypassing page's Content-Security-Policy. Defaults to `false`.

  - `colorScheme` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| "light" \| "dark" \| "no-preference" _(optional)_ Added in: v1.12 [#](https://playwright.dev/docs/api/class-electron#electron-launch-option-color-scheme)

    Emulates [prefers-colors-scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme) media feature, supported values are `'light'` and `'dark'`. See [page.emulateMedia()](https://playwright.dev/docs/api/class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'light'`.

  - `cwd` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_ [#](https://playwright.dev/docs/api/class-electron#electron-launch-option-cwd)

    Current working directory to launch application from.

  - `env` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") < [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \> _(optional)_ [#](https://playwright.dev/docs/api/class-electron#electron-launch-option-env)

    Specifies environment variables that will be visible to Electron. Defaults to `process.env`.

  - `executablePath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_ [#](https://playwright.dev/docs/api/class-electron#electron-launch-option-executable-path)

    Launches given Electron application. If not specified, launches the default Electron executable installed in this package, located at `node_modules/.bin/electron`.

  - `extraHTTPHeaders` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") < [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \> _(optional)_ Added in: v1.12 [#](https://playwright.dev/docs/api/class-electron#electron-launch-option-extra-http-headers)

    An object containing additional HTTP headers to be sent with every request. Defaults to none.

  - `geolocation` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_ Added in: v1.12 [#](https://playwright.dev/docs/api/class-electron#electron-launch-option-geolocation)
    - `latitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      Latitude between -90 and 90.

    - `longitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      Longitude between -180 and 180.

    - `accuracy` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") _(optional)_

      Non-negative accuracy value. Defaults to `0`.
  - `httpCredentials` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_ Added in: v1.12 [#](https://playwright.dev/docs/api/class-electron#electron-launch-option-http-credentials)


    - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_

      Restrain sending http credentials on specific origin (scheme://host:port).

    - `send` "unauthorized" \| "always" _(optional)_

      This option only applies to the requests sent from corresponding [APIRequestContext](https://playwright.dev/docs/api/class-apirequestcontext "APIRequestContext") and does not affect requests sent from the browser. `'always'` \- `Authorization` header with basic authentication credentials will be sent with the each API request. `'unauthorized` \- the credentials are only sent when 401 (Unauthorized) response with `WWW-Authenticate` header is received. Defaults to `'unauthorized'`.


Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication). If no origin is specified, the username and password are sent to any servers upon unauthorized responses.

  - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") _(optional)_ Added in: v1.12 [#](https://playwright.dev/docs/api/class-electron#electron-launch-option-ignore-https-errors)

    Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.

  - `locale` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_ Added in: v1.12 [#](https://playwright.dev/docs/api/class-electron#electron-launch-option-locale)

    Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value, `Accept-Language` request header value as well as number and date formatting rules. Defaults to the system default locale. Learn more about emulation in our [emulation guide](https://playwright.dev/docs/emulation#locale--timezone).

  - `offline` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") _(optional)_ Added in: v1.12 [#](https://playwright.dev/docs/api/class-electron#electron-launch-option-offline)

    Whether to emulate network being offline. Defaults to `false`. Learn more about [network emulation](https://playwright.dev/docs/emulation#offline).

  - `recordHar` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_ Added in: v1.12 [#](https://playwright.dev/docs/api/class-electron#electron-launch-option-record-har)


    - `omitContent` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") _(optional)_

      Optional setting to control whether to omit request content from the HAR. Defaults to `false`. Deprecated, use `content` policy instead.

    - `content` "omit" \| "embed" \| "attach" _(optional)_

      Optional setting to control resource content management. If `omit` is specified, content is not persisted. If `attach` is specified, resources are persisted as separate files or entries in the ZIP archive. If `embed` is specified, content is stored inline the HAR file as per HAR specification. Defaults to `attach` for `.zip` output files and to `embed` for all other file extensions.

    - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Path on the filesystem to write the HAR file to. If the file name ends with `.zip`, `content: 'attach'` is used by default.

    - `mode` "full" \| "minimal" _(optional)_

      When set to `minimal`, only record information necessary for routing from HAR. This omits sizes, timing, page, cookies, security and other types of HAR information that are not used when replaying from HAR. Defaults to `full`.

    - `urlFilter` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") _(optional)_

      A glob or regex pattern to filter requests that are stored in the HAR. When a [baseURL](https://playwright.dev/docs/api/class-browser#browser-new-context-option-base-url) via the context options was provided and the passed URL is a path, it gets merged via the [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor. Defaults to none.


Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into `recordHar.path` file. If not specified, the HAR is not recorded. Make sure to await [browserContext.close()](https://playwright.dev/docs/api/class-browsercontext#browser-context-close) for the HAR to be saved.

  - `recordVideo` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_ Added in: v1.12 [#](https://playwright.dev/docs/api/class-electron#electron-launch-option-record-video)


    - `dir` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Path to the directory to put videos into.

    - `size` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_


      - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Video frame width.

      - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Video frame height.


Optional dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will be scaled down if necessary to fit the specified size.

Enables video recording for all pages into `recordVideo.dir` directory. If not specified videos are not recorded. Make sure to await [browserContext.close()](https://playwright.dev/docs/api/class-browsercontext#browser-context-close) for videos to be saved.

  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") _(optional)_ Added in: v1.15 [#](https://playwright.dev/docs/api/class-electron#electron-launch-option-timeout)

    Maximum time in milliseconds to wait for the application to start. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.

  - `timezoneId` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_ Added in: v1.12 [#](https://playwright.dev/docs/api/class-electron#electron-launch-option-timezone-id)

    Changes the timezone of the context. See [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1) for a list of supported timezone IDs. Defaults to the system timezone.

  - `tracesDir` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_ Added in: v1.36 [#](https://playwright.dev/docs/api/class-electron#electron-launch-option-traces-dir)

    If specified, traces are saved into this directory.

**Returns**

- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise") < [ElectronApplication](https://playwright.dev/docs/api/class-electronapplication "ElectronApplication") > [#](https://playwright.dev/docs/api/class-electron#electron-launch-return)

- [Methods](https://playwright.dev/docs/api/class-electron#methods)
  - [launch](https://playwright.dev/docs/api/class-electron#electron-launch)

## Playwright Test Fixtures
[Skip to main content](https://playwright.dev/docs/next/test-fixtures#__docusaurus_skipToContent_fallback)

This is unreleased documentation for Playwright **Next** version.

For up-to-date documentation, see the **[latest version](https://playwright.dev/docs/test-fixtures)** (stable).

Version: Next

On this page

## Introduction [​](https://playwright.dev/docs/next/test-fixtures\#introduction "Direct link to Introduction")

Playwright Test is based on the concept of test fixtures. Test fixtures are used to establish the environment for each test, giving the test everything it needs and nothing else. Test fixtures are isolated between tests. With fixtures, you can group tests based on their meaning, instead of their common setup.

### Built-in fixtures [​](https://playwright.dev/docs/next/test-fixtures\#built-in-fixtures "Direct link to Built-in fixtures")

You have already used test fixtures in your first test.

```codeBlockLines_e6Vv
import { test, expect } from '@playwright/test';

test('basic test', async ({ page }) => {
  await page.goto('https://playwright.dev/');

  await expect(page).toHaveTitle(/Playwright/);
});

```

The `{ page }` argument tells Playwright Test to setup the `page` fixture and provide it to your test function.

Here is a list of the pre-defined fixtures that you are likely to use most of the time:

| Fixture | Type | Description |
| --- | --- | --- |
| page | [Page](https://playwright.dev/docs/next/api/class-page "Page") | Isolated page for this test run. |
| context | [BrowserContext](https://playwright.dev/docs/next/api/class-browsercontext "BrowserContext") | Isolated context for this test run. The `page` fixture belongs to this context as well. Learn how to [configure context](https://playwright.dev/docs/next/test-configuration). |
| browser | [Browser](https://playwright.dev/docs/next/api/class-browser "Browser") | Browsers are shared across tests to optimize resources. Learn how to [configure browser](https://playwright.dev/docs/next/test-configuration). |
| browserName | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") | The name of the browser currently running the test. Either `chromium`, `firefox` or `webkit`. |
| request | [APIRequestContext](https://playwright.dev/docs/next/api/class-apirequestcontext "APIRequestContext") | Isolated [APIRequestContext](https://playwright.dev/docs/next/api/class-apirequestcontext) instance for this test run. |

### Without fixtures [​](https://playwright.dev/docs/next/test-fixtures\#without-fixtures "Direct link to Without fixtures")

Here is how typical test environment setup differs between traditional test style and the fixture-based one.

`TodoPage` is a class that helps interacting with a "todo list" page of the web app, following the [Page Object Model](https://playwright.dev/docs/next/pom) pattern. It uses Playwright's `page` internally.

Click to expand the code for the `TodoPage`

todo-page.ts

```codeBlockLines_e6Vv
import type { Page, Locator } from '@playwright/test';

export class TodoPage {
  private readonly inputBox: Locator;
  private readonly todoItems: Locator;

  constructor(public readonly page: Page) {
    this.inputBox = this.page.locator('input.new-todo');
    this.todoItems = this.page.getByTestId('todo-item');
  }

  async goto() {
    await this.page.goto('https://demo.playwright.dev/todomvc/');
  }

  async addToDo(text: string) {
    await this.inputBox.fill(text);
    await this.inputBox.press('Enter');
  }

  async remove(text: string) {
    const todo = this.todoItems.filter({ hasText: text });
    await todo.hover();
    await todo.getByLabel('Delete').click();
  }

  async removeAll() {
    while ((await this.todoItems.count()) > 0) {
      await this.todoItems.first().hover();
      await this.todoItems.getByLabel('Delete').first().click();
    }
  }
}

```

todo.spec.ts

```codeBlockLines_e6Vv
const { test } = require('@playwright/test');
const { TodoPage } = require('./todo-page');

test.describe('todo tests', () => {
  let todoPage;

  test.beforeEach(async ({ page }) => {
    todoPage = new TodoPage(page);
    await todoPage.goto();
    await todoPage.addToDo('item1');
    await todoPage.addToDo('item2');
  });

  test.afterEach(async () => {
    await todoPage.removeAll();
  });

  test('should add an item', async () => {
    await todoPage.addToDo('my item');
    // ...
  });

  test('should remove an item', async () => {
    await todoPage.remove('item1');
    // ...
  });
});

```

### With fixtures [​](https://playwright.dev/docs/next/test-fixtures\#with-fixtures "Direct link to With fixtures")

Fixtures have a number of advantages over before/after hooks:

- Fixtures **encapsulate** setup and teardown in the same place so it is easier to write. So if you have an after hook that tears down what was created in a before hook, consider turning them into a fixture.
- Fixtures are **reusable** between test files - you can define them once and use in all your tests. That's how Playwright's built-in `page` fixture works. So if you have a helper function that is used in multiple tests, consider turning it into a fixture.
- Fixtures are **on-demand** \- you can define as many fixtures as you'd like, and Playwright Test will setup only the ones needed by your test and nothing else.
- Fixtures are **composable** \- they can depend on each other to provide complex behaviors.
- Fixtures are **flexible**. Tests can use any combinations of the fixtures to tailor precise environment they need, without affecting other tests.
- Fixtures simplify **grouping**. You no longer need to wrap tests in `describe` s that set up environment, and are free to group your tests by their meaning instead.

Click to expand the code for the `TodoPage`

todo-page.ts

```codeBlockLines_e6Vv
import type { Page, Locator } from '@playwright/test';

export class TodoPage {
  private readonly inputBox: Locator;
  private readonly todoItems: Locator;

  constructor(public readonly page: Page) {
    this.inputBox = this.page.locator('input.new-todo');
    this.todoItems = this.page.getByTestId('todo-item');
  }

  async goto() {
    await this.page.goto('https://demo.playwright.dev/todomvc/');
  }

  async addToDo(text: string) {
    await this.inputBox.fill(text);
    await this.inputBox.press('Enter');
  }

  async remove(text: string) {
    const todo = this.todoItems.filter({ hasText: text });
    await todo.hover();
    await todo.getByLabel('Delete').click();
  }

  async removeAll() {
    while ((await this.todoItems.count()) > 0) {
      await this.todoItems.first().hover();
      await this.todoItems.getByLabel('Delete').first().click();
    }
  }
}

```

example.spec.ts

```codeBlockLines_e6Vv
import { test as base } from '@playwright/test';
import { TodoPage } from './todo-page';

// Extend basic test by providing a "todoPage" fixture.
const test = base.extend<{ todoPage: TodoPage }>({
  todoPage: async ({ page }, use) => {
    const todoPage = new TodoPage(page);
    await todoPage.goto();
    await todoPage.addToDo('item1');
    await todoPage.addToDo('item2');
    await use(todoPage);
    await todoPage.removeAll();
  },
});

test('should add an item', async ({ todoPage }) => {
  await todoPage.addToDo('my item');
  // ...
});

test('should remove an item', async ({ todoPage }) => {
  await todoPage.remove('item1');
  // ...
});

```

## Creating a fixture [​](https://playwright.dev/docs/next/test-fixtures\#creating-a-fixture "Direct link to Creating a fixture")

To create your own fixture, use [test.extend()](https://playwright.dev/docs/next/api/class-test#test-extend) to create a new `test` object that will include it.

Below we create two fixtures `todoPage` and `settingsPage` that follow the [Page Object Model](https://playwright.dev/docs/next/pom) pattern.

Click to expand the code for the `TodoPage` and `SettingsPage`

todo-page.ts

```codeBlockLines_e6Vv
import type { Page, Locator } from '@playwright/test';

export class TodoPage {
  private readonly inputBox: Locator;
  private readonly todoItems: Locator;

  constructor(public readonly page: Page) {
    this.inputBox = this.page.locator('input.new-todo');
    this.todoItems = this.page.getByTestId('todo-item');
  }

  async goto() {
    await this.page.goto('https://demo.playwright.dev/todomvc/');
  }

  async addToDo(text: string) {
    await this.inputBox.fill(text);
    await this.inputBox.press('Enter');
  }

  async remove(text: string) {
    const todo = this.todoItems.filter({ hasText: text });
    await todo.hover();
    await todo.getByLabel('Delete').click();
  }

  async removeAll() {
    while ((await this.todoItems.count()) > 0) {
      await this.todoItems.first().hover();
      await this.todoItems.getByLabel('Delete').first().click();
    }
  }
}

```

SettingsPage is similar:

settings-page.ts

```codeBlockLines_e6Vv
import type { Page } from '@playwright/test';

export class SettingsPage {
  constructor(public readonly page: Page) {
  }

  async switchToDarkMode() {
    // ...
  }
}

```

my-test.ts

```codeBlockLines_e6Vv
import { test as base } from '@playwright/test';
import { TodoPage } from './todo-page';
import { SettingsPage } from './settings-page';

// Declare the types of your fixtures.
type MyFixtures = {
  todoPage: TodoPage;
  settingsPage: SettingsPage;
};

// Extend base test by providing "todoPage" and "settingsPage".
// This new "test" can be used in multiple test files, and each of them will get the fixtures.
export const test = base.extend<MyFixtures>({
  todoPage: async ({ page }, use) => {
    // Set up the fixture.
    const todoPage = new TodoPage(page);
    await todoPage.goto();
    await todoPage.addToDo('item1');
    await todoPage.addToDo('item2');

    // Use the fixture value in the test.
    await use(todoPage);

    // Clean up the fixture.
    await todoPage.removeAll();
  },

  settingsPage: async ({ page }, use) => {
    await use(new SettingsPage(page));
  },
});
export { expect } from '@playwright/test';

```

note

Custom fixture names should start with a letter or underscore, and can contain only letters, numbers, underscores.

## Using a fixture [​](https://playwright.dev/docs/next/test-fixtures\#using-a-fixture "Direct link to Using a fixture")

Just mention fixture in your test function argument, and test runner will take care of it. Fixtures are also available in hooks and other fixtures. If you use TypeScript, fixtures will have the right type.

Below we use the `todoPage` and `settingsPage` fixtures defined above.

```codeBlockLines_e6Vv
import { test, expect } from './my-test';

test.beforeEach(async ({ settingsPage }) => {
  await settingsPage.switchToDarkMode();
});

test('basic test', async ({ todoPage, page }) => {
  await todoPage.addToDo('something nice');
  await expect(page.getByTestId('todo-title')).toContainText(['something nice']);
});

```

## Overriding fixtures [​](https://playwright.dev/docs/next/test-fixtures\#overriding-fixtures "Direct link to Overriding fixtures")

In addition to creating your own fixtures, you can also override existing fixtures to fit your needs. Consider the following example which overrides the `page` fixture by automatically navigating to some `baseURL`:

```codeBlockLines_e6Vv
import { test as base } from '@playwright/test';

export const test = base.extend({
  page: async ({ baseURL, page }, use) => {
    await page.goto(baseURL);
    await use(page);
  },
});

```

Notice that in this example, the `page` fixture is able to depend on other built-in fixtures such as [testOptions.baseURL](https://playwright.dev/docs/next/api/class-testoptions#test-options-base-url). We can now configure `baseURL` in the configuration file, or locally in the test file with [test.use()](https://playwright.dev/docs/next/api/class-test#test-use).

example.spec.ts

```codeBlockLines_e6Vv

test.use({ baseURL: 'https://playwright.dev' });

```

Fixtures can also be overridden where the base fixture is completely replaced with something different. For example, we could override the [testOptions.storageState](https://playwright.dev/docs/next/api/class-testoptions#test-options-storage-state) fixture to provide our own data.

```codeBlockLines_e6Vv
import { test as base } from '@playwright/test';

export const test = base.extend({
  storageState: async ({}, use) => {
    const cookie = await getAuthCookie();
    await use({ cookies: [cookie] });
  },
});

```

## Worker-scoped fixtures [​](https://playwright.dev/docs/next/test-fixtures\#worker-scoped-fixtures "Direct link to Worker-scoped fixtures")

Playwright Test uses [worker processes](https://playwright.dev/docs/next/test-parallel) to run test files. Similarly to how test fixtures are set up for individual test runs, worker fixtures are set up for each worker process. That's where you can set up services, run servers, etc. Playwright Test will reuse the worker process for as many test files as it can, provided their worker fixtures match and hence environments are identical.

Below we'll create an `account` fixture that will be shared by all tests in the same worker, and override the `page` fixture to login into this account for each test. To generate unique accounts, we'll use the [workerInfo.workerIndex](https://playwright.dev/docs/next/api/class-workerinfo#worker-info-worker-index) that is available to any test or fixture. Note the tuple-like syntax for the worker fixture - we have to pass `{scope: 'worker'}` so that test runner sets up this fixture once per worker.

my-test.ts

```codeBlockLines_e6Vv
import { test as base } from '@playwright/test';

type Account = {
  username: string;
  password: string;
};

// Note that we pass worker fixture types as a second template parameter.
export const test = base.extend<{}, { account: Account }>({
  account: [async ({ browser }, use, workerInfo) => {\
    // Unique username.\
    const username = 'user' + workerInfo.workerIndex;\
    const password = 'verysecure';\
\
    // Create the account with Playwright.\
    const page = await browser.newPage();\
    await page.goto('/signup');\
    await page.getByLabel('User Name').fill(username);\
    await page.getByLabel('Password').fill(password);\
    await page.getByText('Sign up').click();\
    // Make sure everything is ok.\
    await expect(page.getByTestId('result')).toHaveText('Success');\
    // Do not forget to cleanup.\
    await page.close();\
\
    // Use the account value.\
    await use({ username, password });\
  }, { scope: 'worker' }],

  page: async ({ page, account }, use) => {
    // Sign in with our account.
    const { username, password } = account;
    await page.goto('/signin');
    await page.getByLabel('User Name').fill(username);
    await page.getByLabel('Password').fill(password);
    await page.getByText('Sign in').click();
    await expect(page.getByTestId('userinfo')).toHaveText(username);

    // Use signed-in page in the test.
    await use(page);
  },
});
export { expect } from '@playwright/test';

```

## Automatic fixtures [​](https://playwright.dev/docs/next/test-fixtures\#automatic-fixtures "Direct link to Automatic fixtures")

Automatic fixtures are set up for each test/worker, even when the test does not list them directly. To create an automatic fixture, use the tuple syntax and pass `{ auto: true }`.

Here is an example fixture that automatically attaches debug logs when the test fails, so we can later review the logs in the reporter. Note how it uses [TestInfo](https://playwright.dev/docs/next/api/class-testinfo "TestInfo") object that is available in each test/fixture to retrieve metadata about the test being run.

my-test.ts

```codeBlockLines_e6Vv
import debug from 'debug';
import fs from 'fs';
import { test as base } from '@playwright/test';

export const test = base.extend<{ saveLogs: void }>({
  saveLogs: [async ({}, use, testInfo) => {\
    // Collecting logs during the test.\
    const logs = [];\
    debug.log = (...args) => logs.push(args.map(String).join(''));\
    debug.enable('myserver');\
\
    await use();\
\
    // After the test we can check whether the test passed or failed.\
    if (testInfo.status !== testInfo.expectedStatus) {\
      // outputPath() API guarantees a unique file name.\
      const logFile = testInfo.outputPath('logs.txt');\
      await fs.promises.writeFile(logFile, logs.join('\n'), 'utf8');\
      testInfo.attachments.push({ name: 'logs', contentType: 'text/plain', path: logFile });\
    }\
  }, { auto: true }],
});
export { expect } from '@playwright/test';

```

## Fixture timeout [​](https://playwright.dev/docs/next/test-fixtures\#fixture-timeout "Direct link to Fixture timeout")

By default, fixture shares timeout with the test. However, for slow fixtures, especially [worker-scoped](https://playwright.dev/docs/next/test-fixtures#worker-scoped-fixtures) ones, it is convenient to have a separate timeout. This way you can keep the overall test timeout small, and give the slow fixture more time.

```codeBlockLines_e6Vv
import { test as base, expect } from '@playwright/test';

const test = base.extend<{ slowFixture: string }>({
  slowFixture: [async ({}, use) => {\
    // ... perform a slow operation ...\
    await use('hello');\
  }, { timeout: 60000 }]
});

test('example test', async ({ slowFixture }) => {
  // ...
});

```

## Fixtures-options [​](https://playwright.dev/docs/next/test-fixtures\#fixtures-options "Direct link to Fixtures-options")

Playwright Test supports running multiple test projects that can be separately configured. You can use "option" fixtures to make your configuration options declarative and type-checked. Learn more about [parametrizing tests](https://playwright.dev/docs/next/test-parameterize).

Below we'll create a `defaultItem` option in addition to the `todoPage` fixture from other examples. This option will be set in configuration file. Note the tuple syntax and `{ option: true }` argument.

Click to expand the code for the `TodoPage`

todo-page.ts

```codeBlockLines_e6Vv
import type { Page, Locator } from '@playwright/test';

export class TodoPage {
  private readonly inputBox: Locator;
  private readonly todoItems: Locator;

  constructor(public readonly page: Page) {
    this.inputBox = this.page.locator('input.new-todo');
    this.todoItems = this.page.getByTestId('todo-item');
  }

  async goto() {
    await this.page.goto('https://demo.playwright.dev/todomvc/');
  }

  async addToDo(text: string) {
    await this.inputBox.fill(text);
    await this.inputBox.press('Enter');
  }

  async remove(text: string) {
    const todo = this.todoItems.filter({ hasText: text });
    await todo.hover();
    await todo.getByLabel('Delete').click();
  }

  async removeAll() {
    while ((await this.todoItems.count()) > 0) {
      await this.todoItems.first().hover();
      await this.todoItems.getByLabel('Delete').first().click();
    }
  }
}

```

my-test.ts

```codeBlockLines_e6Vv
import { test as base } from '@playwright/test';
import { TodoPage } from './todo-page';

// Declare your options to type-check your configuration.
export type MyOptions = {
  defaultItem: string;
};
type MyFixtures = {
  todoPage: TodoPage;
};

// Specify both option and fixture types.
export const test = base.extend<MyOptions & MyFixtures>({
  // Define an option and provide a default value.
  // We can later override it in the config.
  defaultItem: ['Something nice', { option: true }],

  // Our "todoPage" fixture depends on the option.
  todoPage: async ({ page, defaultItem }, use) => {
    const todoPage = new TodoPage(page);
    await todoPage.goto();
    await todoPage.addToDo(defaultItem);
    await use(todoPage);
    await todoPage.removeAll();
  },
});
export { expect } from '@playwright/test';

```

We can now use `todoPage` fixture as usual, and set the `defaultItem` option in the config file.

playwright.config.ts

```codeBlockLines_e6Vv
import { defineConfig } from '@playwright/test';
import type { MyOptions } from './my-test';

export default defineConfig<MyOptions>({
  projects: [\
    {\
      name: 'shopping',\
      use: { defaultItem: 'Buy milk' },\
    },\
    {\
      name: 'wellbeing',\
      use: { defaultItem: 'Exercise!' },\
    },\
  ]
});

```

**Array as an option value**

If the value of your option is an array, for example `[{ name: 'Alice' }, { name: 'Bob' }]`, you'll need to wrap it into an extra array when providing the value. This is best illustrated with an example.

```codeBlockLines_e6Vv
type Person = { name: string };
const test = base.extend<{ persons: Person[] }>({
  // Declare the option, default value is an empty array.
  persons: [[], { option: true }],
});

// Option value is an array of persons.
const actualPersons = [{ name: 'Alice' }, { name: 'Bob' }];
test.use({
  // CORRECT: Wrap the value into an array and pass the scope.
  persons: [actualPersons, { scope: 'test' }],
});

test.use({
  // WRONG: passing an array value directly will not work.
  persons: actualPersons,
});

```

## Execution order [​](https://playwright.dev/docs/next/test-fixtures\#execution-order "Direct link to Execution order")

Each fixture has a setup and teardown phase separated by the `await use()` call in the fixture. Setup is executed before the fixture is used by the test/hook, and teardown is executed when the fixture will not be used by the test/hook anymore.

Fixtures follow these rules to determine the execution order:

- When fixture A depends on fixture B: B is always set up before A and torn down after A.
- Non-automatic fixtures are executed lazily, only when the test/hook needs them.
- Test-scoped fixtures are torn down after each test, while worker-scoped fixtures are only torn down when the worker process executing tests is shutdown.

Consider the following example:

```codeBlockLines_e6Vv
import { test as base } from '@playwright/test';

const test = base.extend<{
  testFixture: string,
  autoTestFixture: string,
  unusedFixture: string,
}, {
  workerFixture: string,
  autoWorkerFixture: string,
}>({
  workerFixture: [async ({ browser }) => {\
    // workerFixture setup...\
    await use('workerFixture');\
    // workerFixture teardown...\
  }, { scope: 'worker' }],

  autoWorkerFixture: [async ({ browser }) => {\
    // autoWorkerFixture setup...\
    await use('autoWorkerFixture');\
    // autoWorkerFixture teardown...\
  }, { scope: 'worker', auto: true }],

  testFixture: [async ({ page, workerFixture }) => {\
    // testFixture setup...\
    await use('testFixture');\
    // testFixture teardown...\
  }, { scope: 'test' }],

  autoTestFixture: [async () => {\
    // autoTestFixture setup...\
    await use('autoTestFixture');\
    // autoTestFixture teardown...\
  }, { scope: 'test', auto: true }],

  unusedFixture: [async ({ page }) => {\
    // unusedFixture setup...\
    await use('unusedFixture');\
    // unusedFixture teardown...\
  }, { scope: 'test' }],
});

test.beforeAll(async () => { /* ... */ });
test.beforeEach(async ({ page }) => { /* ... */ });
test('first test', async ({ page }) => { /* ... */ });
test('second test', async ({ testFixture }) => { /* ... */ });
test.afterEach(async () => { /* ... */ });
test.afterAll(async () => { /* ... */ });

```

Normally, if all tests pass and no errors are thrown, the order of execution is as following.

- worker setup and `beforeAll` section:
  - `browser` setup because it is required by `autoWorkerFixture`.
  - `autoWorkerFixture` setup because automatic worker fixtures are always set up before anything else.
  - `beforeAll` runs.
- `first test` section:
  - `autoTestFixture` setup because automatic test fixtures are always set up before test and `beforeEach` hooks.
  - `page` setup because it is required in `beforeEach` hook.
  - `beforeEach` runs.
  - `first test` runs.
  - `afterEach` runs.
  - `page` teardown because it is a test-scoped fixture and should be torn down after the test finishes.
  - `autoTestFixture` teardown because it is a test-scoped fixture and should be torn down after the test finishes.
- `second test` section:
  - `autoTestFixture` setup because automatic test fixtures are always set up before test and `beforeEach` hooks.
  - `page` setup because it is required in `beforeEach` hook.
  - `beforeEach` runs.
  - `workerFixture` setup because it is required by `testFixture` that is required by the `second test`.
  - `testFixture` setup because it is required by the `second test`.
  - `second test` runs.
  - `afterEach` runs.
  - `testFixture` teardown because it is a test-scoped fixture and should be torn down after the test finishes.
  - `page` teardown because it is a test-scoped fixture and should be torn down after the test finishes.
  - `autoTestFixture` teardown because it is a test-scoped fixture and should be torn down after the test finishes.
- `afterAll` and worker teardown section:
  - `afterAll` runs.
  - `workerFixture` teardown because it is a workers-scoped fixture and should be torn down once at the end.
  - `autoWorkerFixture` teardown because it is a workers-scoped fixture and should be torn down once at the end.
  - `browser` teardown because it is a workers-scoped fixture and should be torn down once at the end.

A few observations:

- `page` and `autoTestFixture` are set up and torn down for each test, as test-scoped fixtures.
- `unusedFixture` is never set up because it is not used by any tests/hooks.
- `testFixture` depends on `workerFixture` and triggers its setup.
- `workerFixture` is lazily set up before the second test, but torn down once during worker shutdown, as a worker-scoped fixture.
- `autoWorkerFixture` is set up for `beforeAll` hook, but `autoTestFixture` is not.

## Combine custom fixtures from multiple modules [​](https://playwright.dev/docs/next/test-fixtures\#combine-custom-fixtures-from-multiple-modules "Direct link to Combine custom fixtures from multiple modules")

You can merge test fixtures from multiple files or modules:

fixtures.ts

```codeBlockLines_e6Vv
import { mergeTests } from '@playwright/test';
import { test as dbTest } from 'database-test-utils';
import { test as a11yTest } from 'a11y-test-utils';

export const test = mergeTests(dbTest, a11yTest);

```

test.spec.ts

```codeBlockLines_e6Vv
import { test } from './fixtures';

test('passes', async ({ database, page, a11y }) => {
  // use database and a11y fixtures.
});

```

## Box fixtures [​](https://playwright.dev/docs/next/test-fixtures\#box-fixtures "Direct link to Box fixtures")

Usually, custom fixtures are reported as separate steps in the UI mode, Trace Viewer and various test reports. They also appear in error messages from the test runner. For frequently-used fixtures, this can mean lots of noise. You can stop the fixtures steps from being shown in the UI by "boxing" it.

```codeBlockLines_e6Vv
import { test as base } from '@playwright/test';

export const test = base.extend({
  helperFixture: [async ({}, use, testInfo) => {\
    // ...\
  }, { box: true }],
});

```

This is useful for non-interesting helper fixtures. For example, an [automatic](https://playwright.dev/docs/next/test-fixtures#automatic-fixtures) fixture that sets up some common data can be safely hidden from a test report.

## Custom fixture title [​](https://playwright.dev/docs/next/test-fixtures\#custom-fixture-title "Direct link to Custom fixture title")

Instead of the usual fixture name, you can give fixtures a custom title that will be shown in test reports and error messages.

```codeBlockLines_e6Vv
import { test as base } from '@playwright/test';

export const test = base.extend({
  innerFixture: [async ({}, use, testInfo) => {\
    // ...\
  }, { title: 'my fixture' }],
});

```

## Adding global beforeEach/afterEach hooks [​](https://playwright.dev/docs/next/test-fixtures\#adding-global-beforeeachaftereach-hooks "Direct link to Adding global beforeEach/afterEach hooks")

[test.beforeEach()](https://playwright.dev/docs/next/api/class-test#test-before-each) and [test.afterEach()](https://playwright.dev/docs/next/api/class-test#test-after-each) hooks run before/after each test declared in the same file and same [test.describe()](https://playwright.dev/docs/next/api/class-test#test-describe) block (if any). If you want to declare hooks that run before/after each test globally, you can declare them as auto fixtures like this:

fixtures.ts

```codeBlockLines_e6Vv
import { test as base } from '@playwright/test';

export const test = base.extend<{ forEachTest: void }>({
  forEachTest: [async ({ page }, use) => {\
    // This code runs before every test.\
    await page.goto('http://localhost:8000');\
    await use();\
    // This code runs after every test.\
    console.log('Last URL:', page.url());\
  }, { auto: true }],  // automatically starts for every test.
});

```

And then import the fixtures in all your tests:

mytest.spec.ts

```codeBlockLines_e6Vv
import { test } from './fixtures';
import { expect } from '@playwright/test';

test('basic', async ({ page }) => {
  expect(page).toHaveURL('http://localhost:8000');
  await page.goto('https://playwright.dev');
});

```

## Adding global beforeAll/afterAll hooks [​](https://playwright.dev/docs/next/test-fixtures\#adding-global-beforeallafterall-hooks "Direct link to Adding global beforeAll/afterAll hooks")

[test.beforeAll()](https://playwright.dev/docs/next/api/class-test#test-before-all) and [test.afterAll()](https://playwright.dev/docs/next/api/class-test#test-after-all) hooks run before/after all tests declared in the same file and same [test.describe()](https://playwright.dev/docs/next/api/class-test#test-describe) block (if any), once per worker process. If you want to declare hooks that run before/after all tests in every file, you can declare them as auto fixtures with `scope: 'worker'` as follows:

fixtures.ts

```codeBlockLines_e6Vv
import { test as base } from '@playwright/test';

export const test = base.extend<{}, { forEachWorker: void }>({
  forEachWorker: [async ({}, use) => {\
    // This code runs before all the tests in the worker process.\
    console.log(`Starting test worker ${test.info().workerIndex}`);\
    await use();\
    // This code runs after all the tests in the worker process.\
    console.log(`Stopping test worker ${test.info().workerIndex}`);\
  }, { scope: 'worker', auto: true }],  // automatically starts for every worker.
});

```

And then import the fixtures in all your tests:

mytest.spec.ts

```codeBlockLines_e6Vv
import { test } from './fixtures';
import { expect } from '@playwright/test';

test('basic', async ({ }) => {
  // ...
});

```

Note that the fixtures will still run once per [worker process](https://playwright.dev/docs/next/test-parallel#worker-processes), but you don't need to redeclare them in every file.

- [Introduction](https://playwright.dev/docs/next/test-fixtures#introduction)
  - [Built-in fixtures](https://playwright.dev/docs/next/test-fixtures#built-in-fixtures)
  - [Without fixtures](https://playwright.dev/docs/next/test-fixtures#without-fixtures)
  - [With fixtures](https://playwright.dev/docs/next/test-fixtures#with-fixtures)
- [Creating a fixture](https://playwright.dev/docs/next/test-fixtures#creating-a-fixture)
- [Using a fixture](https://playwright.dev/docs/next/test-fixtures#using-a-fixture)
- [Overriding fixtures](https://playwright.dev/docs/next/test-fixtures#overriding-fixtures)
- [Worker-scoped fixtures](https://playwright.dev/docs/next/test-fixtures#worker-scoped-fixtures)
- [Automatic fixtures](https://playwright.dev/docs/next/test-fixtures#automatic-fixtures)
- [Fixture timeout](https://playwright.dev/docs/next/test-fixtures#fixture-timeout)
- [Fixtures-options](https://playwright.dev/docs/next/test-fixtures#fixtures-options)
- [Execution order](https://playwright.dev/docs/next/test-fixtures#execution-order)
- [Combine custom fixtures from multiple modules](https://playwright.dev/docs/next/test-fixtures#combine-custom-fixtures-from-multiple-modules)
- [Box fixtures](https://playwright.dev/docs/next/test-fixtures#box-fixtures)
- [Custom fixture title](https://playwright.dev/docs/next/test-fixtures#custom-fixture-title)
- [Adding global beforeEach/afterEach hooks](https://playwright.dev/docs/next/test-fixtures#adding-global-beforeeachaftereach-hooks)
- [Adding global beforeAll/afterAll hooks](https://playwright.dev/docs/next/test-fixtures#adding-global-beforeallafterall-hooks)

## Playwright Locators Guide
[Skip to main content](https://playwright.dev/docs/next/other-locators#__docusaurus_skipToContent_fallback)

This is unreleased documentation for Playwright **Next** version.

For up-to-date documentation, see the **[latest version](https://playwright.dev/docs/other-locators)** (stable).

Version: Next

On this page

## Introduction [​](https://playwright.dev/docs/next/other-locators\#introduction "Direct link to Introduction")

note

Check out the main [locators guide](https://playwright.dev/docs/next/locators) for most common and recommended locators.

In addition to recommended locators like [page.getByRole()](https://playwright.dev/docs/next/api/class-page#page-get-by-role) and [page.getByText()](https://playwright.dev/docs/next/api/class-page#page-get-by-text), Playwright supports a variety of other locators described in this guide.

## CSS locator [​](https://playwright.dev/docs/next/other-locators\#css-locator "Direct link to CSS locator")

note

We recommend prioritizing [user-visible locators](https://playwright.dev/docs/next/locators#quick-guide) like text or accessible role instead of using CSS that is tied to the implementation and could break when the page changes.

Playwright can locate an element by CSS selector.

```codeBlockLines_e6Vv
await page.locator('css=button').click();

```

Playwright augments standard CSS selectors in two ways:

- CSS selectors pierce open shadow DOM.
- Playwright adds custom pseudo-classes like `:visible`, `:has-text()`, `:has()`, `:is()`, `:nth-match()` and more.

### CSS: matching by text [​](https://playwright.dev/docs/next/other-locators\#css-matching-by-text "Direct link to CSS: matching by text")

Playwright include a number of CSS pseudo-classes to match elements by their text content.

- `article:has-text("Playwright")` \- the `:has-text()` matches any element containing specified text somewhere inside, possibly in a child or a descendant element. Matching is case-insensitive, trims whitespace and searches for a substring.

For example, `article:has-text("Playwright")` matches `<article><div>Playwright</div></article>`.

Note that `:has-text()` should be used together with other CSS specifiers, otherwise it will match all the elements containing specified text, including the `<body>`.





```codeBlockLines_e6Vv
// Wrong, will match many elements including <body>
await page.locator(':has-text("Playwright")').click();
// Correct, only matches the <article> element
await page.locator('article:has-text("Playwright")').click();

```

- `#nav-bar :text("Home")` \- the `:text()` pseudo-class matches the smallest element containing specified text. Matching is case-insensitive, trims whitespace and searches for a substring.

For example, this will find an element with text "Home" somewhere inside the `#nav-bar` element:





```codeBlockLines_e6Vv
await page.locator('#nav-bar :text("Home")').click();

```

- `#nav-bar :text-is("Home")` \- the `:text-is()` pseudo-class matches the smallest element with exact text. Exact matching is case-sensitive, trims whitespace and searches for the full string.

For example, `:text-is("Log")` does not match `<button>Log in</button>` because `<button>` contains a single text node `"Log in"` that is not equal to `"Log"`. However, `:text-is("Log")` matches `<button> Log <span>in</span></button>`, because `<button>` contains a text node `" Log "`.

Similarly, `:text-is("Download")` will not match `<button>download</button>` because it is case-sensitive.


- `#nav-bar :text-matches("reg?ex", "i")` \- the `:text-matches()` pseudo-class matches the smallest element with text content matching the [JavaScript-like regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp).

For example, `:text-matches("Log\s*in", "i")` matches `<button>Login</button>` and `<button>log IN</button>`.


note

Text matching always normalizes whitespace. For example, it turns multiple spaces into one, turns line breaks into spaces and ignores leading and trailing whitespace.

note

Input elements of the type `button` and `submit` are matched by their `value` instead of text content. For example, `:text("Log in")` matches `<input type=button value="Log in">`.

### CSS: matching only visible elements [​](https://playwright.dev/docs/next/other-locators\#css-matching-only-visible-elements "Direct link to CSS: matching only visible elements")

Playwright supports the `:visible` pseudo class in CSS selectors. For example, `css=button` matches all the buttons on the page, while `css=button:visible` only matches visible buttons. This is useful to distinguish elements that are very similar but differ in visibility.

Consider a page with two buttons, first invisible and second visible.

```codeBlockLines_e6Vv
<button style='display: none'>Invisible</button>
<button>Visible</button>

```

- This will find both buttons and throw a [strictness](https://playwright.dev/docs/next/locators#strictness) violation error:





```codeBlockLines_e6Vv
await page.locator('button').click();

```

- This will only find a second button, because it is visible, and then click it.





```codeBlockLines_e6Vv
await page.locator('button:visible').click();

```


### CSS: elements that contain other elements [​](https://playwright.dev/docs/next/other-locators\#css-elements-that-contain-other-elements "Direct link to CSS: elements that contain other elements")

The `:has()` pseudo-class is an [experimental CSS pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/:has). It returns an element if any of the selectors passed as parameters relative to the `:scope` of the given element match at least one element.

Following snippet returns text content of an `<article>` element that has a `<div class=promo>` inside.

```codeBlockLines_e6Vv
await page.locator('article:has(div.promo)').textContent();

```

### CSS: elements matching one of the conditions [​](https://playwright.dev/docs/next/other-locators\#css-elements-matching-one-of-the-conditions "Direct link to CSS: elements matching one of the conditions")

Comma-separated list of CSS selectors will match all elements that can be selected by one of the selectors in that list.

```codeBlockLines_e6Vv
// Clicks a <button> that has either a "Log in" or "Sign in" text.
await page.locator('button:has-text("Log in"), button:has-text("Sign in")').click();

```

The `:is()` pseudo-class is an [experimental CSS pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/:is) that may be useful for specifying a list of extra conditions on an element.

### CSS: matching elements based on layout [​](https://playwright.dev/docs/next/other-locators\#css-matching-elements-based-on-layout "Direct link to CSS: matching elements based on layout")

note

Matching based on layout may produce unexpected results. For example, a different element could be matched when layout changes by one pixel.

Sometimes, it is hard to come up with a good selector to the target element when it lacks distinctive features. In this case, using Playwright layout CSS pseudo-classes could help. These can be combined with regular CSS to pinpoint one of the multiple choices.

For example, `input:right-of(:text("Password"))` matches an input field that is to the right of text "Password" - useful when the page has multiple inputs that are hard to distinguish between each other.

Note that layout pseudo-classes are useful in addition to something else, like `input`. If you use a layout pseudo-class alone, like `:right-of(:text("Password"))`, most likely you'll get not the input you are looking for, but some empty element in between the text and the target input.

Layout pseudo-classes use [bounding client rect](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect) to compute distance and relative position of the elements.

- `:right-of(div > button)` \- Matches elements that are to the right of any element matching the inner selector, at any vertical position.
- `:left-of(div > button)` \- Matches elements that are to the left of any element matching the inner selector, at any vertical position.
- `:above(div > button)` \- Matches elements that are above any of the elements matching the inner selector, at any horizontal position.
- `:below(div > button)` \- Matches elements that are below any of the elements matching the inner selector, at any horizontal position.
- `:near(div > button)` \- Matches elements that are near (within 50 CSS pixels) any of the elements matching the inner selector.

Note that resulting matches are sorted by their distance to the anchor element, so you can use [locator.first()](https://playwright.dev/docs/next/api/class-locator#locator-first) to pick the closest one. This is only useful if you have something like a list of similar elements, where the closest is obviously the right one. However, using [locator.first()](https://playwright.dev/docs/next/api/class-locator#locator-first) in other cases most likely won't work as expected - it will not target the element you are searching for, but some other element that happens to be the closest like a random empty `<div>`, or an element that is scrolled out and is not currently visible.

```codeBlockLines_e6Vv
// Fill an input to the right of "Username".
await page.locator('input:right-of(:text("Username"))').fill('value');

// Click a button near the promo card.
await page.locator('button:near(.promo-card)').click();

// Click the radio input in the list closest to the "Label 3".
await page.locator('[type=radio]:left-of(:text("Label 3"))').first().click();

```

All layout pseudo-classes support optional maximum pixel distance as the last argument. For example `button:near(:text("Username"), 120)` matches a button that is at most 120 CSS pixels away from the element with the text "Username".

### CSS: pick n-th match from the query result [​](https://playwright.dev/docs/next/other-locators\#css-pick-n-th-match-from-the-query-result "Direct link to CSS: pick n-th match from the query result")

note

It is usually possible to distinguish elements by some attribute or text content, which is more resilient to page changes.

Sometimes page contains a number of similar elements, and it is hard to select a particular one. For example:

```codeBlockLines_e6Vv
<section> <button>Buy</button> </section>
<article><div> <button>Buy</button> </div></article>
<div><div> <button>Buy</button> </div></div>

```

In this case, `:nth-match(:text("Buy"), 3)` will select the third button from the snippet above. Note that index is one-based.

```codeBlockLines_e6Vv
// Click the third "Buy" button
await page.locator(':nth-match(:text("Buy"), 3)').click();

```

`:nth-match()` is also useful to wait until a specified number of elements appear, using [locator.waitFor()](https://playwright.dev/docs/next/api/class-locator#locator-wait-for).

```codeBlockLines_e6Vv
// Wait until all three buttons are visible
await page.locator(':nth-match(:text("Buy"), 3)').waitFor();

```

note

Unlike [`:nth-child()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-child), elements do not have to be siblings, they could be anywhere on the page. In the snippet above, all three buttons match `:text("Buy")` selector, and `:nth-match()` selects the third button.

## N-th element locator [​](https://playwright.dev/docs/next/other-locators\#n-th-element-locator "Direct link to N-th element locator")

You can narrow down query to the n-th match using the `nth=` locator passing a zero-based index.

```codeBlockLines_e6Vv
// Click first button
await page.locator('button').locator('nth=0').click();

// Click last button
await page.locator('button').locator('nth=-1').click();

```

## Parent element locator [​](https://playwright.dev/docs/next/other-locators\#parent-element-locator "Direct link to Parent element locator")

When you need to target a parent element of some other element, most of the time you should [locator.filter()](https://playwright.dev/docs/next/api/class-locator#locator-filter) by the child locator. For example, consider the following DOM structure:

```codeBlockLines_e6Vv
<li><label>Hello</label></li>
<li><label>World</label></li>

```

If you'd like to target the parent `<li>` of a label with text `"Hello"`, using [locator.filter()](https://playwright.dev/docs/next/api/class-locator#locator-filter) works best:

```codeBlockLines_e6Vv
const child = page.getByText('Hello');
const parent = page.getByRole('listitem').filter({ has: child });

```

Alternatively, if you cannot find a suitable locator for the parent element, use `xpath=..`. Note that this method is not as reliable, because any changes to the DOM structure will break your tests. Prefer [locator.filter()](https://playwright.dev/docs/next/api/class-locator#locator-filter) when possible.

```codeBlockLines_e6Vv
const parent = page.getByText('Hello').locator('xpath=..');

```

## React locator [​](https://playwright.dev/docs/next/other-locators\#react-locator "Direct link to React locator")

note

React locator is experimental and prefixed with `_`. The functionality might change in future.

React locator allows finding elements by their component name and property values. The syntax is very similar to [CSS attribute selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors) and supports all CSS attribute selector operators.

In React locator, component names are transcribed with **CamelCase**.

```codeBlockLines_e6Vv
await page.locator('_react=BookItem').click();

```

More examples:

- match by **component**: `_react=BookItem`
- match by component and **exact property value**, case-sensitive: `_react=BookItem[author = "Steven King"]`
- match by property value only, **case-insensitive**: `_react=[author = "steven king" i]`
- match by component and **truthy property value**: `_react=MyButton[enabled]`
- match by component and **boolean value**: `_react=MyButton[enabled = false]`
- match by property **value substring**: `_react=[author *= "King"]`
- match by component and **multiple properties**: `_react=BookItem[author *= "king" i][year = 1990]`
- match by **nested** property value: `_react=[some.nested.value = 12]`
- match by component and property value **prefix**: `_react=BookItem[author ^= "Steven"]`
- match by component and property value **suffix**: `_react=BookItem[author $= "Steven"]`
- match by component and **key**: `_react=BookItem[key = '2']`
- match by property value **regex**: `_react=[author = /Steven(\\s+King)?/i]`

To find React element names in a tree use [React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi).

note

React locator supports React 15 and above.

note

React locator, as well as [React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi), only work against **unminified** application builds.

## Vue locator [​](https://playwright.dev/docs/next/other-locators\#vue-locator "Direct link to Vue locator")

note

Vue locator is experimental and prefixed with `_`. The functionality might change in future.

Vue locator allows finding elements by their component name and property values. The syntax is very similar to [CSS attribute selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors) and supports all CSS attribute selector operators.

In Vue locator, component names are transcribed with **kebab-case**.

```codeBlockLines_e6Vv
await page.locator('_vue=book-item').click();

```

More examples:

- match by **component**: `_vue=book-item`
- match by component and **exact property value**, case-sensitive: `_vue=book-item[author = "Steven King"]`
- match by property value only, **case-insensitive**: `_vue=[author = "steven king" i]`
- match by component and **truthy property value**: `_vue=my-button[enabled]`
- match by component and **boolean value**: `_vue=my-button[enabled = false]`
- match by property **value substring**: `_vue=[author *= "King"]`
- match by component and **multiple properties**: `_vue=book-item[author *= "king" i][year = 1990]`
- match by **nested** property value: `_vue=[some.nested.value = 12]`
- match by component and property value **prefix**: `_vue=book-item[author ^= "Steven"]`
- match by component and property value **suffix**: `_vue=book-item[author $= "Steven"]`
- match by property value **regex**: `_vue=[author = /Steven(\\s+King)?/i]`

To find Vue element names in a tree use [Vue DevTools](https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=en).

note

Vue locator supports Vue2 and above.

note

Vue locator, as well as [Vue DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi), only work against **unminified** application builds.

## XPath locator [​](https://playwright.dev/docs/next/other-locators\#xpath-locator "Direct link to XPath locator")

warning

We recommend prioritizing [user-visible locators](https://playwright.dev/docs/next/locators#quick-guide) like text or accessible role instead of using XPath that is tied to the implementation and easily break when the page changes.

XPath locators are equivalent to calling [`Document.evaluate`](https://developer.mozilla.org/en/docs/Web/API/Document/evaluate).

```codeBlockLines_e6Vv
await page.locator('xpath=//button').click();

```

note

Any selector string starting with `//` or `..` are assumed to be an xpath selector. For example, Playwright converts `'//html/body'` to `'xpath=//html/body'`.

note

XPath does not pierce shadow roots.

### XPath union [​](https://playwright.dev/docs/next/other-locators\#xpath-union "Direct link to XPath union")

Pipe operator ( `|`) can be used to specify multiple selectors in XPath. It will match all elements that can be selected by one of the selectors in that list.

```codeBlockLines_e6Vv
// Waits for either confirmation dialog or load spinner.
await page.locator(
    `//span[contains(@class, 'spinner__loading')]|//div[@id='confirmation']`
).waitFor();

```

## Label to form control retargeting [​](https://playwright.dev/docs/next/other-locators\#label-to-form-control-retargeting "Direct link to Label to form control retargeting")

warning

We recommend [locating by label text](https://playwright.dev/docs/next/locators#locate-by-label) instead of relying to label-to-control retargeting.

Targeted input actions in Playwright automatically distinguish between labels and controls, so you can target the label to perform an action on the associated control.

For example, consider the following DOM structure: `<label for="password">Password:</label><input id="password" type="password">`. You can target the label by its "Password" text using [page.getByText()](https://playwright.dev/docs/next/api/class-page#page-get-by-text). However, the following actions will be performed on the input instead of the label:

- [locator.click()](https://playwright.dev/docs/next/api/class-locator#locator-click) will click the label and automatically focus the input field;
- [locator.fill()](https://playwright.dev/docs/next/api/class-locator#locator-fill) will fill the input field;
- [locator.inputValue()](https://playwright.dev/docs/next/api/class-locator#locator-input-value) will return the value of the input field;
- [locator.selectText()](https://playwright.dev/docs/next/api/class-locator#locator-select-text) will select text in the input field;
- [locator.setInputFiles()](https://playwright.dev/docs/next/api/class-locator#locator-set-input-files) will set files for the input field with `type=file`;
- [locator.selectOption()](https://playwright.dev/docs/next/api/class-locator#locator-select-option) will select an option from the select box.

```codeBlockLines_e6Vv
// Fill the input by targeting the label.
await page.getByText('Password').fill('secret');

```

However, other methods will target the label itself, for example [expect(locator).toHaveText()](https://playwright.dev/docs/next/api/class-locatorassertions#locator-assertions-to-have-text) will assert the text content of the label, not the input field.

```codeBlockLines_e6Vv
// Fill the input by targeting the label.
await expect(page.locator('label')).toHaveText('Password');

```

## Legacy text locator [​](https://playwright.dev/docs/next/other-locators\#legacy-text-locator "Direct link to Legacy text locator")

warning

We recommend the modern [text locator](https://playwright.dev/docs/next/locators#get-by-text) instead.

Legacy text locator matches elements that contain passed text.

```codeBlockLines_e6Vv
await page.locator('text=Log in').click();

```

Legacy text locator has a few variations:

- `text=Log in` \- default matching is case-insensitive, trims whitespace and searches for a substring. For example, `text=Log` matches `<button>Log in</button>`.





```codeBlockLines_e6Vv
await page.locator('text=Log in').click();

```

- `text="Log in"` \- text body can be escaped with single or double quotes to search for a text node with exact content after trimming whitespace.

For example, `text="Log"` does not match `<button>Log in</button>` because `<button>` contains a single text node `"Log in"` that is not equal to `"Log"`. However, `text="Log"` matches `<button> Log <span>in</span></button>`, because `<button>` contains a text node `" Log "`. This exact mode implies case-sensitive matching, so `text="Download"` will not match `<button>download</button>`.

Quoted body follows the usual escaping rules, e.g. use `\"` to escape double quote in a double-quoted string: `text="foo\"bar"`.





```codeBlockLines_e6Vv
await page.locator('text="Log in"').click();

```

- `/Log\s*in/i` \- body can be a [JavaScript-like regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) wrapped in `/` symbols. For example, `text=/Log\s*in/i` matches `<button>Login</button>` and `<button>log IN</button>`.





```codeBlockLines_e6Vv
await page.locator('text=/Log\\s*in/i').click();

```


note

String selectors starting and ending with a quote (either `"` or `'`) are assumed to be a legacy text locators. For example, `"Log in"` is converted to `text="Log in"` internally.

note

Matching always normalizes whitespace. For example, it turns multiple spaces into one, turns line breaks into spaces and ignores leading and trailing whitespace.

note

Input elements of the type `button` and `submit` are matched by their `value` instead of text content. For example, `text=Log in` matches `<input type=button value="Log in">`.

## id, data-testid, data-test-id, data-test selectors [​](https://playwright.dev/docs/next/other-locators\#id-data-testid-data-test-id-data-test-selectors "Direct link to id, data-testid, data-test-id, data-test selectors")

warning

We recommend [locating by test id](https://playwright.dev/docs/next/locators#locate-by-test-id) instead.

Playwright supports shorthand for selecting elements using certain attributes. Currently, only the following attributes are supported:

- `id`
- `data-testid`
- `data-test-id`
- `data-test`

```codeBlockLines_e6Vv
// Fill an input with the id "username"
await page.locator('id=username').fill('value');

// Click an element with data-test-id "submit"
await page.locator('data-test-id=submit').click();

```

note

Attribute selectors are not CSS selectors, so anything CSS-specific like `:enabled` is not supported. For more features, use a proper [css](https://playwright.dev/docs/next/other-locators#css-locator) selector, e.g. `css=[data-test="login"]:enabled`.

## Chaining selectors [​](https://playwright.dev/docs/next/other-locators\#chaining-selectors "Direct link to Chaining selectors")

warning

We recommend [chaining locators](https://playwright.dev/docs/next/locators#matching-inside-a-locator) instead.

Selectors defined as `engine=body` or in short-form can be combined with the `>>` token, e.g. `selector1 >> selector2 >> selectors3`. When selectors are chained, the next one is queried relative to the previous one's result.

For example,

```codeBlockLines_e6Vv
css=article >> css=.bar > .baz >> css=span[attr=value]

```

is equivalent to

```codeBlockLines_e6Vv
document
    .querySelector('article')
    .querySelector('.bar > .baz')
    .querySelector('span[attr=value]');

```

If a selector needs to include `>>` in the body, it should be escaped inside a string to not be confused with chaining separator, e.g. `text="some >> text"`.

### Intermediate matches [​](https://playwright.dev/docs/next/other-locators\#intermediate-matches "Direct link to Intermediate matches")

warning

We recommend [filtering by another locator](https://playwright.dev/docs/next/locators#filter-by-childdescendant) to locate elements that contain other elements.

By default, chained selectors resolve to an element queried by the last selector. A selector can be prefixed with `*` to capture elements that are queried by an intermediate selector.

For example, `css=article >> text=Hello` captures the element with the text `Hello`, and `*css=article >> text=Hello` (note the `*`) captures the `article` element that contains some element with the text `Hello`.

- [Introduction](https://playwright.dev/docs/next/other-locators#introduction)
- [CSS locator](https://playwright.dev/docs/next/other-locators#css-locator)
  - [CSS: matching by text](https://playwright.dev/docs/next/other-locators#css-matching-by-text)
  - [CSS: matching only visible elements](https://playwright.dev/docs/next/other-locators#css-matching-only-visible-elements)
  - [CSS: elements that contain other elements](https://playwright.dev/docs/next/other-locators#css-elements-that-contain-other-elements)
  - [CSS: elements matching one of the conditions](https://playwright.dev/docs/next/other-locators#css-elements-matching-one-of-the-conditions)
  - [CSS: matching elements based on layout](https://playwright.dev/docs/next/other-locators#css-matching-elements-based-on-layout)
  - [CSS: pick n-th match from the query result](https://playwright.dev/docs/next/other-locators#css-pick-n-th-match-from-the-query-result)
- [N-th element locator](https://playwright.dev/docs/next/other-locators#n-th-element-locator)
- [Parent element locator](https://playwright.dev/docs/next/other-locators#parent-element-locator)
- [React locator](https://playwright.dev/docs/next/other-locators#react-locator)
- [Vue locator](https://playwright.dev/docs/next/other-locators#vue-locator)
- [XPath locator](https://playwright.dev/docs/next/other-locators#xpath-locator)
  - [XPath union](https://playwright.dev/docs/next/other-locators#xpath-union)
- [Label to form control retargeting](https://playwright.dev/docs/next/other-locators#label-to-form-control-retargeting)
- [Legacy text locator](https://playwright.dev/docs/next/other-locators#legacy-text-locator)
- [id, data-testid, data-test-id, data-test selectors](https://playwright.dev/docs/next/other-locators#id-data-testid-data-test-id-data-test-selectors)
- [Chaining selectors](https://playwright.dev/docs/next/other-locators#chaining-selectors)
  - [Intermediate matches](https://playwright.dev/docs/next/other-locators#intermediate-matches)

## Playwright Browser API
[Skip to main content](https://playwright.dev/docs/next/api/class-browser#__docusaurus_skipToContent_fallback)

This is unreleased documentation for Playwright **Next** version.

For up-to-date documentation, see the **[latest version](https://playwright.dev/docs/api/class-browser)** (stable).

Version: Next

On this page

A Browser is created via [browserType.launch()](https://playwright.dev/docs/next/api/class-browsertype#browser-type-launch). An example of using a [Browser](https://playwright.dev/docs/next/api/class-browser "Browser") to create a [Page](https://playwright.dev/docs/next/api/class-page "Page"):

```codeBlockLines_e6Vv
const { firefox } = require('playwright');  // Or 'chromium' or 'webkit'.

(async () => {
  const browser = await firefox.launch();
  const page = await browser.newPage();
  await page.goto('https://example.com');
  await browser.close();
})();

```

* * *

## Methods [​](https://playwright.dev/docs/next/api/class-browser\#methods "Direct link to Methods")

### browserType [​](https://playwright.dev/docs/next/api/class-browser\#browser-browser-type "Direct link to browserType")

Added in: v1.23browser.browserType

Get the browser type (chromium, firefox or webkit) that the browser belongs to.

**Usage**

```codeBlockLines_e6Vv
browser.browserType();

```

**Returns**

- [BrowserType](https://playwright.dev/docs/next/api/class-browsertype "BrowserType") [#](https://playwright.dev/docs/next/api/class-browser#browser-browser-type-return)

* * *

### close [​](https://playwright.dev/docs/next/api/class-browser\#browser-close "Direct link to close")

Added before v1.9browser.close

In case this browser is obtained using [browserType.launch()](https://playwright.dev/docs/next/api/class-browsertype#browser-type-launch), closes the browser and all of its pages (if any were opened).

In case this browser is connected to, clears all created contexts belonging to this browser and disconnects from the browser server.

note

This is similar to force-quitting the browser. To close pages gracefully and ensure you receive page close events, call [browserContext.close()](https://playwright.dev/docs/next/api/class-browsercontext#browser-context-close) on any [BrowserContext](https://playwright.dev/docs/next/api/class-browsercontext "BrowserContext") instances you explicitly created earlier using [browser.newContext()](https://playwright.dev/docs/next/api/class-browser#browser-new-context) **before** calling [browser.close()](https://playwright.dev/docs/next/api/class-browser#browser-close).

The [Browser](https://playwright.dev/docs/next/api/class-browser "Browser") object itself is considered to be disposed and cannot be used anymore.

**Usage**

```codeBlockLines_e6Vv
await browser.close();
await browser.close(options);

```

**Arguments**

- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_
  - `reason` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_ Added in: v1.40 [#](https://playwright.dev/docs/next/api/class-browser#browser-close-option-reason)

    The reason to be reported to the operations interrupted by the browser closure.

**Returns**

- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise") < [void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void") > [#](https://playwright.dev/docs/next/api/class-browser#browser-close-return)

* * *

### contexts [​](https://playwright.dev/docs/next/api/class-browser\#browser-contexts "Direct link to contexts")

Added before v1.9browser.contexts

Returns an array of all open browser contexts. In a newly created browser, this will return zero browser contexts.

**Usage**

```codeBlockLines_e6Vv
const browser = await pw.webkit.launch();
console.log(browser.contexts().length); // prints `0`

const context = await browser.newContext();
console.log(browser.contexts().length); // prints `1`

```

**Returns**

- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array") < [BrowserContext](https://playwright.dev/docs/next/api/class-browsercontext "BrowserContext") > [#](https://playwright.dev/docs/next/api/class-browser#browser-contexts-return)

* * *

### isConnected [​](https://playwright.dev/docs/next/api/class-browser\#browser-is-connected "Direct link to isConnected")

Added before v1.9browser.isConnected

Indicates that the browser is connected.

**Usage**

```codeBlockLines_e6Vv
browser.isConnected();

```

**Returns**

- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") [#](https://playwright.dev/docs/next/api/class-browser#browser-is-connected-return)

* * *

### newBrowserCDPSession [​](https://playwright.dev/docs/next/api/class-browser\#browser-new-browser-cdp-session "Direct link to newBrowserCDPSession")

Added in: v1.11browser.newBrowserCDPSession

note

CDP Sessions are only supported on Chromium-based browsers.

Returns the newly created browser session.

**Usage**

```codeBlockLines_e6Vv
await browser.newBrowserCDPSession();

```

**Returns**

- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise") < [CDPSession](https://playwright.dev/docs/next/api/class-cdpsession "CDPSession") > [#](https://playwright.dev/docs/next/api/class-browser#browser-new-browser-cdp-session-return)

* * *

### newContext [​](https://playwright.dev/docs/next/api/class-browser\#browser-new-context "Direct link to newContext")

Added before v1.9browser.newContext

Creates a new browser context. It won't share cookies/cache with other browser contexts.

note

If directly using this method to create [BrowserContext](https://playwright.dev/docs/next/api/class-browsercontext "BrowserContext") s, it is best practice to explicitly close the returned context via [browserContext.close()](https://playwright.dev/docs/next/api/class-browsercontext#browser-context-close) when your code is done with the [BrowserContext](https://playwright.dev/docs/next/api/class-browsercontext "BrowserContext"), and before calling [browser.close()](https://playwright.dev/docs/next/api/class-browser#browser-close). This will ensure the `context` is closed gracefully and any artifacts—like HARs and videos—are fully flushed and saved.

**Usage**

```codeBlockLines_e6Vv
(async () => {
  const browser = await playwright.firefox.launch();  // Or 'chromium' or 'webkit'.
  // Create a new incognito browser context.
  const context = await browser.newContext();
  // Create a new page in a pristine context.
  const page = await context.newPage();
  await page.goto('https://example.com');

  // Gracefully close up everything
  await context.close();
  await browser.close();
})();

```

**Arguments**

- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_
  - `acceptDownloads` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-accept-downloads)

    Whether to automatically download all the attachments. Defaults to `true` where all the downloads are accepted.

  - `baseURL` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-base-url)

    When using [page.goto()](https://playwright.dev/docs/next/api/class-page#page-goto), [page.route()](https://playwright.dev/docs/next/api/class-page#page-route), [page.waitForURL()](https://playwright.dev/docs/next/api/class-page#page-wait-for-url), [page.waitForRequest()](https://playwright.dev/docs/next/api/class-page#page-wait-for-request), or [page.waitForResponse()](https://playwright.dev/docs/next/api/class-page#page-wait-for-response) it takes the base URL in consideration by using the [`URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor for building the corresponding URL. Unset by default. Examples:
    - baseURL: `http://localhost:3000` and navigating to `/bar.html` results in `http://localhost:3000/bar.html`
    - baseURL: `http://localhost:3000/foo/` and navigating to `./bar.html` results in `http://localhost:3000/foo/bar.html`
    - baseURL: `http://localhost:3000/foo` (without trailing slash) and navigating to `./bar.html` results in `http://localhost:3000/bar.html`
  - `bypassCSP` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-bypass-csp)

    Toggles bypassing page's Content-Security-Policy. Defaults to `false`.

  - `clientCertificates` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array") < [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") \> _(optional)_ Added in: 1.46 [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-client-certificates)


    - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Exact origin that the certificate is valid for. Origin includes `https` protocol, a hostname and optionally a port.

    - `certPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_

      Path to the file with the certificate in PEM format.

    - `cert` [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer") _(optional)_

      Direct value of the certificate in PEM format.

    - `keyPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_

      Path to the file with the private key in PEM format.

    - `key` [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer") _(optional)_

      Direct value of the private key in PEM format.

    - `pfxPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_

      Path to the PFX or PKCS12 encoded private key and certificate chain.

    - `pfx` [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer") _(optional)_

      Direct value of the PFX or PKCS12 encoded private key and certificate chain.

    - `passphrase` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_

      Passphrase for the private key (PEM or PFX).


TLS Client Authentication allows the server to request a client certificate and verify it.

**Details**

An array of client certificates to be used. Each certificate object must have either both `certPath` and `keyPath`, a single `pfxPath`, or their corresponding direct value equivalents ( `cert` and `key`, or `pfx`). Optionally, `passphrase` property should be provided if the certificate is encrypted. The `origin` property should be provided with an exact match to the request origin that the certificate is valid for.

note

When using WebKit on macOS, accessing `localhost` will not pick up client certificates. You can make it work by replacing `localhost` with `local.playwright`.

  - `colorScheme` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| "light" \| "dark" \| "no-preference" _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-color-scheme)

    Emulates [prefers-colors-scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme) media feature, supported values are `'light'` and `'dark'`. See [page.emulateMedia()](https://playwright.dev/docs/next/api/class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'light'`.

  - `contrast` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| "no-preference" \| "more" _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-contrast)

    Emulates `'prefers-contrast'` media feature, supported values are `'no-preference'`, `'more'`. See [page.emulateMedia()](https://playwright.dev/docs/next/api/class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'no-preference'`.

  - `deviceScaleFactor` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-device-scale-factor)

    Specify device scale factor (can be thought of as dpr). Defaults to `1`. Learn more about [emulating devices with device scale factor](https://playwright.dev/docs/next/emulation#devices).

  - `extraHTTPHeaders` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") < [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \> _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-extra-http-headers)

    An object containing additional HTTP headers to be sent with every request. Defaults to none.

  - `forcedColors` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| "active" \| "none" _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-forced-colors)

    Emulates `'forced-colors'` media feature, supported values are `'active'`, `'none'`. See [page.emulateMedia()](https://playwright.dev/docs/next/api/class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'none'`.

  - `geolocation` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-geolocation)
    - `latitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      Latitude between -90 and 90.

    - `longitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      Longitude between -180 and 180.

    - `accuracy` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") _(optional)_

      Non-negative accuracy value. Defaults to `0`.
  - `hasTouch` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-has-touch)

    Specifies if viewport supports touch events. Defaults to false. Learn more about [mobile emulation](https://playwright.dev/docs/next/emulation#devices).

  - `httpCredentials` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-http-credentials)


    - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_

      Restrain sending http credentials on specific origin (scheme://host:port).

    - `send` "unauthorized" \| "always" _(optional)_

      This option only applies to the requests sent from corresponding [APIRequestContext](https://playwright.dev/docs/next/api/class-apirequestcontext "APIRequestContext") and does not affect requests sent from the browser. `'always'` \- `Authorization` header with basic authentication credentials will be sent with the each API request. `'unauthorized` \- the credentials are only sent when 401 (Unauthorized) response with `WWW-Authenticate` header is received. Defaults to `'unauthorized'`.


Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication). If no origin is specified, the username and password are sent to any servers upon unauthorized responses.

  - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-ignore-https-errors)

    Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.

  - `isMobile` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-is-mobile)

    Whether the `meta viewport` tag is taken into account and touch events are enabled. isMobile is a part of device, so you don't actually need to set it manually. Defaults to `false` and is not supported in Firefox. Learn more about [mobile emulation](https://playwright.dev/docs/next/emulation#ismobile).

  - `javaScriptEnabled` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-java-script-enabled)

    Whether or not to enable JavaScript in the context. Defaults to `true`. Learn more about [disabling JavaScript](https://playwright.dev/docs/next/emulation#javascript-enabled).

  - `locale` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-locale)

    Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value, `Accept-Language` request header value as well as number and date formatting rules. Defaults to the system default locale. Learn more about emulation in our [emulation guide](https://playwright.dev/docs/next/emulation#locale--timezone).

  - `logger` [Logger](https://playwright.dev/docs/next/api/class-logger "Logger") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-logger)

    Logger sink for Playwright logging.

  - `offline` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-offline)

    Whether to emulate network being offline. Defaults to `false`. Learn more about [network emulation](https://playwright.dev/docs/next/emulation#offline).

  - `permissions` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array") < [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \> _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-permissions)

    A list of permissions to grant to all pages in this context. See [browserContext.grantPermissions()](https://playwright.dev/docs/next/api/class-browsercontext#browser-context-grant-permissions) for more details. Defaults to none.

  - `proxy` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-proxy)


    - `server` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.

    - `bypass` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_

      Optional comma-separated domains to bypass proxy, for example `".com, chromium.org, .domain.com"`.

    - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_

      Optional username to use if HTTP proxy requires authentication.

    - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_

      Optional password to use if HTTP proxy requires authentication.


Network proxy settings to use with this context. Defaults to none.

  - `recordHar` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-record-har)


    - `omitContent` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") _(optional)_

      Optional setting to control whether to omit request content from the HAR. Defaults to `false`. Deprecated, use `content` policy instead.

    - `content` "omit" \| "embed" \| "attach" _(optional)_

      Optional setting to control resource content management. If `omit` is specified, content is not persisted. If `attach` is specified, resources are persisted as separate files or entries in the ZIP archive. If `embed` is specified, content is stored inline the HAR file as per HAR specification. Defaults to `attach` for `.zip` output files and to `embed` for all other file extensions.

    - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Path on the filesystem to write the HAR file to. If the file name ends with `.zip`, `content: 'attach'` is used by default.

    - `mode` "full" \| "minimal" _(optional)_

      When set to `minimal`, only record information necessary for routing from HAR. This omits sizes, timing, page, cookies, security and other types of HAR information that are not used when replaying from HAR. Defaults to `full`.

    - `urlFilter` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") _(optional)_

      A glob or regex pattern to filter requests that are stored in the HAR. When a [baseURL](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-base-url) via the context options was provided and the passed URL is a path, it gets merged via the [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor. Defaults to none.


Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into `recordHar.path` file. If not specified, the HAR is not recorded. Make sure to await [browserContext.close()](https://playwright.dev/docs/next/api/class-browsercontext#browser-context-close) for the HAR to be saved.

  - `recordVideo` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-record-video)


    - `dir` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Path to the directory to put videos into.

    - `size` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_


      - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Video frame width.

      - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Video frame height.


Optional dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will be scaled down if necessary to fit the specified size.

Enables video recording for all pages into `recordVideo.dir` directory. If not specified videos are not recorded. Make sure to await [browserContext.close()](https://playwright.dev/docs/next/api/class-browsercontext#browser-context-close) for videos to be saved.

  - `reducedMotion` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| "reduce" \| "no-preference" _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-reduced-motion)

    Emulates `'prefers-reduced-motion'` media feature, supported values are `'reduce'`, `'no-preference'`. See [page.emulateMedia()](https://playwright.dev/docs/next/api/class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'no-preference'`.

  - `screen` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-screen)


    - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      page width in pixels.

    - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      page height in pixels.


Emulates consistent window screen size available inside web page via `window.screen`. Is only used when the [viewport](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-viewport) is set.

  - `serviceWorkers` "allow" \| "block" _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-service-workers)

    Whether to allow sites to register Service workers. Defaults to `'allow'`.
    - `'allow'`: [Service Workers](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API) can be registered.
    - `'block'`: Playwright will block all registration of Service Workers.
  - `storageState` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-storage-state)


    - `cookies` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array") < [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") >
      - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      - `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      - `domain` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        Domain and path are required. For the cookie to apply to all subdomains as well, prefix domain with a dot, like this: ".example.com"

      - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        Domain and path are required

      - `expires` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Unix time in seconds.

      - `httpOnly` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

      - `secure` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

      - `sameSite` "Strict" \| "Lax" \| "None"

        sameSite flagCookies to set for context
    - `origins` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array") < [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") >
      - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      - `localStorage` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array") < [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") >


        - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        - `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")


localStorage to set for context

Learn more about [storage state and auth](https://playwright.dev/docs/next/auth).

Populates context with given storage state. This option can be used to initialize context with logged-in information obtained via [browserContext.storageState()](https://playwright.dev/docs/next/api/class-browsercontext#browser-context-storage-state).

  - `strictSelectors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-strict-selectors)

    If set to true, enables strict selectors mode for this context. In the strict selectors mode all operations on selectors that imply single target DOM element will throw when more than one element matches the selector. This option does not affect any Locator APIs (Locators are always strict). Defaults to `false`. See [Locator](https://playwright.dev/docs/next/api/class-locator "Locator") to learn more about the strict mode.

  - `timezoneId` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-timezone-id)

    Changes the timezone of the context. See [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1) for a list of supported timezone IDs. Defaults to the system timezone.

  - `userAgent` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-user-agent)

    Specific user agent to use in this context.

  - `videoSize` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-video-size)



    Deprecated





    Use [recordVideo](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-record-video) instead.




    - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      Video frame width.

    - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      Video frame height.
  - `videosPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-videos-path)



    Deprecated





    Use [recordVideo](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-record-video) instead.

  - `viewport` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-viewport)


    - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      page width in pixels.

    - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      page height in pixels.


Emulates consistent viewport for each page. Defaults to an 1280x720 viewport. Use `null` to disable the consistent viewport emulation. Learn more about [viewport emulation](https://playwright.dev/docs/next/emulation#viewport).

note

The `null` value opts out from the default presets, makes viewport depend on the host window size defined by the operating system. It makes the execution of the tests non-deterministic.

**Returns**

- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise") < [BrowserContext](https://playwright.dev/docs/next/api/class-browsercontext "BrowserContext") > [#](https://playwright.dev/docs/next/api/class-browser#browser-new-context-return)

* * *

### newPage [​](https://playwright.dev/docs/next/api/class-browser\#browser-new-page "Direct link to newPage")

Added before v1.9browser.newPage

Creates a new page in a new browser context. Closing this page will close the context as well.

This is a convenience API that should only be used for the single-page scenarios and short snippets. Production code and testing frameworks should explicitly create [browser.newContext()](https://playwright.dev/docs/next/api/class-browser#browser-new-context) followed by the [browserContext.newPage()](https://playwright.dev/docs/next/api/class-browsercontext#browser-context-new-page) to control their exact life times.

**Usage**

```codeBlockLines_e6Vv
await browser.newPage();
await browser.newPage(options);

```

**Arguments**

- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_
  - `acceptDownloads` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-accept-downloads)

    Whether to automatically download all the attachments. Defaults to `true` where all the downloads are accepted.

  - `baseURL` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-base-url)

    When using [page.goto()](https://playwright.dev/docs/next/api/class-page#page-goto), [page.route()](https://playwright.dev/docs/next/api/class-page#page-route), [page.waitForURL()](https://playwright.dev/docs/next/api/class-page#page-wait-for-url), [page.waitForRequest()](https://playwright.dev/docs/next/api/class-page#page-wait-for-request), or [page.waitForResponse()](https://playwright.dev/docs/next/api/class-page#page-wait-for-response) it takes the base URL in consideration by using the [`URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor for building the corresponding URL. Unset by default. Examples:
    - baseURL: `http://localhost:3000` and navigating to `/bar.html` results in `http://localhost:3000/bar.html`
    - baseURL: `http://localhost:3000/foo/` and navigating to `./bar.html` results in `http://localhost:3000/foo/bar.html`
    - baseURL: `http://localhost:3000/foo` (without trailing slash) and navigating to `./bar.html` results in `http://localhost:3000/bar.html`
  - `bypassCSP` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-bypass-csp)

    Toggles bypassing page's Content-Security-Policy. Defaults to `false`.

  - `clientCertificates` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array") < [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") \> _(optional)_ Added in: 1.46 [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-client-certificates)


    - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Exact origin that the certificate is valid for. Origin includes `https` protocol, a hostname and optionally a port.

    - `certPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_

      Path to the file with the certificate in PEM format.

    - `cert` [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer") _(optional)_

      Direct value of the certificate in PEM format.

    - `keyPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_

      Path to the file with the private key in PEM format.

    - `key` [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer") _(optional)_

      Direct value of the private key in PEM format.

    - `pfxPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_

      Path to the PFX or PKCS12 encoded private key and certificate chain.

    - `pfx` [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer") _(optional)_

      Direct value of the PFX or PKCS12 encoded private key and certificate chain.

    - `passphrase` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_

      Passphrase for the private key (PEM or PFX).


TLS Client Authentication allows the server to request a client certificate and verify it.

**Details**

An array of client certificates to be used. Each certificate object must have either both `certPath` and `keyPath`, a single `pfxPath`, or their corresponding direct value equivalents ( `cert` and `key`, or `pfx`). Optionally, `passphrase` property should be provided if the certificate is encrypted. The `origin` property should be provided with an exact match to the request origin that the certificate is valid for.

note

When using WebKit on macOS, accessing `localhost` will not pick up client certificates. You can make it work by replacing `localhost` with `local.playwright`.

  - `colorScheme` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| "light" \| "dark" \| "no-preference" _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-color-scheme)

    Emulates [prefers-colors-scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme) media feature, supported values are `'light'` and `'dark'`. See [page.emulateMedia()](https://playwright.dev/docs/next/api/class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'light'`.

  - `contrast` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| "no-preference" \| "more" _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-contrast)

    Emulates `'prefers-contrast'` media feature, supported values are `'no-preference'`, `'more'`. See [page.emulateMedia()](https://playwright.dev/docs/next/api/class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'no-preference'`.

  - `deviceScaleFactor` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-device-scale-factor)

    Specify device scale factor (can be thought of as dpr). Defaults to `1`. Learn more about [emulating devices with device scale factor](https://playwright.dev/docs/next/emulation#devices).

  - `extraHTTPHeaders` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") < [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \> _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-extra-http-headers)

    An object containing additional HTTP headers to be sent with every request. Defaults to none.

  - `forcedColors` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| "active" \| "none" _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-forced-colors)

    Emulates `'forced-colors'` media feature, supported values are `'active'`, `'none'`. See [page.emulateMedia()](https://playwright.dev/docs/next/api/class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'none'`.

  - `geolocation` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-geolocation)
    - `latitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      Latitude between -90 and 90.

    - `longitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      Longitude between -180 and 180.

    - `accuracy` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") _(optional)_

      Non-negative accuracy value. Defaults to `0`.
  - `hasTouch` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-has-touch)

    Specifies if viewport supports touch events. Defaults to false. Learn more about [mobile emulation](https://playwright.dev/docs/next/emulation#devices).

  - `httpCredentials` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-http-credentials)


    - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_

      Restrain sending http credentials on specific origin (scheme://host:port).

    - `send` "unauthorized" \| "always" _(optional)_

      This option only applies to the requests sent from corresponding [APIRequestContext](https://playwright.dev/docs/next/api/class-apirequestcontext "APIRequestContext") and does not affect requests sent from the browser. `'always'` \- `Authorization` header with basic authentication credentials will be sent with the each API request. `'unauthorized` \- the credentials are only sent when 401 (Unauthorized) response with `WWW-Authenticate` header is received. Defaults to `'unauthorized'`.


Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication). If no origin is specified, the username and password are sent to any servers upon unauthorized responses.

  - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-ignore-https-errors)

    Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.

  - `isMobile` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-is-mobile)

    Whether the `meta viewport` tag is taken into account and touch events are enabled. isMobile is a part of device, so you don't actually need to set it manually. Defaults to `false` and is not supported in Firefox. Learn more about [mobile emulation](https://playwright.dev/docs/next/emulation#ismobile).

  - `javaScriptEnabled` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-java-script-enabled)

    Whether or not to enable JavaScript in the context. Defaults to `true`. Learn more about [disabling JavaScript](https://playwright.dev/docs/next/emulation#javascript-enabled).

  - `locale` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-locale)

    Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value, `Accept-Language` request header value as well as number and date formatting rules. Defaults to the system default locale. Learn more about emulation in our [emulation guide](https://playwright.dev/docs/next/emulation#locale--timezone).

  - `logger` [Logger](https://playwright.dev/docs/next/api/class-logger "Logger") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-logger)

    Logger sink for Playwright logging.

  - `offline` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-offline)

    Whether to emulate network being offline. Defaults to `false`. Learn more about [network emulation](https://playwright.dev/docs/next/emulation#offline).

  - `permissions` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array") < [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \> _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-permissions)

    A list of permissions to grant to all pages in this context. See [browserContext.grantPermissions()](https://playwright.dev/docs/next/api/class-browsercontext#browser-context-grant-permissions) for more details. Defaults to none.

  - `proxy` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-proxy)


    - `server` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.

    - `bypass` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_

      Optional comma-separated domains to bypass proxy, for example `".com, chromium.org, .domain.com"`.

    - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_

      Optional username to use if HTTP proxy requires authentication.

    - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_

      Optional password to use if HTTP proxy requires authentication.


Network proxy settings to use with this context. Defaults to none.

  - `recordHar` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-record-har)


    - `omitContent` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") _(optional)_

      Optional setting to control whether to omit request content from the HAR. Defaults to `false`. Deprecated, use `content` policy instead.

    - `content` "omit" \| "embed" \| "attach" _(optional)_

      Optional setting to control resource content management. If `omit` is specified, content is not persisted. If `attach` is specified, resources are persisted as separate files or entries in the ZIP archive. If `embed` is specified, content is stored inline the HAR file as per HAR specification. Defaults to `attach` for `.zip` output files and to `embed` for all other file extensions.

    - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Path on the filesystem to write the HAR file to. If the file name ends with `.zip`, `content: 'attach'` is used by default.

    - `mode` "full" \| "minimal" _(optional)_

      When set to `minimal`, only record information necessary for routing from HAR. This omits sizes, timing, page, cookies, security and other types of HAR information that are not used when replaying from HAR. Defaults to `full`.

    - `urlFilter` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") _(optional)_

      A glob or regex pattern to filter requests that are stored in the HAR. When a [baseURL](https://playwright.dev/docs/next/api/class-browser#browser-new-context-option-base-url) via the context options was provided and the passed URL is a path, it gets merged via the [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor. Defaults to none.


Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into `recordHar.path` file. If not specified, the HAR is not recorded. Make sure to await [browserContext.close()](https://playwright.dev/docs/next/api/class-browsercontext#browser-context-close) for the HAR to be saved.

  - `recordVideo` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-record-video)


    - `dir` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Path to the directory to put videos into.

    - `size` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_


      - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Video frame width.

      - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Video frame height.


Optional dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will be scaled down if necessary to fit the specified size.

Enables video recording for all pages into `recordVideo.dir` directory. If not specified videos are not recorded. Make sure to await [browserContext.close()](https://playwright.dev/docs/next/api/class-browsercontext#browser-context-close) for videos to be saved.

  - `reducedMotion` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| "reduce" \| "no-preference" _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-reduced-motion)

    Emulates `'prefers-reduced-motion'` media feature, supported values are `'reduce'`, `'no-preference'`. See [page.emulateMedia()](https://playwright.dev/docs/next/api/class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'no-preference'`.

  - `screen` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-screen)


    - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      page width in pixels.

    - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      page height in pixels.


Emulates consistent window screen size available inside web page via `window.screen`. Is only used when the [viewport](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-viewport) is set.

  - `serviceWorkers` "allow" \| "block" _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-service-workers)

    Whether to allow sites to register Service workers. Defaults to `'allow'`.
    - `'allow'`: [Service Workers](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API) can be registered.
    - `'block'`: Playwright will block all registration of Service Workers.
  - `storageState` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-storage-state)


    - `cookies` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array") < [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") >
      - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      - `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      - `domain` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        Domain and path are required. For the cookie to apply to all subdomains as well, prefix domain with a dot, like this: ".example.com"

      - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        Domain and path are required

      - `expires` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Unix time in seconds.

      - `httpOnly` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

      - `secure` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

      - `sameSite` "Strict" \| "Lax" \| "None"

        sameSite flagCookies to set for context
    - `origins` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array") < [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") >
      - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      - `localStorage` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array") < [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") >


        - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        - `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")


localStorage to set for context

Learn more about [storage state and auth](https://playwright.dev/docs/next/auth).

Populates context with given storage state. This option can be used to initialize context with logged-in information obtained via [browserContext.storageState()](https://playwright.dev/docs/next/api/class-browsercontext#browser-context-storage-state).

  - `strictSelectors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-strict-selectors)

    If set to true, enables strict selectors mode for this context. In the strict selectors mode all operations on selectors that imply single target DOM element will throw when more than one element matches the selector. This option does not affect any Locator APIs (Locators are always strict). Defaults to `false`. See [Locator](https://playwright.dev/docs/next/api/class-locator "Locator") to learn more about the strict mode.

  - `timezoneId` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-timezone-id)

    Changes the timezone of the context. See [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1) for a list of supported timezone IDs. Defaults to the system timezone.

  - `userAgent` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-user-agent)

    Specific user agent to use in this context.

  - `videoSize` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-video-size)



    Deprecated





    Use [recordVideo](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-record-video) instead.




    - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      Video frame width.

    - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      Video frame height.
  - `videosPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-videos-path)



    Deprecated





    Use [recordVideo](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-record-video) instead.

  - `viewport` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-option-viewport)


    - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      page width in pixels.

    - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      page height in pixels.


Emulates consistent viewport for each page. Defaults to an 1280x720 viewport. Use `null` to disable the consistent viewport emulation. Learn more about [viewport emulation](https://playwright.dev/docs/next/emulation#viewport).

note

The `null` value opts out from the default presets, makes viewport depend on the host window size defined by the operating system. It makes the execution of the tests non-deterministic.

**Returns**

- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise") < [Page](https://playwright.dev/docs/next/api/class-page "Page") > [#](https://playwright.dev/docs/next/api/class-browser#browser-new-page-return)

* * *

### removeAllListeners [​](https://playwright.dev/docs/next/api/class-browser\#browser-remove-all-listeners "Direct link to removeAllListeners")

Added in: v1.47browser.removeAllListeners

Removes all the listeners of the given type (or all registered listeners if no type given). Allows to wait for async listeners to complete or to ignore subsequent errors from these listeners.

**Usage**

```codeBlockLines_e6Vv
await browser.removeAllListeners();
await browser.removeAllListeners(type, options);

```

**Arguments**

- `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-remove-all-listeners-option-type)
- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_
  - `behavior` "wait" \| "ignoreErrors" \| "default" _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-remove-all-listeners-option-behavior)

    Specifies whether to wait for already running listeners and what to do if they throw errors:
    - `'default'` \- do not wait for current listener calls (if any) to finish, if the listener throws, it may result in unhandled error
    - `'wait'` \- wait for current listener calls (if any) to finish
    - `'ignoreErrors'` \- do not wait for current listener calls (if any) to finish, all errors thrown by the listeners after removal are silently caught

**Returns**

- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise") < [void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void") > [#](https://playwright.dev/docs/next/api/class-browser#browser-remove-all-listeners-return)

* * *

### startTracing [​](https://playwright.dev/docs/next/api/class-browser\#browser-start-tracing "Direct link to startTracing")

Added in: v1.11browser.startTracing

note

This API controls [Chromium Tracing](https://www.chromium.org/developers/how-tos/trace-event-profiling-tool) which is a low-level chromium-specific debugging tool. API to control [Playwright Tracing](https://playwright.dev/docs/next/trace-viewer) could be found [here](https://playwright.dev/docs/next/api/class-tracing).

You can use [browser.startTracing()](https://playwright.dev/docs/next/api/class-browser#browser-start-tracing) and [browser.stopTracing()](https://playwright.dev/docs/next/api/class-browser#browser-stop-tracing) to create a trace file that can be opened in Chrome DevTools performance panel.

**Usage**

```codeBlockLines_e6Vv
await browser.startTracing(page, { path: 'trace.json' });
await page.goto('https://www.google.com');
await browser.stopTracing();

```

**Arguments**

- `page` [Page](https://playwright.dev/docs/next/api/class-page "Page") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-start-tracing-option-page)

Optional, if specified, tracing includes screenshots of the given page.

- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") _(optional)_
  - `categories` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array") < [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \> _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-start-tracing-option-categories)

    specify custom categories to use instead of default.

  - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-start-tracing-option-path)

    A path to write the trace file to.

  - `screenshots` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") _(optional)_ [#](https://playwright.dev/docs/next/api/class-browser#browser-start-tracing-option-screenshots)

    captures screenshots in the trace.

**Returns**

- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise") < [void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void") > [#](https://playwright.dev/docs/next/api/class-browser#browser-start-tracing-return)

* * *

### stopTracing [​](https://playwright.dev/docs/next/api/class-browser\#browser-stop-tracing "Direct link to stopTracing")

Added in: v1.11browser.stopTracing

note

This API controls [Chromium Tracing](https://www.chromium.org/developers/how-tos/trace-event-profiling-tool) which is a low-level chromium-specific debugging tool. API to control [Playwright Tracing](https://playwright.dev/docs/next/trace-viewer) could be found [here](https://playwright.dev/docs/next/api/class-tracing).

Returns the buffer with trace data.

**Usage**

```codeBlockLines_e6Vv
await browser.stopTracing();

```

**Returns**

- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise") < [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer") > [#](https://playwright.dev/docs/next/api/class-browser#browser-stop-tracing-return)

* * *

### version [​](https://playwright.dev/docs/next/api/class-browser\#browser-version "Direct link to version")

Added before v1.9browser.version

Returns the browser version.

**Usage**

```codeBlockLines_e6Vv
browser.version();

```

**Returns**

- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") [#](https://playwright.dev/docs/next/api/class-browser#browser-version-return)

* * *

## Events [​](https://playwright.dev/docs/next/api/class-browser\#events "Direct link to Events")

### on('disconnected') [​](https://playwright.dev/docs/next/api/class-browser\#browser-event-disconnected "Direct link to on('disconnected')")

Added before v1.9browser.on('disconnected')

Emitted when Browser gets disconnected from the browser application. This might happen because of one of the following:

- Browser application is closed or crashed.
- The [browser.close()](https://playwright.dev/docs/next/api/class-browser#browser-close) method was called.

**Usage**

```codeBlockLines_e6Vv
browser.on('disconnected', data => {});

```

**Event data**

- [Browser](https://playwright.dev/docs/next/api/class-browser "Browser")

- [Methods](https://playwright.dev/docs/next/api/class-browser#methods)
  - [browserType](https://playwright.dev/docs/next/api/class-browser#browser-browser-type)
  - [close](https://playwright.dev/docs/next/api/class-browser#browser-close)
  - [contexts](https://playwright.dev/docs/next/api/class-browser#browser-contexts)
  - [isConnected](https://playwright.dev/docs/next/api/class-browser#browser-is-connected)
  - [newBrowserCDPSession](https://playwright.dev/docs/next/api/class-browser#browser-new-browser-cdp-session)
  - [newContext](https://playwright.dev/docs/next/api/class-browser#browser-new-context)
  - [newPage](https://playwright.dev/docs/next/api/class-browser#browser-new-page)
  - [removeAllListeners](https://playwright.dev/docs/next/api/class-browser#browser-remove-all-listeners)
  - [startTracing](https://playwright.dev/docs/next/api/class-browser#browser-start-tracing)
  - [stopTracing](https://playwright.dev/docs/next/api/class-browser#browser-stop-tracing)
  - [version](https://playwright.dev/docs/next/api/class-browser#browser-version)
- [Events](https://playwright.dev/docs/next/api/class-browser#events)
  - [on('disconnected')](https://playwright.dev/docs/next/api/class-browser#browser-event-disconnected)

## Source Code Location
[Skip to main content](https://playwright.dev/docs/api/class-location#__docusaurus_skipToContent_fallback)

On this page

Represents a location in the source code where [TestCase](https://playwright.dev/docs/api/class-testcase "TestCase") or [Suite](https://playwright.dev/docs/api/class-suite "Suite") is defined.

* * *

## Properties [​](https://playwright.dev/docs/api/class-location\#properties "Direct link to Properties")

### column [​](https://playwright.dev/docs/api/class-location\#location-column "Direct link to column")

Added in: v1.10location.column

Column number in the source file.

**Usage**

```codeBlockLines_e6Vv
location.column

```

**Type**

- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

* * *

### file [​](https://playwright.dev/docs/api/class-location\#location-file "Direct link to file")

Added in: v1.10location.file

Path to the source file.

**Usage**

```codeBlockLines_e6Vv
location.file

```

**Type**

- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

* * *

### line [​](https://playwright.dev/docs/api/class-location\#location-line "Direct link to line")

Added in: v1.10location.line

Line number in the source file.

**Usage**

```codeBlockLines_e6Vv
location.line

```

**Type**

- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

- [Properties](https://playwright.dev/docs/api/class-location#properties)
  - [column](https://playwright.dev/docs/api/class-location#location-column)
  - [file](https://playwright.dev/docs/api/class-location#location-file)
  - [line](https://playwright.dev/docs/api/class-location#location-line)

